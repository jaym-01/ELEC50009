
nios_accelerometer.elf:     file format elf32-littlenios2
nios_accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000ae30 memsz 0x0000ae30 flags r-x
    LOAD off    0x0000be50 vaddr 0x0001ae50 paddr 0x0001c8f0 align 2**12
         filesz 0x00001aa0 memsz 0x00001aa0 flags rw-
    LOAD off    0x0000e390 vaddr 0x0001e390 paddr 0x0001e390 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a9cc  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000250  0001ac00  0001ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa0  0001ae50  0001c8f0  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0001e390  0001e390  0000e390  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001e4f0  0001e4f0  0000d8f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000d8f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e08  00000000  00000000  0000d918  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001c556  00000000  00000000  0000e720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000831c  00000000  00000000  0002ac76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000099b0  00000000  00000000  00032f92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d74  00000000  00000000  0003c944  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000382a  00000000  00000000  0003e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cbe0  00000000  00000000  00041ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0004eac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  0004ead8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00052c96  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00052c99  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00052c9c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00052c9d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00052c9e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00052ca2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00052ca6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00052caa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00052cb3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00052cbc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00052cc5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00052cd7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  00052d0b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004264c  00000000  00000000  00057d14  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
0001ac00 l    d  .rodata	00000000 .rodata
0001ae50 l    d  .rwdata	00000000 .rwdata
0001e390 l    d  .bss	00000000 .bss
0001e4f0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_accelerometer_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0001acf8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001ae50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00015fc8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_times.c
00016398 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001644c l     F .text	00000034 alt_dev_reg
0001b274 l     O .rwdata	00001060 jtag_uart
0001c2d4 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016740 l     F .text	00000210 altera_avalon_jtag_uart_irq
00016950 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016f88 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00017554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00017688 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000176b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00017904 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00017a64 l     F .text	0000003c alt_get_errno
00017aa0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00018c50 l     F .text	00000008 __fp_unlock
00018c64 l     F .text	0000019c __sinit.part.1
00018e00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a598 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a68c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0001a774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001a8d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001c8ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001aac4 l     F .text	0000003c alt_get_errno
0001e3b4 g     O .bss	00000004 alt_instruction_exception_handler
0001a450 g     F .text	00000054 _isatty_r
000160b4 g     F .text	0000007c alt_main
00010270 g     F .text	00000038 led_write
0001e3f0 g     O .bss	00000100 alt_irq
000122cc g     F .text	00000014 fabs
0001a4a4 g     F .text	00000060 _lseek_r
0001c8f0 g       *ABS*	00000000 __flash_rwdata_start
00014458 g     F .text	00000088 .hidden __eqdf2
0001e4f0 g       *ABS*	00000000 __alt_heap_start
0001a1d8 g     F .text	0000005c __sseek
00018fb0 g     F .text	00000010 __sinit
00018464 g     F .text	00000140 __swbuf_r
00018e08 g     F .text	00000078 __sfmoreglue
0001a8b0 g     F .text	00000024 __malloc_unlock
000106b4 g     F .text	000000a0 shift
00018f98 g     F .text	00000018 _cleanup
00013048 g     F .text	00000070 .hidden __fixsfsi
00010338 g     F .text	000000d0 sys_timer_isr
000144e0 g     F .text	000000dc .hidden __gtdf2
00017f10 g     F .text	00000024 altera_nios2_gen2_irq_init
00015ce8 g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
000163d4 g     F .text	00000078 times
000171c4 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001a3f4 g     F .text	0000005c _fstat_r
0001e3b8 g     O .bss	00000004 errno
0001a154 g     F .text	00000008 __seofread
0001e3a4 g     O .bss	00000004 alt_argv
000248b0 g       *ABS*	00000000 _gp
0001c328 g     O .rwdata	00000180 alt_fd_list
00017854 g     F .text	00000090 alt_find_dev
00015e40 g     F .text	00000008 _times_r
00015cf8 g     F .text	00000148 memcpy
00018c58 g     F .text	0000000c _cleanup_r
00015898 g     F .text	000000dc .hidden __floatsidf
000179e8 g     F .text	0000007c alt_io_redirect
000145bc g     F .text	000000f4 .hidden __ltdf2
0001ac00 g       *ABS*	00000000 __DTOR_END__
00018100 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000122fc g     F .text	00000074 __fpclassifyd
00016b48 g     F .text	0000021c altera_avalon_jtag_uart_read
00015be0 g     F .text	00000064 .hidden __udivsi3
0001a6c8 g     F .text	000000ac isatty
0001e3c4 g     O .bss	00000004 __malloc_top_pad
0001a0ac g     F .text	00000054 _sbrk_r
0001a504 g     F .text	00000060 _read_r
0001c8d4 g     O .rwdata	00000004 alt_max_fd
0001a2f0 g     F .text	000000f0 _fclose_r
00018c20 g     F .text	00000030 fflush
0001e3c0 g     O .bss	00000004 __malloc_max_sbrked_mem
00015e48 g     F .text	00000180 alt_irq_register
00015974 g     F .text	00000110 .hidden __extendsfdf2
000131dc g     F .text	000008ac .hidden __adddf3
0001a7b0 g     F .text	000000dc lseek
0001c8b4 g     O .rwdata	00000004 __fdlib_version
0001c8b8 g     O .rwdata	00000004 _global_impure_ptr
0001e4f0 g       *ABS*	00000000 __bss_end
00017e08 g     F .text	00000108 alt_tick
00018fd0 g     F .text	00000018 __fp_lock_all
0001c8b0 g     O .rwdata	00000004 precision
00017d6c g     F .text	0000009c alt_alarm_stop
0001e39c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
0001c300 g     O .rwdata	00000028 alt_dev_null
00012384 g     F .text	000001ec rint
00017668 g     F .text	00000020 alt_dcache_flush_all
00015818 g     F .text	00000080 .hidden __fixdfsi
0001c8f0 g       *ABS*	00000000 __ram_rwdata_end
00010408 g     F .text	00000090 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001c8cc g     O .rwdata	00000008 alt_dev_list
0001ab00 g     F .text	00000100 write
00018264 g     F .text	000000a0 _putc_r
0001ae50 g       *ABS*	00000000 __ram_rodata_end
0001a5d4 g     F .text	000000b8 fstat
000145bc g     F .text	000000f4 .hidden __ledf2
0001e394 g     O .bss	00000001 led
00015c44 g     F .text	00000058 .hidden __umodsi3
0001e4f0 g       *ABS*	00000000 end
0001668c g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001ac00 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00017004 g     F .text	00000074 alt_avalon_timer_sc_init
00015a84 g     F .text	00000064 .hidden __clzsi2
00016d64 g     F .text	00000224 altera_avalon_jtag_uart_write
00018fc0 g     F .text	00000004 __sfp_lock_acquire
00019124 g     F .text	00000310 _free_r
00016130 g     F .text	0000022c alt_printf
00018828 g     F .text	00000180 __call_exitprocs
0001c8e4 g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
0001e398 g     O .bss	00000004 level
0001e3ac g     O .bss	00000004 _alt_tick_rate
0001e3b0 g     O .bss	00000004 _alt_nticks
0001a910 g     F .text	00000104 read
000164b8 g     F .text	00000070 alt_sys_init
000170b4 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
000130b8 g     F .text	00000124 .hidden __floatsisf
00018710 g     F .text	00000118 __register_exitproc
00010498 g     F .text	000000ec filter
00010fa0 g     F .text	000010a4 __ieee754_pow
000169f0 g     F .text	00000068 altera_avalon_jtag_uart_close
00010adc g     F .text	000004c4 pow
00012728 g     F .text	00000028 .hidden __mulsi3
0001ae50 g       *ABS*	00000000 __ram_rwdata_start
0001ac00 g       *ABS*	00000000 __ram_rodata_start
0001e3c8 g     O .bss	00000028 __malloc_current_mallinfo
00016528 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001803c g     F .text	000000c4 alt_get_fd
00017290 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
0001a29c g     F .text	00000054 _close_r
000181e8 g     F .text	0000007c memcmp
000165e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001e4f0 g       *ABS*	00000000 __alt_stack_base
00016638 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000185bc g     F .text	00000154 __swsetup_r
00013a88 g     F .text	000009d0 .hidden __divdf3
00018e80 g     F .text	00000118 __sfp
0001c4a8 g     O .rwdata	00000408 __malloc_av_
00018fcc g     F .text	00000004 __sinit_lock_release
000146b0 g     F .text	0000086c .hidden __muldf3
0001a100 g     F .text	00000054 __sread
00017f34 g     F .text	00000108 alt_find_file
000176f0 g     F .text	000000a4 alt_dev_llist_insert
0001a88c g     F .text	00000024 __malloc_lock
0001aa14 g     F .text	000000b0 sbrk
00018bc4 g     F .text	0000005c _fflush_r
0001e390 g       *ABS*	00000000 __bss_start
00019f84 g     F .text	00000128 memset
00010754 g     F .text	00000388 main
0001e3a8 g     O .bss	00000004 alt_envp
0001e3bc g     O .bss	00000004 __malloc_max_total_mem
00016588 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000185a4 g     F .text	00000018 __swbuf
0001a234 g     F .text	00000008 __sclose
00012370 g     F .text	00000008 matherr
00020000 g       *ABS*	00000000 __alt_heap_limit
0001a3e0 g     F .text	00000014 fclose
00019778 g     F .text	0000080c _malloc_r
0001c8d8 g     O .rwdata	00000004 alt_errno
00019434 g     F .text	000000c4 _fwalk
00018304 g     F .text	000000c8 putc
00015ae8 g     F .text	00000084 .hidden __divsi3
00019000 g     F .text	00000124 _malloc_trim_r
0001ac00 g       *ABS*	00000000 __CTOR_END__
00012c18 g     F .text	00000430 .hidden __mulsf3
000122e0 g     F .text	0000001c finite
0001ac00 g       *ABS*	00000000 __flash_rodata_start
0001ac00 g       *ABS*	00000000 __DTOR_LIST__
0001270c g     F .text	0000001c copysign
00014458 g     F .text	00000088 .hidden __nedf2
00016480 g     F .text	00000038 alt_irq_init
00017ce8 g     F .text	00000084 alt_release_fd
0001ad08 g     O .rodata	00000100 .hidden __clz_tab
0001819c g     F .text	00000014 atexit
0001a23c g     F .text	00000060 _write_r
0001c8bc g     O .rwdata	00000004 _impure_ptr
0001e3a0 g     O .bss	00000004 alt_argc
000189a8 g     F .text	0000021c __sflush_r
00012570 g     F .text	0000019c scalbn
000177f4 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010584 g     F .text	00000130 filter_fixed
00018fe8 g     F .text	00000018 __fp_unlock_all
0001e390 g     O .bss	00000001 pwm
0001c8c4 g     O .rwdata	00000008 alt_fs_list
00012378 g     F .text	0000000c nan
00010020 g       *ABS*	00000000 __ram_exceptions_start
00017078 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00012044 g     F .text	00000288 __ieee754_sqrt
0001c8f0 g       *ABS*	00000000 _edata
0001e4f0 g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00016a58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001a15c g     F .text	0000007c __swrite
0001c8e8 g     O .rwdata	00000004 __malloc_trim_threshold
000181b0 g     F .text	00000038 exit
000194f8 g     F .text	000000c4 _fwalk_reent
00015b6c g     F .text	00000074 .hidden __modsi3
0001735c g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00018fc4 g     F .text	00000004 __sfp_lock_release
000102a8 g     F .text	00000090 convert_read
0001a564 g     F .text	00000034 _exit
00017428 g     F .text	0000012c alt_alarm_start
000170f8 g     F .text	00000068 alt_up_accelerometer_spi_read
00017160 g     F .text	00000064 alt_up_accelerometer_spi_write
000195bc g     F .text	000001bc __smakebuf_r
000183cc g     F .text	00000098 strlen
00017b8c g     F .text	0000015c open
000144e0 g     F .text	000000dc .hidden __gedf2
0001635c g     F .text	0000003c alt_putchar
00015c9c g     F .text	0000004c clock
000178e4 g     F .text	00000020 alt_icache_flush_all
0001c8c0 g     O .rwdata	00000004 alt_priority_mask
00014f1c g     F .text	000008fc .hidden __subdf3
0001c8dc g     O .rwdata	00000008 alt_alarm_list
00017794 g     F .text	00000060 _do_ctors
00017590 g     F .text	000000d8 close
00012750 g     F .text	000004c8 .hidden __addsf3
00016030 g     F .text	00000084 alt_load
00018fc8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10b8fc04 	addi	r2,r2,-7184
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10b8fc04 	addi	r2,r2,-7184
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xfffeb87c>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xfffeb870>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6c117 	ldw	r2,-25852(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6c117 	ldw	r2,-25852(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10240:	d6922c14 	ori	gp,gp,18608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10b8e414 	ori	r2,r2,58256

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18f93c14 	ori	r3,r3,58608

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xfffeb9a8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	00160300 	call	16030 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	00160b40 	call	160b4 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xfffeb9bc>

00010270 <led_write>:
alt_u8 led;
int level;

const int precision = 21;

void led_write(alt_u8 led_pattern) {
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	2005883a 	mov	r2,r4
   10280:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   10284:	e0ffff03 	ldbu	r3,-4(fp)
   10288:	008000b4 	movhi	r2,2
   1028c:	10840804 	addi	r2,r2,4128
   10290:	10c00035 	stwio	r3,0(r2)
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
   102a8:	defffb04 	addi	sp,sp,-20
   102ac:	df000415 	stw	fp,16(sp)
   102b0:	df000404 	addi	fp,sp,16
   102b4:	e13ffd15 	stw	r4,-12(fp)
   102b8:	e17ffe15 	stw	r5,-8(fp)
   102bc:	e1bfff15 	stw	r6,-4(fp)
//    alt_printf("raw data: %x\n", acc_read);
    acc_read += OFFSET;
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	10bff804 	addi	r2,r2,-32
   102c8:	e0bffd15 	stw	r2,-12(fp)
    // alt_printf("offset data: %x\n", acc_read);
    // shifts it to the right by 6 bits
    // & with 0b000000111
    // gets the MS 3 bits of the offset value
    alt_u8 val = (acc_read >> 6) & 0x07;
   102cc:	e0bffd17 	ldw	r2,-12(fp)
   102d0:	1005d1ba 	srai	r2,r2,6
   102d4:	108001cc 	andi	r2,r2,7
   102d8:	e0bffc05 	stb	r2,-16(fp)

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places 
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   102dc:	e0bffc03 	ldbu	r2,-16(fp)
   102e0:	00c00204 	movi	r3,8
   102e4:	1885d83a 	sra	r2,r3,r2
   102e8:	1009883a 	mov	r4,r2
   102ec:	e0bffc03 	ldbu	r2,-16(fp)
   102f0:	00c00204 	movi	r3,8
   102f4:	1885c83a 	sub	r2,r3,r2
   102f8:	00c00204 	movi	r3,8
   102fc:	1884983a 	sll	r2,r3,r2
   10300:	2084b03a 	or	r2,r4,r2
   10304:	1007883a 	mov	r3,r2
   10308:	e0bfff17 	ldw	r2,-4(fp)
   1030c:	10c00005 	stb	r3,0(r2)

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	1005d07a 	srai	r2,r2,1
   10318:	10c007cc 	andi	r3,r2,31
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	10c00015 	stw	r3,0(r2)
}
   10324:	0001883a 	nop
   10328:	e037883a 	mov	sp,fp
   1032c:	df000017 	ldw	fp,0(sp)
   10330:	dec00104 	addi	sp,sp,4
   10334:	f800283a 	ret

00010338 <sys_timer_isr>:

void sys_timer_isr() {
   10338:	defffe04 	addi	sp,sp,-8
   1033c:	dfc00115 	stw	ra,4(sp)
   10340:	df000015 	stw	fp,0(sp)
   10344:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10348:	0007883a 	mov	r3,zero
   1034c:	008000b4 	movhi	r2,2
   10350:	10840004 	addi	r2,r2,4096
   10354:	10c00035 	stwio	r3,0(r2)

    if (pwm < abs(level)) {
   10358:	d0a6b803 	ldbu	r2,-25888(gp)
   1035c:	10c03fcc 	andi	r3,r2,255
   10360:	18c0201c 	xori	r3,r3,128
   10364:	18ffe004 	addi	r3,r3,-128
   10368:	d0a6ba17 	ldw	r2,-25880(gp)
   1036c:	1000010e 	bge	r2,zero,10374 <sys_timer_isr+0x3c>
   10370:	0085c83a 	sub	r2,zero,r2
   10374:	18800f0e 	bge	r3,r2,103b4 <sys_timer_isr+0x7c>

        if (level < 0) {
   10378:	d0a6ba17 	ldw	r2,-25880(gp)
   1037c:	1000060e 	bge	r2,zero,10398 <sys_timer_isr+0x60>
            led_write(led << 1);
   10380:	d0a6b903 	ldbu	r2,-25884(gp)
   10384:	1085883a 	add	r2,r2,r2
   10388:	10803fcc 	andi	r2,r2,255
   1038c:	1009883a 	mov	r4,r2
   10390:	00102700 	call	10270 <led_write>
   10394:	00000b06 	br	103c4 <sys_timer_isr+0x8c>
        } else {
            led_write(led >> 1);
   10398:	d0a6b903 	ldbu	r2,-25884(gp)
   1039c:	10803fcc 	andi	r2,r2,255
   103a0:	1004d07a 	srli	r2,r2,1
   103a4:	10803fcc 	andi	r2,r2,255
   103a8:	1009883a 	mov	r4,r2
   103ac:	00102700 	call	10270 <led_write>
   103b0:	00000406 	br	103c4 <sys_timer_isr+0x8c>
        }

    } else {
        led_write(led);
   103b4:	d0a6b903 	ldbu	r2,-25884(gp)
   103b8:	10803fcc 	andi	r2,r2,255
   103bc:	1009883a 	mov	r4,r2
   103c0:	00102700 	call	10270 <led_write>
    }

    if (pwm > PWM_PERIOD) {
   103c4:	d0a6b803 	ldbu	r2,-25888(gp)
   103c8:	10803fcc 	andi	r2,r2,255
   103cc:	1080201c 	xori	r2,r2,128
   103d0:	10bfe004 	addi	r2,r2,-128
   103d4:	10800450 	cmplti	r2,r2,17
   103d8:	1000021e 	bne	r2,zero,103e4 <sys_timer_isr+0xac>
        pwm = 0;
   103dc:	d026b805 	stb	zero,-25888(gp)
    } else {
        pwm++;
    }

}
   103e0:	00000306 	br	103f0 <sys_timer_isr+0xb8>
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
   103e4:	d0a6b803 	ldbu	r2,-25888(gp)
   103e8:	10800044 	addi	r2,r2,1
   103ec:	d0a6b805 	stb	r2,-25888(gp)
    }

}
   103f0:	0001883a 	nop
   103f4:	e037883a 	mov	sp,fp
   103f8:	dfc00117 	ldw	ra,4(sp)
   103fc:	df000017 	ldw	fp,0(sp)
   10400:	dec00204 	addi	sp,sp,8
   10404:	f800283a 	ret

00010408 <timer_init>:

void timer_init(void * isr) {
   10408:	defffd04 	addi	sp,sp,-12
   1040c:	dfc00215 	stw	ra,8(sp)
   10410:	df000115 	stw	fp,4(sp)
   10414:	df000104 	addi	fp,sp,4
   10418:	e13fff15 	stw	r4,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1041c:	00c000c4 	movi	r3,3
   10420:	008000b4 	movhi	r2,2
   10424:	10840104 	addi	r2,r2,4100
   10428:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1042c:	0007883a 	mov	r3,zero
   10430:	008000b4 	movhi	r2,2
   10434:	10840004 	addi	r2,r2,4096
   10438:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   1043c:	00c24004 	movi	r3,2304
   10440:	008000b4 	movhi	r2,2
   10444:	10840204 	addi	r2,r2,4104
   10448:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   1044c:	0007883a 	mov	r3,zero
   10450:	008000b4 	movhi	r2,2
   10454:	10840304 	addi	r2,r2,4108
   10458:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   1045c:	e0bfff17 	ldw	r2,-4(fp)
   10460:	100d883a 	mov	r6,r2
   10464:	000b883a 	mov	r5,zero
   10468:	01000044 	movi	r4,1
   1046c:	0015e480 	call	15e48 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10470:	00c001c4 	movi	r3,7
   10474:	008000b4 	movhi	r2,2
   10478:	10840104 	addi	r2,r2,4100
   1047c:	10c00035 	stwio	r3,0(r2)

}
   10480:	0001883a 	nop
   10484:	e037883a 	mov	sp,fp
   10488:	dfc00117 	ldw	ra,4(sp)
   1048c:	df000017 	ldw	fp,0(sp)
   10490:	dec00204 	addi	sp,sp,8
   10494:	f800283a 	ret

00010498 <filter>:

alt_32 filter(float* taps, alt_32* prev_vals, int n){
   10498:	defff704 	addi	sp,sp,-36
   1049c:	dfc00815 	stw	ra,32(sp)
   104a0:	df000715 	stw	fp,28(sp)
   104a4:	dc400615 	stw	r17,24(sp)
   104a8:	dc000515 	stw	r16,20(sp)
   104ac:	df000704 	addi	fp,sp,28
   104b0:	e13ffb15 	stw	r4,-20(fp)
   104b4:	e17ffc15 	stw	r5,-16(fp)
   104b8:	e1bffd15 	stw	r6,-12(fp)
    alt_32 sum = 0;
   104bc:	e03ff915 	stw	zero,-28(fp)


    for(int i = 0; i < n; i++){
   104c0:	e03ffa15 	stw	zero,-24(fp)
   104c4:	00002406 	br	10558 <filter+0xc0>
        sum += taps[i] * prev_vals[i];
   104c8:	e13ff917 	ldw	r4,-28(fp)
   104cc:	00130b80 	call	130b8 <__floatsisf>
   104d0:	1023883a 	mov	r17,r2
   104d4:	e0bffa17 	ldw	r2,-24(fp)
   104d8:	1085883a 	add	r2,r2,r2
   104dc:	1085883a 	add	r2,r2,r2
   104e0:	1007883a 	mov	r3,r2
   104e4:	e0bffb17 	ldw	r2,-20(fp)
   104e8:	10c5883a 	add	r2,r2,r3
   104ec:	14000017 	ldw	r16,0(r2)
   104f0:	e0bffa17 	ldw	r2,-24(fp)
   104f4:	1085883a 	add	r2,r2,r2
   104f8:	1085883a 	add	r2,r2,r2
   104fc:	1007883a 	mov	r3,r2
   10500:	e0bffc17 	ldw	r2,-16(fp)
   10504:	10c5883a 	add	r2,r2,r3
   10508:	10800017 	ldw	r2,0(r2)
   1050c:	1009883a 	mov	r4,r2
   10510:	00130b80 	call	130b8 <__floatsisf>
   10514:	1007883a 	mov	r3,r2
   10518:	180b883a 	mov	r5,r3
   1051c:	8009883a 	mov	r4,r16
   10520:	0012c180 	call	12c18 <__mulsf3>
   10524:	1007883a 	mov	r3,r2
   10528:	1805883a 	mov	r2,r3
   1052c:	100b883a 	mov	r5,r2
   10530:	8809883a 	mov	r4,r17
   10534:	00127500 	call	12750 <__addsf3>
   10538:	1007883a 	mov	r3,r2
   1053c:	1805883a 	mov	r2,r3
   10540:	1009883a 	mov	r4,r2
   10544:	00130480 	call	13048 <__fixsfsi>
   10548:	e0bff915 	stw	r2,-28(fp)

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   1054c:	e0bffa17 	ldw	r2,-24(fp)
   10550:	10800044 	addi	r2,r2,1
   10554:	e0bffa15 	stw	r2,-24(fp)
   10558:	e0fffa17 	ldw	r3,-24(fp)
   1055c:	e0bffd17 	ldw	r2,-12(fp)
   10560:	18bfd916 	blt	r3,r2,104c8 <_gp+0xfffebc18>
        sum += taps[i] * prev_vals[i];
    }

    return sum;
   10564:	e0bff917 	ldw	r2,-28(fp)
}
   10568:	e6fffe04 	addi	sp,fp,-8
   1056c:	dfc00317 	ldw	ra,12(sp)
   10570:	df000217 	ldw	fp,8(sp)
   10574:	dc400117 	ldw	r17,4(sp)
   10578:	dc000017 	ldw	r16,0(sp)
   1057c:	dec00404 	addi	sp,sp,16
   10580:	f800283a 	ret

00010584 <filter_fixed>:

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
   10584:	defff704 	addi	sp,sp,-36
   10588:	dfc00815 	stw	ra,32(sp)
   1058c:	df000715 	stw	fp,28(sp)
   10590:	dc400615 	stw	r17,24(sp)
   10594:	dc000515 	stw	r16,20(sp)
   10598:	df000704 	addi	fp,sp,28
   1059c:	e13ffb15 	stw	r4,-20(fp)
   105a0:	e17ffc15 	stw	r5,-16(fp)
   105a4:	e1bffd15 	stw	r6,-12(fp)
    alt_32 sum = 0;
   105a8:	e03ff915 	stw	zero,-28(fp)


    for(int i = 0; i < n; i++){
   105ac:	e03ffa15 	stw	zero,-24(fp)
   105b0:	00001806 	br	10614 <filter_fixed+0x90>
        sum += taps_fixed[i] * prev_vals[i];
   105b4:	e0bffa17 	ldw	r2,-24(fp)
   105b8:	1085883a 	add	r2,r2,r2
   105bc:	1085883a 	add	r2,r2,r2
   105c0:	1007883a 	mov	r3,r2
   105c4:	e0bffb17 	ldw	r2,-20(fp)
   105c8:	10c5883a 	add	r2,r2,r3
   105cc:	10c00017 	ldw	r3,0(r2)
   105d0:	e0bffa17 	ldw	r2,-24(fp)
   105d4:	1085883a 	add	r2,r2,r2
   105d8:	1085883a 	add	r2,r2,r2
   105dc:	1009883a 	mov	r4,r2
   105e0:	e0bffc17 	ldw	r2,-16(fp)
   105e4:	1105883a 	add	r2,r2,r4
   105e8:	10800017 	ldw	r2,0(r2)
   105ec:	100b883a 	mov	r5,r2
   105f0:	1809883a 	mov	r4,r3
   105f4:	00127280 	call	12728 <__mulsi3>
   105f8:	1007883a 	mov	r3,r2
   105fc:	e0bff917 	ldw	r2,-28(fp)
   10600:	10c5883a 	add	r2,r2,r3
   10604:	e0bff915 	stw	r2,-28(fp)

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   10608:	e0bffa17 	ldw	r2,-24(fp)
   1060c:	10800044 	addi	r2,r2,1
   10610:	e0bffa15 	stw	r2,-24(fp)
   10614:	e0fffa17 	ldw	r3,-24(fp)
   10618:	e0bffd17 	ldw	r2,-12(fp)
   1061c:	18bfe516 	blt	r3,r2,105b4 <_gp+0xfffebd04>
        sum += taps_fixed[i] * prev_vals[i];
    }

    sum /= pow(2, precision);
   10620:	00800544 	movi	r2,21
   10624:	1009883a 	mov	r4,r2
   10628:	00158980 	call	15898 <__floatsidf>
   1062c:	1009883a 	mov	r4,r2
   10630:	180b883a 	mov	r5,r3
   10634:	200d883a 	mov	r6,r4
   10638:	280f883a 	mov	r7,r5
   1063c:	0009883a 	mov	r4,zero
   10640:	01500034 	movhi	r5,16384
   10644:	0010adc0 	call	10adc <pow>
   10648:	1021883a 	mov	r16,r2
   1064c:	1823883a 	mov	r17,r3
   10650:	e13ff917 	ldw	r4,-28(fp)
   10654:	00158980 	call	15898 <__floatsidf>
   10658:	1011883a 	mov	r8,r2
   1065c:	1813883a 	mov	r9,r3
   10660:	800d883a 	mov	r6,r16
   10664:	880f883a 	mov	r7,r17
   10668:	4009883a 	mov	r4,r8
   1066c:	480b883a 	mov	r5,r9
   10670:	0013a880 	call	13a88 <__divdf3>
   10674:	1009883a 	mov	r4,r2
   10678:	180b883a 	mov	r5,r3
   1067c:	2005883a 	mov	r2,r4
   10680:	2807883a 	mov	r3,r5
   10684:	1009883a 	mov	r4,r2
   10688:	180b883a 	mov	r5,r3
   1068c:	00158180 	call	15818 <__fixdfsi>
   10690:	e0bff915 	stw	r2,-28(fp)

    return sum;
   10694:	e0bff917 	ldw	r2,-28(fp)
}
   10698:	e6fffe04 	addi	sp,fp,-8
   1069c:	dfc00317 	ldw	ra,12(sp)
   106a0:	df000217 	ldw	fp,8(sp)
   106a4:	dc400117 	ldw	r17,4(sp)
   106a8:	dc000017 	ldw	r16,0(sp)
   106ac:	dec00404 	addi	sp,sp,16
   106b0:	f800283a 	ret

000106b4 <shift>:

void shift(alt_32* prev_vals, alt_32 x_read, int n){
   106b4:	defffb04 	addi	sp,sp,-20
   106b8:	df000415 	stw	fp,16(sp)
   106bc:	df000404 	addi	fp,sp,16
   106c0:	e13ffd15 	stw	r4,-12(fp)
   106c4:	e17ffe15 	stw	r5,-8(fp)
   106c8:	e1bfff15 	stw	r6,-4(fp)
    for(int i = n - 1; i > 0; --i){
   106cc:	e0bfff17 	ldw	r2,-4(fp)
   106d0:	10bfffc4 	addi	r2,r2,-1
   106d4:	e0bffc15 	stw	r2,-16(fp)
   106d8:	00001406 	br	1072c <shift+0x78>
        prev_vals[i] = prev_vals[i - 1];
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	1085883a 	add	r2,r2,r2
   106e4:	1085883a 	add	r2,r2,r2
   106e8:	1007883a 	mov	r3,r2
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10c7883a 	add	r3,r2,r3
   106f4:	e13ffc17 	ldw	r4,-16(fp)
   106f8:	00900034 	movhi	r2,16384
   106fc:	10bfffc4 	addi	r2,r2,-1
   10700:	2085883a 	add	r2,r4,r2
   10704:	1085883a 	add	r2,r2,r2
   10708:	1085883a 	add	r2,r2,r2
   1070c:	1009883a 	mov	r4,r2
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	1105883a 	add	r2,r2,r4
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	18800015 	stw	r2,0(r3)

    return sum;
}

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	10bfffc4 	addi	r2,r2,-1
   10728:	e0bffc15 	stw	r2,-16(fp)
   1072c:	e0bffc17 	ldw	r2,-16(fp)
   10730:	00bfea16 	blt	zero,r2,106dc <_gp+0xfffebe2c>
        prev_vals[i] = prev_vals[i - 1];
    }

    prev_vals[0] = x_read;
   10734:	e0bffd17 	ldw	r2,-12(fp)
   10738:	e0fffe17 	ldw	r3,-8(fp)
   1073c:	10c00015 	stw	r3,0(r2)

    return;
   10740:	0001883a 	nop
}
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <main>:

int main() {
   10754:	deffa704 	addi	sp,sp,-356
   10758:	dfc05815 	stw	ra,352(sp)
   1075c:	df005715 	stw	fp,348(sp)
   10760:	ddc05615 	stw	r23,344(sp)
   10764:	dd805515 	stw	r22,340(sp)
   10768:	dd405415 	stw	r21,336(sp)
   1076c:	dd005315 	stw	r20,332(sp)
   10770:	dcc05215 	stw	r19,328(sp)
   10774:	dc805115 	stw	r18,324(sp)
   10778:	dc405015 	stw	r17,320(sp)
   1077c:	dc004f15 	stw	r16,316(sp)
   10780:	df005704 	addi	fp,sp,348
   10784:	d805883a 	mov	r2,sp
   10788:	e0bfef15 	stw	r2,-68(fp)

	clock_t start, end;
	int n = 1, sum = 0;
   1078c:	00800044 	movi	r2,1
   10790:	e0bfa915 	stw	r2,-348(fp)
   10794:	e03fab15 	stw	zero,-340(fp)

	struct tms test1, test2;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10798:	010000b4 	movhi	r4,2
   1079c:	212b0004 	addi	r4,r4,-21504
   107a0:	00170780 	call	17078 <alt_up_accelerometer_spi_open_dev>
   107a4:	e0bfac15 	stw	r2,-336(fp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   107a8:	e0bfac17 	ldw	r2,-336(fp)
   107ac:	1000031e 	bne	r2,zero,107bc <main+0x68>
        return 1;
   107b0:	00800044 	movi	r2,1
   107b4:	e6ffef17 	ldw	sp,-68(fp)
   107b8:	0000bb06 	br	10aa8 <main+0x354>
    }

    const int array_size = 49;
   107bc:	00800c44 	movi	r2,49
   107c0:	e0bfad15 	stw	r2,-332(fp)

    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   107c4:	008000b4 	movhi	r2,2
   107c8:	10ab0b04 	addi	r2,r2,-21460
   107cc:	e0ffbe04 	addi	r3,fp,-264
   107d0:	1009883a 	mov	r4,r2
   107d4:	00803104 	movi	r2,196
   107d8:	100d883a 	mov	r6,r2
   107dc:	200b883a 	mov	r5,r4
   107e0:	1809883a 	mov	r4,r3
   107e4:	0015cf80 	call	15cf8 <memcpy>
    alt_32 prev_vals[array_size];
   107e8:	e0bfad17 	ldw	r2,-332(fp)
   107ec:	10bfffc4 	addi	r2,r2,-1
   107f0:	e0bfae15 	stw	r2,-328(fp)
   107f4:	e0bfad17 	ldw	r2,-332(fp)
   107f8:	e0bff015 	stw	r2,-64(fp)
   107fc:	e03ff115 	stw	zero,-60(fp)
   10800:	e0fff017 	ldw	r3,-64(fp)
   10804:	1804d6fa 	srli	r2,r3,27
   10808:	e0fff117 	ldw	r3,-60(fp)
   1080c:	182e917a 	slli	r23,r3,5
   10810:	15eeb03a 	or	r23,r2,r23
   10814:	e0bff017 	ldw	r2,-64(fp)
   10818:	102c917a 	slli	r22,r2,5
   1081c:	e0bfad17 	ldw	r2,-332(fp)
   10820:	e0bff215 	stw	r2,-56(fp)
   10824:	e03ff315 	stw	zero,-52(fp)
   10828:	e0fff217 	ldw	r3,-56(fp)
   1082c:	1804d6fa 	srli	r2,r3,27
   10830:	e0fff317 	ldw	r3,-52(fp)
   10834:	182a917a 	slli	r21,r3,5
   10838:	156ab03a 	or	r21,r2,r21
   1083c:	e0bff217 	ldw	r2,-56(fp)
   10840:	1028917a 	slli	r20,r2,5
   10844:	e0bfad17 	ldw	r2,-332(fp)
   10848:	1085883a 	add	r2,r2,r2
   1084c:	1085883a 	add	r2,r2,r2
   10850:	108000c4 	addi	r2,r2,3
   10854:	108000c4 	addi	r2,r2,3
   10858:	1004d0ba 	srli	r2,r2,2
   1085c:	1085883a 	add	r2,r2,r2
   10860:	1085883a 	add	r2,r2,r2
   10864:	d8b7c83a 	sub	sp,sp,r2
   10868:	d805883a 	mov	r2,sp
   1086c:	108000c4 	addi	r2,r2,3
   10870:	1004d0ba 	srli	r2,r2,2
   10874:	1085883a 	add	r2,r2,r2
   10878:	1085883a 	add	r2,r2,r2
   1087c:	e0bfaf15 	stw	r2,-324(fp)

    int fixed_taps[array_size];
   10880:	e0bfad17 	ldw	r2,-332(fp)
   10884:	10bfffc4 	addi	r2,r2,-1
   10888:	e0bfb015 	stw	r2,-320(fp)
   1088c:	e0bfad17 	ldw	r2,-332(fp)
   10890:	e0bff415 	stw	r2,-48(fp)
   10894:	e03ff515 	stw	zero,-44(fp)
   10898:	e0fff417 	ldw	r3,-48(fp)
   1089c:	1804d6fa 	srli	r2,r3,27
   108a0:	e0fff517 	ldw	r3,-44(fp)
   108a4:	1826917a 	slli	r19,r3,5
   108a8:	14e6b03a 	or	r19,r2,r19
   108ac:	e0bff417 	ldw	r2,-48(fp)
   108b0:	1024917a 	slli	r18,r2,5
   108b4:	e0bfad17 	ldw	r2,-332(fp)
   108b8:	e0bff615 	stw	r2,-40(fp)
   108bc:	e03ff715 	stw	zero,-36(fp)
   108c0:	e0fff617 	ldw	r3,-40(fp)
   108c4:	1804d6fa 	srli	r2,r3,27
   108c8:	e0fff717 	ldw	r3,-36(fp)
   108cc:	1822917a 	slli	r17,r3,5
   108d0:	1462b03a 	or	r17,r2,r17
   108d4:	e0bff617 	ldw	r2,-40(fp)
   108d8:	1020917a 	slli	r16,r2,5
   108dc:	e0bfad17 	ldw	r2,-332(fp)
   108e0:	1085883a 	add	r2,r2,r2
   108e4:	1085883a 	add	r2,r2,r2
   108e8:	108000c4 	addi	r2,r2,3
   108ec:	108000c4 	addi	r2,r2,3
   108f0:	1004d0ba 	srli	r2,r2,2
   108f4:	1085883a 	add	r2,r2,r2
   108f8:	1085883a 	add	r2,r2,r2
   108fc:	d8b7c83a 	sub	sp,sp,r2
   10900:	d805883a 	mov	r2,sp
   10904:	108000c4 	addi	r2,r2,3
   10908:	1004d0ba 	srli	r2,r2,2
   1090c:	1085883a 	add	r2,r2,r2
   10910:	1085883a 	add	r2,r2,r2
   10914:	e0bfb115 	stw	r2,-316(fp)

    for(int i = 0; i < array_size; i++) {
   10918:	e03faa15 	stw	zero,-344(fp)
   1091c:	00003306 	br	109ec <main+0x298>
        prev_vals[i] = 0;
   10920:	e0ffaf17 	ldw	r3,-324(fp)
   10924:	e0bfaa17 	ldw	r2,-344(fp)
   10928:	1085883a 	add	r2,r2,r2
   1092c:	1085883a 	add	r2,r2,r2
   10930:	1885883a 	add	r2,r3,r2
   10934:	10000015 	stw	zero,0(r2)

        fixed_taps[i] = taps[i] * pow(2, precision);
   10938:	e0bfaa17 	ldw	r2,-344(fp)
   1093c:	1085883a 	add	r2,r2,r2
   10940:	1085883a 	add	r2,r2,r2
   10944:	e0ffa904 	addi	r3,fp,-348
   10948:	1885883a 	add	r2,r3,r2
   1094c:	10801504 	addi	r2,r2,84
   10950:	10c00017 	ldw	r3,0(r2)
   10954:	1809883a 	mov	r4,r3
   10958:	00159740 	call	15974 <__extendsfdf2>
   1095c:	1021883a 	mov	r16,r2
   10960:	1823883a 	mov	r17,r3
   10964:	00800544 	movi	r2,21
   10968:	1009883a 	mov	r4,r2
   1096c:	00158980 	call	15898 <__floatsidf>
   10970:	1009883a 	mov	r4,r2
   10974:	180b883a 	mov	r5,r3
   10978:	200d883a 	mov	r6,r4
   1097c:	280f883a 	mov	r7,r5
   10980:	0009883a 	mov	r4,zero
   10984:	01500034 	movhi	r5,16384
   10988:	0010adc0 	call	10adc <pow>
   1098c:	1009883a 	mov	r4,r2
   10990:	180b883a 	mov	r5,r3
   10994:	200d883a 	mov	r6,r4
   10998:	280f883a 	mov	r7,r5
   1099c:	8009883a 	mov	r4,r16
   109a0:	880b883a 	mov	r5,r17
   109a4:	00146b00 	call	146b0 <__muldf3>
   109a8:	1009883a 	mov	r4,r2
   109ac:	180b883a 	mov	r5,r3
   109b0:	2005883a 	mov	r2,r4
   109b4:	2807883a 	mov	r3,r5
   109b8:	1009883a 	mov	r4,r2
   109bc:	180b883a 	mov	r5,r3
   109c0:	00158180 	call	15818 <__fixdfsi>
   109c4:	1009883a 	mov	r4,r2
   109c8:	e0ffb117 	ldw	r3,-316(fp)
   109cc:	e0bfaa17 	ldw	r2,-344(fp)
   109d0:	1085883a 	add	r2,r2,r2
   109d4:	1085883a 	add	r2,r2,r2
   109d8:	1885883a 	add	r2,r3,r2
   109dc:	11000015 	stw	r4,0(r2)
    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   109e0:	e0bfaa17 	ldw	r2,-344(fp)
   109e4:	10800044 	addi	r2,r2,1
   109e8:	e0bfaa15 	stw	r2,-344(fp)
   109ec:	e0ffaa17 	ldw	r3,-344(fp)
   109f0:	e0bfad17 	ldw	r2,-332(fp)
   109f4:	18bfca16 	blt	r3,r2,10920 <_gp+0xfffec070>
        prev_vals[i] = 0;

        fixed_taps[i] = taps[i] * pow(2, precision);
    }

    timer_init(sys_timer_isr);
   109f8:	01000074 	movhi	r4,1
   109fc:	2100ce04 	addi	r4,r4,824
   10a00:	00104080 	call	10408 <timer_init>

    while (1) {
    	start = times(& test1);
   10a04:	e0bfb504 	addi	r2,fp,-300
   10a08:	1009883a 	mov	r4,r2
   10a0c:	00163d40 	call	163d4 <times>
   10a10:	e0bfb215 	stw	r2,-312(fp)
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10a14:	e0bfbd04 	addi	r2,fp,-268
   10a18:	100b883a 	mov	r5,r2
   10a1c:	e13fac17 	ldw	r4,-336(fp)
   10a20:	00171c40 	call	171c4 <alt_up_accelerometer_spi_read_x_axis>
        // alt_printf("raw data: %x\n", x_read);
        shift(& prev_vals, x_read, array_size);
   10a24:	e0bfaf17 	ldw	r2,-324(fp)
   10a28:	e0ffbd17 	ldw	r3,-268(fp)
   10a2c:	e1bfad17 	ldw	r6,-332(fp)
   10a30:	180b883a 	mov	r5,r3
   10a34:	1009883a 	mov	r4,r2
   10a38:	00106b40 	call	106b4 <shift>
        // using floating point arithmetic
        // filtered_x = filter(& taps, & prev_vals, array_size);
        // using fixed point arithmetic
        filtered_x = filter_fixed(& fixed_taps, & prev_vals, array_size);
   10a3c:	e0bfb117 	ldw	r2,-316(fp)
   10a40:	e0ffaf17 	ldw	r3,-324(fp)
   10a44:	e1bfad17 	ldw	r6,-332(fp)
   10a48:	180b883a 	mov	r5,r3
   10a4c:	1009883a 	mov	r4,r2
   10a50:	00105840 	call	10584 <filter_fixed>
   10a54:	e0bfb315 	stw	r2,-308(fp)

        // filtering
        convert_read(filtered_x, & level, & led);
   10a58:	d1a6b904 	addi	r6,gp,-25884
   10a5c:	d166ba04 	addi	r5,gp,-25880
   10a60:	e13fb317 	ldw	r4,-308(fp)
   10a64:	00102a80 	call	102a8 <convert_read>
        // raw data
        // convert_read(x_read, & level, & led);

//        end = clock();
        end = clock(& test2);
   10a68:	e0bfb904 	addi	r2,fp,-284
   10a6c:	1009883a 	mov	r4,r2
   10a70:	0015c9c0 	call	15c9c <clock>
   10a74:	e0bfb415 	stw	r2,-304(fp)
        alt_printf("new avg T: %x, %x\n", (alt_32)(test1.tms_utime), (alt_32)(test2.tms_utime));
   10a78:	e0bfb517 	ldw	r2,-300(fp)
   10a7c:	1007883a 	mov	r3,r2
   10a80:	e0bfb917 	ldw	r2,-284(fp)
   10a84:	100d883a 	mov	r6,r2
   10a88:	180b883a 	mov	r5,r3
   10a8c:	010000b4 	movhi	r4,2
   10a90:	212b0604 	addi	r4,r4,-21480
   10a94:	00161300 	call	16130 <alt_printf>
//        sum += (int) end  - start;

        n++;
   10a98:	e0bfa917 	ldw	r2,-348(fp)
   10a9c:	10800044 	addi	r2,r2,1
   10aa0:	e0bfa915 	stw	r2,-348(fp)
    }
   10aa4:	003fd706 	br	10a04 <_gp+0xfffec154>

    return 0;

}
   10aa8:	e6fff804 	addi	sp,fp,-32
   10aac:	dfc00917 	ldw	ra,36(sp)
   10ab0:	df000817 	ldw	fp,32(sp)
   10ab4:	ddc00717 	ldw	r23,28(sp)
   10ab8:	dd800617 	ldw	r22,24(sp)
   10abc:	dd400517 	ldw	r21,20(sp)
   10ac0:	dd000417 	ldw	r20,16(sp)
   10ac4:	dcc00317 	ldw	r19,12(sp)
   10ac8:	dc800217 	ldw	r18,8(sp)
   10acc:	dc400117 	ldw	r17,4(sp)
   10ad0:	dc000017 	ldw	r16,0(sp)
   10ad4:	dec00a04 	addi	sp,sp,40
   10ad8:	f800283a 	ret

00010adc <pow>:
   10adc:	deffee04 	addi	sp,sp,-72
   10ae0:	dc800b15 	stw	r18,44(sp)
   10ae4:	048000b4 	movhi	r18,2
   10ae8:	ddc01015 	stw	r23,64(sp)
   10aec:	dd800f15 	stw	r22,60(sp)
   10af0:	dd400e15 	stw	r21,56(sp)
   10af4:	dd000d15 	stw	r20,52(sp)
   10af8:	dcc00c15 	stw	r19,48(sp)
   10afc:	dc400a15 	stw	r17,40(sp)
   10b00:	dc000915 	stw	r16,36(sp)
   10b04:	dfc01115 	stw	ra,68(sp)
   10b08:	94b22d04 	addi	r18,r18,-14156
   10b0c:	202f883a 	mov	r23,r4
   10b10:	282d883a 	mov	r22,r5
   10b14:	302b883a 	mov	r21,r6
   10b18:	3829883a 	mov	r20,r7
   10b1c:	0010fa00 	call	10fa0 <__ieee754_pow>
   10b20:	1023883a 	mov	r17,r2
   10b24:	90800017 	ldw	r2,0(r18)
   10b28:	04ffffc4 	movi	r19,-1
   10b2c:	1821883a 	mov	r16,r3
   10b30:	14c00426 	beq	r2,r19,10b44 <pow+0x68>
   10b34:	a809883a 	mov	r4,r21
   10b38:	a00b883a 	mov	r5,r20
   10b3c:	00122fc0 	call	122fc <__fpclassifyd>
   10b40:	10000d1e 	bne	r2,zero,10b78 <pow+0x9c>
   10b44:	8805883a 	mov	r2,r17
   10b48:	8007883a 	mov	r3,r16
   10b4c:	dfc01117 	ldw	ra,68(sp)
   10b50:	ddc01017 	ldw	r23,64(sp)
   10b54:	dd800f17 	ldw	r22,60(sp)
   10b58:	dd400e17 	ldw	r21,56(sp)
   10b5c:	dd000d17 	ldw	r20,52(sp)
   10b60:	dcc00c17 	ldw	r19,48(sp)
   10b64:	dc800b17 	ldw	r18,44(sp)
   10b68:	dc400a17 	ldw	r17,40(sp)
   10b6c:	dc000917 	ldw	r16,36(sp)
   10b70:	dec01204 	addi	sp,sp,72
   10b74:	f800283a 	ret
   10b78:	b809883a 	mov	r4,r23
   10b7c:	b00b883a 	mov	r5,r22
   10b80:	00122fc0 	call	122fc <__fpclassifyd>
   10b84:	000d883a 	mov	r6,zero
   10b88:	000f883a 	mov	r7,zero
   10b8c:	1000201e 	bne	r2,zero,10c10 <pow+0x134>
   10b90:	a809883a 	mov	r4,r21
   10b94:	a00b883a 	mov	r5,r20
   10b98:	00144580 	call	14458 <__eqdf2>
   10b9c:	103fe91e 	bne	r2,zero,10b44 <_gp+0xfffec294>
   10ba0:	01000044 	movi	r4,1
   10ba4:	d9000015 	stw	r4,0(sp)
   10ba8:	90800017 	ldw	r2,0(r18)
   10bac:	010000b4 	movhi	r4,2
   10bb0:	00cffc34 	movhi	r3,16368
   10bb4:	212b3c04 	addi	r4,r4,-21264
   10bb8:	d9000115 	stw	r4,4(sp)
   10bbc:	d8000815 	stw	zero,32(sp)
   10bc0:	ddc00215 	stw	r23,8(sp)
   10bc4:	dd800315 	stw	r22,12(sp)
   10bc8:	dd400415 	stw	r21,16(sp)
   10bcc:	dd000515 	stw	r20,20(sp)
   10bd0:	d8000615 	stw	zero,24(sp)
   10bd4:	d8c00715 	stw	r3,28(sp)
   10bd8:	14c02826 	beq	r2,r19,10c7c <pow+0x1a0>
   10bdc:	01000084 	movi	r4,2
   10be0:	11002626 	beq	r2,r4,10c7c <pow+0x1a0>
   10be4:	d809883a 	mov	r4,sp
   10be8:	00123700 	call	12370 <matherr>
   10bec:	10006b26 	beq	r2,zero,10d9c <pow+0x2c0>
   10bf0:	d8800817 	ldw	r2,32(sp)
   10bf4:	10000326 	beq	r2,zero,10c04 <pow+0x128>
   10bf8:	0015ce80 	call	15ce8 <__errno>
   10bfc:	d8c00817 	ldw	r3,32(sp)
   10c00:	10c00015 	stw	r3,0(r2)
   10c04:	d8800617 	ldw	r2,24(sp)
   10c08:	d8c00717 	ldw	r3,28(sp)
   10c0c:	003fcf06 	br	10b4c <_gp+0xfffec29c>
   10c10:	b809883a 	mov	r4,r23
   10c14:	b00b883a 	mov	r5,r22
   10c18:	00144580 	call	14458 <__eqdf2>
   10c1c:	1000191e 	bne	r2,zero,10c84 <pow+0x1a8>
   10c20:	000d883a 	mov	r6,zero
   10c24:	000f883a 	mov	r7,zero
   10c28:	a809883a 	mov	r4,r21
   10c2c:	a00b883a 	mov	r5,r20
   10c30:	00144580 	call	14458 <__eqdf2>
   10c34:	10003a1e 	bne	r2,zero,10d20 <pow+0x244>
   10c38:	00c00044 	movi	r3,1
   10c3c:	d8c00015 	stw	r3,0(sp)
   10c40:	90800017 	ldw	r2,0(r18)
   10c44:	00c000b4 	movhi	r3,2
   10c48:	18eb3c04 	addi	r3,r3,-21264
   10c4c:	d8c00115 	stw	r3,4(sp)
   10c50:	d8000815 	stw	zero,32(sp)
   10c54:	ddc00215 	stw	r23,8(sp)
   10c58:	dd800315 	stw	r22,12(sp)
   10c5c:	dd400415 	stw	r21,16(sp)
   10c60:	dd000515 	stw	r20,20(sp)
   10c64:	d8000615 	stw	zero,24(sp)
   10c68:	d8000715 	stw	zero,28(sp)
   10c6c:	103fdd26 	beq	r2,zero,10be4 <_gp+0xfffec334>
   10c70:	0005883a 	mov	r2,zero
   10c74:	00cffc34 	movhi	r3,16368
   10c78:	003fb406 	br	10b4c <_gp+0xfffec29c>
   10c7c:	0005883a 	mov	r2,zero
   10c80:	003fb206 	br	10b4c <_gp+0xfffec29c>
   10c84:	8809883a 	mov	r4,r17
   10c88:	800b883a 	mov	r5,r16
   10c8c:	00122e00 	call	122e0 <finite>
   10c90:	10004626 	beq	r2,zero,10dac <pow+0x2d0>
   10c94:	000d883a 	mov	r6,zero
   10c98:	000f883a 	mov	r7,zero
   10c9c:	8809883a 	mov	r4,r17
   10ca0:	800b883a 	mov	r5,r16
   10ca4:	00144580 	call	14458 <__eqdf2>
   10ca8:	103fa61e 	bne	r2,zero,10b44 <_gp+0xfffec294>
   10cac:	b809883a 	mov	r4,r23
   10cb0:	b00b883a 	mov	r5,r22
   10cb4:	00122e00 	call	122e0 <finite>
   10cb8:	103fa226 	beq	r2,zero,10b44 <_gp+0xfffec294>
   10cbc:	a809883a 	mov	r4,r21
   10cc0:	a00b883a 	mov	r5,r20
   10cc4:	00122e00 	call	122e0 <finite>
   10cc8:	103f9e26 	beq	r2,zero,10b44 <_gp+0xfffec294>
   10ccc:	00800104 	movi	r2,4
   10cd0:	d8800015 	stw	r2,0(sp)
   10cd4:	90c00017 	ldw	r3,0(r18)
   10cd8:	008000b4 	movhi	r2,2
   10cdc:	10ab3c04 	addi	r2,r2,-21264
   10ce0:	d8800115 	stw	r2,4(sp)
   10ce4:	d8000815 	stw	zero,32(sp)
   10ce8:	ddc00215 	stw	r23,8(sp)
   10cec:	dd800315 	stw	r22,12(sp)
   10cf0:	dd400415 	stw	r21,16(sp)
   10cf4:	dd000515 	stw	r20,20(sp)
   10cf8:	d8000615 	stw	zero,24(sp)
   10cfc:	d8000715 	stw	zero,28(sp)
   10d00:	00800084 	movi	r2,2
   10d04:	18804726 	beq	r3,r2,10e24 <pow+0x348>
   10d08:	d809883a 	mov	r4,sp
   10d0c:	00123700 	call	12370 <matherr>
   10d10:	10004426 	beq	r2,zero,10e24 <pow+0x348>
   10d14:	d8800817 	ldw	r2,32(sp)
   10d18:	103fba26 	beq	r2,zero,10c04 <_gp+0xfffec354>
   10d1c:	003fb606 	br	10bf8 <_gp+0xfffec348>
   10d20:	a809883a 	mov	r4,r21
   10d24:	a00b883a 	mov	r5,r20
   10d28:	00122e00 	call	122e0 <finite>
   10d2c:	103f8526 	beq	r2,zero,10b44 <_gp+0xfffec294>
   10d30:	000d883a 	mov	r6,zero
   10d34:	000f883a 	mov	r7,zero
   10d38:	a809883a 	mov	r4,r21
   10d3c:	a00b883a 	mov	r5,r20
   10d40:	00145bc0 	call	145bc <__ledf2>
   10d44:	103f7f0e 	bge	r2,zero,10b44 <_gp+0xfffec294>
   10d48:	00c00044 	movi	r3,1
   10d4c:	d8c00015 	stw	r3,0(sp)
   10d50:	90800017 	ldw	r2,0(r18)
   10d54:	00c000b4 	movhi	r3,2
   10d58:	18eb3c04 	addi	r3,r3,-21264
   10d5c:	d8c00115 	stw	r3,4(sp)
   10d60:	d8000815 	stw	zero,32(sp)
   10d64:	ddc00215 	stw	r23,8(sp)
   10d68:	dd800315 	stw	r22,12(sp)
   10d6c:	dd400415 	stw	r21,16(sp)
   10d70:	dd000515 	stw	r20,20(sp)
   10d74:	d8000615 	stw	zero,24(sp)
   10d78:	10002526 	beq	r2,zero,10e10 <pow+0x334>
   10d7c:	00fffc34 	movhi	r3,65520
   10d80:	d8c00715 	stw	r3,28(sp)
   10d84:	00c00084 	movi	r3,2
   10d88:	10c0221e 	bne	r2,r3,10e14 <pow+0x338>
   10d8c:	0015ce80 	call	15ce8 <__errno>
   10d90:	00c00844 	movi	r3,33
   10d94:	10c00015 	stw	r3,0(r2)
   10d98:	003fde06 	br	10d14 <_gp+0xfffec464>
   10d9c:	0015ce80 	call	15ce8 <__errno>
   10da0:	00c00844 	movi	r3,33
   10da4:	10c00015 	stw	r3,0(r2)
   10da8:	003f9106 	br	10bf0 <_gp+0xfffec340>
   10dac:	b809883a 	mov	r4,r23
   10db0:	b00b883a 	mov	r5,r22
   10db4:	00122e00 	call	122e0 <finite>
   10db8:	103fb626 	beq	r2,zero,10c94 <_gp+0xfffec3e4>
   10dbc:	a809883a 	mov	r4,r21
   10dc0:	a00b883a 	mov	r5,r20
   10dc4:	00122e00 	call	122e0 <finite>
   10dc8:	103fb226 	beq	r2,zero,10c94 <_gp+0xfffec3e4>
   10dcc:	8809883a 	mov	r4,r17
   10dd0:	800b883a 	mov	r5,r16
   10dd4:	00122fc0 	call	122fc <__fpclassifyd>
   10dd8:	1000161e 	bne	r2,zero,10e34 <pow+0x358>
   10ddc:	00800044 	movi	r2,1
   10de0:	d8800015 	stw	r2,0(sp)
   10de4:	94000017 	ldw	r16,0(r18)
   10de8:	008000b4 	movhi	r2,2
   10dec:	10ab3c04 	addi	r2,r2,-21264
   10df0:	d8800115 	stw	r2,4(sp)
   10df4:	d8000815 	stw	zero,32(sp)
   10df8:	ddc00215 	stw	r23,8(sp)
   10dfc:	dd800315 	stw	r22,12(sp)
   10e00:	dd400415 	stw	r21,16(sp)
   10e04:	dd000515 	stw	r20,20(sp)
   10e08:	8000281e 	bne	r16,zero,10eac <pow+0x3d0>
   10e0c:	d8000615 	stw	zero,24(sp)
   10e10:	d8000715 	stw	zero,28(sp)
   10e14:	d809883a 	mov	r4,sp
   10e18:	00123700 	call	12370 <matherr>
   10e1c:	103fbd1e 	bne	r2,zero,10d14 <_gp+0xfffec464>
   10e20:	003fda06 	br	10d8c <_gp+0xfffec4dc>
   10e24:	0015ce80 	call	15ce8 <__errno>
   10e28:	00c00884 	movi	r3,34
   10e2c:	10c00015 	stw	r3,0(r2)
   10e30:	003fb806 	br	10d14 <_gp+0xfffec464>
   10e34:	00c000c4 	movi	r3,3
   10e38:	d8c00015 	stw	r3,0(sp)
   10e3c:	90800017 	ldw	r2,0(r18)
   10e40:	00c000b4 	movhi	r3,2
   10e44:	18eb3c04 	addi	r3,r3,-21264
   10e48:	d8c00115 	stw	r3,4(sp)
   10e4c:	d8000815 	stw	zero,32(sp)
   10e50:	ddc00215 	stw	r23,8(sp)
   10e54:	dd800315 	stw	r22,12(sp)
   10e58:	dd400415 	stw	r21,16(sp)
   10e5c:	dd000515 	stw	r20,20(sp)
   10e60:	000d883a 	mov	r6,zero
   10e64:	000f883a 	mov	r7,zero
   10e68:	b809883a 	mov	r4,r23
   10e6c:	b00b883a 	mov	r5,r22
   10e70:	1000181e 	bne	r2,zero,10ed4 <pow+0x3f8>
   10e74:	00b80034 	movhi	r2,57344
   10e78:	d8800615 	stw	r2,24(sp)
   10e7c:	0091fc34 	movhi	r2,18416
   10e80:	10bfffc4 	addi	r2,r2,-1
   10e84:	d8800715 	stw	r2,28(sp)
   10e88:	00145bc0 	call	145bc <__ledf2>
   10e8c:	10001a16 	blt	r2,zero,10ef8 <pow+0x41c>
   10e90:	d809883a 	mov	r4,sp
   10e94:	00123700 	call	12370 <matherr>
   10e98:	103f551e 	bne	r2,zero,10bf0 <_gp+0xfffec340>
   10e9c:	0015ce80 	call	15ce8 <__errno>
   10ea0:	00c00884 	movi	r3,34
   10ea4:	10c00015 	stw	r3,0(r2)
   10ea8:	003f5106 	br	10bf0 <_gp+0xfffec340>
   10eac:	000d883a 	mov	r6,zero
   10eb0:	000f883a 	mov	r7,zero
   10eb4:	0009883a 	mov	r4,zero
   10eb8:	000b883a 	mov	r5,zero
   10ebc:	0013a880 	call	13a88 <__divdf3>
   10ec0:	d8800615 	stw	r2,24(sp)
   10ec4:	d8c00715 	stw	r3,28(sp)
   10ec8:	00800084 	movi	r2,2
   10ecc:	80bfaf26 	beq	r16,r2,10d8c <_gp+0xfffec4dc>
   10ed0:	003fd006 	br	10e14 <_gp+0xfffec564>
   10ed4:	009ffc34 	movhi	r2,32752
   10ed8:	d8000615 	stw	zero,24(sp)
   10edc:	d8800715 	stw	r2,28(sp)
   10ee0:	00145bc0 	call	145bc <__ledf2>
   10ee4:	10001a16 	blt	r2,zero,10f50 <pow+0x474>
   10ee8:	90c00017 	ldw	r3,0(r18)
   10eec:	00800084 	movi	r2,2
   10ef0:	18bfe71e 	bne	r3,r2,10e90 <_gp+0xfffec5e0>
   10ef4:	003fe906 	br	10e9c <_gp+0xfffec5ec>
   10ef8:	000d883a 	mov	r6,zero
   10efc:	01cff834 	movhi	r7,16352
   10f00:	a809883a 	mov	r4,r21
   10f04:	a00b883a 	mov	r5,r20
   10f08:	00146b00 	call	146b0 <__muldf3>
   10f0c:	1009883a 	mov	r4,r2
   10f10:	180b883a 	mov	r5,r3
   10f14:	1023883a 	mov	r17,r2
   10f18:	1821883a 	mov	r16,r3
   10f1c:	00123840 	call	12384 <rint>
   10f20:	100d883a 	mov	r6,r2
   10f24:	180f883a 	mov	r7,r3
   10f28:	8809883a 	mov	r4,r17
   10f2c:	800b883a 	mov	r5,r16
   10f30:	00144580 	call	14458 <__eqdf2>
   10f34:	103fec26 	beq	r2,zero,10ee8 <_gp+0xfffec638>
   10f38:	00b80034 	movhi	r2,57344
   10f3c:	d8800615 	stw	r2,24(sp)
   10f40:	00b1fc34 	movhi	r2,51184
   10f44:	10bfffc4 	addi	r2,r2,-1
   10f48:	d8800715 	stw	r2,28(sp)
   10f4c:	003fe606 	br	10ee8 <_gp+0xfffec638>
   10f50:	000d883a 	mov	r6,zero
   10f54:	01cff834 	movhi	r7,16352
   10f58:	a809883a 	mov	r4,r21
   10f5c:	a00b883a 	mov	r5,r20
   10f60:	00146b00 	call	146b0 <__muldf3>
   10f64:	1009883a 	mov	r4,r2
   10f68:	180b883a 	mov	r5,r3
   10f6c:	1023883a 	mov	r17,r2
   10f70:	1821883a 	mov	r16,r3
   10f74:	00123840 	call	12384 <rint>
   10f78:	100d883a 	mov	r6,r2
   10f7c:	180f883a 	mov	r7,r3
   10f80:	8809883a 	mov	r4,r17
   10f84:	800b883a 	mov	r5,r16
   10f88:	00144580 	call	14458 <__eqdf2>
   10f8c:	103fd626 	beq	r2,zero,10ee8 <_gp+0xfffec638>
   10f90:	00bffc34 	movhi	r2,65520
   10f94:	d8000615 	stw	zero,24(sp)
   10f98:	d8800715 	stw	r2,28(sp)
   10f9c:	003fd206 	br	10ee8 <_gp+0xfffec638>

00010fa0 <__ieee754_pow>:
   10fa0:	00a00034 	movhi	r2,32768
   10fa4:	deffea04 	addi	sp,sp,-88
   10fa8:	10bfffc4 	addi	r2,r2,-1
   10fac:	dc800e15 	stw	r18,56(sp)
   10fb0:	38a4703a 	and	r18,r7,r2
   10fb4:	dfc01515 	stw	ra,84(sp)
   10fb8:	df001415 	stw	fp,80(sp)
   10fbc:	ddc01315 	stw	r23,76(sp)
   10fc0:	dd801215 	stw	r22,72(sp)
   10fc4:	dd401115 	stw	r21,68(sp)
   10fc8:	dd001015 	stw	r20,64(sp)
   10fcc:	dcc00f15 	stw	r19,60(sp)
   10fd0:	dc400d15 	stw	r17,52(sp)
   10fd4:	dc000c15 	stw	r16,48(sp)
   10fd8:	9186b03a 	or	r3,r18,r6
   10fdc:	18002a26 	beq	r3,zero,11088 <__ieee754_pow+0xe8>
   10fe0:	28a2703a 	and	r17,r5,r2
   10fe4:	009ffc34 	movhi	r2,32752
   10fe8:	14402316 	blt	r2,r17,11078 <__ieee754_pow+0xd8>
   10fec:	88802126 	beq	r17,r2,11074 <__ieee754_pow+0xd4>
   10ff0:	14802116 	blt	r2,r18,11078 <__ieee754_pow+0xd8>
   10ff4:	009ffc34 	movhi	r2,32752
   10ff8:	90807326 	beq	r18,r2,111c8 <__ieee754_pow+0x228>
   10ffc:	2827883a 	mov	r19,r5
   11000:	2021883a 	mov	r16,r4
   11004:	302d883a 	mov	r22,r6
   11008:	3839883a 	mov	fp,r7
   1100c:	28007016 	blt	r5,zero,111d0 <__ieee754_pow+0x230>
   11010:	002b883a 	mov	r21,zero
   11014:	b0003a1e 	bne	r22,zero,11100 <__ieee754_pow+0x160>
   11018:	009ffc34 	movhi	r2,32752
   1101c:	90807f26 	beq	r18,r2,1121c <__ieee754_pow+0x27c>
   11020:	008ffc34 	movhi	r2,16368
   11024:	90805426 	beq	r18,r2,11178 <__ieee754_pow+0x1d8>
   11028:	00900034 	movhi	r2,16384
   1102c:	e0833b26 	beq	fp,r2,11d1c <__ieee754_pow+0xd7c>
   11030:	008ff834 	movhi	r2,16352
   11034:	e080321e 	bne	fp,r2,11100 <__ieee754_pow+0x160>
   11038:	98003116 	blt	r19,zero,11100 <__ieee754_pow+0x160>
   1103c:	8009883a 	mov	r4,r16
   11040:	980b883a 	mov	r5,r19
   11044:	dfc01517 	ldw	ra,84(sp)
   11048:	df001417 	ldw	fp,80(sp)
   1104c:	ddc01317 	ldw	r23,76(sp)
   11050:	dd801217 	ldw	r22,72(sp)
   11054:	dd401117 	ldw	r21,68(sp)
   11058:	dd001017 	ldw	r20,64(sp)
   1105c:	dcc00f17 	ldw	r19,60(sp)
   11060:	dc800e17 	ldw	r18,56(sp)
   11064:	dc400d17 	ldw	r17,52(sp)
   11068:	dc000c17 	ldw	r16,48(sp)
   1106c:	dec01604 	addi	sp,sp,88
   11070:	00120441 	jmpi	12044 <__ieee754_sqrt>
   11074:	20001226 	beq	r4,zero,110c0 <__ieee754_pow+0x120>
   11078:	00b00434 	movhi	r2,49168
   1107c:	8885883a 	add	r2,r17,r2
   11080:	1108b03a 	or	r4,r2,r4
   11084:	20000f1e 	bne	r4,zero,110c4 <__ieee754_pow+0x124>
   11088:	0005883a 	mov	r2,zero
   1108c:	00cffc34 	movhi	r3,16368
   11090:	dfc01517 	ldw	ra,84(sp)
   11094:	df001417 	ldw	fp,80(sp)
   11098:	ddc01317 	ldw	r23,76(sp)
   1109c:	dd801217 	ldw	r22,72(sp)
   110a0:	dd401117 	ldw	r21,68(sp)
   110a4:	dd001017 	ldw	r20,64(sp)
   110a8:	dcc00f17 	ldw	r19,60(sp)
   110ac:	dc800e17 	ldw	r18,56(sp)
   110b0:	dc400d17 	ldw	r17,52(sp)
   110b4:	dc000c17 	ldw	r16,48(sp)
   110b8:	dec01604 	addi	sp,sp,88
   110bc:	f800283a 	ret
   110c0:	8cbfcc0e 	bge	r17,r18,10ff4 <_gp+0xfffec744>
   110c4:	010000b4 	movhi	r4,2
   110c8:	212b3d04 	addi	r4,r4,-21260
   110cc:	dfc01517 	ldw	ra,84(sp)
   110d0:	df001417 	ldw	fp,80(sp)
   110d4:	ddc01317 	ldw	r23,76(sp)
   110d8:	dd801217 	ldw	r22,72(sp)
   110dc:	dd401117 	ldw	r21,68(sp)
   110e0:	dd001017 	ldw	r20,64(sp)
   110e4:	dcc00f17 	ldw	r19,60(sp)
   110e8:	dc800e17 	ldw	r18,56(sp)
   110ec:	dc400d17 	ldw	r17,52(sp)
   110f0:	dc000c17 	ldw	r16,48(sp)
   110f4:	dec01604 	addi	sp,sp,88
   110f8:	00123781 	jmpi	12378 <nan>
   110fc:	002b883a 	mov	r21,zero
   11100:	8009883a 	mov	r4,r16
   11104:	980b883a 	mov	r5,r19
   11108:	00122cc0 	call	122cc <fabs>
   1110c:	102f883a 	mov	r23,r2
   11110:	80000f26 	beq	r16,zero,11150 <__ieee754_pow+0x1b0>
   11114:	9816d7fa 	srli	r11,r19,31
   11118:	5affffc4 	addi	r11,r11,-1
   1111c:	aac4b03a 	or	r2,r21,r11
   11120:	10004b26 	beq	r2,zero,11250 <__ieee754_pow+0x2b0>
   11124:	00907834 	movhi	r2,16864
   11128:	1480540e 	bge	r2,r18,1127c <__ieee754_pow+0x2dc>
   1112c:	0090fc34 	movhi	r2,17392
   11130:	14832d0e 	bge	r2,r18,11de8 <__ieee754_pow+0xe48>
   11134:	008ffc34 	movhi	r2,16368
   11138:	10bfffc4 	addi	r2,r2,-1
   1113c:	14401916 	blt	r2,r17,111a4 <__ieee754_pow+0x204>
   11140:	e0001916 	blt	fp,zero,111a8 <__ieee754_pow+0x208>
   11144:	0005883a 	mov	r2,zero
   11148:	0007883a 	mov	r3,zero
   1114c:	003fd006 	br	11090 <_gp+0xfffec7e0>
   11150:	88000526 	beq	r17,zero,11168 <__ieee754_pow+0x1c8>
   11154:	00900034 	movhi	r2,16384
   11158:	10bfffc4 	addi	r2,r2,-1
   1115c:	9884703a 	and	r2,r19,r2
   11160:	010ffc34 	movhi	r4,16368
   11164:	113feb1e 	bne	r2,r4,11114 <_gp+0xfffec864>
   11168:	e0000716 	blt	fp,zero,11188 <__ieee754_pow+0x1e8>
   1116c:	9802e216 	blt	r19,zero,11cf8 <__ieee754_pow+0xd58>
   11170:	b805883a 	mov	r2,r23
   11174:	003fc606 	br	11090 <_gp+0xfffec7e0>
   11178:	e0037516 	blt	fp,zero,11f50 <__ieee754_pow+0xfb0>
   1117c:	8005883a 	mov	r2,r16
   11180:	9807883a 	mov	r3,r19
   11184:	003fc206 	br	11090 <_gp+0xfffec7e0>
   11188:	b80d883a 	mov	r6,r23
   1118c:	180f883a 	mov	r7,r3
   11190:	0009883a 	mov	r4,zero
   11194:	014ffc34 	movhi	r5,16368
   11198:	0013a880 	call	13a88 <__divdf3>
   1119c:	102f883a 	mov	r23,r2
   111a0:	003ff206 	br	1116c <_gp+0xfffec8bc>
   111a4:	073fe70e 	bge	zero,fp,11144 <_gp+0xfffec894>
   111a8:	01a20034 	movhi	r6,34816
   111ac:	01df8e34 	movhi	r7,32312
   111b0:	319d6704 	addi	r6,r6,30108
   111b4:	39f90f04 	addi	r7,r7,-7108
   111b8:	3009883a 	mov	r4,r6
   111bc:	380b883a 	mov	r5,r7
   111c0:	00146b00 	call	146b0 <__muldf3>
   111c4:	003fb206 	br	11090 <_gp+0xfffec7e0>
   111c8:	303f8c26 	beq	r6,zero,10ffc <_gp+0xfffec74c>
   111cc:	003faa06 	br	11078 <_gp+0xfffec7c8>
   111d0:	0090d034 	movhi	r2,17216
   111d4:	10bfffc4 	addi	r2,r2,-1
   111d8:	14801b16 	blt	r2,r18,11248 <__ieee754_pow+0x2a8>
   111dc:	008ffc34 	movhi	r2,16368
   111e0:	10bfffc4 	addi	r2,r2,-1
   111e4:	14bf8a0e 	bge	r2,r18,11010 <_gp+0xfffec760>
   111e8:	9005d53a 	srai	r2,r18,20
   111ec:	00c00504 	movi	r3,20
   111f0:	10bf0044 	addi	r2,r2,-1023
   111f4:	18836b0e 	bge	r3,r2,11fa4 <__ieee754_pow+0x1004>
   111f8:	00c00d04 	movi	r3,52
   111fc:	1885c83a 	sub	r2,r3,r2
   11200:	3086d83a 	srl	r3,r6,r2
   11204:	1884983a 	sll	r2,r3,r2
   11208:	30bf811e 	bne	r6,r2,11010 <_gp+0xfffec760>
   1120c:	18c0004c 	andi	r3,r3,1
   11210:	02800084 	movi	r10,2
   11214:	50ebc83a 	sub	r21,r10,r3
   11218:	003f7e06 	br	11014 <_gp+0xfffec764>
   1121c:	01300434 	movhi	r4,49168
   11220:	8909883a 	add	r4,r17,r4
   11224:	2408b03a 	or	r4,r4,r16
   11228:	203f9726 	beq	r4,zero,11088 <_gp+0xfffec7d8>
   1122c:	008ffc34 	movhi	r2,16368
   11230:	10bfffc4 	addi	r2,r2,-1
   11234:	1442e60e 	bge	r2,r17,11dd0 <__ieee754_pow+0xe30>
   11238:	e03fc216 	blt	fp,zero,11144 <_gp+0xfffec894>
   1123c:	0005883a 	mov	r2,zero
   11240:	e007883a 	mov	r3,fp
   11244:	003f9206 	br	11090 <_gp+0xfffec7e0>
   11248:	05400084 	movi	r21,2
   1124c:	003f7106 	br	11014 <_gp+0xfffec764>
   11250:	800d883a 	mov	r6,r16
   11254:	980f883a 	mov	r7,r19
   11258:	3009883a 	mov	r4,r6
   1125c:	380b883a 	mov	r5,r7
   11260:	0014f1c0 	call	14f1c <__subdf3>
   11264:	100d883a 	mov	r6,r2
   11268:	180f883a 	mov	r7,r3
   1126c:	1009883a 	mov	r4,r2
   11270:	180b883a 	mov	r5,r3
   11274:	0013a880 	call	13a88 <__divdf3>
   11278:	003f8506 	br	11090 <_gp+0xfffec7e0>
   1127c:	00800434 	movhi	r2,16
   11280:	10bfffc4 	addi	r2,r2,-1
   11284:	1442d616 	blt	r2,r17,11de0 <__ieee754_pow+0xe40>
   11288:	b809883a 	mov	r4,r23
   1128c:	000d883a 	mov	r6,zero
   11290:	01d0d034 	movhi	r7,17216
   11294:	180b883a 	mov	r5,r3
   11298:	dac00b15 	stw	r11,44(sp)
   1129c:	00146b00 	call	146b0 <__muldf3>
   112a0:	dac00b17 	ldw	r11,44(sp)
   112a4:	102f883a 	mov	r23,r2
   112a8:	1823883a 	mov	r17,r3
   112ac:	033ff2c4 	movi	r12,-53
   112b0:	8807d53a 	srai	r3,r17,20
   112b4:	00800434 	movhi	r2,16
   112b8:	10bfffc4 	addi	r2,r2,-1
   112bc:	18ff0044 	addi	r3,r3,-1023
   112c0:	1b19883a 	add	r12,r3,r12
   112c4:	00c00134 	movhi	r3,4
   112c8:	8884703a 	and	r2,r17,r2
   112cc:	18e62384 	addi	r3,r3,-26482
   112d0:	150ffc34 	orhi	r20,r2,16368
   112d4:	1880060e 	bge	r3,r2,112f0 <__ieee754_pow+0x350>
   112d8:	00c00334 	movhi	r3,12
   112dc:	18ed9e44 	addi	r3,r3,-18823
   112e0:	18833f0e 	bge	r3,r2,11fe0 <__ieee754_pow+0x1040>
   112e4:	00bffc34 	movhi	r2,65520
   112e8:	63000044 	addi	r12,r12,1
   112ec:	a0a9883a 	add	r20,r20,r2
   112f0:	0027883a 	mov	r19,zero
   112f4:	d8000215 	stw	zero,8(sp)
   112f8:	0013883a 	mov	r9,zero
   112fc:	0011883a 	mov	r8,zero
   11300:	0015883a 	mov	r10,zero
   11304:	048ffc34 	movhi	r18,16368
   11308:	900f883a 	mov	r7,r18
   1130c:	b809883a 	mov	r4,r23
   11310:	a00b883a 	mov	r5,r20
   11314:	000d883a 	mov	r6,zero
   11318:	da000a15 	stw	r8,40(sp)
   1131c:	da400815 	stw	r9,32(sp)
   11320:	dac00b15 	stw	r11,44(sp)
   11324:	db000915 	stw	r12,36(sp)
   11328:	da800515 	stw	r10,20(sp)
   1132c:	0014f1c0 	call	14f1c <__subdf3>
   11330:	b809883a 	mov	r4,r23
   11334:	a00b883a 	mov	r5,r20
   11338:	900f883a 	mov	r7,r18
   1133c:	000d883a 	mov	r6,zero
   11340:	d8800015 	stw	r2,0(sp)
   11344:	d8c00115 	stw	r3,4(sp)
   11348:	00131dc0 	call	131dc <__adddf3>
   1134c:	100d883a 	mov	r6,r2
   11350:	180f883a 	mov	r7,r3
   11354:	0009883a 	mov	r4,zero
   11358:	014ffc34 	movhi	r5,16368
   1135c:	0013a880 	call	13a88 <__divdf3>
   11360:	d9000017 	ldw	r4,0(sp)
   11364:	d9400117 	ldw	r5,4(sp)
   11368:	100d883a 	mov	r6,r2
   1136c:	180f883a 	mov	r7,r3
   11370:	d8c00715 	stw	r3,28(sp)
   11374:	d8800615 	stw	r2,24(sp)
   11378:	00146b00 	call	146b0 <__muldf3>
   1137c:	1023883a 	mov	r17,r2
   11380:	a005d07a 	srai	r2,r20,1
   11384:	da800517 	ldw	r10,20(sp)
   11388:	1821883a 	mov	r16,r3
   1138c:	10c80034 	orhi	r3,r2,8192
   11390:	00800234 	movhi	r2,8
   11394:	1885883a 	add	r2,r3,r2
   11398:	1295883a 	add	r10,r2,r10
   1139c:	500f883a 	mov	r7,r10
   113a0:	800b883a 	mov	r5,r16
   113a4:	000d883a 	mov	r6,zero
   113a8:	0009883a 	mov	r4,zero
   113ac:	da800515 	stw	r10,20(sp)
   113b0:	00146b00 	call	146b0 <__muldf3>
   113b4:	d9000017 	ldw	r4,0(sp)
   113b8:	d9400117 	ldw	r5,4(sp)
   113bc:	100d883a 	mov	r6,r2
   113c0:	180f883a 	mov	r7,r3
   113c4:	0014f1c0 	call	14f1c <__subdf3>
   113c8:	da800517 	ldw	r10,20(sp)
   113cc:	900f883a 	mov	r7,r18
   113d0:	000d883a 	mov	r6,zero
   113d4:	500b883a 	mov	r5,r10
   113d8:	0009883a 	mov	r4,zero
   113dc:	d8800015 	stw	r2,0(sp)
   113e0:	d8c00515 	stw	r3,20(sp)
   113e4:	0014f1c0 	call	14f1c <__subdf3>
   113e8:	b809883a 	mov	r4,r23
   113ec:	a00b883a 	mov	r5,r20
   113f0:	100d883a 	mov	r6,r2
   113f4:	180f883a 	mov	r7,r3
   113f8:	0014f1c0 	call	14f1c <__subdf3>
   113fc:	800f883a 	mov	r7,r16
   11400:	000d883a 	mov	r6,zero
   11404:	1009883a 	mov	r4,r2
   11408:	180b883a 	mov	r5,r3
   1140c:	00146b00 	call	146b0 <__muldf3>
   11410:	db400517 	ldw	r13,20(sp)
   11414:	d9000017 	ldw	r4,0(sp)
   11418:	100d883a 	mov	r6,r2
   1141c:	680b883a 	mov	r5,r13
   11420:	180f883a 	mov	r7,r3
   11424:	0014f1c0 	call	14f1c <__subdf3>
   11428:	dbc00617 	ldw	r15,24(sp)
   1142c:	db800717 	ldw	r14,28(sp)
   11430:	1009883a 	mov	r4,r2
   11434:	780d883a 	mov	r6,r15
   11438:	700f883a 	mov	r7,r14
   1143c:	180b883a 	mov	r5,r3
   11440:	00146b00 	call	146b0 <__muldf3>
   11444:	880d883a 	mov	r6,r17
   11448:	800f883a 	mov	r7,r16
   1144c:	8809883a 	mov	r4,r17
   11450:	800b883a 	mov	r5,r16
   11454:	d8800015 	stw	r2,0(sp)
   11458:	d8c00115 	stw	r3,4(sp)
   1145c:	00146b00 	call	146b0 <__muldf3>
   11460:	01929174 	movhi	r6,19013
   11464:	01cff2b4 	movhi	r7,16330
   11468:	3193bbc4 	addi	r6,r6,20207
   1146c:	39df8a04 	addi	r7,r7,32296
   11470:	1009883a 	mov	r4,r2
   11474:	180b883a 	mov	r5,r3
   11478:	102f883a 	mov	r23,r2
   1147c:	1829883a 	mov	r20,r3
   11480:	00146b00 	call	146b0 <__muldf3>
   11484:	01a4f2b4 	movhi	r6,37834
   11488:	01cff3b4 	movhi	r7,16334
   1148c:	31b6d944 	addi	r6,r6,-9371
   11490:	39e19284 	addi	r7,r7,-31158
   11494:	1009883a 	mov	r4,r2
   11498:	180b883a 	mov	r5,r3
   1149c:	00131dc0 	call	131dc <__adddf3>
   114a0:	b80d883a 	mov	r6,r23
   114a4:	a00f883a 	mov	r7,r20
   114a8:	1009883a 	mov	r4,r2
   114ac:	180b883a 	mov	r5,r3
   114b0:	00146b00 	call	146b0 <__muldf3>
   114b4:	01aa4774 	movhi	r6,43293
   114b8:	01cff474 	movhi	r7,16337
   114bc:	31904044 	addi	r6,r6,16641
   114c0:	39dd1804 	addi	r7,r7,29792
   114c4:	1009883a 	mov	r4,r2
   114c8:	180b883a 	mov	r5,r3
   114cc:	00131dc0 	call	131dc <__adddf3>
   114d0:	b80d883a 	mov	r6,r23
   114d4:	a00f883a 	mov	r7,r20
   114d8:	1009883a 	mov	r4,r2
   114dc:	180b883a 	mov	r5,r3
   114e0:	00146b00 	call	146b0 <__muldf3>
   114e4:	019463f4 	movhi	r6,20879
   114e8:	01cff574 	movhi	r7,16341
   114ec:	31899344 	addi	r6,r6,9805
   114f0:	39d55544 	addi	r7,r7,21845
   114f4:	1009883a 	mov	r4,r2
   114f8:	180b883a 	mov	r5,r3
   114fc:	00131dc0 	call	131dc <__adddf3>
   11500:	b80d883a 	mov	r6,r23
   11504:	a00f883a 	mov	r7,r20
   11508:	1009883a 	mov	r4,r2
   1150c:	180b883a 	mov	r5,r3
   11510:	00146b00 	call	146b0 <__muldf3>
   11514:	01b6dc34 	movhi	r6,56176
   11518:	01cff6f4 	movhi	r7,16347
   1151c:	31aaffc4 	addi	r6,r6,-21505
   11520:	39db6d84 	addi	r7,r7,28086
   11524:	1009883a 	mov	r4,r2
   11528:	180b883a 	mov	r5,r3
   1152c:	00131dc0 	call	131dc <__adddf3>
   11530:	b80d883a 	mov	r6,r23
   11534:	a00f883a 	mov	r7,r20
   11538:	1009883a 	mov	r4,r2
   1153c:	180b883a 	mov	r5,r3
   11540:	00146b00 	call	146b0 <__muldf3>
   11544:	018cccf4 	movhi	r6,13107
   11548:	01cff8f4 	movhi	r7,16355
   1154c:	318cc0c4 	addi	r6,r6,13059
   11550:	39ccccc4 	addi	r7,r7,13107
   11554:	1009883a 	mov	r4,r2
   11558:	180b883a 	mov	r5,r3
   1155c:	00131dc0 	call	131dc <__adddf3>
   11560:	b80d883a 	mov	r6,r23
   11564:	a00f883a 	mov	r7,r20
   11568:	b809883a 	mov	r4,r23
   1156c:	a00b883a 	mov	r5,r20
   11570:	1825883a 	mov	r18,r3
   11574:	d8800515 	stw	r2,20(sp)
   11578:	00146b00 	call	146b0 <__muldf3>
   1157c:	db400517 	ldw	r13,20(sp)
   11580:	900b883a 	mov	r5,r18
   11584:	100d883a 	mov	r6,r2
   11588:	6809883a 	mov	r4,r13
   1158c:	180f883a 	mov	r7,r3
   11590:	00146b00 	call	146b0 <__muldf3>
   11594:	800f883a 	mov	r7,r16
   11598:	8809883a 	mov	r4,r17
   1159c:	800b883a 	mov	r5,r16
   115a0:	000d883a 	mov	r6,zero
   115a4:	102f883a 	mov	r23,r2
   115a8:	1829883a 	mov	r20,r3
   115ac:	00131dc0 	call	131dc <__adddf3>
   115b0:	d9800017 	ldw	r6,0(sp)
   115b4:	d9c00117 	ldw	r7,4(sp)
   115b8:	1009883a 	mov	r4,r2
   115bc:	180b883a 	mov	r5,r3
   115c0:	00146b00 	call	146b0 <__muldf3>
   115c4:	b80d883a 	mov	r6,r23
   115c8:	a00f883a 	mov	r7,r20
   115cc:	1009883a 	mov	r4,r2
   115d0:	180b883a 	mov	r5,r3
   115d4:	00131dc0 	call	131dc <__adddf3>
   115d8:	800f883a 	mov	r7,r16
   115dc:	800b883a 	mov	r5,r16
   115e0:	000d883a 	mov	r6,zero
   115e4:	0009883a 	mov	r4,zero
   115e8:	1025883a 	mov	r18,r2
   115ec:	182f883a 	mov	r23,r3
   115f0:	00146b00 	call	146b0 <__muldf3>
   115f4:	000d883a 	mov	r6,zero
   115f8:	01d00234 	movhi	r7,16392
   115fc:	1009883a 	mov	r4,r2
   11600:	180b883a 	mov	r5,r3
   11604:	d8c00715 	stw	r3,28(sp)
   11608:	d8800615 	stw	r2,24(sp)
   1160c:	00131dc0 	call	131dc <__adddf3>
   11610:	900d883a 	mov	r6,r18
   11614:	b80f883a 	mov	r7,r23
   11618:	1009883a 	mov	r4,r2
   1161c:	180b883a 	mov	r5,r3
   11620:	00131dc0 	call	131dc <__adddf3>
   11624:	800b883a 	mov	r5,r16
   11628:	000d883a 	mov	r6,zero
   1162c:	180f883a 	mov	r7,r3
   11630:	0009883a 	mov	r4,zero
   11634:	1829883a 	mov	r20,r3
   11638:	00146b00 	call	146b0 <__muldf3>
   1163c:	a00b883a 	mov	r5,r20
   11640:	000d883a 	mov	r6,zero
   11644:	01d00234 	movhi	r7,16392
   11648:	0009883a 	mov	r4,zero
   1164c:	d8800315 	stw	r2,12(sp)
   11650:	d8c00415 	stw	r3,16(sp)
   11654:	0014f1c0 	call	14f1c <__subdf3>
   11658:	dbc00617 	ldw	r15,24(sp)
   1165c:	db800717 	ldw	r14,28(sp)
   11660:	1009883a 	mov	r4,r2
   11664:	780d883a 	mov	r6,r15
   11668:	700f883a 	mov	r7,r14
   1166c:	180b883a 	mov	r5,r3
   11670:	0014f1c0 	call	14f1c <__subdf3>
   11674:	9009883a 	mov	r4,r18
   11678:	b80b883a 	mov	r5,r23
   1167c:	100d883a 	mov	r6,r2
   11680:	180f883a 	mov	r7,r3
   11684:	0014f1c0 	call	14f1c <__subdf3>
   11688:	880d883a 	mov	r6,r17
   1168c:	800f883a 	mov	r7,r16
   11690:	1009883a 	mov	r4,r2
   11694:	180b883a 	mov	r5,r3
   11698:	00146b00 	call	146b0 <__muldf3>
   1169c:	d9000017 	ldw	r4,0(sp)
   116a0:	d9400117 	ldw	r5,4(sp)
   116a4:	a00f883a 	mov	r7,r20
   116a8:	000d883a 	mov	r6,zero
   116ac:	1023883a 	mov	r17,r2
   116b0:	1821883a 	mov	r16,r3
   116b4:	00146b00 	call	146b0 <__muldf3>
   116b8:	8809883a 	mov	r4,r17
   116bc:	800b883a 	mov	r5,r16
   116c0:	100d883a 	mov	r6,r2
   116c4:	180f883a 	mov	r7,r3
   116c8:	00131dc0 	call	131dc <__adddf3>
   116cc:	d9000317 	ldw	r4,12(sp)
   116d0:	d9400417 	ldw	r5,16(sp)
   116d4:	100d883a 	mov	r6,r2
   116d8:	180f883a 	mov	r7,r3
   116dc:	102f883a 	mov	r23,r2
   116e0:	1823883a 	mov	r17,r3
   116e4:	00131dc0 	call	131dc <__adddf3>
   116e8:	01cffbf4 	movhi	r7,16367
   116ec:	39f1c244 	addi	r7,r7,-14583
   116f0:	0009883a 	mov	r4,zero
   116f4:	180b883a 	mov	r5,r3
   116f8:	01b80034 	movhi	r6,57344
   116fc:	1821883a 	mov	r16,r3
   11700:	00146b00 	call	146b0 <__muldf3>
   11704:	d9800317 	ldw	r6,12(sp)
   11708:	d9c00417 	ldw	r7,16(sp)
   1170c:	800b883a 	mov	r5,r16
   11710:	0009883a 	mov	r4,zero
   11714:	1825883a 	mov	r18,r3
   11718:	d8800015 	stw	r2,0(sp)
   1171c:	0014f1c0 	call	14f1c <__subdf3>
   11720:	b809883a 	mov	r4,r23
   11724:	880b883a 	mov	r5,r17
   11728:	100d883a 	mov	r6,r2
   1172c:	180f883a 	mov	r7,r3
   11730:	0014f1c0 	call	14f1c <__subdf3>
   11734:	01b70eb4 	movhi	r6,56378
   11738:	01cffbf4 	movhi	r7,16367
   1173c:	3180ff44 	addi	r6,r6,1021
   11740:	39f1c244 	addi	r7,r7,-14583
   11744:	1009883a 	mov	r4,r2
   11748:	180b883a 	mov	r5,r3
   1174c:	00146b00 	call	146b0 <__muldf3>
   11750:	018516f4 	movhi	r6,5211
   11754:	01ef8fb4 	movhi	r7,48702
   11758:	800b883a 	mov	r5,r16
   1175c:	31807d44 	addi	r6,r6,501
   11760:	39cbf804 	addi	r7,r7,12256
   11764:	0009883a 	mov	r4,zero
   11768:	1029883a 	mov	r20,r2
   1176c:	1823883a 	mov	r17,r3
   11770:	00146b00 	call	146b0 <__muldf3>
   11774:	a009883a 	mov	r4,r20
   11778:	880b883a 	mov	r5,r17
   1177c:	100d883a 	mov	r6,r2
   11780:	180f883a 	mov	r7,r3
   11784:	00131dc0 	call	131dc <__adddf3>
   11788:	da400817 	ldw	r9,32(sp)
   1178c:	da000a17 	ldw	r8,40(sp)
   11790:	180b883a 	mov	r5,r3
   11794:	480d883a 	mov	r6,r9
   11798:	400f883a 	mov	r7,r8
   1179c:	1009883a 	mov	r4,r2
   117a0:	00131dc0 	call	131dc <__adddf3>
   117a4:	db000917 	ldw	r12,36(sp)
   117a8:	1029883a 	mov	r20,r2
   117ac:	1823883a 	mov	r17,r3
   117b0:	6009883a 	mov	r4,r12
   117b4:	00158980 	call	15898 <__floatsidf>
   117b8:	d9000017 	ldw	r4,0(sp)
   117bc:	a00d883a 	mov	r6,r20
   117c0:	880f883a 	mov	r7,r17
   117c4:	900b883a 	mov	r5,r18
   117c8:	182f883a 	mov	r23,r3
   117cc:	d8800115 	stw	r2,4(sp)
   117d0:	00131dc0 	call	131dc <__adddf3>
   117d4:	d9c00217 	ldw	r7,8(sp)
   117d8:	980d883a 	mov	r6,r19
   117dc:	1009883a 	mov	r4,r2
   117e0:	180b883a 	mov	r5,r3
   117e4:	00131dc0 	call	131dc <__adddf3>
   117e8:	d9800117 	ldw	r6,4(sp)
   117ec:	b80f883a 	mov	r7,r23
   117f0:	1009883a 	mov	r4,r2
   117f4:	180b883a 	mov	r5,r3
   117f8:	00131dc0 	call	131dc <__adddf3>
   117fc:	d9800117 	ldw	r6,4(sp)
   11800:	b80f883a 	mov	r7,r23
   11804:	0009883a 	mov	r4,zero
   11808:	180b883a 	mov	r5,r3
   1180c:	1821883a 	mov	r16,r3
   11810:	0014f1c0 	call	14f1c <__subdf3>
   11814:	d9c00217 	ldw	r7,8(sp)
   11818:	980d883a 	mov	r6,r19
   1181c:	1009883a 	mov	r4,r2
   11820:	180b883a 	mov	r5,r3
   11824:	0014f1c0 	call	14f1c <__subdf3>
   11828:	d9800017 	ldw	r6,0(sp)
   1182c:	900f883a 	mov	r7,r18
   11830:	1009883a 	mov	r4,r2
   11834:	180b883a 	mov	r5,r3
   11838:	0014f1c0 	call	14f1c <__subdf3>
   1183c:	880b883a 	mov	r5,r17
   11840:	100d883a 	mov	r6,r2
   11844:	180f883a 	mov	r7,r3
   11848:	a009883a 	mov	r4,r20
   1184c:	0014f1c0 	call	14f1c <__subdf3>
   11850:	dac00b17 	ldw	r11,44(sp)
   11854:	aabfffc4 	addi	r10,r21,-1
   11858:	1025883a 	mov	r18,r2
   1185c:	52d6b03a 	or	r11,r10,r11
   11860:	1823883a 	mov	r17,r3
   11864:	58015826 	beq	r11,zero,11dc8 <__ieee754_pow+0xe28>
   11868:	04cffc34 	movhi	r19,16368
   1186c:	b009883a 	mov	r4,r22
   11870:	000d883a 	mov	r6,zero
   11874:	e00f883a 	mov	r7,fp
   11878:	e00b883a 	mov	r5,fp
   1187c:	0014f1c0 	call	14f1c <__subdf3>
   11880:	800f883a 	mov	r7,r16
   11884:	000d883a 	mov	r6,zero
   11888:	1009883a 	mov	r4,r2
   1188c:	180b883a 	mov	r5,r3
   11890:	00146b00 	call	146b0 <__muldf3>
   11894:	b00d883a 	mov	r6,r22
   11898:	9009883a 	mov	r4,r18
   1189c:	880b883a 	mov	r5,r17
   118a0:	e00f883a 	mov	r7,fp
   118a4:	1829883a 	mov	r20,r3
   118a8:	102b883a 	mov	r21,r2
   118ac:	00146b00 	call	146b0 <__muldf3>
   118b0:	a00b883a 	mov	r5,r20
   118b4:	100d883a 	mov	r6,r2
   118b8:	180f883a 	mov	r7,r3
   118bc:	a809883a 	mov	r4,r21
   118c0:	00131dc0 	call	131dc <__adddf3>
   118c4:	800b883a 	mov	r5,r16
   118c8:	000d883a 	mov	r6,zero
   118cc:	e00f883a 	mov	r7,fp
   118d0:	0009883a 	mov	r4,zero
   118d4:	102d883a 	mov	r22,r2
   118d8:	1829883a 	mov	r20,r3
   118dc:	00146b00 	call	146b0 <__muldf3>
   118e0:	100d883a 	mov	r6,r2
   118e4:	180f883a 	mov	r7,r3
   118e8:	b009883a 	mov	r4,r22
   118ec:	a00b883a 	mov	r5,r20
   118f0:	1025883a 	mov	r18,r2
   118f4:	1823883a 	mov	r17,r3
   118f8:	00131dc0 	call	131dc <__adddf3>
   118fc:	102f883a 	mov	r23,r2
   11900:	00902434 	movhi	r2,16528
   11904:	10bfffc4 	addi	r2,r2,-1
   11908:	1821883a 	mov	r16,r3
   1190c:	9013883a 	mov	r9,r18
   11910:	8811883a 	mov	r8,r17
   11914:	10c1070e 	bge	r2,r3,11d34 <__ieee754_pow+0xd94>
   11918:	00afdc34 	movhi	r2,49008
   1191c:	1885883a 	add	r2,r3,r2
   11920:	15c4b03a 	or	r2,r2,r23
   11924:	1001901e 	bne	r2,zero,11f68 <__ieee754_pow+0xfc8>
   11928:	01994b34 	movhi	r6,25900
   1192c:	01cf25f4 	movhi	r7,15511
   11930:	31a0bf84 	addi	r6,r6,-32002
   11934:	39c551c4 	addi	r7,r7,5447
   11938:	b009883a 	mov	r4,r22
   1193c:	a00b883a 	mov	r5,r20
   11940:	00131dc0 	call	131dc <__adddf3>
   11944:	900d883a 	mov	r6,r18
   11948:	880f883a 	mov	r7,r17
   1194c:	b809883a 	mov	r4,r23
   11950:	800b883a 	mov	r5,r16
   11954:	1039883a 	mov	fp,r2
   11958:	182b883a 	mov	r21,r3
   1195c:	0014f1c0 	call	14f1c <__subdf3>
   11960:	100d883a 	mov	r6,r2
   11964:	180f883a 	mov	r7,r3
   11968:	e009883a 	mov	r4,fp
   1196c:	a80b883a 	mov	r5,r21
   11970:	00144e00 	call	144e0 <__gedf2>
   11974:	00817c16 	blt	zero,r2,11f68 <__ieee754_pow+0xfc8>
   11978:	802b883a 	mov	r21,r16
   1197c:	a805d53a 	srai	r2,r21,20
   11980:	00c00434 	movhi	r3,16
   11984:	01000434 	movhi	r4,16
   11988:	10bf0084 	addi	r2,r2,-1022
   1198c:	1885d83a 	sra	r2,r3,r2
   11990:	213fffc4 	addi	r4,r4,-1
   11994:	1405883a 	add	r2,r2,r16
   11998:	1006907a 	slli	r3,r2,1
   1199c:	112a703a 	and	r21,r2,r4
   119a0:	ad400434 	orhi	r21,r21,16
   119a4:	1806d57a 	srli	r3,r3,21
   119a8:	18ff0044 	addi	r3,r3,-1023
   119ac:	20cfd83a 	sra	r7,r4,r3
   119b0:	01000504 	movi	r4,20
   119b4:	20c7c83a 	sub	r3,r4,r3
   119b8:	a8c7d83a 	sra	r3,r21,r3
   119bc:	01ce303a 	nor	r7,zero,r7
   119c0:	388e703a 	and	r7,r7,r2
   119c4:	d8c00015 	stw	r3,0(sp)
   119c8:	80019016 	blt	r16,zero,1200c <__ieee754_pow+0x106c>
   119cc:	000d883a 	mov	r6,zero
   119d0:	9009883a 	mov	r4,r18
   119d4:	880b883a 	mov	r5,r17
   119d8:	0014f1c0 	call	14f1c <__subdf3>
   119dc:	100d883a 	mov	r6,r2
   119e0:	180f883a 	mov	r7,r3
   119e4:	b009883a 	mov	r4,r22
   119e8:	a00b883a 	mov	r5,r20
   119ec:	d8c00a15 	stw	r3,40(sp)
   119f0:	d8800815 	stw	r2,32(sp)
   119f4:	00131dc0 	call	131dc <__adddf3>
   119f8:	d8800017 	ldw	r2,0(sp)
   119fc:	da000a17 	ldw	r8,40(sp)
   11a00:	da400817 	ldw	r9,32(sp)
   11a04:	1004953a 	slli	r2,r2,20
   11a08:	1821883a 	mov	r16,r3
   11a0c:	d8800215 	stw	r2,8(sp)
   11a10:	01cff9b4 	movhi	r7,16358
   11a14:	800b883a 	mov	r5,r16
   11a18:	39cb90c4 	addi	r7,r7,11843
   11a1c:	0009883a 	mov	r4,zero
   11a20:	000d883a 	mov	r6,zero
   11a24:	da000a15 	stw	r8,40(sp)
   11a28:	da400815 	stw	r9,32(sp)
   11a2c:	00146b00 	call	146b0 <__muldf3>
   11a30:	da400817 	ldw	r9,32(sp)
   11a34:	da000a17 	ldw	r8,40(sp)
   11a38:	800b883a 	mov	r5,r16
   11a3c:	480d883a 	mov	r6,r9
   11a40:	400f883a 	mov	r7,r8
   11a44:	0009883a 	mov	r4,zero
   11a48:	1039883a 	mov	fp,r2
   11a4c:	182f883a 	mov	r23,r3
   11a50:	0014f1c0 	call	14f1c <__subdf3>
   11a54:	b009883a 	mov	r4,r22
   11a58:	a00b883a 	mov	r5,r20
   11a5c:	100d883a 	mov	r6,r2
   11a60:	180f883a 	mov	r7,r3
   11a64:	0014f1c0 	call	14f1c <__subdf3>
   11a68:	01bfbeb4 	movhi	r6,65274
   11a6c:	01cff9b4 	movhi	r7,16358
   11a70:	318e7bc4 	addi	r6,r6,14831
   11a74:	39cb9084 	addi	r7,r7,11842
   11a78:	1009883a 	mov	r4,r2
   11a7c:	180b883a 	mov	r5,r3
   11a80:	00146b00 	call	146b0 <__muldf3>
   11a84:	01832a34 	movhi	r6,3240
   11a88:	01ef8834 	movhi	r7,48672
   11a8c:	800b883a 	mov	r5,r16
   11a90:	319b0e44 	addi	r6,r6,27705
   11a94:	39d71844 	addi	r7,r7,23649
   11a98:	0009883a 	mov	r4,zero
   11a9c:	1029883a 	mov	r20,r2
   11aa0:	1823883a 	mov	r17,r3
   11aa4:	00146b00 	call	146b0 <__muldf3>
   11aa8:	a009883a 	mov	r4,r20
   11aac:	880b883a 	mov	r5,r17
   11ab0:	100d883a 	mov	r6,r2
   11ab4:	180f883a 	mov	r7,r3
   11ab8:	00131dc0 	call	131dc <__adddf3>
   11abc:	e009883a 	mov	r4,fp
   11ac0:	b80b883a 	mov	r5,r23
   11ac4:	100d883a 	mov	r6,r2
   11ac8:	180f883a 	mov	r7,r3
   11acc:	102d883a 	mov	r22,r2
   11ad0:	1829883a 	mov	r20,r3
   11ad4:	00131dc0 	call	131dc <__adddf3>
   11ad8:	e00d883a 	mov	r6,fp
   11adc:	b80f883a 	mov	r7,r23
   11ae0:	1009883a 	mov	r4,r2
   11ae4:	180b883a 	mov	r5,r3
   11ae8:	1023883a 	mov	r17,r2
   11aec:	1821883a 	mov	r16,r3
   11af0:	0014f1c0 	call	14f1c <__subdf3>
   11af4:	b009883a 	mov	r4,r22
   11af8:	a00b883a 	mov	r5,r20
   11afc:	100d883a 	mov	r6,r2
   11b00:	180f883a 	mov	r7,r3
   11b04:	0014f1c0 	call	14f1c <__subdf3>
   11b08:	880d883a 	mov	r6,r17
   11b0c:	800f883a 	mov	r7,r16
   11b10:	8809883a 	mov	r4,r17
   11b14:	800b883a 	mov	r5,r16
   11b18:	1039883a 	mov	fp,r2
   11b1c:	182f883a 	mov	r23,r3
   11b20:	00146b00 	call	146b0 <__muldf3>
   11b24:	019caff4 	movhi	r6,29375
   11b28:	01cf99b4 	movhi	r7,15974
   11b2c:	31a93404 	addi	r6,r6,-23344
   11b30:	39cdda44 	addi	r7,r7,14185
   11b34:	1009883a 	mov	r4,r2
   11b38:	180b883a 	mov	r5,r3
   11b3c:	102d883a 	mov	r22,r2
   11b40:	1829883a 	mov	r20,r3
   11b44:	00146b00 	call	146b0 <__muldf3>
   11b48:	01b174b4 	movhi	r6,50642
   11b4c:	01cfaf34 	movhi	r7,16060
   11b50:	319afc44 	addi	r6,r6,27633
   11b54:	39ef5044 	addi	r7,r7,-17087
   11b58:	1009883a 	mov	r4,r2
   11b5c:	180b883a 	mov	r5,r3
   11b60:	0014f1c0 	call	14f1c <__subdf3>
   11b64:	b00d883a 	mov	r6,r22
   11b68:	a00f883a 	mov	r7,r20
   11b6c:	1009883a 	mov	r4,r2
   11b70:	180b883a 	mov	r5,r3
   11b74:	00146b00 	call	146b0 <__muldf3>
   11b78:	01abc9b4 	movhi	r6,44838
   11b7c:	01cfc474 	movhi	r7,16145
   11b80:	31b78b04 	addi	r6,r6,-8660
   11b84:	39d59a84 	addi	r7,r7,22122
   11b88:	1009883a 	mov	r4,r2
   11b8c:	180b883a 	mov	r5,r3
   11b90:	00131dc0 	call	131dc <__adddf3>
   11b94:	b00d883a 	mov	r6,r22
   11b98:	a00f883a 	mov	r7,r20
   11b9c:	1009883a 	mov	r4,r2
   11ba0:	180b883a 	mov	r5,r3
   11ba4:	00146b00 	call	146b0 <__muldf3>
   11ba8:	0185aff4 	movhi	r6,5823
   11bac:	01cfd9f4 	movhi	r7,16231
   11bb0:	31af64c4 	addi	r6,r6,-17005
   11bb4:	39f05b04 	addi	r7,r7,-16020
   11bb8:	1009883a 	mov	r4,r2
   11bbc:	180b883a 	mov	r5,r3
   11bc0:	0014f1c0 	call	14f1c <__subdf3>
   11bc4:	b00d883a 	mov	r6,r22
   11bc8:	a00f883a 	mov	r7,r20
   11bcc:	1009883a 	mov	r4,r2
   11bd0:	180b883a 	mov	r5,r3
   11bd4:	00146b00 	call	146b0 <__muldf3>
   11bd8:	01955574 	movhi	r6,21845
   11bdc:	01cff174 	movhi	r7,16325
   11be0:	31954f84 	addi	r6,r6,21822
   11be4:	39d55544 	addi	r7,r7,21845
   11be8:	1009883a 	mov	r4,r2
   11bec:	180b883a 	mov	r5,r3
   11bf0:	00131dc0 	call	131dc <__adddf3>
   11bf4:	b00d883a 	mov	r6,r22
   11bf8:	a00f883a 	mov	r7,r20
   11bfc:	1009883a 	mov	r4,r2
   11c00:	180b883a 	mov	r5,r3
   11c04:	00146b00 	call	146b0 <__muldf3>
   11c08:	100d883a 	mov	r6,r2
   11c0c:	180f883a 	mov	r7,r3
   11c10:	8809883a 	mov	r4,r17
   11c14:	800b883a 	mov	r5,r16
   11c18:	0014f1c0 	call	14f1c <__subdf3>
   11c1c:	100d883a 	mov	r6,r2
   11c20:	180f883a 	mov	r7,r3
   11c24:	8809883a 	mov	r4,r17
   11c28:	800b883a 	mov	r5,r16
   11c2c:	102d883a 	mov	r22,r2
   11c30:	1829883a 	mov	r20,r3
   11c34:	00146b00 	call	146b0 <__muldf3>
   11c38:	b009883a 	mov	r4,r22
   11c3c:	a00b883a 	mov	r5,r20
   11c40:	000d883a 	mov	r6,zero
   11c44:	01d00034 	movhi	r7,16384
   11c48:	1025883a 	mov	r18,r2
   11c4c:	182b883a 	mov	r21,r3
   11c50:	0014f1c0 	call	14f1c <__subdf3>
   11c54:	100d883a 	mov	r6,r2
   11c58:	180f883a 	mov	r7,r3
   11c5c:	9009883a 	mov	r4,r18
   11c60:	a80b883a 	mov	r5,r21
   11c64:	0013a880 	call	13a88 <__divdf3>
   11c68:	e00d883a 	mov	r6,fp
   11c6c:	b80f883a 	mov	r7,r23
   11c70:	8809883a 	mov	r4,r17
   11c74:	800b883a 	mov	r5,r16
   11c78:	102d883a 	mov	r22,r2
   11c7c:	1829883a 	mov	r20,r3
   11c80:	00146b00 	call	146b0 <__muldf3>
   11c84:	e00d883a 	mov	r6,fp
   11c88:	b80f883a 	mov	r7,r23
   11c8c:	1009883a 	mov	r4,r2
   11c90:	180b883a 	mov	r5,r3
   11c94:	00131dc0 	call	131dc <__adddf3>
   11c98:	100d883a 	mov	r6,r2
   11c9c:	180f883a 	mov	r7,r3
   11ca0:	b009883a 	mov	r4,r22
   11ca4:	a00b883a 	mov	r5,r20
   11ca8:	0014f1c0 	call	14f1c <__subdf3>
   11cac:	880d883a 	mov	r6,r17
   11cb0:	800f883a 	mov	r7,r16
   11cb4:	1009883a 	mov	r4,r2
   11cb8:	180b883a 	mov	r5,r3
   11cbc:	0014f1c0 	call	14f1c <__subdf3>
   11cc0:	0009883a 	mov	r4,zero
   11cc4:	014ffc34 	movhi	r5,16368
   11cc8:	100d883a 	mov	r6,r2
   11ccc:	180f883a 	mov	r7,r3
   11cd0:	0014f1c0 	call	14f1c <__subdf3>
   11cd4:	d9000217 	ldw	r4,8(sp)
   11cd8:	190b883a 	add	r5,r3,r4
   11cdc:	2809d53a 	srai	r4,r5,20
   11ce0:	0100cd0e 	bge	zero,r4,12018 <__ieee754_pow+0x1078>
   11ce4:	1009883a 	mov	r4,r2
   11ce8:	000d883a 	mov	r6,zero
   11cec:	980f883a 	mov	r7,r19
   11cf0:	00146b00 	call	146b0 <__muldf3>
   11cf4:	003ce606 	br	11090 <_gp+0xfffec7e0>
   11cf8:	00b00434 	movhi	r2,49168
   11cfc:	8885883a 	add	r2,r17,r2
   11d00:	1544b03a 	or	r2,r2,r21
   11d04:	1000b326 	beq	r2,zero,11fd4 <__ieee754_pow+0x1034>
   11d08:	00800044 	movi	r2,1
   11d0c:	a8bd181e 	bne	r21,r2,11170 <_gp+0xfffec8c0>
   11d10:	18e0003c 	xorhi	r3,r3,32768
   11d14:	b805883a 	mov	r2,r23
   11d18:	003cdd06 	br	11090 <_gp+0xfffec7e0>
   11d1c:	800d883a 	mov	r6,r16
   11d20:	980f883a 	mov	r7,r19
   11d24:	8009883a 	mov	r4,r16
   11d28:	980b883a 	mov	r5,r19
   11d2c:	00146b00 	call	146b0 <__muldf3>
   11d30:	003cd706 	br	11090 <_gp+0xfffec7e0>
   11d34:	05600034 	movhi	r21,32768
   11d38:	ad7fffc4 	addi	r21,r21,-1
   11d3c:	00902474 	movhi	r2,16529
   11d40:	1d6a703a 	and	r21,r3,r21
   11d44:	10b2ffc4 	addi	r2,r2,-13313
   11d48:	15409d0e 	bge	r2,r21,11fc0 <__ieee754_pow+0x1020>
   11d4c:	008fdbf4 	movhi	r2,16239
   11d50:	108d0004 	addi	r2,r2,13312
   11d54:	1885883a 	add	r2,r3,r2
   11d58:	15c4b03a 	or	r2,r2,r23
   11d5c:	10000b1e 	bne	r2,zero,11d8c <__ieee754_pow+0xdec>
   11d60:	900d883a 	mov	r6,r18
   11d64:	880f883a 	mov	r7,r17
   11d68:	b809883a 	mov	r4,r23
   11d6c:	180b883a 	mov	r5,r3
   11d70:	0014f1c0 	call	14f1c <__subdf3>
   11d74:	100d883a 	mov	r6,r2
   11d78:	180f883a 	mov	r7,r3
   11d7c:	b009883a 	mov	r4,r22
   11d80:	a00b883a 	mov	r5,r20
   11d84:	00145bc0 	call	145bc <__ledf2>
   11d88:	00befc16 	blt	zero,r2,1197c <_gp+0xfffed0cc>
   11d8c:	01b0be74 	movhi	r6,49913
   11d90:	01c06974 	movhi	r7,421
   11d94:	980b883a 	mov	r5,r19
   11d98:	31bcd644 	addi	r6,r6,-3239
   11d9c:	39db87c4 	addi	r7,r7,28191
   11da0:	0009883a 	mov	r4,zero
   11da4:	00146b00 	call	146b0 <__muldf3>
   11da8:	01b0be74 	movhi	r6,49913
   11dac:	01c06974 	movhi	r7,421
   11db0:	31bcd644 	addi	r6,r6,-3239
   11db4:	39db87c4 	addi	r7,r7,28191
   11db8:	1009883a 	mov	r4,r2
   11dbc:	180b883a 	mov	r5,r3
   11dc0:	00146b00 	call	146b0 <__muldf3>
   11dc4:	003cb206 	br	11090 <_gp+0xfffec7e0>
   11dc8:	04effc34 	movhi	r19,49136
   11dcc:	003ea706 	br	1186c <_gp+0xfffecfbc>
   11dd0:	e03cdc0e 	bge	fp,zero,11144 <_gp+0xfffec894>
   11dd4:	0005883a 	mov	r2,zero
   11dd8:	e0e0003c 	xorhi	r3,fp,32768
   11ddc:	003cac06 	br	11090 <_gp+0xfffec7e0>
   11de0:	0019883a 	mov	r12,zero
   11de4:	003d3206 	br	112b0 <_gp+0xfffeca00>
   11de8:	008ffc34 	movhi	r2,16368
   11dec:	10bfff84 	addi	r2,r2,-2
   11df0:	147cd30e 	bge	r2,r17,11140 <_gp+0xfffec890>
   11df4:	01cffc34 	movhi	r7,16368
   11df8:	3c7cea16 	blt	r7,r17,111a4 <_gp+0xfffec8f4>
   11dfc:	b809883a 	mov	r4,r23
   11e00:	000d883a 	mov	r6,zero
   11e04:	180b883a 	mov	r5,r3
   11e08:	dac00b15 	stw	r11,44(sp)
   11e0c:	0014f1c0 	call	14f1c <__subdf3>
   11e10:	01cffdf4 	movhi	r7,16375
   11e14:	39c551c4 	addi	r7,r7,5447
   11e18:	01980034 	movhi	r6,24576
   11e1c:	1009883a 	mov	r4,r2
   11e20:	180b883a 	mov	r5,r3
   11e24:	1023883a 	mov	r17,r2
   11e28:	1821883a 	mov	r16,r3
   11e2c:	00146b00 	call	146b0 <__muldf3>
   11e30:	01be17b4 	movhi	r6,63582
   11e34:	01cf9574 	movhi	r7,15957
   11e38:	8809883a 	mov	r4,r17
   11e3c:	800b883a 	mov	r5,r16
   11e40:	31b7d104 	addi	r6,r6,-8380
   11e44:	39eb82c4 	addi	r7,r7,-20981
   11e48:	1027883a 	mov	r19,r2
   11e4c:	1825883a 	mov	r18,r3
   11e50:	00146b00 	call	146b0 <__muldf3>
   11e54:	8809883a 	mov	r4,r17
   11e58:	800b883a 	mov	r5,r16
   11e5c:	000d883a 	mov	r6,zero
   11e60:	01cff434 	movhi	r7,16336
   11e64:	1829883a 	mov	r20,r3
   11e68:	d8800a15 	stw	r2,40(sp)
   11e6c:	00146b00 	call	146b0 <__muldf3>
   11e70:	01155574 	movhi	r4,21845
   11e74:	014ff574 	movhi	r5,16341
   11e78:	100d883a 	mov	r6,r2
   11e7c:	180f883a 	mov	r7,r3
   11e80:	21155544 	addi	r4,r4,21845
   11e84:	29555544 	addi	r5,r5,21845
   11e88:	0014f1c0 	call	14f1c <__subdf3>
   11e8c:	880d883a 	mov	r6,r17
   11e90:	800f883a 	mov	r7,r16
   11e94:	1009883a 	mov	r4,r2
   11e98:	180b883a 	mov	r5,r3
   11e9c:	00146b00 	call	146b0 <__muldf3>
   11ea0:	100d883a 	mov	r6,r2
   11ea4:	180f883a 	mov	r7,r3
   11ea8:	0009883a 	mov	r4,zero
   11eac:	014ff834 	movhi	r5,16352
   11eb0:	0014f1c0 	call	14f1c <__subdf3>
   11eb4:	880d883a 	mov	r6,r17
   11eb8:	800f883a 	mov	r7,r16
   11ebc:	8809883a 	mov	r4,r17
   11ec0:	800b883a 	mov	r5,r16
   11ec4:	102f883a 	mov	r23,r2
   11ec8:	d8c00815 	stw	r3,32(sp)
   11ecc:	00146b00 	call	146b0 <__muldf3>
   11ed0:	da400817 	ldw	r9,32(sp)
   11ed4:	100d883a 	mov	r6,r2
   11ed8:	180f883a 	mov	r7,r3
   11edc:	480b883a 	mov	r5,r9
   11ee0:	b809883a 	mov	r4,r23
   11ee4:	00146b00 	call	146b0 <__muldf3>
   11ee8:	01994b34 	movhi	r6,25900
   11eec:	01cffdf4 	movhi	r7,16375
   11ef0:	31a0bf84 	addi	r6,r6,-32002
   11ef4:	39c551c4 	addi	r7,r7,5447
   11ef8:	1009883a 	mov	r4,r2
   11efc:	180b883a 	mov	r5,r3
   11f00:	00146b00 	call	146b0 <__muldf3>
   11f04:	da000a17 	ldw	r8,40(sp)
   11f08:	a00b883a 	mov	r5,r20
   11f0c:	100d883a 	mov	r6,r2
   11f10:	4009883a 	mov	r4,r8
   11f14:	180f883a 	mov	r7,r3
   11f18:	0014f1c0 	call	14f1c <__subdf3>
   11f1c:	100d883a 	mov	r6,r2
   11f20:	180f883a 	mov	r7,r3
   11f24:	9809883a 	mov	r4,r19
   11f28:	900b883a 	mov	r5,r18
   11f2c:	1029883a 	mov	r20,r2
   11f30:	1823883a 	mov	r17,r3
   11f34:	00131dc0 	call	131dc <__adddf3>
   11f38:	1821883a 	mov	r16,r3
   11f3c:	980d883a 	mov	r6,r19
   11f40:	900f883a 	mov	r7,r18
   11f44:	0009883a 	mov	r4,zero
   11f48:	180b883a 	mov	r5,r3
   11f4c:	003e3a06 	br	11838 <_gp+0xfffecf88>
   11f50:	800d883a 	mov	r6,r16
   11f54:	980f883a 	mov	r7,r19
   11f58:	0009883a 	mov	r4,zero
   11f5c:	900b883a 	mov	r5,r18
   11f60:	0013a880 	call	13a88 <__divdf3>
   11f64:	003c4a06 	br	11090 <_gp+0xfffec7e0>
   11f68:	01a20034 	movhi	r6,34816
   11f6c:	01df8e34 	movhi	r7,32312
   11f70:	980b883a 	mov	r5,r19
   11f74:	319d6704 	addi	r6,r6,30108
   11f78:	39f90f04 	addi	r7,r7,-7108
   11f7c:	0009883a 	mov	r4,zero
   11f80:	00146b00 	call	146b0 <__muldf3>
   11f84:	01a20034 	movhi	r6,34816
   11f88:	01df8e34 	movhi	r7,32312
   11f8c:	319d6704 	addi	r6,r6,30108
   11f90:	39f90f04 	addi	r7,r7,-7108
   11f94:	1009883a 	mov	r4,r2
   11f98:	180b883a 	mov	r5,r3
   11f9c:	00146b00 	call	146b0 <__muldf3>
   11fa0:	003c3b06 	br	11090 <_gp+0xfffec7e0>
   11fa4:	303c551e 	bne	r6,zero,110fc <_gp+0xfffec84c>
   11fa8:	1885c83a 	sub	r2,r3,r2
   11fac:	9087d83a 	sra	r3,r18,r2
   11fb0:	1884983a 	sll	r2,r3,r2
   11fb4:	90801f26 	beq	r18,r2,12034 <__ieee754_pow+0x1094>
   11fb8:	002b883a 	mov	r21,zero
   11fbc:	003c1806 	br	11020 <_gp+0xfffec770>
   11fc0:	008ff834 	movhi	r2,16352
   11fc4:	157e6d16 	blt	r2,r21,1197c <_gp+0xfffed0cc>
   11fc8:	d8000215 	stw	zero,8(sp)
   11fcc:	d8000015 	stw	zero,0(sp)
   11fd0:	003e8f06 	br	11a10 <_gp+0xfffed160>
   11fd4:	b80d883a 	mov	r6,r23
   11fd8:	180f883a 	mov	r7,r3
   11fdc:	003c9e06 	br	11258 <_gp+0xfffec9a8>
   11fe0:	008ff8f4 	movhi	r2,16355
   11fe4:	10ae00c4 	addi	r2,r2,-18429
   11fe8:	0250f434 	movhi	r9,17360
   11fec:	020f9374 	movhi	r8,15949
   11ff0:	d8800215 	stw	r2,8(sp)
   11ff4:	4a740184 	addi	r9,r9,-12282
   11ff8:	423f7ac4 	addi	r8,r8,-533
   11ffc:	04d00034 	movhi	r19,16384
   12000:	02800134 	movhi	r10,4
   12004:	048ffe34 	movhi	r18,16376
   12008:	003cbf06 	br	11308 <_gp+0xfffeca58>
   1200c:	00c9c83a 	sub	r4,zero,r3
   12010:	d9000015 	stw	r4,0(sp)
   12014:	003e6d06 	br	119cc <_gp+0xfffed11c>
   12018:	d9800017 	ldw	r6,0(sp)
   1201c:	1009883a 	mov	r4,r2
   12020:	180b883a 	mov	r5,r3
   12024:	00125700 	call	12570 <scalbn>
   12028:	1009883a 	mov	r4,r2
   1202c:	180b883a 	mov	r5,r3
   12030:	003f2d06 	br	11ce8 <_gp+0xfffed438>
   12034:	18c0004c 	andi	r3,r3,1
   12038:	02800084 	movi	r10,2
   1203c:	50ebc83a 	sub	r21,r10,r3
   12040:	003bf706 	br	11020 <_gp+0xfffec770>

00012044 <__ieee754_sqrt>:
   12044:	defffd04 	addi	sp,sp,-12
   12048:	dc400115 	stw	r17,4(sp)
   1204c:	dc000015 	stw	r16,0(sp)
   12050:	dfc00215 	stw	ra,8(sp)
   12054:	28dffc2c 	andhi	r3,r5,32752
   12058:	009ffc34 	movhi	r2,32752
   1205c:	2821883a 	mov	r16,r5
   12060:	2023883a 	mov	r17,r4
   12064:	200d883a 	mov	r6,r4
   12068:	18807b26 	beq	r3,r2,12258 <__ieee754_sqrt+0x214>
   1206c:	01405f0e 	bge	zero,r5,121ec <__ieee754_sqrt+0x1a8>
   12070:	2815d53a 	srai	r10,r5,20
   12074:	50006a26 	beq	r10,zero,12220 <__ieee754_sqrt+0x1dc>
   12078:	00c00434 	movhi	r3,16
   1207c:	52bf0044 	addi	r10,r10,-1023
   12080:	18ffffc4 	addi	r3,r3,-1
   12084:	80c6703a 	and	r3,r16,r3
   12088:	5080004c 	andi	r2,r10,1
   1208c:	18c00434 	orhi	r3,r3,16
   12090:	1000511e 	bne	r2,zero,121d8 <__ieee754_sqrt+0x194>
   12094:	3004d7fa 	srli	r2,r6,31
   12098:	5015d07a 	srai	r10,r10,1
   1209c:	18c7883a 	add	r3,r3,r3
   120a0:	10c5883a 	add	r2,r2,r3
   120a4:	01400584 	movi	r5,22
   120a8:	3187883a 	add	r3,r6,r6
   120ac:	0013883a 	mov	r9,zero
   120b0:	000f883a 	mov	r7,zero
   120b4:	01000834 	movhi	r4,32
   120b8:	390d883a 	add	r6,r7,r4
   120bc:	1810d7fa 	srli	r8,r3,31
   120c0:	297fffc4 	addi	r5,r5,-1
   120c4:	11800316 	blt	r2,r6,120d4 <__ieee754_sqrt+0x90>
   120c8:	1185c83a 	sub	r2,r2,r6
   120cc:	310f883a 	add	r7,r6,r4
   120d0:	4913883a 	add	r9,r9,r4
   120d4:	1085883a 	add	r2,r2,r2
   120d8:	4085883a 	add	r2,r8,r2
   120dc:	18c7883a 	add	r3,r3,r3
   120e0:	2008d07a 	srli	r4,r4,1
   120e4:	283ff41e 	bne	r5,zero,120b8 <_gp+0xfffed808>
   120e8:	01200034 	movhi	r4,32768
   120ec:	01800804 	movi	r6,32
   120f0:	0011883a 	mov	r8,zero
   120f4:	0019883a 	mov	r12,zero
   120f8:	201b883a 	mov	r13,r4
   120fc:	00000806 	br	12120 <__ieee754_sqrt+0xdc>
   12100:	38801726 	beq	r7,r2,12160 <__ieee754_sqrt+0x11c>
   12104:	180ad7fa 	srli	r5,r3,31
   12108:	1085883a 	add	r2,r2,r2
   1210c:	31bfffc4 	addi	r6,r6,-1
   12110:	2885883a 	add	r2,r5,r2
   12114:	18c7883a 	add	r3,r3,r3
   12118:	2008d07a 	srli	r4,r4,1
   1211c:	30001726 	beq	r6,zero,1217c <__ieee754_sqrt+0x138>
   12120:	230b883a 	add	r5,r4,r12
   12124:	38bff60e 	bge	r7,r2,12100 <_gp+0xfffed850>
   12128:	2ae0002c 	andhi	r11,r5,32768
   1212c:	2919883a 	add	r12,r5,r4
   12130:	5b400826 	beq	r11,r13,12154 <__ieee754_sqrt+0x110>
   12134:	3817883a 	mov	r11,r7
   12138:	11c5c83a 	sub	r2,r2,r7
   1213c:	1940012e 	bgeu	r3,r5,12144 <__ieee754_sqrt+0x100>
   12140:	10bfffc4 	addi	r2,r2,-1
   12144:	1947c83a 	sub	r3,r3,r5
   12148:	4111883a 	add	r8,r8,r4
   1214c:	580f883a 	mov	r7,r11
   12150:	003fec06 	br	12104 <_gp+0xfffed854>
   12154:	603ff716 	blt	r12,zero,12134 <_gp+0xfffed884>
   12158:	3ac00044 	addi	r11,r7,1
   1215c:	003ff606 	br	12138 <_gp+0xfffed888>
   12160:	19401936 	bltu	r3,r5,121c8 <__ieee754_sqrt+0x184>
   12164:	2ae0002c 	andhi	r11,r5,32768
   12168:	2919883a 	add	r12,r5,r4
   1216c:	5b404526 	beq	r11,r13,12284 <__ieee754_sqrt+0x240>
   12170:	1017883a 	mov	r11,r2
   12174:	0005883a 	mov	r2,zero
   12178:	003ff206 	br	12144 <_gp+0xfffed894>
   1217c:	10c4b03a 	or	r2,r2,r3
   12180:	10000426 	beq	r2,zero,12194 <__ieee754_sqrt+0x150>
   12184:	00bfffc4 	movi	r2,-1
   12188:	40804026 	beq	r8,r2,1228c <__ieee754_sqrt+0x248>
   1218c:	4080004c 	andi	r2,r8,1
   12190:	4091883a 	add	r8,r8,r2
   12194:	4004d07a 	srli	r2,r8,1
   12198:	4807d07a 	srai	r3,r9,1
   1219c:	010ff834 	movhi	r4,16352
   121a0:	4a40004c 	andi	r9,r9,1
   121a4:	1909883a 	add	r4,r3,r4
   121a8:	4800091e 	bne	r9,zero,121d0 <__ieee754_sqrt+0x18c>
   121ac:	5006953a 	slli	r3,r10,20
   121b0:	1907883a 	add	r3,r3,r4
   121b4:	dfc00217 	ldw	ra,8(sp)
   121b8:	dc400117 	ldw	r17,4(sp)
   121bc:	dc000017 	ldw	r16,0(sp)
   121c0:	dec00304 	addi	sp,sp,12
   121c4:	f800283a 	ret
   121c8:	3805883a 	mov	r2,r7
   121cc:	003fcd06 	br	12104 <_gp+0xfffed854>
   121d0:	10a00034 	orhi	r2,r2,32768
   121d4:	003ff506 	br	121ac <_gp+0xfffed8fc>
   121d8:	3004d7fa 	srli	r2,r6,31
   121dc:	18c7883a 	add	r3,r3,r3
   121e0:	318d883a 	add	r6,r6,r6
   121e4:	10c7883a 	add	r3,r2,r3
   121e8:	003faa06 	br	12094 <_gp+0xfffed7e4>
   121ec:	00a00034 	movhi	r2,32768
   121f0:	10bfffc4 	addi	r2,r2,-1
   121f4:	2884703a 	and	r2,r5,r2
   121f8:	1104b03a 	or	r2,r2,r4
   121fc:	10001e26 	beq	r2,zero,12278 <__ieee754_sqrt+0x234>
   12200:	2800291e 	bne	r5,zero,122a8 <__ieee754_sqrt+0x264>
   12204:	0015883a 	mov	r10,zero
   12208:	3020d2fa 	srli	r16,r6,11
   1220c:	52bffac4 	addi	r10,r10,-21
   12210:	300c957a 	slli	r6,r6,21
   12214:	803ffc26 	beq	r16,zero,12208 <_gp+0xfffed958>
   12218:	8080042c 	andhi	r2,r16,16
   1221c:	10001e1e 	bne	r2,zero,12298 <__ieee754_sqrt+0x254>
   12220:	0005883a 	mov	r2,zero
   12224:	00000106 	br	1222c <__ieee754_sqrt+0x1e8>
   12228:	1805883a 	mov	r2,r3
   1222c:	8421883a 	add	r16,r16,r16
   12230:	8100042c 	andhi	r4,r16,16
   12234:	10c00044 	addi	r3,r2,1
   12238:	203ffb26 	beq	r4,zero,12228 <_gp+0xfffed978>
   1223c:	01000804 	movi	r4,32
   12240:	20c9c83a 	sub	r4,r4,r3
   12244:	3108d83a 	srl	r4,r6,r4
   12248:	5095c83a 	sub	r10,r10,r2
   1224c:	30cc983a 	sll	r6,r6,r3
   12250:	2420b03a 	or	r16,r4,r16
   12254:	003f8806 	br	12078 <_gp+0xfffed7c8>
   12258:	280f883a 	mov	r7,r5
   1225c:	00146b00 	call	146b0 <__muldf3>
   12260:	880d883a 	mov	r6,r17
   12264:	800f883a 	mov	r7,r16
   12268:	1009883a 	mov	r4,r2
   1226c:	180b883a 	mov	r5,r3
   12270:	00131dc0 	call	131dc <__adddf3>
   12274:	003fcf06 	br	121b4 <_gp+0xfffed904>
   12278:	2005883a 	mov	r2,r4
   1227c:	2807883a 	mov	r3,r5
   12280:	003fcc06 	br	121b4 <_gp+0xfffed904>
   12284:	603fba16 	blt	r12,zero,12170 <_gp+0xfffed8c0>
   12288:	003fb306 	br	12158 <_gp+0xfffed8a8>
   1228c:	4a400044 	addi	r9,r9,1
   12290:	0005883a 	mov	r2,zero
   12294:	003fc006 	br	12198 <_gp+0xfffed8e8>
   12298:	01000804 	movi	r4,32
   1229c:	00bfffc4 	movi	r2,-1
   122a0:	0007883a 	mov	r3,zero
   122a4:	003fe706 	br	12244 <_gp+0xfffed994>
   122a8:	200d883a 	mov	r6,r4
   122ac:	280f883a 	mov	r7,r5
   122b0:	0014f1c0 	call	14f1c <__subdf3>
   122b4:	100d883a 	mov	r6,r2
   122b8:	180f883a 	mov	r7,r3
   122bc:	1009883a 	mov	r4,r2
   122c0:	180b883a 	mov	r5,r3
   122c4:	0013a880 	call	13a88 <__divdf3>
   122c8:	003fba06 	br	121b4 <_gp+0xfffed904>

000122cc <fabs>:
   122cc:	00e00034 	movhi	r3,32768
   122d0:	18ffffc4 	addi	r3,r3,-1
   122d4:	2005883a 	mov	r2,r4
   122d8:	28c6703a 	and	r3,r5,r3
   122dc:	f800283a 	ret

000122e0 <finite>:
   122e0:	00a00034 	movhi	r2,32768
   122e4:	10bfffc4 	addi	r2,r2,-1
   122e8:	288a703a 	and	r5,r5,r2
   122ec:	00e00434 	movhi	r3,32784
   122f0:	28c5883a 	add	r2,r5,r3
   122f4:	1004d7fa 	srli	r2,r2,31
   122f8:	f800283a 	ret

000122fc <__fpclassifyd>:
   122fc:	00a00034 	movhi	r2,32768
   12300:	10bfffc4 	addi	r2,r2,-1
   12304:	2884703a 	and	r2,r5,r2
   12308:	10000726 	beq	r2,zero,12328 <__fpclassifyd+0x2c>
   1230c:	00fffc34 	movhi	r3,65520
   12310:	019ff834 	movhi	r6,32736
   12314:	28c7883a 	add	r3,r5,r3
   12318:	31bfffc4 	addi	r6,r6,-1
   1231c:	30c00536 	bltu	r6,r3,12334 <__fpclassifyd+0x38>
   12320:	00800104 	movi	r2,4
   12324:	f800283a 	ret
   12328:	2000021e 	bne	r4,zero,12334 <__fpclassifyd+0x38>
   1232c:	00800084 	movi	r2,2
   12330:	f800283a 	ret
   12334:	00dffc34 	movhi	r3,32752
   12338:	019ff834 	movhi	r6,32736
   1233c:	28cb883a 	add	r5,r5,r3
   12340:	31bfffc4 	addi	r6,r6,-1
   12344:	317ff62e 	bgeu	r6,r5,12320 <_gp+0xfffeda70>
   12348:	01400434 	movhi	r5,16
   1234c:	297fffc4 	addi	r5,r5,-1
   12350:	28800236 	bltu	r5,r2,1235c <__fpclassifyd+0x60>
   12354:	008000c4 	movi	r2,3
   12358:	f800283a 	ret
   1235c:	10c00226 	beq	r2,r3,12368 <__fpclassifyd+0x6c>
   12360:	0005883a 	mov	r2,zero
   12364:	f800283a 	ret
   12368:	2005003a 	cmpeq	r2,r4,zero
   1236c:	f800283a 	ret

00012370 <matherr>:
   12370:	0005883a 	mov	r2,zero
   12374:	f800283a 	ret

00012378 <nan>:
   12378:	0005883a 	mov	r2,zero
   1237c:	00dffe34 	movhi	r3,32760
   12380:	f800283a 	ret

00012384 <rint>:
   12384:	2813d53a 	srai	r9,r5,20
   12388:	defff904 	addi	sp,sp,-28
   1238c:	dc000215 	stw	r16,8(sp)
   12390:	4a41ffcc 	andi	r9,r9,2047
   12394:	dfc00615 	stw	ra,24(sp)
   12398:	dcc00515 	stw	r19,20(sp)
   1239c:	dc800415 	stw	r18,16(sp)
   123a0:	dc400315 	stw	r17,12(sp)
   123a4:	01c004c4 	movi	r7,19
   123a8:	49bf0044 	addi	r6,r9,-1023
   123ac:	2811883a 	mov	r8,r5
   123b0:	2005883a 	mov	r2,r4
   123b4:	2807883a 	mov	r3,r5
   123b8:	2015883a 	mov	r10,r4
   123bc:	2820d7fa 	srli	r16,r5,31
   123c0:	39801316 	blt	r7,r6,12410 <rint+0x8c>
   123c4:	30003d16 	blt	r6,zero,124bc <rint+0x138>
   123c8:	01000434 	movhi	r4,16
   123cc:	213fffc4 	addi	r4,r4,-1
   123d0:	2189d83a 	sra	r4,r4,r6
   123d4:	290a703a 	and	r5,r5,r4
   123d8:	288ab03a 	or	r5,r5,r2
   123dc:	28001026 	beq	r5,zero,12420 <rint+0x9c>
   123e0:	2008d07a 	srli	r4,r4,1
   123e4:	4104703a 	and	r2,r8,r4
   123e8:	1294b03a 	or	r10,r2,r10
   123ec:	50005626 	beq	r10,zero,12548 <rint+0x1c4>
   123f0:	31c05d26 	beq	r6,r7,12568 <rint+0x1e4>
   123f4:	0015883a 	mov	r10,zero
   123f8:	00c00134 	movhi	r3,4
   123fc:	1987d83a 	sra	r3,r3,r6
   12400:	0108303a 	nor	r4,zero,r4
   12404:	2210703a 	and	r8,r4,r8
   12408:	40c6b03a 	or	r3,r8,r3
   1240c:	00001806 	br	12470 <rint+0xec>
   12410:	01c00cc4 	movi	r7,51
   12414:	3980090e 	bge	r7,r6,1243c <rint+0xb8>
   12418:	01c10004 	movi	r7,1024
   1241c:	31c04e26 	beq	r6,r7,12558 <rint+0x1d4>
   12420:	dfc00617 	ldw	ra,24(sp)
   12424:	dcc00517 	ldw	r19,20(sp)
   12428:	dc800417 	ldw	r18,16(sp)
   1242c:	dc400317 	ldw	r17,12(sp)
   12430:	dc000217 	ldw	r16,8(sp)
   12434:	dec00704 	addi	sp,sp,28
   12438:	f800283a 	ret
   1243c:	4a7efb44 	addi	r9,r9,-1043
   12440:	013fffc4 	movi	r4,-1
   12444:	2248d83a 	srl	r4,r4,r9
   12448:	110a703a 	and	r5,r2,r4
   1244c:	28004026 	beq	r5,zero,12550 <rint+0x1cc>
   12450:	2008d07a 	srli	r4,r4,1
   12454:	1104703a 	and	r2,r2,r4
   12458:	10000526 	beq	r2,zero,12470 <rint+0xec>
   1245c:	00900034 	movhi	r2,16384
   12460:	1253d83a 	sra	r9,r2,r9
   12464:	0108303a 	nor	r4,zero,r4
   12468:	2294703a 	and	r10,r4,r10
   1246c:	4a94b03a 	or	r10,r9,r10
   12470:	802090fa 	slli	r16,r16,3
   12474:	180b883a 	mov	r5,r3
   12478:	00c000b4 	movhi	r3,2
   1247c:	18eb3e04 	addi	r3,r3,-21256
   12480:	1c21883a 	add	r16,r3,r16
   12484:	84400017 	ldw	r17,0(r16)
   12488:	84000117 	ldw	r16,4(r16)
   1248c:	5009883a 	mov	r4,r10
   12490:	880d883a 	mov	r6,r17
   12494:	800f883a 	mov	r7,r16
   12498:	00131dc0 	call	131dc <__adddf3>
   1249c:	d8800015 	stw	r2,0(sp)
   124a0:	d8c00115 	stw	r3,4(sp)
   124a4:	d9000017 	ldw	r4,0(sp)
   124a8:	d9400117 	ldw	r5,4(sp)
   124ac:	880d883a 	mov	r6,r17
   124b0:	800f883a 	mov	r7,r16
   124b4:	0014f1c0 	call	14f1c <__subdf3>
   124b8:	003fd906 	br	12420 <_gp+0xfffedb70>
   124bc:	04600034 	movhi	r17,32768
   124c0:	8c7fffc4 	addi	r17,r17,-1
   124c4:	2c46703a 	and	r3,r5,r17
   124c8:	1906b03a 	or	r3,r3,r4
   124cc:	18002026 	beq	r3,zero,12550 <rint+0x1cc>
   124d0:	01800434 	movhi	r6,16
   124d4:	31bfffc4 	addi	r6,r6,-1
   124d8:	298c703a 	and	r6,r5,r6
   124dc:	3104b03a 	or	r2,r6,r4
   124e0:	008bc83a 	sub	r5,zero,r2
   124e4:	800690fa 	slli	r3,r16,3
   124e8:	2884b03a 	or	r2,r5,r2
   124ec:	014000b4 	movhi	r5,2
   124f0:	296b3e04 	addi	r5,r5,-21256
   124f4:	28c7883a 	add	r3,r5,r3
   124f8:	1004d33a 	srli	r2,r2,12
   124fc:	1cc00017 	ldw	r19,0(r3)
   12500:	1c800117 	ldw	r18,4(r3)
   12504:	417fffac 	andhi	r5,r8,65534
   12508:	1080022c 	andhi	r2,r2,8
   1250c:	980d883a 	mov	r6,r19
   12510:	900f883a 	mov	r7,r18
   12514:	114ab03a 	or	r5,r2,r5
   12518:	00131dc0 	call	131dc <__adddf3>
   1251c:	d8800015 	stw	r2,0(sp)
   12520:	d8c00115 	stw	r3,4(sp)
   12524:	d9000017 	ldw	r4,0(sp)
   12528:	d9400117 	ldw	r5,4(sp)
   1252c:	980d883a 	mov	r6,r19
   12530:	900f883a 	mov	r7,r18
   12534:	0014f1c0 	call	14f1c <__subdf3>
   12538:	800897fa 	slli	r4,r16,31
   1253c:	1c46703a 	and	r3,r3,r17
   12540:	1906b03a 	or	r3,r3,r4
   12544:	003fb606 	br	12420 <_gp+0xfffedb70>
   12548:	0015883a 	mov	r10,zero
   1254c:	003fc806 	br	12470 <_gp+0xfffedbc0>
   12550:	4007883a 	mov	r3,r8
   12554:	003fb206 	br	12420 <_gp+0xfffedb70>
   12558:	200d883a 	mov	r6,r4
   1255c:	280f883a 	mov	r7,r5
   12560:	00131dc0 	call	131dc <__adddf3>
   12564:	003fae06 	br	12420 <_gp+0xfffedb70>
   12568:	02a00034 	movhi	r10,32768
   1256c:	003fa206 	br	123f8 <_gp+0xfffedb48>

00012570 <scalbn>:
   12570:	2a1ffc2c 	andhi	r8,r5,32752
   12574:	4011d53a 	srai	r8,r8,20
   12578:	defffe04 	addi	sp,sp,-8
   1257c:	dc000015 	stw	r16,0(sp)
   12580:	dfc00115 	stw	ra,4(sp)
   12584:	280f883a 	mov	r7,r5
   12588:	2015883a 	mov	r10,r4
   1258c:	3021883a 	mov	r16,r6
   12590:	40001e1e 	bne	r8,zero,1260c <scalbn+0x9c>
   12594:	00a00034 	movhi	r2,32768
   12598:	10bfffc4 	addi	r2,r2,-1
   1259c:	2884703a 	and	r2,r5,r2
   125a0:	1104b03a 	or	r2,r2,r4
   125a4:	10002226 	beq	r2,zero,12630 <scalbn+0xc0>
   125a8:	01d0d434 	movhi	r7,17232
   125ac:	000d883a 	mov	r6,zero
   125b0:	00146b00 	call	146b0 <__muldf3>
   125b4:	013ffff4 	movhi	r4,65535
   125b8:	210f2c04 	addi	r4,r4,15536
   125bc:	1015883a 	mov	r10,r2
   125c0:	180f883a 	mov	r7,r3
   125c4:	81002a16 	blt	r16,r4,12670 <scalbn+0x100>
   125c8:	191ffc2c 	andhi	r4,r3,32752
   125cc:	2009d53a 	srai	r4,r4,20
   125d0:	223ff284 	addi	r8,r4,-54
   125d4:	8211883a 	add	r8,r16,r8
   125d8:	0081ff84 	movi	r2,2046
   125dc:	12002f16 	blt	r2,r8,1269c <scalbn+0x12c>
   125e0:	0200190e 	bge	zero,r8,12648 <scalbn+0xd8>
   125e4:	4010953a 	slli	r8,r8,20
   125e8:	01600434 	movhi	r5,32784
   125ec:	297fffc4 	addi	r5,r5,-1
   125f0:	194e703a 	and	r7,r3,r5
   125f4:	5005883a 	mov	r2,r10
   125f8:	3a06b03a 	or	r3,r7,r8
   125fc:	dfc00117 	ldw	ra,4(sp)
   12600:	dc000017 	ldw	r16,0(sp)
   12604:	dec00204 	addi	sp,sp,8
   12608:	f800283a 	ret
   1260c:	0081ffc4 	movi	r2,2047
   12610:	2807883a 	mov	r3,r5
   12614:	40bfef1e 	bne	r8,r2,125d4 <_gp+0xfffedd24>
   12618:	200d883a 	mov	r6,r4
   1261c:	00131dc0 	call	131dc <__adddf3>
   12620:	dfc00117 	ldw	ra,4(sp)
   12624:	dc000017 	ldw	r16,0(sp)
   12628:	dec00204 	addi	sp,sp,8
   1262c:	f800283a 	ret
   12630:	2005883a 	mov	r2,r4
   12634:	2807883a 	mov	r3,r5
   12638:	dfc00117 	ldw	ra,4(sp)
   1263c:	dc000017 	ldw	r16,0(sp)
   12640:	dec00204 	addi	sp,sp,8
   12644:	f800283a 	ret
   12648:	00bff2c4 	movi	r2,-53
   1264c:	4080240e 	bge	r8,r2,126e0 <scalbn+0x170>
   12650:	00b0d414 	movui	r2,50000
   12654:	14001116 	blt	r2,r16,1269c <scalbn+0x12c>
   12658:	0130be74 	movhi	r4,49913
   1265c:	01406974 	movhi	r5,421
   12660:	213cd644 	addi	r4,r4,-3239
   12664:	295b87c4 	addi	r5,r5,28191
   12668:	500d883a 	mov	r6,r10
   1266c:	001270c0 	call	1270c <copysign>
   12670:	01b0be74 	movhi	r6,49913
   12674:	01c06974 	movhi	r7,421
   12678:	31bcd644 	addi	r6,r6,-3239
   1267c:	39db87c4 	addi	r7,r7,28191
   12680:	1009883a 	mov	r4,r2
   12684:	180b883a 	mov	r5,r3
   12688:	00146b00 	call	146b0 <__muldf3>
   1268c:	dfc00117 	ldw	ra,4(sp)
   12690:	dc000017 	ldw	r16,0(sp)
   12694:	dec00204 	addi	sp,sp,8
   12698:	f800283a 	ret
   1269c:	01220034 	movhi	r4,34816
   126a0:	015f8e34 	movhi	r5,32312
   126a4:	500d883a 	mov	r6,r10
   126a8:	211d6704 	addi	r4,r4,30108
   126ac:	29790f04 	addi	r5,r5,-7108
   126b0:	001270c0 	call	1270c <copysign>
   126b4:	01a20034 	movhi	r6,34816
   126b8:	01df8e34 	movhi	r7,32312
   126bc:	319d6704 	addi	r6,r6,30108
   126c0:	39f90f04 	addi	r7,r7,-7108
   126c4:	1009883a 	mov	r4,r2
   126c8:	180b883a 	mov	r5,r3
   126cc:	00146b00 	call	146b0 <__muldf3>
   126d0:	dfc00117 	ldw	ra,4(sp)
   126d4:	dc000017 	ldw	r16,0(sp)
   126d8:	dec00204 	addi	sp,sp,8
   126dc:	f800283a 	ret
   126e0:	42000d84 	addi	r8,r8,54
   126e4:	4012953a 	slli	r9,r8,20
   126e8:	01e00434 	movhi	r7,32784
   126ec:	39ffffc4 	addi	r7,r7,-1
   126f0:	19ca703a 	and	r5,r3,r7
   126f4:	000d883a 	mov	r6,zero
   126f8:	01cf2434 	movhi	r7,15504
   126fc:	5009883a 	mov	r4,r10
   12700:	494ab03a 	or	r5,r9,r5
   12704:	00146b00 	call	146b0 <__muldf3>
   12708:	003fbc06 	br	125fc <_gp+0xfffedd4c>

0001270c <copysign>:
   1270c:	2005883a 	mov	r2,r4
   12710:	01200034 	movhi	r4,32768
   12714:	213fffc4 	addi	r4,r4,-1
   12718:	38e0002c 	andhi	r3,r7,32768
   1271c:	290a703a 	and	r5,r5,r4
   12720:	28c6b03a 	or	r3,r5,r3
   12724:	f800283a 	ret

00012728 <__mulsi3>:
   12728:	0005883a 	mov	r2,zero
   1272c:	20000726 	beq	r4,zero,1274c <__mulsi3+0x24>
   12730:	20c0004c 	andi	r3,r4,1
   12734:	2008d07a 	srli	r4,r4,1
   12738:	18000126 	beq	r3,zero,12740 <__mulsi3+0x18>
   1273c:	1145883a 	add	r2,r2,r5
   12740:	294b883a 	add	r5,r5,r5
   12744:	203ffa1e 	bne	r4,zero,12730 <_gp+0xfffede80>
   12748:	f800283a 	ret
   1274c:	f800283a 	ret

00012750 <__addsf3>:
   12750:	defffc04 	addi	sp,sp,-16
   12754:	2004d7fa 	srli	r2,r4,31
   12758:	280cd5fa 	srli	r6,r5,23
   1275c:	dc000015 	stw	r16,0(sp)
   12760:	00c02034 	movhi	r3,128
   12764:	2020d5fa 	srli	r16,r4,23
   12768:	280ed7fa 	srli	r7,r5,31
   1276c:	18ffffc4 	addi	r3,r3,-1
   12770:	dc400115 	stw	r17,4(sp)
   12774:	1908703a 	and	r4,r3,r4
   12778:	194a703a 	and	r5,r3,r5
   1277c:	dfc00315 	stw	ra,12(sp)
   12780:	dc800215 	stw	r18,8(sp)
   12784:	14403fcc 	andi	r17,r2,255
   12788:	84003fcc 	andi	r16,r16,255
   1278c:	200890fa 	slli	r4,r4,3
   12790:	31803fcc 	andi	r6,r6,255
   12794:	280a90fa 	slli	r5,r5,3
   12798:	89c05026 	beq	r17,r7,128dc <__addsf3+0x18c>
   1279c:	8185c83a 	sub	r2,r16,r6
   127a0:	00807a0e 	bge	zero,r2,1298c <__addsf3+0x23c>
   127a4:	30001e1e 	bne	r6,zero,12820 <__addsf3+0xd0>
   127a8:	28006d1e 	bne	r5,zero,12960 <__addsf3+0x210>
   127ac:	208001cc 	andi	r2,r4,7
   127b0:	10000426 	beq	r2,zero,127c4 <__addsf3+0x74>
   127b4:	208003cc 	andi	r2,r4,15
   127b8:	00c00104 	movi	r3,4
   127bc:	10c00126 	beq	r2,r3,127c4 <__addsf3+0x74>
   127c0:	20c9883a 	add	r4,r4,r3
   127c4:	2081002c 	andhi	r2,r4,1024
   127c8:	10003926 	beq	r2,zero,128b0 <__addsf3+0x160>
   127cc:	84000044 	addi	r16,r16,1
   127d0:	00803fc4 	movi	r2,255
   127d4:	80807826 	beq	r16,r2,129b8 <__addsf3+0x268>
   127d8:	200891ba 	slli	r4,r4,6
   127dc:	8805883a 	mov	r2,r17
   127e0:	2008d27a 	srli	r4,r4,9
   127e4:	84003fcc 	andi	r16,r16,255
   127e8:	800695fa 	slli	r3,r16,23
   127ec:	10803fcc 	andi	r2,r2,255
   127f0:	04002034 	movhi	r16,128
   127f4:	843fffc4 	addi	r16,r16,-1
   127f8:	100497fa 	slli	r2,r2,31
   127fc:	2408703a 	and	r4,r4,r16
   12800:	20e0b03a 	or	r16,r4,r3
   12804:	8084b03a 	or	r2,r16,r2
   12808:	dfc00317 	ldw	ra,12(sp)
   1280c:	dc800217 	ldw	r18,8(sp)
   12810:	dc400117 	ldw	r17,4(sp)
   12814:	dc000017 	ldw	r16,0(sp)
   12818:	dec00404 	addi	sp,sp,16
   1281c:	f800283a 	ret
   12820:	00c03fc4 	movi	r3,255
   12824:	80ffe126 	beq	r16,r3,127ac <_gp+0xfffedefc>
   12828:	29410034 	orhi	r5,r5,1024
   1282c:	00c006c4 	movi	r3,27
   12830:	18807516 	blt	r3,r2,12a08 <__addsf3+0x2b8>
   12834:	00c00804 	movi	r3,32
   12838:	1887c83a 	sub	r3,r3,r2
   1283c:	28c6983a 	sll	r3,r5,r3
   12840:	288ad83a 	srl	r5,r5,r2
   12844:	1804c03a 	cmpne	r2,r3,zero
   12848:	288ab03a 	or	r5,r5,r2
   1284c:	2149c83a 	sub	r4,r4,r5
   12850:	2081002c 	andhi	r2,r4,1024
   12854:	10001426 	beq	r2,zero,128a8 <__addsf3+0x158>
   12858:	04810034 	movhi	r18,1024
   1285c:	94bfffc4 	addi	r18,r18,-1
   12860:	24a4703a 	and	r18,r4,r18
   12864:	9009883a 	mov	r4,r18
   12868:	0015a840 	call	15a84 <__clzsi2>
   1286c:	10bffec4 	addi	r2,r2,-5
   12870:	90a4983a 	sll	r18,r18,r2
   12874:	14005416 	blt	r2,r16,129c8 <__addsf3+0x278>
   12878:	1405c83a 	sub	r2,r2,r16
   1287c:	11000044 	addi	r4,r2,1
   12880:	00800804 	movi	r2,32
   12884:	1105c83a 	sub	r2,r2,r4
   12888:	9084983a 	sll	r2,r18,r2
   1288c:	9124d83a 	srl	r18,r18,r4
   12890:	0021883a 	mov	r16,zero
   12894:	1008c03a 	cmpne	r4,r2,zero
   12898:	9108b03a 	or	r4,r18,r4
   1289c:	003fc306 	br	127ac <_gp+0xfffedefc>
   128a0:	1000db26 	beq	r2,zero,12c10 <__addsf3+0x4c0>
   128a4:	1009883a 	mov	r4,r2
   128a8:	208001cc 	andi	r2,r4,7
   128ac:	103fc11e 	bne	r2,zero,127b4 <_gp+0xfffedf04>
   128b0:	2006d0fa 	srli	r3,r4,3
   128b4:	01003fc4 	movi	r4,255
   128b8:	8805883a 	mov	r2,r17
   128bc:	8100241e 	bne	r16,r4,12950 <__addsf3+0x200>
   128c0:	18006e26 	beq	r3,zero,12a7c <__addsf3+0x32c>
   128c4:	19001034 	orhi	r4,r3,64
   128c8:	00c02034 	movhi	r3,128
   128cc:	18ffffc4 	addi	r3,r3,-1
   128d0:	043fffc4 	movi	r16,-1
   128d4:	20c8703a 	and	r4,r4,r3
   128d8:	003fc206 	br	127e4 <_gp+0xfffedf34>
   128dc:	8187c83a 	sub	r3,r16,r6
   128e0:	00c03e0e 	bge	zero,r3,129dc <__addsf3+0x28c>
   128e4:	30002326 	beq	r6,zero,12974 <__addsf3+0x224>
   128e8:	01803fc4 	movi	r6,255
   128ec:	81bfaf26 	beq	r16,r6,127ac <_gp+0xfffedefc>
   128f0:	29410034 	orhi	r5,r5,1024
   128f4:	018006c4 	movi	r6,27
   128f8:	30c07416 	blt	r6,r3,12acc <__addsf3+0x37c>
   128fc:	01800804 	movi	r6,32
   12900:	30cdc83a 	sub	r6,r6,r3
   12904:	298c983a 	sll	r6,r5,r6
   12908:	28cad83a 	srl	r5,r5,r3
   1290c:	3006c03a 	cmpne	r3,r6,zero
   12910:	28cab03a 	or	r5,r5,r3
   12914:	2149883a 	add	r4,r4,r5
   12918:	20c1002c 	andhi	r3,r4,1024
   1291c:	183fe226 	beq	r3,zero,128a8 <_gp+0xfffedff8>
   12920:	84000044 	addi	r16,r16,1
   12924:	00c03fc4 	movi	r3,255
   12928:	80c05426 	beq	r16,r3,12a7c <__addsf3+0x32c>
   1292c:	00bf0034 	movhi	r2,64512
   12930:	10bfffc4 	addi	r2,r2,-1
   12934:	20c0004c 	andi	r3,r4,1
   12938:	2088703a 	and	r4,r4,r2
   1293c:	2008d07a 	srli	r4,r4,1
   12940:	20c8b03a 	or	r4,r4,r3
   12944:	003f9906 	br	127ac <_gp+0xfffedefc>
   12948:	0007883a 	mov	r3,zero
   1294c:	0005883a 	mov	r2,zero
   12950:	01002034 	movhi	r4,128
   12954:	213fffc4 	addi	r4,r4,-1
   12958:	1908703a 	and	r4,r3,r4
   1295c:	003fa106 	br	127e4 <_gp+0xfffedf34>
   12960:	10bfffc4 	addi	r2,r2,-1
   12964:	103fb926 	beq	r2,zero,1284c <_gp+0xfffedf9c>
   12968:	00c03fc4 	movi	r3,255
   1296c:	80ffaf1e 	bne	r16,r3,1282c <_gp+0xfffedf7c>
   12970:	003f8e06 	br	127ac <_gp+0xfffedefc>
   12974:	283f8d26 	beq	r5,zero,127ac <_gp+0xfffedefc>
   12978:	18ffffc4 	addi	r3,r3,-1
   1297c:	183fe526 	beq	r3,zero,12914 <_gp+0xfffee064>
   12980:	01803fc4 	movi	r6,255
   12984:	81bfdb1e 	bne	r16,r6,128f4 <_gp+0xfffee044>
   12988:	003f8806 	br	127ac <_gp+0xfffedefc>
   1298c:	1000201e 	bne	r2,zero,12a10 <__addsf3+0x2c0>
   12990:	80800044 	addi	r2,r16,1
   12994:	10803fcc 	andi	r2,r2,255
   12998:	01800044 	movi	r6,1
   1299c:	3080450e 	bge	r6,r2,12ab4 <__addsf3+0x364>
   129a0:	2165c83a 	sub	r18,r4,r5
   129a4:	90c1002c 	andhi	r3,r18,1024
   129a8:	18002b26 	beq	r3,zero,12a58 <__addsf3+0x308>
   129ac:	2925c83a 	sub	r18,r5,r4
   129b0:	3823883a 	mov	r17,r7
   129b4:	003fab06 	br	12864 <_gp+0xfffedfb4>
   129b8:	8805883a 	mov	r2,r17
   129bc:	043fffc4 	movi	r16,-1
   129c0:	0009883a 	mov	r4,zero
   129c4:	003f8706 	br	127e4 <_gp+0xfffedf34>
   129c8:	013f0034 	movhi	r4,64512
   129cc:	213fffc4 	addi	r4,r4,-1
   129d0:	80a1c83a 	sub	r16,r16,r2
   129d4:	9108703a 	and	r4,r18,r4
   129d8:	003f7406 	br	127ac <_gp+0xfffedefc>
   129dc:	1800411e 	bne	r3,zero,12ae4 <__addsf3+0x394>
   129e0:	80c00044 	addi	r3,r16,1
   129e4:	19c03fcc 	andi	r7,r3,255
   129e8:	01800044 	movi	r6,1
   129ec:	31c0260e 	bge	r6,r7,12a88 <__addsf3+0x338>
   129f0:	01803fc4 	movi	r6,255
   129f4:	19802126 	beq	r3,r6,12a7c <__addsf3+0x32c>
   129f8:	2149883a 	add	r4,r4,r5
   129fc:	2008d07a 	srli	r4,r4,1
   12a00:	1821883a 	mov	r16,r3
   12a04:	003f6906 	br	127ac <_gp+0xfffedefc>
   12a08:	01400044 	movi	r5,1
   12a0c:	003f8f06 	br	1284c <_gp+0xfffedf9c>
   12a10:	8000151e 	bne	r16,zero,12a68 <__addsf3+0x318>
   12a14:	20002f26 	beq	r4,zero,12ad4 <__addsf3+0x384>
   12a18:	0084303a 	nor	r2,zero,r2
   12a1c:	10000a26 	beq	r2,zero,12a48 <__addsf3+0x2f8>
   12a20:	00c03fc4 	movi	r3,255
   12a24:	30c02b26 	beq	r6,r3,12ad4 <__addsf3+0x384>
   12a28:	00c006c4 	movi	r3,27
   12a2c:	18806d16 	blt	r3,r2,12be4 <__addsf3+0x494>
   12a30:	00c00804 	movi	r3,32
   12a34:	1887c83a 	sub	r3,r3,r2
   12a38:	20c6983a 	sll	r3,r4,r3
   12a3c:	2084d83a 	srl	r2,r4,r2
   12a40:	1808c03a 	cmpne	r4,r3,zero
   12a44:	1108b03a 	or	r4,r2,r4
   12a48:	2909c83a 	sub	r4,r5,r4
   12a4c:	3021883a 	mov	r16,r6
   12a50:	3823883a 	mov	r17,r7
   12a54:	003f7e06 	br	12850 <_gp+0xfffedfa0>
   12a58:	903f821e 	bne	r18,zero,12864 <_gp+0xfffedfb4>
   12a5c:	0005883a 	mov	r2,zero
   12a60:	0021883a 	mov	r16,zero
   12a64:	003fba06 	br	12950 <_gp+0xfffee0a0>
   12a68:	00c03fc4 	movi	r3,255
   12a6c:	30c01926 	beq	r6,r3,12ad4 <__addsf3+0x384>
   12a70:	0085c83a 	sub	r2,zero,r2
   12a74:	21010034 	orhi	r4,r4,1024
   12a78:	003feb06 	br	12a28 <_gp+0xfffee178>
   12a7c:	043fffc4 	movi	r16,-1
   12a80:	0009883a 	mov	r4,zero
   12a84:	003f5706 	br	127e4 <_gp+0xfffedf34>
   12a88:	80004a1e 	bne	r16,zero,12bb4 <__addsf3+0x464>
   12a8c:	20005926 	beq	r4,zero,12bf4 <__addsf3+0x4a4>
   12a90:	283f4626 	beq	r5,zero,127ac <_gp+0xfffedefc>
   12a94:	2149883a 	add	r4,r4,r5
   12a98:	2081002c 	andhi	r2,r4,1024
   12a9c:	103f8226 	beq	r2,zero,128a8 <_gp+0xfffedff8>
   12aa0:	00bf0034 	movhi	r2,64512
   12aa4:	10bfffc4 	addi	r2,r2,-1
   12aa8:	3021883a 	mov	r16,r6
   12aac:	2088703a 	and	r4,r4,r2
   12ab0:	003f3e06 	br	127ac <_gp+0xfffedefc>
   12ab4:	8000121e 	bne	r16,zero,12b00 <__addsf3+0x3b0>
   12ab8:	2000261e 	bne	r4,zero,12b54 <__addsf3+0x404>
   12abc:	283fa226 	beq	r5,zero,12948 <_gp+0xfffee098>
   12ac0:	2809883a 	mov	r4,r5
   12ac4:	3823883a 	mov	r17,r7
   12ac8:	003f3806 	br	127ac <_gp+0xfffedefc>
   12acc:	01400044 	movi	r5,1
   12ad0:	003f9006 	br	12914 <_gp+0xfffee064>
   12ad4:	2809883a 	mov	r4,r5
   12ad8:	3021883a 	mov	r16,r6
   12adc:	3823883a 	mov	r17,r7
   12ae0:	003f3206 	br	127ac <_gp+0xfffedefc>
   12ae4:	80000c1e 	bne	r16,zero,12b18 <__addsf3+0x3c8>
   12ae8:	20002f26 	beq	r4,zero,12ba8 <__addsf3+0x458>
   12aec:	00c6303a 	nor	r3,zero,r3
   12af0:	18002b1e 	bne	r3,zero,12ba0 <__addsf3+0x450>
   12af4:	2149883a 	add	r4,r4,r5
   12af8:	3021883a 	mov	r16,r6
   12afc:	003f8606 	br	12918 <_gp+0xfffee068>
   12b00:	20001b1e 	bne	r4,zero,12b70 <__addsf3+0x420>
   12b04:	28003926 	beq	r5,zero,12bec <__addsf3+0x49c>
   12b08:	2809883a 	mov	r4,r5
   12b0c:	3823883a 	mov	r17,r7
   12b10:	04003fc4 	movi	r16,255
   12b14:	003f2506 	br	127ac <_gp+0xfffedefc>
   12b18:	01c03fc4 	movi	r7,255
   12b1c:	31c02226 	beq	r6,r7,12ba8 <__addsf3+0x458>
   12b20:	00c7c83a 	sub	r3,zero,r3
   12b24:	21010034 	orhi	r4,r4,1024
   12b28:	01c006c4 	movi	r7,27
   12b2c:	38c03616 	blt	r7,r3,12c08 <__addsf3+0x4b8>
   12b30:	01c00804 	movi	r7,32
   12b34:	38cfc83a 	sub	r7,r7,r3
   12b38:	21ce983a 	sll	r7,r4,r7
   12b3c:	20c6d83a 	srl	r3,r4,r3
   12b40:	3808c03a 	cmpne	r4,r7,zero
   12b44:	1906b03a 	or	r3,r3,r4
   12b48:	1949883a 	add	r4,r3,r5
   12b4c:	3021883a 	mov	r16,r6
   12b50:	003f7106 	br	12918 <_gp+0xfffee068>
   12b54:	283f1526 	beq	r5,zero,127ac <_gp+0xfffedefc>
   12b58:	2145c83a 	sub	r2,r4,r5
   12b5c:	10c1002c 	andhi	r3,r2,1024
   12b60:	183f4f26 	beq	r3,zero,128a0 <_gp+0xfffedff0>
   12b64:	2909c83a 	sub	r4,r5,r4
   12b68:	3823883a 	mov	r17,r7
   12b6c:	003f0f06 	br	127ac <_gp+0xfffedefc>
   12b70:	28001a26 	beq	r5,zero,12bdc <__addsf3+0x48c>
   12b74:	2008d0fa 	srli	r4,r4,3
   12b78:	2080102c 	andhi	r2,r4,64
   12b7c:	10000526 	beq	r2,zero,12b94 <__addsf3+0x444>
   12b80:	280ad0fa 	srli	r5,r5,3
   12b84:	2880102c 	andhi	r2,r5,64
   12b88:	1000021e 	bne	r2,zero,12b94 <__addsf3+0x444>
   12b8c:	2809883a 	mov	r4,r5
   12b90:	3823883a 	mov	r17,r7
   12b94:	200890fa 	slli	r4,r4,3
   12b98:	04003fc4 	movi	r16,255
   12b9c:	003f0306 	br	127ac <_gp+0xfffedefc>
   12ba0:	01c03fc4 	movi	r7,255
   12ba4:	31ffe01e 	bne	r6,r7,12b28 <_gp+0xfffee278>
   12ba8:	2809883a 	mov	r4,r5
   12bac:	3021883a 	mov	r16,r6
   12bb0:	003efe06 	br	127ac <_gp+0xfffedefc>
   12bb4:	20001126 	beq	r4,zero,12bfc <__addsf3+0x4ac>
   12bb8:	28000826 	beq	r5,zero,12bdc <__addsf3+0x48c>
   12bbc:	2008d0fa 	srli	r4,r4,3
   12bc0:	2080102c 	andhi	r2,r4,64
   12bc4:	103ff326 	beq	r2,zero,12b94 <_gp+0xfffee2e4>
   12bc8:	280ad0fa 	srli	r5,r5,3
   12bcc:	2880102c 	andhi	r2,r5,64
   12bd0:	103ff01e 	bne	r2,zero,12b94 <_gp+0xfffee2e4>
   12bd4:	2809883a 	mov	r4,r5
   12bd8:	003fee06 	br	12b94 <_gp+0xfffee2e4>
   12bdc:	04003fc4 	movi	r16,255
   12be0:	003ef206 	br	127ac <_gp+0xfffedefc>
   12be4:	01000044 	movi	r4,1
   12be8:	003f9706 	br	12a48 <_gp+0xfffee198>
   12bec:	0005883a 	mov	r2,zero
   12bf0:	003f3406 	br	128c4 <_gp+0xfffee014>
   12bf4:	2809883a 	mov	r4,r5
   12bf8:	003eec06 	br	127ac <_gp+0xfffedefc>
   12bfc:	2809883a 	mov	r4,r5
   12c00:	04003fc4 	movi	r16,255
   12c04:	003ee906 	br	127ac <_gp+0xfffedefc>
   12c08:	00c00044 	movi	r3,1
   12c0c:	003fce06 	br	12b48 <_gp+0xfffee298>
   12c10:	0005883a 	mov	r2,zero
   12c14:	003f4e06 	br	12950 <_gp+0xfffee0a0>

00012c18 <__mulsf3>:
   12c18:	defff504 	addi	sp,sp,-44
   12c1c:	dc000115 	stw	r16,4(sp)
   12c20:	2020d5fa 	srli	r16,r4,23
   12c24:	dd400615 	stw	r21,24(sp)
   12c28:	202ad7fa 	srli	r21,r4,31
   12c2c:	dc800315 	stw	r18,12(sp)
   12c30:	04802034 	movhi	r18,128
   12c34:	df000915 	stw	fp,36(sp)
   12c38:	dd000515 	stw	r20,20(sp)
   12c3c:	94bfffc4 	addi	r18,r18,-1
   12c40:	dfc00a15 	stw	ra,40(sp)
   12c44:	ddc00815 	stw	r23,32(sp)
   12c48:	dd800715 	stw	r22,28(sp)
   12c4c:	dcc00415 	stw	r19,16(sp)
   12c50:	dc400215 	stw	r17,8(sp)
   12c54:	84003fcc 	andi	r16,r16,255
   12c58:	9124703a 	and	r18,r18,r4
   12c5c:	a829883a 	mov	r20,r21
   12c60:	af003fcc 	andi	fp,r21,255
   12c64:	80005426 	beq	r16,zero,12db8 <__mulsf3+0x1a0>
   12c68:	00803fc4 	movi	r2,255
   12c6c:	80802f26 	beq	r16,r2,12d2c <__mulsf3+0x114>
   12c70:	91002034 	orhi	r4,r18,128
   12c74:	202490fa 	slli	r18,r4,3
   12c78:	843fe044 	addi	r16,r16,-127
   12c7c:	0023883a 	mov	r17,zero
   12c80:	002f883a 	mov	r23,zero
   12c84:	2804d5fa 	srli	r2,r5,23
   12c88:	282cd7fa 	srli	r22,r5,31
   12c8c:	01002034 	movhi	r4,128
   12c90:	213fffc4 	addi	r4,r4,-1
   12c94:	10803fcc 	andi	r2,r2,255
   12c98:	2166703a 	and	r19,r4,r5
   12c9c:	b1803fcc 	andi	r6,r22,255
   12ca0:	10004c26 	beq	r2,zero,12dd4 <__mulsf3+0x1bc>
   12ca4:	00c03fc4 	movi	r3,255
   12ca8:	10c04726 	beq	r2,r3,12dc8 <__mulsf3+0x1b0>
   12cac:	99002034 	orhi	r4,r19,128
   12cb0:	202690fa 	slli	r19,r4,3
   12cb4:	10bfe044 	addi	r2,r2,-127
   12cb8:	0007883a 	mov	r3,zero
   12cbc:	80a1883a 	add	r16,r16,r2
   12cc0:	010003c4 	movi	r4,15
   12cc4:	1c44b03a 	or	r2,r3,r17
   12cc8:	b56af03a 	xor	r21,r22,r21
   12ccc:	81c00044 	addi	r7,r16,1
   12cd0:	20806b36 	bltu	r4,r2,12e80 <__mulsf3+0x268>
   12cd4:	100490ba 	slli	r2,r2,2
   12cd8:	01000074 	movhi	r4,1
   12cdc:	210b3b04 	addi	r4,r4,11500
   12ce0:	1105883a 	add	r2,r2,r4
   12ce4:	10800017 	ldw	r2,0(r2)
   12ce8:	1000683a 	jmp	r2
   12cec:	00012e80 	call	12e8 <__alt_mem_onchip_memory-0xed18>
   12cf0:	00012d40 	call	12d4 <__alt_mem_onchip_memory-0xed2c>
   12cf4:	00012d40 	call	12d4 <__alt_mem_onchip_memory-0xed2c>
   12cf8:	00012d3c 	xorhi	zero,zero,1204
   12cfc:	00012e64 	muli	zero,zero,1209
   12d00:	00012e64 	muli	zero,zero,1209
   12d04:	00012e50 	cmplti	zero,zero,1209
   12d08:	00012d3c 	xorhi	zero,zero,1204
   12d0c:	00012e64 	muli	zero,zero,1209
   12d10:	00012e50 	cmplti	zero,zero,1209
   12d14:	00012e64 	muli	zero,zero,1209
   12d18:	00012d3c 	xorhi	zero,zero,1204
   12d1c:	00012e70 	cmpltui	zero,zero,1209
   12d20:	00012e70 	cmpltui	zero,zero,1209
   12d24:	00012e70 	cmpltui	zero,zero,1209
   12d28:	00012f80 	call	12f8 <__alt_mem_onchip_memory-0xed08>
   12d2c:	90003b1e 	bne	r18,zero,12e1c <__mulsf3+0x204>
   12d30:	04400204 	movi	r17,8
   12d34:	05c00084 	movi	r23,2
   12d38:	003fd206 	br	12c84 <_gp+0xfffee3d4>
   12d3c:	302b883a 	mov	r21,r6
   12d40:	00800084 	movi	r2,2
   12d44:	18802626 	beq	r3,r2,12de0 <__mulsf3+0x1c8>
   12d48:	008000c4 	movi	r2,3
   12d4c:	1880b826 	beq	r3,r2,13030 <__mulsf3+0x418>
   12d50:	00800044 	movi	r2,1
   12d54:	1880af1e 	bne	r3,r2,13014 <__mulsf3+0x3fc>
   12d58:	a829883a 	mov	r20,r21
   12d5c:	0007883a 	mov	r3,zero
   12d60:	0009883a 	mov	r4,zero
   12d64:	18803fcc 	andi	r2,r3,255
   12d68:	100695fa 	slli	r3,r2,23
   12d6c:	a0803fcc 	andi	r2,r20,255
   12d70:	100a97fa 	slli	r5,r2,31
   12d74:	00802034 	movhi	r2,128
   12d78:	10bfffc4 	addi	r2,r2,-1
   12d7c:	2084703a 	and	r2,r4,r2
   12d80:	10c4b03a 	or	r2,r2,r3
   12d84:	1144b03a 	or	r2,r2,r5
   12d88:	dfc00a17 	ldw	ra,40(sp)
   12d8c:	df000917 	ldw	fp,36(sp)
   12d90:	ddc00817 	ldw	r23,32(sp)
   12d94:	dd800717 	ldw	r22,28(sp)
   12d98:	dd400617 	ldw	r21,24(sp)
   12d9c:	dd000517 	ldw	r20,20(sp)
   12da0:	dcc00417 	ldw	r19,16(sp)
   12da4:	dc800317 	ldw	r18,12(sp)
   12da8:	dc400217 	ldw	r17,8(sp)
   12dac:	dc000117 	ldw	r16,4(sp)
   12db0:	dec00b04 	addi	sp,sp,44
   12db4:	f800283a 	ret
   12db8:	90000d1e 	bne	r18,zero,12df0 <__mulsf3+0x1d8>
   12dbc:	04400104 	movi	r17,4
   12dc0:	05c00044 	movi	r23,1
   12dc4:	003faf06 	br	12c84 <_gp+0xfffee3d4>
   12dc8:	9806c03a 	cmpne	r3,r19,zero
   12dcc:	18c00084 	addi	r3,r3,2
   12dd0:	003fba06 	br	12cbc <_gp+0xfffee40c>
   12dd4:	9800141e 	bne	r19,zero,12e28 <__mulsf3+0x210>
   12dd8:	00c00044 	movi	r3,1
   12ddc:	003fb706 	br	12cbc <_gp+0xfffee40c>
   12de0:	a829883a 	mov	r20,r21
   12de4:	00ffffc4 	movi	r3,-1
   12de8:	0009883a 	mov	r4,zero
   12dec:	003fdd06 	br	12d64 <_gp+0xfffee4b4>
   12df0:	9009883a 	mov	r4,r18
   12df4:	d9400015 	stw	r5,0(sp)
   12df8:	0015a840 	call	15a84 <__clzsi2>
   12dfc:	10fffec4 	addi	r3,r2,-5
   12e00:	10801d84 	addi	r2,r2,118
   12e04:	90e4983a 	sll	r18,r18,r3
   12e08:	00a1c83a 	sub	r16,zero,r2
   12e0c:	0023883a 	mov	r17,zero
   12e10:	002f883a 	mov	r23,zero
   12e14:	d9400017 	ldw	r5,0(sp)
   12e18:	003f9a06 	br	12c84 <_gp+0xfffee3d4>
   12e1c:	04400304 	movi	r17,12
   12e20:	05c000c4 	movi	r23,3
   12e24:	003f9706 	br	12c84 <_gp+0xfffee3d4>
   12e28:	9809883a 	mov	r4,r19
   12e2c:	d9800015 	stw	r6,0(sp)
   12e30:	0015a840 	call	15a84 <__clzsi2>
   12e34:	10fffec4 	addi	r3,r2,-5
   12e38:	10801d84 	addi	r2,r2,118
   12e3c:	98e6983a 	sll	r19,r19,r3
   12e40:	0085c83a 	sub	r2,zero,r2
   12e44:	0007883a 	mov	r3,zero
   12e48:	d9800017 	ldw	r6,0(sp)
   12e4c:	003f9b06 	br	12cbc <_gp+0xfffee40c>
   12e50:	01002034 	movhi	r4,128
   12e54:	0029883a 	mov	r20,zero
   12e58:	213fffc4 	addi	r4,r4,-1
   12e5c:	00ffffc4 	movi	r3,-1
   12e60:	003fc006 	br	12d64 <_gp+0xfffee4b4>
   12e64:	9027883a 	mov	r19,r18
   12e68:	b807883a 	mov	r3,r23
   12e6c:	003fb406 	br	12d40 <_gp+0xfffee490>
   12e70:	9027883a 	mov	r19,r18
   12e74:	e02b883a 	mov	r21,fp
   12e78:	b807883a 	mov	r3,r23
   12e7c:	003fb006 	br	12d40 <_gp+0xfffee490>
   12e80:	9028d43a 	srli	r20,r18,16
   12e84:	982cd43a 	srli	r22,r19,16
   12e88:	94bfffcc 	andi	r18,r18,65535
   12e8c:	9cffffcc 	andi	r19,r19,65535
   12e90:	980b883a 	mov	r5,r19
   12e94:	9009883a 	mov	r4,r18
   12e98:	d9c00015 	stw	r7,0(sp)
   12e9c:	00127280 	call	12728 <__mulsi3>
   12ea0:	a00b883a 	mov	r5,r20
   12ea4:	9809883a 	mov	r4,r19
   12ea8:	1023883a 	mov	r17,r2
   12eac:	00127280 	call	12728 <__mulsi3>
   12eb0:	a009883a 	mov	r4,r20
   12eb4:	b00b883a 	mov	r5,r22
   12eb8:	1027883a 	mov	r19,r2
   12ebc:	00127280 	call	12728 <__mulsi3>
   12ec0:	b00b883a 	mov	r5,r22
   12ec4:	9009883a 	mov	r4,r18
   12ec8:	1029883a 	mov	r20,r2
   12ecc:	00127280 	call	12728 <__mulsi3>
   12ed0:	8806d43a 	srli	r3,r17,16
   12ed4:	14c5883a 	add	r2,r2,r19
   12ed8:	d9c00017 	ldw	r7,0(sp)
   12edc:	1885883a 	add	r2,r3,r2
   12ee0:	14c0022e 	bgeu	r2,r19,12eec <__mulsf3+0x2d4>
   12ee4:	00c00074 	movhi	r3,1
   12ee8:	a0e9883a 	add	r20,r20,r3
   12eec:	1026943a 	slli	r19,r2,16
   12ef0:	8c7fffcc 	andi	r17,r17,65535
   12ef4:	1004d43a 	srli	r2,r2,16
   12ef8:	9c63883a 	add	r17,r19,r17
   12efc:	882691ba 	slli	r19,r17,6
   12f00:	1505883a 	add	r2,r2,r20
   12f04:	8822d6ba 	srli	r17,r17,26
   12f08:	100891ba 	slli	r4,r2,6
   12f0c:	9826c03a 	cmpne	r19,r19,zero
   12f10:	9c62b03a 	or	r17,r19,r17
   12f14:	8926b03a 	or	r19,r17,r4
   12f18:	9882002c 	andhi	r2,r19,2048
   12f1c:	10000426 	beq	r2,zero,12f30 <__mulsf3+0x318>
   12f20:	9804d07a 	srli	r2,r19,1
   12f24:	9900004c 	andi	r4,r19,1
   12f28:	3821883a 	mov	r16,r7
   12f2c:	1126b03a 	or	r19,r2,r4
   12f30:	80c01fc4 	addi	r3,r16,127
   12f34:	00c0210e 	bge	zero,r3,12fbc <__mulsf3+0x3a4>
   12f38:	988001cc 	andi	r2,r19,7
   12f3c:	10000426 	beq	r2,zero,12f50 <__mulsf3+0x338>
   12f40:	988003cc 	andi	r2,r19,15
   12f44:	01000104 	movi	r4,4
   12f48:	11000126 	beq	r2,r4,12f50 <__mulsf3+0x338>
   12f4c:	9927883a 	add	r19,r19,r4
   12f50:	9882002c 	andhi	r2,r19,2048
   12f54:	10000426 	beq	r2,zero,12f68 <__mulsf3+0x350>
   12f58:	00be0034 	movhi	r2,63488
   12f5c:	10bfffc4 	addi	r2,r2,-1
   12f60:	80c02004 	addi	r3,r16,128
   12f64:	98a6703a 	and	r19,r19,r2
   12f68:	00803f84 	movi	r2,254
   12f6c:	10ff9c16 	blt	r2,r3,12de0 <_gp+0xfffee530>
   12f70:	980891ba 	slli	r4,r19,6
   12f74:	a829883a 	mov	r20,r21
   12f78:	2008d27a 	srli	r4,r4,9
   12f7c:	003f7906 	br	12d64 <_gp+0xfffee4b4>
   12f80:	9080102c 	andhi	r2,r18,64
   12f84:	10000826 	beq	r2,zero,12fa8 <__mulsf3+0x390>
   12f88:	9880102c 	andhi	r2,r19,64
   12f8c:	1000061e 	bne	r2,zero,12fa8 <__mulsf3+0x390>
   12f90:	00802034 	movhi	r2,128
   12f94:	99001034 	orhi	r4,r19,64
   12f98:	10bfffc4 	addi	r2,r2,-1
   12f9c:	b029883a 	mov	r20,r22
   12fa0:	2088703a 	and	r4,r4,r2
   12fa4:	003fad06 	br	12e5c <_gp+0xfffee5ac>
   12fa8:	00802034 	movhi	r2,128
   12fac:	91001034 	orhi	r4,r18,64
   12fb0:	10bfffc4 	addi	r2,r2,-1
   12fb4:	2088703a 	and	r4,r4,r2
   12fb8:	003fa806 	br	12e5c <_gp+0xfffee5ac>
   12fbc:	00800044 	movi	r2,1
   12fc0:	10c7c83a 	sub	r3,r2,r3
   12fc4:	008006c4 	movi	r2,27
   12fc8:	10ff6316 	blt	r2,r3,12d58 <_gp+0xfffee4a8>
   12fcc:	00800804 	movi	r2,32
   12fd0:	10c5c83a 	sub	r2,r2,r3
   12fd4:	9884983a 	sll	r2,r19,r2
   12fd8:	98c6d83a 	srl	r3,r19,r3
   12fdc:	1004c03a 	cmpne	r2,r2,zero
   12fe0:	1884b03a 	or	r2,r3,r2
   12fe4:	10c001cc 	andi	r3,r2,7
   12fe8:	18000426 	beq	r3,zero,12ffc <__mulsf3+0x3e4>
   12fec:	10c003cc 	andi	r3,r2,15
   12ff0:	01000104 	movi	r4,4
   12ff4:	19000126 	beq	r3,r4,12ffc <__mulsf3+0x3e4>
   12ff8:	1105883a 	add	r2,r2,r4
   12ffc:	10c1002c 	andhi	r3,r2,1024
   13000:	18000626 	beq	r3,zero,1301c <__mulsf3+0x404>
   13004:	a829883a 	mov	r20,r21
   13008:	00c00044 	movi	r3,1
   1300c:	0009883a 	mov	r4,zero
   13010:	003f5406 	br	12d64 <_gp+0xfffee4b4>
   13014:	3821883a 	mov	r16,r7
   13018:	003fc506 	br	12f30 <_gp+0xfffee680>
   1301c:	100491ba 	slli	r2,r2,6
   13020:	a829883a 	mov	r20,r21
   13024:	0007883a 	mov	r3,zero
   13028:	1008d27a 	srli	r4,r2,9
   1302c:	003f4d06 	br	12d64 <_gp+0xfffee4b4>
   13030:	00802034 	movhi	r2,128
   13034:	99001034 	orhi	r4,r19,64
   13038:	10bfffc4 	addi	r2,r2,-1
   1303c:	a829883a 	mov	r20,r21
   13040:	2088703a 	and	r4,r4,r2
   13044:	003f8506 	br	12e5c <_gp+0xfffee5ac>

00013048 <__fixsfsi>:
   13048:	200ad5fa 	srli	r5,r4,23
   1304c:	00c02034 	movhi	r3,128
   13050:	18ffffc4 	addi	r3,r3,-1
   13054:	29403fcc 	andi	r5,r5,255
   13058:	00801f84 	movi	r2,126
   1305c:	1906703a 	and	r3,r3,r4
   13060:	2008d7fa 	srli	r4,r4,31
   13064:	11400e0e 	bge	r2,r5,130a0 <__fixsfsi+0x58>
   13068:	00802744 	movi	r2,157
   1306c:	11400816 	blt	r2,r5,13090 <__fixsfsi+0x48>
   13070:	00802544 	movi	r2,149
   13074:	18c02034 	orhi	r3,r3,128
   13078:	11400b0e 	bge	r2,r5,130a8 <__fixsfsi+0x60>
   1307c:	28bfda84 	addi	r2,r5,-150
   13080:	1884983a 	sll	r2,r3,r2
   13084:	20000726 	beq	r4,zero,130a4 <__fixsfsi+0x5c>
   13088:	0085c83a 	sub	r2,zero,r2
   1308c:	f800283a 	ret
   13090:	00a00034 	movhi	r2,32768
   13094:	10bfffc4 	addi	r2,r2,-1
   13098:	2085883a 	add	r2,r4,r2
   1309c:	f800283a 	ret
   130a0:	0005883a 	mov	r2,zero
   130a4:	f800283a 	ret
   130a8:	00802584 	movi	r2,150
   130ac:	1145c83a 	sub	r2,r2,r5
   130b0:	1884d83a 	srl	r2,r3,r2
   130b4:	003ff306 	br	13084 <_gp+0xfffee7d4>

000130b8 <__floatsisf>:
   130b8:	defffd04 	addi	sp,sp,-12
   130bc:	dfc00215 	stw	ra,8(sp)
   130c0:	dc400115 	stw	r17,4(sp)
   130c4:	dc000015 	stw	r16,0(sp)
   130c8:	20003526 	beq	r4,zero,131a0 <__floatsisf+0xe8>
   130cc:	2021883a 	mov	r16,r4
   130d0:	2022d7fa 	srli	r17,r4,31
   130d4:	20003616 	blt	r4,zero,131b0 <__floatsisf+0xf8>
   130d8:	8009883a 	mov	r4,r16
   130dc:	0015a840 	call	15a84 <__clzsi2>
   130e0:	00c02784 	movi	r3,158
   130e4:	1887c83a 	sub	r3,r3,r2
   130e8:	01002584 	movi	r4,150
   130ec:	20c01416 	blt	r4,r3,13140 <__floatsisf+0x88>
   130f0:	20c9c83a 	sub	r4,r4,r3
   130f4:	8120983a 	sll	r16,r16,r4
   130f8:	00802034 	movhi	r2,128
   130fc:	10bfffc4 	addi	r2,r2,-1
   13100:	8809883a 	mov	r4,r17
   13104:	80a0703a 	and	r16,r16,r2
   13108:	18803fcc 	andi	r2,r3,255
   1310c:	100695fa 	slli	r3,r2,23
   13110:	20803fcc 	andi	r2,r4,255
   13114:	100897fa 	slli	r4,r2,31
   13118:	00802034 	movhi	r2,128
   1311c:	10bfffc4 	addi	r2,r2,-1
   13120:	8084703a 	and	r2,r16,r2
   13124:	10c4b03a 	or	r2,r2,r3
   13128:	1104b03a 	or	r2,r2,r4
   1312c:	dfc00217 	ldw	ra,8(sp)
   13130:	dc400117 	ldw	r17,4(sp)
   13134:	dc000017 	ldw	r16,0(sp)
   13138:	dec00304 	addi	sp,sp,12
   1313c:	f800283a 	ret
   13140:	01002644 	movi	r4,153
   13144:	20c01c16 	blt	r4,r3,131b8 <__floatsisf+0x100>
   13148:	20c9c83a 	sub	r4,r4,r3
   1314c:	8120983a 	sll	r16,r16,r4
   13150:	013f0034 	movhi	r4,64512
   13154:	213fffc4 	addi	r4,r4,-1
   13158:	814001cc 	andi	r5,r16,7
   1315c:	8108703a 	and	r4,r16,r4
   13160:	28000426 	beq	r5,zero,13174 <__floatsisf+0xbc>
   13164:	840003cc 	andi	r16,r16,15
   13168:	01400104 	movi	r5,4
   1316c:	81400126 	beq	r16,r5,13174 <__floatsisf+0xbc>
   13170:	2149883a 	add	r4,r4,r5
   13174:	2141002c 	andhi	r5,r4,1024
   13178:	28000526 	beq	r5,zero,13190 <__floatsisf+0xd8>
   1317c:	00c027c4 	movi	r3,159
   13180:	1887c83a 	sub	r3,r3,r2
   13184:	00bf0034 	movhi	r2,64512
   13188:	10bfffc4 	addi	r2,r2,-1
   1318c:	2088703a 	and	r4,r4,r2
   13190:	202091ba 	slli	r16,r4,6
   13194:	8809883a 	mov	r4,r17
   13198:	8020d27a 	srli	r16,r16,9
   1319c:	003fda06 	br	13108 <_gp+0xfffee858>
   131a0:	0009883a 	mov	r4,zero
   131a4:	0007883a 	mov	r3,zero
   131a8:	0021883a 	mov	r16,zero
   131ac:	003fd606 	br	13108 <_gp+0xfffee858>
   131b0:	0121c83a 	sub	r16,zero,r4
   131b4:	003fc806 	br	130d8 <_gp+0xfffee828>
   131b8:	01002e44 	movi	r4,185
   131bc:	20c9c83a 	sub	r4,r4,r3
   131c0:	01400144 	movi	r5,5
   131c4:	8108983a 	sll	r4,r16,r4
   131c8:	288bc83a 	sub	r5,r5,r2
   131cc:	8160d83a 	srl	r16,r16,r5
   131d0:	2008c03a 	cmpne	r4,r4,zero
   131d4:	8120b03a 	or	r16,r16,r4
   131d8:	003fdd06 	br	13150 <_gp+0xfffee8a0>

000131dc <__adddf3>:
   131dc:	02c00434 	movhi	r11,16
   131e0:	5affffc4 	addi	r11,r11,-1
   131e4:	2806d7fa 	srli	r3,r5,31
   131e8:	2ad4703a 	and	r10,r5,r11
   131ec:	3ad2703a 	and	r9,r7,r11
   131f0:	3804d53a 	srli	r2,r7,20
   131f4:	3018d77a 	srli	r12,r6,29
   131f8:	280ad53a 	srli	r5,r5,20
   131fc:	501490fa 	slli	r10,r10,3
   13200:	2010d77a 	srli	r8,r4,29
   13204:	481290fa 	slli	r9,r9,3
   13208:	380ed7fa 	srli	r7,r7,31
   1320c:	defffb04 	addi	sp,sp,-20
   13210:	dc800215 	stw	r18,8(sp)
   13214:	dc400115 	stw	r17,4(sp)
   13218:	dc000015 	stw	r16,0(sp)
   1321c:	dfc00415 	stw	ra,16(sp)
   13220:	dcc00315 	stw	r19,12(sp)
   13224:	1c803fcc 	andi	r18,r3,255
   13228:	2c01ffcc 	andi	r16,r5,2047
   1322c:	5210b03a 	or	r8,r10,r8
   13230:	202290fa 	slli	r17,r4,3
   13234:	1081ffcc 	andi	r2,r2,2047
   13238:	4b12b03a 	or	r9,r9,r12
   1323c:	300c90fa 	slli	r6,r6,3
   13240:	91c07526 	beq	r18,r7,13418 <__adddf3+0x23c>
   13244:	8087c83a 	sub	r3,r16,r2
   13248:	00c0ab0e 	bge	zero,r3,134f8 <__adddf3+0x31c>
   1324c:	10002a1e 	bne	r2,zero,132f8 <__adddf3+0x11c>
   13250:	4984b03a 	or	r2,r9,r6
   13254:	1000961e 	bne	r2,zero,134b0 <__adddf3+0x2d4>
   13258:	888001cc 	andi	r2,r17,7
   1325c:	10000726 	beq	r2,zero,1327c <__adddf3+0xa0>
   13260:	888003cc 	andi	r2,r17,15
   13264:	00c00104 	movi	r3,4
   13268:	10c00426 	beq	r2,r3,1327c <__adddf3+0xa0>
   1326c:	88c7883a 	add	r3,r17,r3
   13270:	1c63803a 	cmpltu	r17,r3,r17
   13274:	4451883a 	add	r8,r8,r17
   13278:	1823883a 	mov	r17,r3
   1327c:	4080202c 	andhi	r2,r8,128
   13280:	10005926 	beq	r2,zero,133e8 <__adddf3+0x20c>
   13284:	84000044 	addi	r16,r16,1
   13288:	0081ffc4 	movi	r2,2047
   1328c:	8080ba26 	beq	r16,r2,13578 <__adddf3+0x39c>
   13290:	00bfe034 	movhi	r2,65408
   13294:	10bfffc4 	addi	r2,r2,-1
   13298:	4090703a 	and	r8,r8,r2
   1329c:	4004977a 	slli	r2,r8,29
   132a0:	4010927a 	slli	r8,r8,9
   132a4:	8822d0fa 	srli	r17,r17,3
   132a8:	8401ffcc 	andi	r16,r16,2047
   132ac:	4010d33a 	srli	r8,r8,12
   132b0:	9007883a 	mov	r3,r18
   132b4:	1444b03a 	or	r2,r2,r17
   132b8:	8401ffcc 	andi	r16,r16,2047
   132bc:	8020953a 	slli	r16,r16,20
   132c0:	18c03fcc 	andi	r3,r3,255
   132c4:	01000434 	movhi	r4,16
   132c8:	213fffc4 	addi	r4,r4,-1
   132cc:	180697fa 	slli	r3,r3,31
   132d0:	4110703a 	and	r8,r8,r4
   132d4:	4410b03a 	or	r8,r8,r16
   132d8:	40c6b03a 	or	r3,r8,r3
   132dc:	dfc00417 	ldw	ra,16(sp)
   132e0:	dcc00317 	ldw	r19,12(sp)
   132e4:	dc800217 	ldw	r18,8(sp)
   132e8:	dc400117 	ldw	r17,4(sp)
   132ec:	dc000017 	ldw	r16,0(sp)
   132f0:	dec00504 	addi	sp,sp,20
   132f4:	f800283a 	ret
   132f8:	0081ffc4 	movi	r2,2047
   132fc:	80bfd626 	beq	r16,r2,13258 <_gp+0xfffee9a8>
   13300:	4a402034 	orhi	r9,r9,128
   13304:	00800e04 	movi	r2,56
   13308:	10c09f16 	blt	r2,r3,13588 <__adddf3+0x3ac>
   1330c:	008007c4 	movi	r2,31
   13310:	10c0c216 	blt	r2,r3,1361c <__adddf3+0x440>
   13314:	00800804 	movi	r2,32
   13318:	10c5c83a 	sub	r2,r2,r3
   1331c:	488a983a 	sll	r5,r9,r2
   13320:	30c8d83a 	srl	r4,r6,r3
   13324:	3084983a 	sll	r2,r6,r2
   13328:	48c6d83a 	srl	r3,r9,r3
   1332c:	290cb03a 	or	r6,r5,r4
   13330:	1004c03a 	cmpne	r2,r2,zero
   13334:	308cb03a 	or	r6,r6,r2
   13338:	898dc83a 	sub	r6,r17,r6
   1333c:	89a3803a 	cmpltu	r17,r17,r6
   13340:	40d1c83a 	sub	r8,r8,r3
   13344:	4451c83a 	sub	r8,r8,r17
   13348:	3023883a 	mov	r17,r6
   1334c:	4080202c 	andhi	r2,r8,128
   13350:	10002326 	beq	r2,zero,133e0 <__adddf3+0x204>
   13354:	04c02034 	movhi	r19,128
   13358:	9cffffc4 	addi	r19,r19,-1
   1335c:	44e6703a 	and	r19,r8,r19
   13360:	98007626 	beq	r19,zero,1353c <__adddf3+0x360>
   13364:	9809883a 	mov	r4,r19
   13368:	0015a840 	call	15a84 <__clzsi2>
   1336c:	10fffe04 	addi	r3,r2,-8
   13370:	010007c4 	movi	r4,31
   13374:	20c07716 	blt	r4,r3,13554 <__adddf3+0x378>
   13378:	00800804 	movi	r2,32
   1337c:	10c5c83a 	sub	r2,r2,r3
   13380:	8884d83a 	srl	r2,r17,r2
   13384:	98d0983a 	sll	r8,r19,r3
   13388:	88e2983a 	sll	r17,r17,r3
   1338c:	1204b03a 	or	r2,r2,r8
   13390:	1c007416 	blt	r3,r16,13564 <__adddf3+0x388>
   13394:	1c21c83a 	sub	r16,r3,r16
   13398:	82000044 	addi	r8,r16,1
   1339c:	00c007c4 	movi	r3,31
   133a0:	1a009116 	blt	r3,r8,135e8 <__adddf3+0x40c>
   133a4:	00c00804 	movi	r3,32
   133a8:	1a07c83a 	sub	r3,r3,r8
   133ac:	8a08d83a 	srl	r4,r17,r8
   133b0:	88e2983a 	sll	r17,r17,r3
   133b4:	10c6983a 	sll	r3,r2,r3
   133b8:	1210d83a 	srl	r8,r2,r8
   133bc:	8804c03a 	cmpne	r2,r17,zero
   133c0:	1906b03a 	or	r3,r3,r4
   133c4:	18a2b03a 	or	r17,r3,r2
   133c8:	0021883a 	mov	r16,zero
   133cc:	003fa206 	br	13258 <_gp+0xfffee9a8>
   133d0:	1890b03a 	or	r8,r3,r2
   133d4:	40017d26 	beq	r8,zero,139cc <__adddf3+0x7f0>
   133d8:	1011883a 	mov	r8,r2
   133dc:	1823883a 	mov	r17,r3
   133e0:	888001cc 	andi	r2,r17,7
   133e4:	103f9e1e 	bne	r2,zero,13260 <_gp+0xfffee9b0>
   133e8:	4004977a 	slli	r2,r8,29
   133ec:	8822d0fa 	srli	r17,r17,3
   133f0:	4010d0fa 	srli	r8,r8,3
   133f4:	9007883a 	mov	r3,r18
   133f8:	1444b03a 	or	r2,r2,r17
   133fc:	0101ffc4 	movi	r4,2047
   13400:	81002426 	beq	r16,r4,13494 <__adddf3+0x2b8>
   13404:	8120703a 	and	r16,r16,r4
   13408:	01000434 	movhi	r4,16
   1340c:	213fffc4 	addi	r4,r4,-1
   13410:	4110703a 	and	r8,r8,r4
   13414:	003fa806 	br	132b8 <_gp+0xfffeea08>
   13418:	8089c83a 	sub	r4,r16,r2
   1341c:	01005e0e 	bge	zero,r4,13598 <__adddf3+0x3bc>
   13420:	10002b26 	beq	r2,zero,134d0 <__adddf3+0x2f4>
   13424:	0081ffc4 	movi	r2,2047
   13428:	80bf8b26 	beq	r16,r2,13258 <_gp+0xfffee9a8>
   1342c:	4a402034 	orhi	r9,r9,128
   13430:	00800e04 	movi	r2,56
   13434:	1100a40e 	bge	r2,r4,136c8 <__adddf3+0x4ec>
   13438:	498cb03a 	or	r6,r9,r6
   1343c:	300ac03a 	cmpne	r5,r6,zero
   13440:	0013883a 	mov	r9,zero
   13444:	2c4b883a 	add	r5,r5,r17
   13448:	2c63803a 	cmpltu	r17,r5,r17
   1344c:	4a11883a 	add	r8,r9,r8
   13450:	8a11883a 	add	r8,r17,r8
   13454:	2823883a 	mov	r17,r5
   13458:	4080202c 	andhi	r2,r8,128
   1345c:	103fe026 	beq	r2,zero,133e0 <_gp+0xfffeeb30>
   13460:	84000044 	addi	r16,r16,1
   13464:	0081ffc4 	movi	r2,2047
   13468:	8080d226 	beq	r16,r2,137b4 <__adddf3+0x5d8>
   1346c:	00bfe034 	movhi	r2,65408
   13470:	10bfffc4 	addi	r2,r2,-1
   13474:	4090703a 	and	r8,r8,r2
   13478:	880ad07a 	srli	r5,r17,1
   1347c:	400897fa 	slli	r4,r8,31
   13480:	88c0004c 	andi	r3,r17,1
   13484:	28e2b03a 	or	r17,r5,r3
   13488:	4010d07a 	srli	r8,r8,1
   1348c:	2462b03a 	or	r17,r4,r17
   13490:	003f7106 	br	13258 <_gp+0xfffee9a8>
   13494:	4088b03a 	or	r4,r8,r2
   13498:	20014526 	beq	r4,zero,139b0 <__adddf3+0x7d4>
   1349c:	01000434 	movhi	r4,16
   134a0:	42000234 	orhi	r8,r8,8
   134a4:	213fffc4 	addi	r4,r4,-1
   134a8:	4110703a 	and	r8,r8,r4
   134ac:	003f8206 	br	132b8 <_gp+0xfffeea08>
   134b0:	18ffffc4 	addi	r3,r3,-1
   134b4:	1800491e 	bne	r3,zero,135dc <__adddf3+0x400>
   134b8:	898bc83a 	sub	r5,r17,r6
   134bc:	8963803a 	cmpltu	r17,r17,r5
   134c0:	4251c83a 	sub	r8,r8,r9
   134c4:	4451c83a 	sub	r8,r8,r17
   134c8:	2823883a 	mov	r17,r5
   134cc:	003f9f06 	br	1334c <_gp+0xfffeea9c>
   134d0:	4984b03a 	or	r2,r9,r6
   134d4:	103f6026 	beq	r2,zero,13258 <_gp+0xfffee9a8>
   134d8:	213fffc4 	addi	r4,r4,-1
   134dc:	2000931e 	bne	r4,zero,1372c <__adddf3+0x550>
   134e0:	898d883a 	add	r6,r17,r6
   134e4:	3463803a 	cmpltu	r17,r6,r17
   134e8:	4251883a 	add	r8,r8,r9
   134ec:	8a11883a 	add	r8,r17,r8
   134f0:	3023883a 	mov	r17,r6
   134f4:	003fd806 	br	13458 <_gp+0xfffeeba8>
   134f8:	1800541e 	bne	r3,zero,1364c <__adddf3+0x470>
   134fc:	80800044 	addi	r2,r16,1
   13500:	1081ffcc 	andi	r2,r2,2047
   13504:	00c00044 	movi	r3,1
   13508:	1880a00e 	bge	r3,r2,1378c <__adddf3+0x5b0>
   1350c:	8989c83a 	sub	r4,r17,r6
   13510:	8905803a 	cmpltu	r2,r17,r4
   13514:	4267c83a 	sub	r19,r8,r9
   13518:	98a7c83a 	sub	r19,r19,r2
   1351c:	9880202c 	andhi	r2,r19,128
   13520:	10006326 	beq	r2,zero,136b0 <__adddf3+0x4d4>
   13524:	3463c83a 	sub	r17,r6,r17
   13528:	4a07c83a 	sub	r3,r9,r8
   1352c:	344d803a 	cmpltu	r6,r6,r17
   13530:	19a7c83a 	sub	r19,r3,r6
   13534:	3825883a 	mov	r18,r7
   13538:	983f8a1e 	bne	r19,zero,13364 <_gp+0xfffeeab4>
   1353c:	8809883a 	mov	r4,r17
   13540:	0015a840 	call	15a84 <__clzsi2>
   13544:	10800804 	addi	r2,r2,32
   13548:	10fffe04 	addi	r3,r2,-8
   1354c:	010007c4 	movi	r4,31
   13550:	20ff890e 	bge	r4,r3,13378 <_gp+0xfffeeac8>
   13554:	10bff604 	addi	r2,r2,-40
   13558:	8884983a 	sll	r2,r17,r2
   1355c:	0023883a 	mov	r17,zero
   13560:	1c3f8c0e 	bge	r3,r16,13394 <_gp+0xfffeeae4>
   13564:	023fe034 	movhi	r8,65408
   13568:	423fffc4 	addi	r8,r8,-1
   1356c:	80e1c83a 	sub	r16,r16,r3
   13570:	1210703a 	and	r8,r2,r8
   13574:	003f3806 	br	13258 <_gp+0xfffee9a8>
   13578:	9007883a 	mov	r3,r18
   1357c:	0011883a 	mov	r8,zero
   13580:	0005883a 	mov	r2,zero
   13584:	003f4c06 	br	132b8 <_gp+0xfffeea08>
   13588:	498cb03a 	or	r6,r9,r6
   1358c:	300cc03a 	cmpne	r6,r6,zero
   13590:	0007883a 	mov	r3,zero
   13594:	003f6806 	br	13338 <_gp+0xfffeea88>
   13598:	20009c1e 	bne	r4,zero,1380c <__adddf3+0x630>
   1359c:	80800044 	addi	r2,r16,1
   135a0:	1141ffcc 	andi	r5,r2,2047
   135a4:	01000044 	movi	r4,1
   135a8:	2140670e 	bge	r4,r5,13748 <__adddf3+0x56c>
   135ac:	0101ffc4 	movi	r4,2047
   135b0:	11007f26 	beq	r2,r4,137b0 <__adddf3+0x5d4>
   135b4:	898d883a 	add	r6,r17,r6
   135b8:	4247883a 	add	r3,r8,r9
   135bc:	3451803a 	cmpltu	r8,r6,r17
   135c0:	40d1883a 	add	r8,r8,r3
   135c4:	402297fa 	slli	r17,r8,31
   135c8:	300cd07a 	srli	r6,r6,1
   135cc:	4010d07a 	srli	r8,r8,1
   135d0:	1021883a 	mov	r16,r2
   135d4:	89a2b03a 	or	r17,r17,r6
   135d8:	003f1f06 	br	13258 <_gp+0xfffee9a8>
   135dc:	0081ffc4 	movi	r2,2047
   135e0:	80bf481e 	bne	r16,r2,13304 <_gp+0xfffeea54>
   135e4:	003f1c06 	br	13258 <_gp+0xfffee9a8>
   135e8:	843ff844 	addi	r16,r16,-31
   135ec:	01000804 	movi	r4,32
   135f0:	1406d83a 	srl	r3,r2,r16
   135f4:	41005026 	beq	r8,r4,13738 <__adddf3+0x55c>
   135f8:	01001004 	movi	r4,64
   135fc:	2211c83a 	sub	r8,r4,r8
   13600:	1204983a 	sll	r2,r2,r8
   13604:	88a2b03a 	or	r17,r17,r2
   13608:	8822c03a 	cmpne	r17,r17,zero
   1360c:	1c62b03a 	or	r17,r3,r17
   13610:	0011883a 	mov	r8,zero
   13614:	0021883a 	mov	r16,zero
   13618:	003f7106 	br	133e0 <_gp+0xfffeeb30>
   1361c:	193ff804 	addi	r4,r3,-32
   13620:	00800804 	movi	r2,32
   13624:	4908d83a 	srl	r4,r9,r4
   13628:	18804526 	beq	r3,r2,13740 <__adddf3+0x564>
   1362c:	00801004 	movi	r2,64
   13630:	10c5c83a 	sub	r2,r2,r3
   13634:	4886983a 	sll	r3,r9,r2
   13638:	198cb03a 	or	r6,r3,r6
   1363c:	300cc03a 	cmpne	r6,r6,zero
   13640:	218cb03a 	or	r6,r4,r6
   13644:	0007883a 	mov	r3,zero
   13648:	003f3b06 	br	13338 <_gp+0xfffeea88>
   1364c:	80002a26 	beq	r16,zero,136f8 <__adddf3+0x51c>
   13650:	0101ffc4 	movi	r4,2047
   13654:	11006826 	beq	r2,r4,137f8 <__adddf3+0x61c>
   13658:	00c7c83a 	sub	r3,zero,r3
   1365c:	42002034 	orhi	r8,r8,128
   13660:	01000e04 	movi	r4,56
   13664:	20c07c16 	blt	r4,r3,13858 <__adddf3+0x67c>
   13668:	010007c4 	movi	r4,31
   1366c:	20c0da16 	blt	r4,r3,139d8 <__adddf3+0x7fc>
   13670:	01000804 	movi	r4,32
   13674:	20c9c83a 	sub	r4,r4,r3
   13678:	4114983a 	sll	r10,r8,r4
   1367c:	88cad83a 	srl	r5,r17,r3
   13680:	8908983a 	sll	r4,r17,r4
   13684:	40c6d83a 	srl	r3,r8,r3
   13688:	5162b03a 	or	r17,r10,r5
   1368c:	2008c03a 	cmpne	r4,r4,zero
   13690:	8922b03a 	or	r17,r17,r4
   13694:	3463c83a 	sub	r17,r6,r17
   13698:	48c7c83a 	sub	r3,r9,r3
   1369c:	344d803a 	cmpltu	r6,r6,r17
   136a0:	1991c83a 	sub	r8,r3,r6
   136a4:	1021883a 	mov	r16,r2
   136a8:	3825883a 	mov	r18,r7
   136ac:	003f2706 	br	1334c <_gp+0xfffeea9c>
   136b0:	24d0b03a 	or	r8,r4,r19
   136b4:	40001b1e 	bne	r8,zero,13724 <__adddf3+0x548>
   136b8:	0005883a 	mov	r2,zero
   136bc:	0007883a 	mov	r3,zero
   136c0:	0021883a 	mov	r16,zero
   136c4:	003f4d06 	br	133fc <_gp+0xfffeeb4c>
   136c8:	008007c4 	movi	r2,31
   136cc:	11003c16 	blt	r2,r4,137c0 <__adddf3+0x5e4>
   136d0:	00800804 	movi	r2,32
   136d4:	1105c83a 	sub	r2,r2,r4
   136d8:	488e983a 	sll	r7,r9,r2
   136dc:	310ad83a 	srl	r5,r6,r4
   136e0:	3084983a 	sll	r2,r6,r2
   136e4:	4912d83a 	srl	r9,r9,r4
   136e8:	394ab03a 	or	r5,r7,r5
   136ec:	1004c03a 	cmpne	r2,r2,zero
   136f0:	288ab03a 	or	r5,r5,r2
   136f4:	003f5306 	br	13444 <_gp+0xfffeeb94>
   136f8:	4448b03a 	or	r4,r8,r17
   136fc:	20003e26 	beq	r4,zero,137f8 <__adddf3+0x61c>
   13700:	00c6303a 	nor	r3,zero,r3
   13704:	18003a1e 	bne	r3,zero,137f0 <__adddf3+0x614>
   13708:	3463c83a 	sub	r17,r6,r17
   1370c:	4a07c83a 	sub	r3,r9,r8
   13710:	344d803a 	cmpltu	r6,r6,r17
   13714:	1991c83a 	sub	r8,r3,r6
   13718:	1021883a 	mov	r16,r2
   1371c:	3825883a 	mov	r18,r7
   13720:	003f0a06 	br	1334c <_gp+0xfffeea9c>
   13724:	2023883a 	mov	r17,r4
   13728:	003f0d06 	br	13360 <_gp+0xfffeeab0>
   1372c:	0081ffc4 	movi	r2,2047
   13730:	80bf3f1e 	bne	r16,r2,13430 <_gp+0xfffeeb80>
   13734:	003ec806 	br	13258 <_gp+0xfffee9a8>
   13738:	0005883a 	mov	r2,zero
   1373c:	003fb106 	br	13604 <_gp+0xfffeed54>
   13740:	0007883a 	mov	r3,zero
   13744:	003fbc06 	br	13638 <_gp+0xfffeed88>
   13748:	4444b03a 	or	r2,r8,r17
   1374c:	8000871e 	bne	r16,zero,1396c <__adddf3+0x790>
   13750:	1000ba26 	beq	r2,zero,13a3c <__adddf3+0x860>
   13754:	4984b03a 	or	r2,r9,r6
   13758:	103ebf26 	beq	r2,zero,13258 <_gp+0xfffee9a8>
   1375c:	8985883a 	add	r2,r17,r6
   13760:	4247883a 	add	r3,r8,r9
   13764:	1451803a 	cmpltu	r8,r2,r17
   13768:	40d1883a 	add	r8,r8,r3
   1376c:	40c0202c 	andhi	r3,r8,128
   13770:	1023883a 	mov	r17,r2
   13774:	183f1a26 	beq	r3,zero,133e0 <_gp+0xfffeeb30>
   13778:	00bfe034 	movhi	r2,65408
   1377c:	10bfffc4 	addi	r2,r2,-1
   13780:	2021883a 	mov	r16,r4
   13784:	4090703a 	and	r8,r8,r2
   13788:	003eb306 	br	13258 <_gp+0xfffee9a8>
   1378c:	4444b03a 	or	r2,r8,r17
   13790:	8000291e 	bne	r16,zero,13838 <__adddf3+0x65c>
   13794:	10004b1e 	bne	r2,zero,138c4 <__adddf3+0x6e8>
   13798:	4990b03a 	or	r8,r9,r6
   1379c:	40008b26 	beq	r8,zero,139cc <__adddf3+0x7f0>
   137a0:	4811883a 	mov	r8,r9
   137a4:	3023883a 	mov	r17,r6
   137a8:	3825883a 	mov	r18,r7
   137ac:	003eaa06 	br	13258 <_gp+0xfffee9a8>
   137b0:	1021883a 	mov	r16,r2
   137b4:	0011883a 	mov	r8,zero
   137b8:	0005883a 	mov	r2,zero
   137bc:	003f0f06 	br	133fc <_gp+0xfffeeb4c>
   137c0:	217ff804 	addi	r5,r4,-32
   137c4:	00800804 	movi	r2,32
   137c8:	494ad83a 	srl	r5,r9,r5
   137cc:	20807d26 	beq	r4,r2,139c4 <__adddf3+0x7e8>
   137d0:	00801004 	movi	r2,64
   137d4:	1109c83a 	sub	r4,r2,r4
   137d8:	4912983a 	sll	r9,r9,r4
   137dc:	498cb03a 	or	r6,r9,r6
   137e0:	300cc03a 	cmpne	r6,r6,zero
   137e4:	298ab03a 	or	r5,r5,r6
   137e8:	0013883a 	mov	r9,zero
   137ec:	003f1506 	br	13444 <_gp+0xfffeeb94>
   137f0:	0101ffc4 	movi	r4,2047
   137f4:	113f9a1e 	bne	r2,r4,13660 <_gp+0xfffeedb0>
   137f8:	4811883a 	mov	r8,r9
   137fc:	3023883a 	mov	r17,r6
   13800:	1021883a 	mov	r16,r2
   13804:	3825883a 	mov	r18,r7
   13808:	003e9306 	br	13258 <_gp+0xfffee9a8>
   1380c:	8000161e 	bne	r16,zero,13868 <__adddf3+0x68c>
   13810:	444ab03a 	or	r5,r8,r17
   13814:	28005126 	beq	r5,zero,1395c <__adddf3+0x780>
   13818:	0108303a 	nor	r4,zero,r4
   1381c:	20004d1e 	bne	r4,zero,13954 <__adddf3+0x778>
   13820:	89a3883a 	add	r17,r17,r6
   13824:	4253883a 	add	r9,r8,r9
   13828:	898d803a 	cmpltu	r6,r17,r6
   1382c:	3251883a 	add	r8,r6,r9
   13830:	1021883a 	mov	r16,r2
   13834:	003f0806 	br	13458 <_gp+0xfffeeba8>
   13838:	1000301e 	bne	r2,zero,138fc <__adddf3+0x720>
   1383c:	4984b03a 	or	r2,r9,r6
   13840:	10007126 	beq	r2,zero,13a08 <__adddf3+0x82c>
   13844:	4811883a 	mov	r8,r9
   13848:	3023883a 	mov	r17,r6
   1384c:	3825883a 	mov	r18,r7
   13850:	0401ffc4 	movi	r16,2047
   13854:	003e8006 	br	13258 <_gp+0xfffee9a8>
   13858:	4462b03a 	or	r17,r8,r17
   1385c:	8822c03a 	cmpne	r17,r17,zero
   13860:	0007883a 	mov	r3,zero
   13864:	003f8b06 	br	13694 <_gp+0xfffeede4>
   13868:	0141ffc4 	movi	r5,2047
   1386c:	11403b26 	beq	r2,r5,1395c <__adddf3+0x780>
   13870:	0109c83a 	sub	r4,zero,r4
   13874:	42002034 	orhi	r8,r8,128
   13878:	01400e04 	movi	r5,56
   1387c:	29006716 	blt	r5,r4,13a1c <__adddf3+0x840>
   13880:	014007c4 	movi	r5,31
   13884:	29007016 	blt	r5,r4,13a48 <__adddf3+0x86c>
   13888:	01400804 	movi	r5,32
   1388c:	290bc83a 	sub	r5,r5,r4
   13890:	4154983a 	sll	r10,r8,r5
   13894:	890ed83a 	srl	r7,r17,r4
   13898:	894a983a 	sll	r5,r17,r5
   1389c:	4108d83a 	srl	r4,r8,r4
   138a0:	51e2b03a 	or	r17,r10,r7
   138a4:	280ac03a 	cmpne	r5,r5,zero
   138a8:	8962b03a 	or	r17,r17,r5
   138ac:	89a3883a 	add	r17,r17,r6
   138b0:	2253883a 	add	r9,r4,r9
   138b4:	898d803a 	cmpltu	r6,r17,r6
   138b8:	3251883a 	add	r8,r6,r9
   138bc:	1021883a 	mov	r16,r2
   138c0:	003ee506 	br	13458 <_gp+0xfffeeba8>
   138c4:	4984b03a 	or	r2,r9,r6
   138c8:	103e6326 	beq	r2,zero,13258 <_gp+0xfffee9a8>
   138cc:	8987c83a 	sub	r3,r17,r6
   138d0:	88c9803a 	cmpltu	r4,r17,r3
   138d4:	4245c83a 	sub	r2,r8,r9
   138d8:	1105c83a 	sub	r2,r2,r4
   138dc:	1100202c 	andhi	r4,r2,128
   138e0:	203ebb26 	beq	r4,zero,133d0 <_gp+0xfffeeb20>
   138e4:	3463c83a 	sub	r17,r6,r17
   138e8:	4a07c83a 	sub	r3,r9,r8
   138ec:	344d803a 	cmpltu	r6,r6,r17
   138f0:	1991c83a 	sub	r8,r3,r6
   138f4:	3825883a 	mov	r18,r7
   138f8:	003e5706 	br	13258 <_gp+0xfffee9a8>
   138fc:	4984b03a 	or	r2,r9,r6
   13900:	10002e26 	beq	r2,zero,139bc <__adddf3+0x7e0>
   13904:	4004d0fa 	srli	r2,r8,3
   13908:	8822d0fa 	srli	r17,r17,3
   1390c:	4010977a 	slli	r8,r8,29
   13910:	10c0022c 	andhi	r3,r2,8
   13914:	4462b03a 	or	r17,r8,r17
   13918:	18000826 	beq	r3,zero,1393c <__adddf3+0x760>
   1391c:	4808d0fa 	srli	r4,r9,3
   13920:	20c0022c 	andhi	r3,r4,8
   13924:	1800051e 	bne	r3,zero,1393c <__adddf3+0x760>
   13928:	300cd0fa 	srli	r6,r6,3
   1392c:	4806977a 	slli	r3,r9,29
   13930:	2005883a 	mov	r2,r4
   13934:	3825883a 	mov	r18,r7
   13938:	19a2b03a 	or	r17,r3,r6
   1393c:	8810d77a 	srli	r8,r17,29
   13940:	100490fa 	slli	r2,r2,3
   13944:	882290fa 	slli	r17,r17,3
   13948:	0401ffc4 	movi	r16,2047
   1394c:	4090b03a 	or	r8,r8,r2
   13950:	003e4106 	br	13258 <_gp+0xfffee9a8>
   13954:	0141ffc4 	movi	r5,2047
   13958:	117fc71e 	bne	r2,r5,13878 <_gp+0xfffeefc8>
   1395c:	4811883a 	mov	r8,r9
   13960:	3023883a 	mov	r17,r6
   13964:	1021883a 	mov	r16,r2
   13968:	003e3b06 	br	13258 <_gp+0xfffee9a8>
   1396c:	10002f26 	beq	r2,zero,13a2c <__adddf3+0x850>
   13970:	4984b03a 	or	r2,r9,r6
   13974:	10001126 	beq	r2,zero,139bc <__adddf3+0x7e0>
   13978:	4004d0fa 	srli	r2,r8,3
   1397c:	8822d0fa 	srli	r17,r17,3
   13980:	4010977a 	slli	r8,r8,29
   13984:	10c0022c 	andhi	r3,r2,8
   13988:	4462b03a 	or	r17,r8,r17
   1398c:	183feb26 	beq	r3,zero,1393c <_gp+0xfffef08c>
   13990:	4808d0fa 	srli	r4,r9,3
   13994:	20c0022c 	andhi	r3,r4,8
   13998:	183fe81e 	bne	r3,zero,1393c <_gp+0xfffef08c>
   1399c:	300cd0fa 	srli	r6,r6,3
   139a0:	4806977a 	slli	r3,r9,29
   139a4:	2005883a 	mov	r2,r4
   139a8:	19a2b03a 	or	r17,r3,r6
   139ac:	003fe306 	br	1393c <_gp+0xfffef08c>
   139b0:	0011883a 	mov	r8,zero
   139b4:	0005883a 	mov	r2,zero
   139b8:	003e3f06 	br	132b8 <_gp+0xfffeea08>
   139bc:	0401ffc4 	movi	r16,2047
   139c0:	003e2506 	br	13258 <_gp+0xfffee9a8>
   139c4:	0013883a 	mov	r9,zero
   139c8:	003f8406 	br	137dc <_gp+0xfffeef2c>
   139cc:	0005883a 	mov	r2,zero
   139d0:	0007883a 	mov	r3,zero
   139d4:	003e8906 	br	133fc <_gp+0xfffeeb4c>
   139d8:	197ff804 	addi	r5,r3,-32
   139dc:	01000804 	movi	r4,32
   139e0:	414ad83a 	srl	r5,r8,r5
   139e4:	19002426 	beq	r3,r4,13a78 <__adddf3+0x89c>
   139e8:	01001004 	movi	r4,64
   139ec:	20c7c83a 	sub	r3,r4,r3
   139f0:	40c6983a 	sll	r3,r8,r3
   139f4:	1c46b03a 	or	r3,r3,r17
   139f8:	1806c03a 	cmpne	r3,r3,zero
   139fc:	28e2b03a 	or	r17,r5,r3
   13a00:	0007883a 	mov	r3,zero
   13a04:	003f2306 	br	13694 <_gp+0xfffeede4>
   13a08:	0007883a 	mov	r3,zero
   13a0c:	5811883a 	mov	r8,r11
   13a10:	00bfffc4 	movi	r2,-1
   13a14:	0401ffc4 	movi	r16,2047
   13a18:	003e7806 	br	133fc <_gp+0xfffeeb4c>
   13a1c:	4462b03a 	or	r17,r8,r17
   13a20:	8822c03a 	cmpne	r17,r17,zero
   13a24:	0009883a 	mov	r4,zero
   13a28:	003fa006 	br	138ac <_gp+0xfffeeffc>
   13a2c:	4811883a 	mov	r8,r9
   13a30:	3023883a 	mov	r17,r6
   13a34:	0401ffc4 	movi	r16,2047
   13a38:	003e0706 	br	13258 <_gp+0xfffee9a8>
   13a3c:	4811883a 	mov	r8,r9
   13a40:	3023883a 	mov	r17,r6
   13a44:	003e0406 	br	13258 <_gp+0xfffee9a8>
   13a48:	21fff804 	addi	r7,r4,-32
   13a4c:	01400804 	movi	r5,32
   13a50:	41ced83a 	srl	r7,r8,r7
   13a54:	21400a26 	beq	r4,r5,13a80 <__adddf3+0x8a4>
   13a58:	01401004 	movi	r5,64
   13a5c:	2909c83a 	sub	r4,r5,r4
   13a60:	4108983a 	sll	r4,r8,r4
   13a64:	2448b03a 	or	r4,r4,r17
   13a68:	2008c03a 	cmpne	r4,r4,zero
   13a6c:	3922b03a 	or	r17,r7,r4
   13a70:	0009883a 	mov	r4,zero
   13a74:	003f8d06 	br	138ac <_gp+0xfffeeffc>
   13a78:	0007883a 	mov	r3,zero
   13a7c:	003fdd06 	br	139f4 <_gp+0xfffef144>
   13a80:	0009883a 	mov	r4,zero
   13a84:	003ff706 	br	13a64 <_gp+0xfffef1b4>

00013a88 <__divdf3>:
   13a88:	defff004 	addi	sp,sp,-64
   13a8c:	dc800815 	stw	r18,32(sp)
   13a90:	2824d53a 	srli	r18,r5,20
   13a94:	dd800c15 	stw	r22,48(sp)
   13a98:	282cd7fa 	srli	r22,r5,31
   13a9c:	dc000615 	stw	r16,24(sp)
   13aa0:	04000434 	movhi	r16,16
   13aa4:	843fffc4 	addi	r16,r16,-1
   13aa8:	dfc00f15 	stw	ra,60(sp)
   13aac:	df000e15 	stw	fp,56(sp)
   13ab0:	ddc00d15 	stw	r23,52(sp)
   13ab4:	dd400b15 	stw	r21,44(sp)
   13ab8:	dd000a15 	stw	r20,40(sp)
   13abc:	dcc00915 	stw	r19,36(sp)
   13ac0:	dc400715 	stw	r17,28(sp)
   13ac4:	9481ffcc 	andi	r18,r18,2047
   13ac8:	2c20703a 	and	r16,r5,r16
   13acc:	b2003fcc 	andi	r8,r22,255
   13ad0:	90006126 	beq	r18,zero,13c58 <__divdf3+0x1d0>
   13ad4:	0081ffc4 	movi	r2,2047
   13ad8:	202b883a 	mov	r21,r4
   13adc:	90803726 	beq	r18,r2,13bbc <__divdf3+0x134>
   13ae0:	80800434 	orhi	r2,r16,16
   13ae4:	100490fa 	slli	r2,r2,3
   13ae8:	2020d77a 	srli	r16,r4,29
   13aec:	202a90fa 	slli	r21,r4,3
   13af0:	94bf0044 	addi	r18,r18,-1023
   13af4:	80a0b03a 	or	r16,r16,r2
   13af8:	0013883a 	mov	r9,zero
   13afc:	000b883a 	mov	r5,zero
   13b00:	3806d53a 	srli	r3,r7,20
   13b04:	382ed7fa 	srli	r23,r7,31
   13b08:	04400434 	movhi	r17,16
   13b0c:	8c7fffc4 	addi	r17,r17,-1
   13b10:	18c1ffcc 	andi	r3,r3,2047
   13b14:	3029883a 	mov	r20,r6
   13b18:	3c62703a 	and	r17,r7,r17
   13b1c:	bf003fcc 	andi	fp,r23,255
   13b20:	18006e26 	beq	r3,zero,13cdc <__divdf3+0x254>
   13b24:	0081ffc4 	movi	r2,2047
   13b28:	18806626 	beq	r3,r2,13cc4 <__divdf3+0x23c>
   13b2c:	88800434 	orhi	r2,r17,16
   13b30:	100490fa 	slli	r2,r2,3
   13b34:	3022d77a 	srli	r17,r6,29
   13b38:	302890fa 	slli	r20,r6,3
   13b3c:	18ff0044 	addi	r3,r3,-1023
   13b40:	88a2b03a 	or	r17,r17,r2
   13b44:	000f883a 	mov	r7,zero
   13b48:	b5e6f03a 	xor	r19,r22,r23
   13b4c:	3a4cb03a 	or	r6,r7,r9
   13b50:	008003c4 	movi	r2,15
   13b54:	9809883a 	mov	r4,r19
   13b58:	90c7c83a 	sub	r3,r18,r3
   13b5c:	9cc03fcc 	andi	r19,r19,255
   13b60:	11809636 	bltu	r2,r6,13dbc <__divdf3+0x334>
   13b64:	300c90ba 	slli	r6,r6,2
   13b68:	00800074 	movhi	r2,1
   13b6c:	108edf04 	addi	r2,r2,15228
   13b70:	308d883a 	add	r6,r6,r2
   13b74:	30800017 	ldw	r2,0(r6)
   13b78:	1000683a 	jmp	r2
   13b7c:	00013dbc 	xorhi	zero,zero,1270
   13b80:	00013bf4 	movhi	zero,1263
   13b84:	00013dac 	andhi	zero,zero,1270
   13b88:	00013be8 	cmpgeui	zero,zero,1263
   13b8c:	00013dac 	andhi	zero,zero,1270
   13b90:	00013d80 	call	13d8 <__alt_mem_onchip_memory-0xec28>
   13b94:	00013dac 	andhi	zero,zero,1270
   13b98:	00013be8 	cmpgeui	zero,zero,1263
   13b9c:	00013bf4 	movhi	zero,1263
   13ba0:	00013bf4 	movhi	zero,1263
   13ba4:	00013d80 	call	13d8 <__alt_mem_onchip_memory-0xec28>
   13ba8:	00013be8 	cmpgeui	zero,zero,1263
   13bac:	00013bd8 	cmpnei	zero,zero,1263
   13bb0:	00013bd8 	cmpnei	zero,zero,1263
   13bb4:	00013bd8 	cmpnei	zero,zero,1263
   13bb8:	00014144 	movi	zero,1285
   13bbc:	2404b03a 	or	r2,r4,r16
   13bc0:	10006c1e 	bne	r2,zero,13d74 <__divdf3+0x2ec>
   13bc4:	02400204 	movi	r9,8
   13bc8:	0021883a 	mov	r16,zero
   13bcc:	002b883a 	mov	r21,zero
   13bd0:	01400084 	movi	r5,2
   13bd4:	003fca06 	br	13b00 <_gp+0xfffef250>
   13bd8:	8023883a 	mov	r17,r16
   13bdc:	a829883a 	mov	r20,r21
   13be0:	4039883a 	mov	fp,r8
   13be4:	280f883a 	mov	r7,r5
   13be8:	00800084 	movi	r2,2
   13bec:	3881601e 	bne	r7,r2,14170 <__divdf3+0x6e8>
   13bf0:	e027883a 	mov	r19,fp
   13bf4:	9900004c 	andi	r4,r19,1
   13bf8:	0081ffc4 	movi	r2,2047
   13bfc:	0021883a 	mov	r16,zero
   13c00:	002b883a 	mov	r21,zero
   13c04:	1004953a 	slli	r2,r2,20
   13c08:	20c03fcc 	andi	r3,r4,255
   13c0c:	01400434 	movhi	r5,16
   13c10:	297fffc4 	addi	r5,r5,-1
   13c14:	180697fa 	slli	r3,r3,31
   13c18:	8160703a 	and	r16,r16,r5
   13c1c:	80a0b03a 	or	r16,r16,r2
   13c20:	80c6b03a 	or	r3,r16,r3
   13c24:	a805883a 	mov	r2,r21
   13c28:	dfc00f17 	ldw	ra,60(sp)
   13c2c:	df000e17 	ldw	fp,56(sp)
   13c30:	ddc00d17 	ldw	r23,52(sp)
   13c34:	dd800c17 	ldw	r22,48(sp)
   13c38:	dd400b17 	ldw	r21,44(sp)
   13c3c:	dd000a17 	ldw	r20,40(sp)
   13c40:	dcc00917 	ldw	r19,36(sp)
   13c44:	dc800817 	ldw	r18,32(sp)
   13c48:	dc400717 	ldw	r17,28(sp)
   13c4c:	dc000617 	ldw	r16,24(sp)
   13c50:	dec01004 	addi	sp,sp,64
   13c54:	f800283a 	ret
   13c58:	2404b03a 	or	r2,r4,r16
   13c5c:	2023883a 	mov	r17,r4
   13c60:	10003f26 	beq	r2,zero,13d60 <__divdf3+0x2d8>
   13c64:	80015e26 	beq	r16,zero,141e0 <__divdf3+0x758>
   13c68:	8009883a 	mov	r4,r16
   13c6c:	d9800215 	stw	r6,8(sp)
   13c70:	d9c00515 	stw	r7,20(sp)
   13c74:	da000415 	stw	r8,16(sp)
   13c78:	0015a840 	call	15a84 <__clzsi2>
   13c7c:	d9800217 	ldw	r6,8(sp)
   13c80:	d9c00517 	ldw	r7,20(sp)
   13c84:	da000417 	ldw	r8,16(sp)
   13c88:	113ffd44 	addi	r4,r2,-11
   13c8c:	00c00704 	movi	r3,28
   13c90:	19014f16 	blt	r3,r4,141d0 <__divdf3+0x748>
   13c94:	00c00744 	movi	r3,29
   13c98:	157ffe04 	addi	r21,r2,-8
   13c9c:	1907c83a 	sub	r3,r3,r4
   13ca0:	8560983a 	sll	r16,r16,r21
   13ca4:	88c6d83a 	srl	r3,r17,r3
   13ca8:	8d6a983a 	sll	r21,r17,r21
   13cac:	1c20b03a 	or	r16,r3,r16
   13cb0:	1080fcc4 	addi	r2,r2,1011
   13cb4:	00a5c83a 	sub	r18,zero,r2
   13cb8:	0013883a 	mov	r9,zero
   13cbc:	000b883a 	mov	r5,zero
   13cc0:	003f8f06 	br	13b00 <_gp+0xfffef250>
   13cc4:	3444b03a 	or	r2,r6,r17
   13cc8:	1000231e 	bne	r2,zero,13d58 <__divdf3+0x2d0>
   13ccc:	0023883a 	mov	r17,zero
   13cd0:	0029883a 	mov	r20,zero
   13cd4:	01c00084 	movi	r7,2
   13cd8:	003f9b06 	br	13b48 <_gp+0xfffef298>
   13cdc:	3444b03a 	or	r2,r6,r17
   13ce0:	10001926 	beq	r2,zero,13d48 <__divdf3+0x2c0>
   13ce4:	88014b26 	beq	r17,zero,14214 <__divdf3+0x78c>
   13ce8:	8809883a 	mov	r4,r17
   13cec:	d9400115 	stw	r5,4(sp)
   13cf0:	d9800215 	stw	r6,8(sp)
   13cf4:	da000415 	stw	r8,16(sp)
   13cf8:	da400315 	stw	r9,12(sp)
   13cfc:	0015a840 	call	15a84 <__clzsi2>
   13d00:	d9400117 	ldw	r5,4(sp)
   13d04:	d9800217 	ldw	r6,8(sp)
   13d08:	da000417 	ldw	r8,16(sp)
   13d0c:	da400317 	ldw	r9,12(sp)
   13d10:	113ffd44 	addi	r4,r2,-11
   13d14:	00c00704 	movi	r3,28
   13d18:	19013a16 	blt	r3,r4,14204 <__divdf3+0x77c>
   13d1c:	00c00744 	movi	r3,29
   13d20:	153ffe04 	addi	r20,r2,-8
   13d24:	1907c83a 	sub	r3,r3,r4
   13d28:	8d22983a 	sll	r17,r17,r20
   13d2c:	30c6d83a 	srl	r3,r6,r3
   13d30:	3528983a 	sll	r20,r6,r20
   13d34:	1c62b03a 	or	r17,r3,r17
   13d38:	1080fcc4 	addi	r2,r2,1011
   13d3c:	0087c83a 	sub	r3,zero,r2
   13d40:	000f883a 	mov	r7,zero
   13d44:	003f8006 	br	13b48 <_gp+0xfffef298>
   13d48:	0023883a 	mov	r17,zero
   13d4c:	0029883a 	mov	r20,zero
   13d50:	01c00044 	movi	r7,1
   13d54:	003f7c06 	br	13b48 <_gp+0xfffef298>
   13d58:	01c000c4 	movi	r7,3
   13d5c:	003f7a06 	br	13b48 <_gp+0xfffef298>
   13d60:	02400104 	movi	r9,4
   13d64:	0021883a 	mov	r16,zero
   13d68:	002b883a 	mov	r21,zero
   13d6c:	01400044 	movi	r5,1
   13d70:	003f6306 	br	13b00 <_gp+0xfffef250>
   13d74:	02400304 	movi	r9,12
   13d78:	014000c4 	movi	r5,3
   13d7c:	003f6006 	br	13b00 <_gp+0xfffef250>
   13d80:	04000434 	movhi	r16,16
   13d84:	0009883a 	mov	r4,zero
   13d88:	843fffc4 	addi	r16,r16,-1
   13d8c:	057fffc4 	movi	r21,-1
   13d90:	0081ffc4 	movi	r2,2047
   13d94:	003f9b06 	br	13c04 <_gp+0xfffef354>
   13d98:	00c00044 	movi	r3,1
   13d9c:	1887c83a 	sub	r3,r3,r2
   13da0:	01000e04 	movi	r4,56
   13da4:	20c1530e 	bge	r4,r3,142f4 <__divdf3+0x86c>
   13da8:	9900004c 	andi	r4,r19,1
   13dac:	0005883a 	mov	r2,zero
   13db0:	0021883a 	mov	r16,zero
   13db4:	002b883a 	mov	r21,zero
   13db8:	003f9206 	br	13c04 <_gp+0xfffef354>
   13dbc:	8c012e36 	bltu	r17,r16,14278 <__divdf3+0x7f0>
   13dc0:	84412c26 	beq	r16,r17,14274 <__divdf3+0x7ec>
   13dc4:	a82f883a 	mov	r23,r21
   13dc8:	18ffffc4 	addi	r3,r3,-1
   13dcc:	002b883a 	mov	r21,zero
   13dd0:	a004d63a 	srli	r2,r20,24
   13dd4:	8822923a 	slli	r17,r17,8
   13dd8:	a028923a 	slli	r20,r20,8
   13ddc:	8009883a 	mov	r4,r16
   13de0:	88acb03a 	or	r22,r17,r2
   13de4:	dd000015 	stw	r20,0(sp)
   13de8:	b028d43a 	srli	r20,r22,16
   13dec:	d8c00215 	stw	r3,8(sp)
   13df0:	b4bfffcc 	andi	r18,r22,65535
   13df4:	a00b883a 	mov	r5,r20
   13df8:	0015be00 	call	15be0 <__udivsi3>
   13dfc:	100b883a 	mov	r5,r2
   13e00:	9009883a 	mov	r4,r18
   13e04:	1023883a 	mov	r17,r2
   13e08:	00127280 	call	12728 <__mulsi3>
   13e0c:	8009883a 	mov	r4,r16
   13e10:	a00b883a 	mov	r5,r20
   13e14:	1039883a 	mov	fp,r2
   13e18:	0015c440 	call	15c44 <__umodsi3>
   13e1c:	1004943a 	slli	r2,r2,16
   13e20:	b808d43a 	srli	r4,r23,16
   13e24:	d8c00217 	ldw	r3,8(sp)
   13e28:	2084b03a 	or	r2,r4,r2
   13e2c:	1700062e 	bgeu	r2,fp,13e48 <__divdf3+0x3c0>
   13e30:	1585883a 	add	r2,r2,r22
   13e34:	893fffc4 	addi	r4,r17,-1
   13e38:	15811d36 	bltu	r2,r22,142b0 <__divdf3+0x828>
   13e3c:	17011c2e 	bgeu	r2,fp,142b0 <__divdf3+0x828>
   13e40:	8c7fff84 	addi	r17,r17,-2
   13e44:	1585883a 	add	r2,r2,r22
   13e48:	1739c83a 	sub	fp,r2,fp
   13e4c:	a00b883a 	mov	r5,r20
   13e50:	e009883a 	mov	r4,fp
   13e54:	d8c00215 	stw	r3,8(sp)
   13e58:	0015be00 	call	15be0 <__udivsi3>
   13e5c:	100b883a 	mov	r5,r2
   13e60:	9009883a 	mov	r4,r18
   13e64:	1021883a 	mov	r16,r2
   13e68:	00127280 	call	12728 <__mulsi3>
   13e6c:	a00b883a 	mov	r5,r20
   13e70:	e009883a 	mov	r4,fp
   13e74:	d8800415 	stw	r2,16(sp)
   13e78:	0015c440 	call	15c44 <__umodsi3>
   13e7c:	1004943a 	slli	r2,r2,16
   13e80:	da000417 	ldw	r8,16(sp)
   13e84:	bdffffcc 	andi	r23,r23,65535
   13e88:	b884b03a 	or	r2,r23,r2
   13e8c:	d8c00217 	ldw	r3,8(sp)
   13e90:	1200062e 	bgeu	r2,r8,13eac <__divdf3+0x424>
   13e94:	1585883a 	add	r2,r2,r22
   13e98:	813fffc4 	addi	r4,r16,-1
   13e9c:	15810236 	bltu	r2,r22,142a8 <__divdf3+0x820>
   13ea0:	1201012e 	bgeu	r2,r8,142a8 <__divdf3+0x820>
   13ea4:	843fff84 	addi	r16,r16,-2
   13ea8:	1585883a 	add	r2,r2,r22
   13eac:	8822943a 	slli	r17,r17,16
   13eb0:	d9800017 	ldw	r6,0(sp)
   13eb4:	1211c83a 	sub	r8,r2,r8
   13eb8:	8c22b03a 	or	r17,r17,r16
   13ebc:	373fffcc 	andi	fp,r6,65535
   13ec0:	8abfffcc 	andi	r10,r17,65535
   13ec4:	8820d43a 	srli	r16,r17,16
   13ec8:	5009883a 	mov	r4,r10
   13ecc:	e00b883a 	mov	r5,fp
   13ed0:	302ed43a 	srli	r23,r6,16
   13ed4:	d8c00215 	stw	r3,8(sp)
   13ed8:	da000415 	stw	r8,16(sp)
   13edc:	da800115 	stw	r10,4(sp)
   13ee0:	00127280 	call	12728 <__mulsi3>
   13ee4:	800b883a 	mov	r5,r16
   13ee8:	e009883a 	mov	r4,fp
   13eec:	d8800515 	stw	r2,20(sp)
   13ef0:	00127280 	call	12728 <__mulsi3>
   13ef4:	8009883a 	mov	r4,r16
   13ef8:	b80b883a 	mov	r5,r23
   13efc:	d8800315 	stw	r2,12(sp)
   13f00:	00127280 	call	12728 <__mulsi3>
   13f04:	da800117 	ldw	r10,4(sp)
   13f08:	b80b883a 	mov	r5,r23
   13f0c:	1021883a 	mov	r16,r2
   13f10:	5009883a 	mov	r4,r10
   13f14:	00127280 	call	12728 <__mulsi3>
   13f18:	d9c00517 	ldw	r7,20(sp)
   13f1c:	da400317 	ldw	r9,12(sp)
   13f20:	d8c00217 	ldw	r3,8(sp)
   13f24:	3808d43a 	srli	r4,r7,16
   13f28:	1245883a 	add	r2,r2,r9
   13f2c:	da000417 	ldw	r8,16(sp)
   13f30:	2085883a 	add	r2,r4,r2
   13f34:	1240022e 	bgeu	r2,r9,13f40 <__divdf3+0x4b8>
   13f38:	01000074 	movhi	r4,1
   13f3c:	8121883a 	add	r16,r16,r4
   13f40:	1008d43a 	srli	r4,r2,16
   13f44:	1004943a 	slli	r2,r2,16
   13f48:	39ffffcc 	andi	r7,r7,65535
   13f4c:	2409883a 	add	r4,r4,r16
   13f50:	11c5883a 	add	r2,r2,r7
   13f54:	4100bb36 	bltu	r8,r4,14244 <__divdf3+0x7bc>
   13f58:	4100d726 	beq	r8,r4,142b8 <__divdf3+0x830>
   13f5c:	4109c83a 	sub	r4,r8,r4
   13f60:	a8a1c83a 	sub	r16,r21,r2
   13f64:	ac2b803a 	cmpltu	r21,r21,r16
   13f68:	256bc83a 	sub	r21,r4,r21
   13f6c:	b540d926 	beq	r22,r21,142d4 <__divdf3+0x84c>
   13f70:	a00b883a 	mov	r5,r20
   13f74:	a809883a 	mov	r4,r21
   13f78:	d8c00215 	stw	r3,8(sp)
   13f7c:	0015be00 	call	15be0 <__udivsi3>
   13f80:	100b883a 	mov	r5,r2
   13f84:	9009883a 	mov	r4,r18
   13f88:	d8800515 	stw	r2,20(sp)
   13f8c:	00127280 	call	12728 <__mulsi3>
   13f90:	a809883a 	mov	r4,r21
   13f94:	a00b883a 	mov	r5,r20
   13f98:	d8800415 	stw	r2,16(sp)
   13f9c:	0015c440 	call	15c44 <__umodsi3>
   13fa0:	1004943a 	slli	r2,r2,16
   13fa4:	8008d43a 	srli	r4,r16,16
   13fa8:	da000417 	ldw	r8,16(sp)
   13fac:	d8c00217 	ldw	r3,8(sp)
   13fb0:	2084b03a 	or	r2,r4,r2
   13fb4:	d9c00517 	ldw	r7,20(sp)
   13fb8:	1200062e 	bgeu	r2,r8,13fd4 <__divdf3+0x54c>
   13fbc:	1585883a 	add	r2,r2,r22
   13fc0:	393fffc4 	addi	r4,r7,-1
   13fc4:	1580c536 	bltu	r2,r22,142dc <__divdf3+0x854>
   13fc8:	1200c42e 	bgeu	r2,r8,142dc <__divdf3+0x854>
   13fcc:	39ffff84 	addi	r7,r7,-2
   13fd0:	1585883a 	add	r2,r2,r22
   13fd4:	122bc83a 	sub	r21,r2,r8
   13fd8:	a00b883a 	mov	r5,r20
   13fdc:	a809883a 	mov	r4,r21
   13fe0:	d8c00215 	stw	r3,8(sp)
   13fe4:	d9c00515 	stw	r7,20(sp)
   13fe8:	0015be00 	call	15be0 <__udivsi3>
   13fec:	9009883a 	mov	r4,r18
   13ff0:	100b883a 	mov	r5,r2
   13ff4:	d8800415 	stw	r2,16(sp)
   13ff8:	00127280 	call	12728 <__mulsi3>
   13ffc:	a809883a 	mov	r4,r21
   14000:	a00b883a 	mov	r5,r20
   14004:	1025883a 	mov	r18,r2
   14008:	0015c440 	call	15c44 <__umodsi3>
   1400c:	1004943a 	slli	r2,r2,16
   14010:	813fffcc 	andi	r4,r16,65535
   14014:	d8c00217 	ldw	r3,8(sp)
   14018:	20a0b03a 	or	r16,r4,r2
   1401c:	d9c00517 	ldw	r7,20(sp)
   14020:	da000417 	ldw	r8,16(sp)
   14024:	8480062e 	bgeu	r16,r18,14040 <__divdf3+0x5b8>
   14028:	85a1883a 	add	r16,r16,r22
   1402c:	40bfffc4 	addi	r2,r8,-1
   14030:	8580ac36 	bltu	r16,r22,142e4 <__divdf3+0x85c>
   14034:	8480ab2e 	bgeu	r16,r18,142e4 <__divdf3+0x85c>
   14038:	423fff84 	addi	r8,r8,-2
   1403c:	85a1883a 	add	r16,r16,r22
   14040:	3804943a 	slli	r2,r7,16
   14044:	84a1c83a 	sub	r16,r16,r18
   14048:	e009883a 	mov	r4,fp
   1404c:	1228b03a 	or	r20,r2,r8
   14050:	a1ffffcc 	andi	r7,r20,65535
   14054:	a024d43a 	srli	r18,r20,16
   14058:	380b883a 	mov	r5,r7
   1405c:	d8c00215 	stw	r3,8(sp)
   14060:	d9c00515 	stw	r7,20(sp)
   14064:	00127280 	call	12728 <__mulsi3>
   14068:	900b883a 	mov	r5,r18
   1406c:	e009883a 	mov	r4,fp
   14070:	102b883a 	mov	r21,r2
   14074:	00127280 	call	12728 <__mulsi3>
   14078:	900b883a 	mov	r5,r18
   1407c:	b809883a 	mov	r4,r23
   14080:	1039883a 	mov	fp,r2
   14084:	00127280 	call	12728 <__mulsi3>
   14088:	d9c00517 	ldw	r7,20(sp)
   1408c:	b80b883a 	mov	r5,r23
   14090:	1025883a 	mov	r18,r2
   14094:	3809883a 	mov	r4,r7
   14098:	00127280 	call	12728 <__mulsi3>
   1409c:	a808d43a 	srli	r4,r21,16
   140a0:	1705883a 	add	r2,r2,fp
   140a4:	d8c00217 	ldw	r3,8(sp)
   140a8:	2085883a 	add	r2,r4,r2
   140ac:	1700022e 	bgeu	r2,fp,140b8 <__divdf3+0x630>
   140b0:	01000074 	movhi	r4,1
   140b4:	9125883a 	add	r18,r18,r4
   140b8:	1008d43a 	srli	r4,r2,16
   140bc:	1004943a 	slli	r2,r2,16
   140c0:	ad7fffcc 	andi	r21,r21,65535
   140c4:	2489883a 	add	r4,r4,r18
   140c8:	1545883a 	add	r2,r2,r21
   140cc:	81003836 	bltu	r16,r4,141b0 <__divdf3+0x728>
   140d0:	81003626 	beq	r16,r4,141ac <__divdf3+0x724>
   140d4:	a5000054 	ori	r20,r20,1
   140d8:	1880ffc4 	addi	r2,r3,1023
   140dc:	00bf2e0e 	bge	zero,r2,13d98 <_gp+0xfffef4e8>
   140e0:	a10001cc 	andi	r4,r20,7
   140e4:	20000726 	beq	r4,zero,14104 <__divdf3+0x67c>
   140e8:	a10003cc 	andi	r4,r20,15
   140ec:	01400104 	movi	r5,4
   140f0:	21400426 	beq	r4,r5,14104 <__divdf3+0x67c>
   140f4:	a149883a 	add	r4,r20,r5
   140f8:	2529803a 	cmpltu	r20,r4,r20
   140fc:	8d23883a 	add	r17,r17,r20
   14100:	2029883a 	mov	r20,r4
   14104:	8900402c 	andhi	r4,r17,256
   14108:	20000426 	beq	r4,zero,1411c <__divdf3+0x694>
   1410c:	18810004 	addi	r2,r3,1024
   14110:	00ffc034 	movhi	r3,65280
   14114:	18ffffc4 	addi	r3,r3,-1
   14118:	88e2703a 	and	r17,r17,r3
   1411c:	00c1ff84 	movi	r3,2046
   14120:	18beb416 	blt	r3,r2,13bf4 <_gp+0xfffef344>
   14124:	a028d0fa 	srli	r20,r20,3
   14128:	882a977a 	slli	r21,r17,29
   1412c:	8820927a 	slli	r16,r17,9
   14130:	1081ffcc 	andi	r2,r2,2047
   14134:	ad2ab03a 	or	r21,r21,r20
   14138:	8020d33a 	srli	r16,r16,12
   1413c:	9900004c 	andi	r4,r19,1
   14140:	003eb006 	br	13c04 <_gp+0xfffef354>
   14144:	8080022c 	andhi	r2,r16,8
   14148:	10001226 	beq	r2,zero,14194 <__divdf3+0x70c>
   1414c:	8880022c 	andhi	r2,r17,8
   14150:	1000101e 	bne	r2,zero,14194 <__divdf3+0x70c>
   14154:	00800434 	movhi	r2,16
   14158:	8c000234 	orhi	r16,r17,8
   1415c:	10bfffc4 	addi	r2,r2,-1
   14160:	b809883a 	mov	r4,r23
   14164:	80a0703a 	and	r16,r16,r2
   14168:	a02b883a 	mov	r21,r20
   1416c:	003f0806 	br	13d90 <_gp+0xfffef4e0>
   14170:	008000c4 	movi	r2,3
   14174:	3880b126 	beq	r7,r2,1443c <__divdf3+0x9b4>
   14178:	00800044 	movi	r2,1
   1417c:	38805b1e 	bne	r7,r2,142ec <__divdf3+0x864>
   14180:	e009883a 	mov	r4,fp
   14184:	0005883a 	mov	r2,zero
   14188:	0021883a 	mov	r16,zero
   1418c:	002b883a 	mov	r21,zero
   14190:	003e9c06 	br	13c04 <_gp+0xfffef354>
   14194:	00800434 	movhi	r2,16
   14198:	84000234 	orhi	r16,r16,8
   1419c:	10bfffc4 	addi	r2,r2,-1
   141a0:	b009883a 	mov	r4,r22
   141a4:	80a0703a 	and	r16,r16,r2
   141a8:	003ef906 	br	13d90 <_gp+0xfffef4e0>
   141ac:	103fca26 	beq	r2,zero,140d8 <_gp+0xfffef828>
   141b0:	b421883a 	add	r16,r22,r16
   141b4:	a17fffc4 	addi	r5,r20,-1
   141b8:	8580422e 	bgeu	r16,r22,142c4 <__divdf3+0x83c>
   141bc:	2829883a 	mov	r20,r5
   141c0:	813fc41e 	bne	r16,r4,140d4 <_gp+0xfffef824>
   141c4:	d9800017 	ldw	r6,0(sp)
   141c8:	30bfc21e 	bne	r6,r2,140d4 <_gp+0xfffef824>
   141cc:	003fc206 	br	140d8 <_gp+0xfffef828>
   141d0:	143ff604 	addi	r16,r2,-40
   141d4:	8c20983a 	sll	r16,r17,r16
   141d8:	002b883a 	mov	r21,zero
   141dc:	003eb406 	br	13cb0 <_gp+0xfffef400>
   141e0:	d9800215 	stw	r6,8(sp)
   141e4:	d9c00515 	stw	r7,20(sp)
   141e8:	da000415 	stw	r8,16(sp)
   141ec:	0015a840 	call	15a84 <__clzsi2>
   141f0:	10800804 	addi	r2,r2,32
   141f4:	da000417 	ldw	r8,16(sp)
   141f8:	d9c00517 	ldw	r7,20(sp)
   141fc:	d9800217 	ldw	r6,8(sp)
   14200:	003ea106 	br	13c88 <_gp+0xfffef3d8>
   14204:	147ff604 	addi	r17,r2,-40
   14208:	3462983a 	sll	r17,r6,r17
   1420c:	0029883a 	mov	r20,zero
   14210:	003ec906 	br	13d38 <_gp+0xfffef488>
   14214:	3009883a 	mov	r4,r6
   14218:	d9400115 	stw	r5,4(sp)
   1421c:	d9800215 	stw	r6,8(sp)
   14220:	da000415 	stw	r8,16(sp)
   14224:	da400315 	stw	r9,12(sp)
   14228:	0015a840 	call	15a84 <__clzsi2>
   1422c:	10800804 	addi	r2,r2,32
   14230:	da400317 	ldw	r9,12(sp)
   14234:	da000417 	ldw	r8,16(sp)
   14238:	d9800217 	ldw	r6,8(sp)
   1423c:	d9400117 	ldw	r5,4(sp)
   14240:	003eb306 	br	13d10 <_gp+0xfffef460>
   14244:	d9800017 	ldw	r6,0(sp)
   14248:	a9ab883a 	add	r21,r21,r6
   1424c:	a98b803a 	cmpltu	r5,r21,r6
   14250:	2d8b883a 	add	r5,r5,r22
   14254:	2a11883a 	add	r8,r5,r8
   14258:	897fffc4 	addi	r5,r17,-1
   1425c:	b2000c2e 	bgeu	r22,r8,14290 <__divdf3+0x808>
   14260:	41003f36 	bltu	r8,r4,14360 <__divdf3+0x8d8>
   14264:	22006c26 	beq	r4,r8,14418 <__divdf3+0x990>
   14268:	4109c83a 	sub	r4,r8,r4
   1426c:	2823883a 	mov	r17,r5
   14270:	003f3b06 	br	13f60 <_gp+0xfffef6b0>
   14274:	ad3ed336 	bltu	r21,r20,13dc4 <_gp+0xfffef514>
   14278:	a804d07a 	srli	r2,r21,1
   1427c:	802e97fa 	slli	r23,r16,31
   14280:	a82a97fa 	slli	r21,r21,31
   14284:	8020d07a 	srli	r16,r16,1
   14288:	b8aeb03a 	or	r23,r23,r2
   1428c:	003ed006 	br	13dd0 <_gp+0xfffef520>
   14290:	b23ff51e 	bne	r22,r8,14268 <_gp+0xfffef9b8>
   14294:	d9800017 	ldw	r6,0(sp)
   14298:	a9bff12e 	bgeu	r21,r6,14260 <_gp+0xfffef9b0>
   1429c:	b109c83a 	sub	r4,r22,r4
   142a0:	2823883a 	mov	r17,r5
   142a4:	003f2e06 	br	13f60 <_gp+0xfffef6b0>
   142a8:	2021883a 	mov	r16,r4
   142ac:	003eff06 	br	13eac <_gp+0xfffef5fc>
   142b0:	2023883a 	mov	r17,r4
   142b4:	003ee406 	br	13e48 <_gp+0xfffef598>
   142b8:	a8bfe236 	bltu	r21,r2,14244 <_gp+0xfffef994>
   142bc:	0009883a 	mov	r4,zero
   142c0:	003f2706 	br	13f60 <_gp+0xfffef6b0>
   142c4:	81002d36 	bltu	r16,r4,1437c <__divdf3+0x8f4>
   142c8:	24005626 	beq	r4,r16,14424 <__divdf3+0x99c>
   142cc:	2829883a 	mov	r20,r5
   142d0:	003f8006 	br	140d4 <_gp+0xfffef824>
   142d4:	053fffc4 	movi	r20,-1
   142d8:	003f7f06 	br	140d8 <_gp+0xfffef828>
   142dc:	200f883a 	mov	r7,r4
   142e0:	003f3c06 	br	13fd4 <_gp+0xfffef724>
   142e4:	1011883a 	mov	r8,r2
   142e8:	003f5506 	br	14040 <_gp+0xfffef790>
   142ec:	e027883a 	mov	r19,fp
   142f0:	003f7906 	br	140d8 <_gp+0xfffef828>
   142f4:	010007c4 	movi	r4,31
   142f8:	20c02816 	blt	r4,r3,1439c <__divdf3+0x914>
   142fc:	00800804 	movi	r2,32
   14300:	10c5c83a 	sub	r2,r2,r3
   14304:	888a983a 	sll	r5,r17,r2
   14308:	a0c8d83a 	srl	r4,r20,r3
   1430c:	a084983a 	sll	r2,r20,r2
   14310:	88e2d83a 	srl	r17,r17,r3
   14314:	2906b03a 	or	r3,r5,r4
   14318:	1004c03a 	cmpne	r2,r2,zero
   1431c:	1886b03a 	or	r3,r3,r2
   14320:	188001cc 	andi	r2,r3,7
   14324:	10000726 	beq	r2,zero,14344 <__divdf3+0x8bc>
   14328:	188003cc 	andi	r2,r3,15
   1432c:	01000104 	movi	r4,4
   14330:	11000426 	beq	r2,r4,14344 <__divdf3+0x8bc>
   14334:	1805883a 	mov	r2,r3
   14338:	10c00104 	addi	r3,r2,4
   1433c:	1885803a 	cmpltu	r2,r3,r2
   14340:	88a3883a 	add	r17,r17,r2
   14344:	8880202c 	andhi	r2,r17,128
   14348:	10002926 	beq	r2,zero,143f0 <__divdf3+0x968>
   1434c:	9900004c 	andi	r4,r19,1
   14350:	00800044 	movi	r2,1
   14354:	0021883a 	mov	r16,zero
   14358:	002b883a 	mov	r21,zero
   1435c:	003e2906 	br	13c04 <_gp+0xfffef354>
   14360:	d9800017 	ldw	r6,0(sp)
   14364:	8c7fff84 	addi	r17,r17,-2
   14368:	a9ab883a 	add	r21,r21,r6
   1436c:	a98b803a 	cmpltu	r5,r21,r6
   14370:	2d8b883a 	add	r5,r5,r22
   14374:	2a11883a 	add	r8,r5,r8
   14378:	003ef806 	br	13f5c <_gp+0xfffef6ac>
   1437c:	d9800017 	ldw	r6,0(sp)
   14380:	318f883a 	add	r7,r6,r6
   14384:	398b803a 	cmpltu	r5,r7,r6
   14388:	2d8d883a 	add	r6,r5,r22
   1438c:	81a1883a 	add	r16,r16,r6
   14390:	a17fff84 	addi	r5,r20,-2
   14394:	d9c00015 	stw	r7,0(sp)
   14398:	003f8806 	br	141bc <_gp+0xfffef90c>
   1439c:	013ff844 	movi	r4,-31
   143a0:	2085c83a 	sub	r2,r4,r2
   143a4:	8888d83a 	srl	r4,r17,r2
   143a8:	00800804 	movi	r2,32
   143ac:	18802126 	beq	r3,r2,14434 <__divdf3+0x9ac>
   143b0:	04001004 	movi	r16,64
   143b4:	80c7c83a 	sub	r3,r16,r3
   143b8:	88e0983a 	sll	r16,r17,r3
   143bc:	8504b03a 	or	r2,r16,r20
   143c0:	1004c03a 	cmpne	r2,r2,zero
   143c4:	2084b03a 	or	r2,r4,r2
   143c8:	144001cc 	andi	r17,r2,7
   143cc:	88000d1e 	bne	r17,zero,14404 <__divdf3+0x97c>
   143d0:	0021883a 	mov	r16,zero
   143d4:	102ad0fa 	srli	r21,r2,3
   143d8:	9900004c 	andi	r4,r19,1
   143dc:	0005883a 	mov	r2,zero
   143e0:	ac6ab03a 	or	r21,r21,r17
   143e4:	003e0706 	br	13c04 <_gp+0xfffef354>
   143e8:	1007883a 	mov	r3,r2
   143ec:	0023883a 	mov	r17,zero
   143f0:	8820927a 	slli	r16,r17,9
   143f4:	1805883a 	mov	r2,r3
   143f8:	8822977a 	slli	r17,r17,29
   143fc:	8020d33a 	srli	r16,r16,12
   14400:	003ff406 	br	143d4 <_gp+0xfffefb24>
   14404:	10c003cc 	andi	r3,r2,15
   14408:	01000104 	movi	r4,4
   1440c:	193ff626 	beq	r3,r4,143e8 <_gp+0xfffefb38>
   14410:	0023883a 	mov	r17,zero
   14414:	003fc806 	br	14338 <_gp+0xfffefa88>
   14418:	a8bfd136 	bltu	r21,r2,14360 <_gp+0xfffefab0>
   1441c:	2823883a 	mov	r17,r5
   14420:	003fa606 	br	142bc <_gp+0xfffefa0c>
   14424:	d9800017 	ldw	r6,0(sp)
   14428:	30bfd436 	bltu	r6,r2,1437c <_gp+0xfffefacc>
   1442c:	2829883a 	mov	r20,r5
   14430:	003f6406 	br	141c4 <_gp+0xfffef914>
   14434:	0021883a 	mov	r16,zero
   14438:	003fe006 	br	143bc <_gp+0xfffefb0c>
   1443c:	00800434 	movhi	r2,16
   14440:	8c000234 	orhi	r16,r17,8
   14444:	10bfffc4 	addi	r2,r2,-1
   14448:	e009883a 	mov	r4,fp
   1444c:	80a0703a 	and	r16,r16,r2
   14450:	a02b883a 	mov	r21,r20
   14454:	003e4e06 	br	13d90 <_gp+0xfffef4e0>

00014458 <__eqdf2>:
   14458:	2804d53a 	srli	r2,r5,20
   1445c:	3806d53a 	srli	r3,r7,20
   14460:	02000434 	movhi	r8,16
   14464:	423fffc4 	addi	r8,r8,-1
   14468:	1081ffcc 	andi	r2,r2,2047
   1446c:	0281ffc4 	movi	r10,2047
   14470:	2a12703a 	and	r9,r5,r8
   14474:	18c1ffcc 	andi	r3,r3,2047
   14478:	3a10703a 	and	r8,r7,r8
   1447c:	280ad7fa 	srli	r5,r5,31
   14480:	380ed7fa 	srli	r7,r7,31
   14484:	12801026 	beq	r2,r10,144c8 <__eqdf2+0x70>
   14488:	0281ffc4 	movi	r10,2047
   1448c:	1a800a26 	beq	r3,r10,144b8 <__eqdf2+0x60>
   14490:	10c00226 	beq	r2,r3,1449c <__eqdf2+0x44>
   14494:	00800044 	movi	r2,1
   14498:	f800283a 	ret
   1449c:	4a3ffd1e 	bne	r9,r8,14494 <_gp+0xfffefbe4>
   144a0:	21bffc1e 	bne	r4,r6,14494 <_gp+0xfffefbe4>
   144a4:	29c00c26 	beq	r5,r7,144d8 <__eqdf2+0x80>
   144a8:	103ffa1e 	bne	r2,zero,14494 <_gp+0xfffefbe4>
   144ac:	2244b03a 	or	r2,r4,r9
   144b0:	1004c03a 	cmpne	r2,r2,zero
   144b4:	f800283a 	ret
   144b8:	3214b03a 	or	r10,r6,r8
   144bc:	503ff426 	beq	r10,zero,14490 <_gp+0xfffefbe0>
   144c0:	00800044 	movi	r2,1
   144c4:	f800283a 	ret
   144c8:	2254b03a 	or	r10,r4,r9
   144cc:	503fee26 	beq	r10,zero,14488 <_gp+0xfffefbd8>
   144d0:	00800044 	movi	r2,1
   144d4:	f800283a 	ret
   144d8:	0005883a 	mov	r2,zero
   144dc:	f800283a 	ret

000144e0 <__gedf2>:
   144e0:	2804d53a 	srli	r2,r5,20
   144e4:	3806d53a 	srli	r3,r7,20
   144e8:	02000434 	movhi	r8,16
   144ec:	423fffc4 	addi	r8,r8,-1
   144f0:	1081ffcc 	andi	r2,r2,2047
   144f4:	0241ffc4 	movi	r9,2047
   144f8:	2a14703a 	and	r10,r5,r8
   144fc:	18c1ffcc 	andi	r3,r3,2047
   14500:	3a10703a 	and	r8,r7,r8
   14504:	280ad7fa 	srli	r5,r5,31
   14508:	380ed7fa 	srli	r7,r7,31
   1450c:	12401d26 	beq	r2,r9,14584 <__gedf2+0xa4>
   14510:	0241ffc4 	movi	r9,2047
   14514:	1a401226 	beq	r3,r9,14560 <__gedf2+0x80>
   14518:	1000081e 	bne	r2,zero,1453c <__gedf2+0x5c>
   1451c:	2296b03a 	or	r11,r4,r10
   14520:	5813003a 	cmpeq	r9,r11,zero
   14524:	1800091e 	bne	r3,zero,1454c <__gedf2+0x6c>
   14528:	3218b03a 	or	r12,r6,r8
   1452c:	6000071e 	bne	r12,zero,1454c <__gedf2+0x6c>
   14530:	0005883a 	mov	r2,zero
   14534:	5800101e 	bne	r11,zero,14578 <__gedf2+0x98>
   14538:	f800283a 	ret
   1453c:	18000c1e 	bne	r3,zero,14570 <__gedf2+0x90>
   14540:	3212b03a 	or	r9,r6,r8
   14544:	48000c26 	beq	r9,zero,14578 <__gedf2+0x98>
   14548:	0013883a 	mov	r9,zero
   1454c:	39c03fcc 	andi	r7,r7,255
   14550:	48000826 	beq	r9,zero,14574 <__gedf2+0x94>
   14554:	38000926 	beq	r7,zero,1457c <__gedf2+0x9c>
   14558:	00800044 	movi	r2,1
   1455c:	f800283a 	ret
   14560:	3212b03a 	or	r9,r6,r8
   14564:	483fec26 	beq	r9,zero,14518 <_gp+0xfffefc68>
   14568:	00bfff84 	movi	r2,-2
   1456c:	f800283a 	ret
   14570:	39c03fcc 	andi	r7,r7,255
   14574:	29c00626 	beq	r5,r7,14590 <__gedf2+0xb0>
   14578:	283ff726 	beq	r5,zero,14558 <_gp+0xfffefca8>
   1457c:	00bfffc4 	movi	r2,-1
   14580:	f800283a 	ret
   14584:	2292b03a 	or	r9,r4,r10
   14588:	483fe126 	beq	r9,zero,14510 <_gp+0xfffefc60>
   1458c:	003ff606 	br	14568 <_gp+0xfffefcb8>
   14590:	18bff916 	blt	r3,r2,14578 <_gp+0xfffefcc8>
   14594:	10c00316 	blt	r2,r3,145a4 <__gedf2+0xc4>
   14598:	42bff736 	bltu	r8,r10,14578 <_gp+0xfffefcc8>
   1459c:	52000326 	beq	r10,r8,145ac <__gedf2+0xcc>
   145a0:	5200042e 	bgeu	r10,r8,145b4 <__gedf2+0xd4>
   145a4:	283fec1e 	bne	r5,zero,14558 <_gp+0xfffefca8>
   145a8:	003ff406 	br	1457c <_gp+0xfffefccc>
   145ac:	313ff236 	bltu	r6,r4,14578 <_gp+0xfffefcc8>
   145b0:	21bffc36 	bltu	r4,r6,145a4 <_gp+0xfffefcf4>
   145b4:	0005883a 	mov	r2,zero
   145b8:	f800283a 	ret

000145bc <__ledf2>:
   145bc:	2804d53a 	srli	r2,r5,20
   145c0:	3810d53a 	srli	r8,r7,20
   145c4:	00c00434 	movhi	r3,16
   145c8:	18ffffc4 	addi	r3,r3,-1
   145cc:	1081ffcc 	andi	r2,r2,2047
   145d0:	0241ffc4 	movi	r9,2047
   145d4:	28d4703a 	and	r10,r5,r3
   145d8:	4201ffcc 	andi	r8,r8,2047
   145dc:	38c6703a 	and	r3,r7,r3
   145e0:	280ad7fa 	srli	r5,r5,31
   145e4:	380ed7fa 	srli	r7,r7,31
   145e8:	12401f26 	beq	r2,r9,14668 <__ledf2+0xac>
   145ec:	0241ffc4 	movi	r9,2047
   145f0:	42401426 	beq	r8,r9,14644 <__ledf2+0x88>
   145f4:	1000091e 	bne	r2,zero,1461c <__ledf2+0x60>
   145f8:	2296b03a 	or	r11,r4,r10
   145fc:	5813003a 	cmpeq	r9,r11,zero
   14600:	29403fcc 	andi	r5,r5,255
   14604:	40000a1e 	bne	r8,zero,14630 <__ledf2+0x74>
   14608:	30d8b03a 	or	r12,r6,r3
   1460c:	6000081e 	bne	r12,zero,14630 <__ledf2+0x74>
   14610:	0005883a 	mov	r2,zero
   14614:	5800111e 	bne	r11,zero,1465c <__ledf2+0xa0>
   14618:	f800283a 	ret
   1461c:	29403fcc 	andi	r5,r5,255
   14620:	40000c1e 	bne	r8,zero,14654 <__ledf2+0x98>
   14624:	30d2b03a 	or	r9,r6,r3
   14628:	48000c26 	beq	r9,zero,1465c <__ledf2+0xa0>
   1462c:	0013883a 	mov	r9,zero
   14630:	39c03fcc 	andi	r7,r7,255
   14634:	48000826 	beq	r9,zero,14658 <__ledf2+0x9c>
   14638:	38001126 	beq	r7,zero,14680 <__ledf2+0xc4>
   1463c:	00800044 	movi	r2,1
   14640:	f800283a 	ret
   14644:	30d2b03a 	or	r9,r6,r3
   14648:	483fea26 	beq	r9,zero,145f4 <_gp+0xfffefd44>
   1464c:	00800084 	movi	r2,2
   14650:	f800283a 	ret
   14654:	39c03fcc 	andi	r7,r7,255
   14658:	39400726 	beq	r7,r5,14678 <__ledf2+0xbc>
   1465c:	2800081e 	bne	r5,zero,14680 <__ledf2+0xc4>
   14660:	00800044 	movi	r2,1
   14664:	f800283a 	ret
   14668:	2292b03a 	or	r9,r4,r10
   1466c:	483fdf26 	beq	r9,zero,145ec <_gp+0xfffefd3c>
   14670:	00800084 	movi	r2,2
   14674:	f800283a 	ret
   14678:	4080030e 	bge	r8,r2,14688 <__ledf2+0xcc>
   1467c:	383fef26 	beq	r7,zero,1463c <_gp+0xfffefd8c>
   14680:	00bfffc4 	movi	r2,-1
   14684:	f800283a 	ret
   14688:	123feb16 	blt	r2,r8,14638 <_gp+0xfffefd88>
   1468c:	1abff336 	bltu	r3,r10,1465c <_gp+0xfffefdac>
   14690:	50c00326 	beq	r10,r3,146a0 <__ledf2+0xe4>
   14694:	50c0042e 	bgeu	r10,r3,146a8 <__ledf2+0xec>
   14698:	283fe81e 	bne	r5,zero,1463c <_gp+0xfffefd8c>
   1469c:	003ff806 	br	14680 <_gp+0xfffefdd0>
   146a0:	313fee36 	bltu	r6,r4,1465c <_gp+0xfffefdac>
   146a4:	21bffc36 	bltu	r4,r6,14698 <_gp+0xfffefde8>
   146a8:	0005883a 	mov	r2,zero
   146ac:	f800283a 	ret

000146b0 <__muldf3>:
   146b0:	deffee04 	addi	sp,sp,-72
   146b4:	dd000c15 	stw	r20,48(sp)
   146b8:	2828d53a 	srli	r20,r5,20
   146bc:	ddc00f15 	stw	r23,60(sp)
   146c0:	282ed7fa 	srli	r23,r5,31
   146c4:	dc000815 	stw	r16,32(sp)
   146c8:	04000434 	movhi	r16,16
   146cc:	dcc00b15 	stw	r19,44(sp)
   146d0:	843fffc4 	addi	r16,r16,-1
   146d4:	dfc01115 	stw	ra,68(sp)
   146d8:	df001015 	stw	fp,64(sp)
   146dc:	dd800e15 	stw	r22,56(sp)
   146e0:	dd400d15 	stw	r21,52(sp)
   146e4:	dc800a15 	stw	r18,40(sp)
   146e8:	dc400915 	stw	r17,36(sp)
   146ec:	a501ffcc 	andi	r20,r20,2047
   146f0:	2c20703a 	and	r16,r5,r16
   146f4:	b827883a 	mov	r19,r23
   146f8:	ba403fcc 	andi	r9,r23,255
   146fc:	a0006026 	beq	r20,zero,14880 <__muldf3+0x1d0>
   14700:	0081ffc4 	movi	r2,2047
   14704:	202d883a 	mov	r22,r4
   14708:	a0803626 	beq	r20,r2,147e4 <__muldf3+0x134>
   1470c:	84000434 	orhi	r16,r16,16
   14710:	200ad77a 	srli	r5,r4,29
   14714:	800490fa 	slli	r2,r16,3
   14718:	202c90fa 	slli	r22,r4,3
   1471c:	a53f0044 	addi	r20,r20,-1023
   14720:	28a0b03a 	or	r16,r5,r2
   14724:	002b883a 	mov	r21,zero
   14728:	000b883a 	mov	r5,zero
   1472c:	3804d53a 	srli	r2,r7,20
   14730:	3838d7fa 	srli	fp,r7,31
   14734:	04400434 	movhi	r17,16
   14738:	8c7fffc4 	addi	r17,r17,-1
   1473c:	1081ffcc 	andi	r2,r2,2047
   14740:	3025883a 	mov	r18,r6
   14744:	3c62703a 	and	r17,r7,r17
   14748:	e2803fcc 	andi	r10,fp,255
   1474c:	10006d26 	beq	r2,zero,14904 <__muldf3+0x254>
   14750:	00c1ffc4 	movi	r3,2047
   14754:	10c06526 	beq	r2,r3,148ec <__muldf3+0x23c>
   14758:	8c400434 	orhi	r17,r17,16
   1475c:	300ed77a 	srli	r7,r6,29
   14760:	880690fa 	slli	r3,r17,3
   14764:	302490fa 	slli	r18,r6,3
   14768:	10bf0044 	addi	r2,r2,-1023
   1476c:	38e2b03a 	or	r17,r7,r3
   14770:	000f883a 	mov	r7,zero
   14774:	a087883a 	add	r3,r20,r2
   14778:	010003c4 	movi	r4,15
   1477c:	3d44b03a 	or	r2,r7,r21
   14780:	e5ccf03a 	xor	r6,fp,r23
   14784:	1a000044 	addi	r8,r3,1
   14788:	20809b36 	bltu	r4,r2,149f8 <__muldf3+0x348>
   1478c:	100490ba 	slli	r2,r2,2
   14790:	01000074 	movhi	r4,1
   14794:	2111e904 	addi	r4,r4,18340
   14798:	1105883a 	add	r2,r2,r4
   1479c:	10800017 	ldw	r2,0(r2)
   147a0:	1000683a 	jmp	r2
   147a4:	000149f8 	rdprs	zero,zero,1319
   147a8:	00014804 	movi	zero,1312
   147ac:	00014804 	movi	zero,1312
   147b0:	00014800 	call	1480 <__alt_mem_onchip_memory-0xeb80>
   147b4:	000149d4 	movui	zero,1319
   147b8:	000149d4 	movui	zero,1319
   147bc:	000149bc 	xorhi	zero,zero,1318
   147c0:	00014800 	call	1480 <__alt_mem_onchip_memory-0xeb80>
   147c4:	000149d4 	movui	zero,1319
   147c8:	000149bc 	xorhi	zero,zero,1318
   147cc:	000149d4 	movui	zero,1319
   147d0:	00014800 	call	1480 <__alt_mem_onchip_memory-0xeb80>
   147d4:	000149e4 	muli	zero,zero,1319
   147d8:	000149e4 	muli	zero,zero,1319
   147dc:	000149e4 	muli	zero,zero,1319
   147e0:	00014d44 	movi	zero,1333
   147e4:	2404b03a 	or	r2,r4,r16
   147e8:	1000711e 	bne	r2,zero,149b0 <__muldf3+0x300>
   147ec:	05400204 	movi	r21,8
   147f0:	0021883a 	mov	r16,zero
   147f4:	002d883a 	mov	r22,zero
   147f8:	01400084 	movi	r5,2
   147fc:	003fcb06 	br	1472c <_gp+0xfffefe7c>
   14800:	500d883a 	mov	r6,r10
   14804:	00800084 	movi	r2,2
   14808:	38805926 	beq	r7,r2,14970 <__muldf3+0x2c0>
   1480c:	008000c4 	movi	r2,3
   14810:	3881bb26 	beq	r7,r2,14f00 <__muldf3+0x850>
   14814:	00800044 	movi	r2,1
   14818:	3881961e 	bne	r7,r2,14e74 <__muldf3+0x7c4>
   1481c:	3027883a 	mov	r19,r6
   14820:	0005883a 	mov	r2,zero
   14824:	0021883a 	mov	r16,zero
   14828:	002d883a 	mov	r22,zero
   1482c:	1004953a 	slli	r2,r2,20
   14830:	98c03fcc 	andi	r3,r19,255
   14834:	04400434 	movhi	r17,16
   14838:	8c7fffc4 	addi	r17,r17,-1
   1483c:	180697fa 	slli	r3,r3,31
   14840:	8460703a 	and	r16,r16,r17
   14844:	80a0b03a 	or	r16,r16,r2
   14848:	80c6b03a 	or	r3,r16,r3
   1484c:	b005883a 	mov	r2,r22
   14850:	dfc01117 	ldw	ra,68(sp)
   14854:	df001017 	ldw	fp,64(sp)
   14858:	ddc00f17 	ldw	r23,60(sp)
   1485c:	dd800e17 	ldw	r22,56(sp)
   14860:	dd400d17 	ldw	r21,52(sp)
   14864:	dd000c17 	ldw	r20,48(sp)
   14868:	dcc00b17 	ldw	r19,44(sp)
   1486c:	dc800a17 	ldw	r18,40(sp)
   14870:	dc400917 	ldw	r17,36(sp)
   14874:	dc000817 	ldw	r16,32(sp)
   14878:	dec01204 	addi	sp,sp,72
   1487c:	f800283a 	ret
   14880:	2404b03a 	or	r2,r4,r16
   14884:	202b883a 	mov	r21,r4
   14888:	10004426 	beq	r2,zero,1499c <__muldf3+0x2ec>
   1488c:	80015126 	beq	r16,zero,14dd4 <__muldf3+0x724>
   14890:	8009883a 	mov	r4,r16
   14894:	d9800715 	stw	r6,28(sp)
   14898:	d9c00215 	stw	r7,8(sp)
   1489c:	da400415 	stw	r9,16(sp)
   148a0:	0015a840 	call	15a84 <__clzsi2>
   148a4:	d9800717 	ldw	r6,28(sp)
   148a8:	d9c00217 	ldw	r7,8(sp)
   148ac:	da400417 	ldw	r9,16(sp)
   148b0:	113ffd44 	addi	r4,r2,-11
   148b4:	00c00704 	movi	r3,28
   148b8:	19014216 	blt	r3,r4,14dc4 <__muldf3+0x714>
   148bc:	00c00744 	movi	r3,29
   148c0:	15bffe04 	addi	r22,r2,-8
   148c4:	1907c83a 	sub	r3,r3,r4
   148c8:	85a0983a 	sll	r16,r16,r22
   148cc:	a8c6d83a 	srl	r3,r21,r3
   148d0:	adac983a 	sll	r22,r21,r22
   148d4:	1c20b03a 	or	r16,r3,r16
   148d8:	1080fcc4 	addi	r2,r2,1011
   148dc:	00a9c83a 	sub	r20,zero,r2
   148e0:	002b883a 	mov	r21,zero
   148e4:	000b883a 	mov	r5,zero
   148e8:	003f9006 	br	1472c <_gp+0xfffefe7c>
   148ec:	3446b03a 	or	r3,r6,r17
   148f0:	1800281e 	bne	r3,zero,14994 <__muldf3+0x2e4>
   148f4:	0023883a 	mov	r17,zero
   148f8:	0025883a 	mov	r18,zero
   148fc:	01c00084 	movi	r7,2
   14900:	003f9c06 	br	14774 <_gp+0xfffefec4>
   14904:	3446b03a 	or	r3,r6,r17
   14908:	18001e26 	beq	r3,zero,14984 <__muldf3+0x2d4>
   1490c:	88012126 	beq	r17,zero,14d94 <__muldf3+0x6e4>
   14910:	8809883a 	mov	r4,r17
   14914:	d9400215 	stw	r5,8(sp)
   14918:	d9800715 	stw	r6,28(sp)
   1491c:	da400415 	stw	r9,16(sp)
   14920:	da800315 	stw	r10,12(sp)
   14924:	0015a840 	call	15a84 <__clzsi2>
   14928:	d9400217 	ldw	r5,8(sp)
   1492c:	d9800717 	ldw	r6,28(sp)
   14930:	da400417 	ldw	r9,16(sp)
   14934:	da800317 	ldw	r10,12(sp)
   14938:	113ffd44 	addi	r4,r2,-11
   1493c:	00c00704 	movi	r3,28
   14940:	19011016 	blt	r3,r4,14d84 <__muldf3+0x6d4>
   14944:	00c00744 	movi	r3,29
   14948:	14bffe04 	addi	r18,r2,-8
   1494c:	1907c83a 	sub	r3,r3,r4
   14950:	8ca2983a 	sll	r17,r17,r18
   14954:	30c6d83a 	srl	r3,r6,r3
   14958:	34a4983a 	sll	r18,r6,r18
   1495c:	1c62b03a 	or	r17,r3,r17
   14960:	1080fcc4 	addi	r2,r2,1011
   14964:	0085c83a 	sub	r2,zero,r2
   14968:	000f883a 	mov	r7,zero
   1496c:	003f8106 	br	14774 <_gp+0xfffefec4>
   14970:	3027883a 	mov	r19,r6
   14974:	0081ffc4 	movi	r2,2047
   14978:	0021883a 	mov	r16,zero
   1497c:	002d883a 	mov	r22,zero
   14980:	003faa06 	br	1482c <_gp+0xfffeff7c>
   14984:	0023883a 	mov	r17,zero
   14988:	0025883a 	mov	r18,zero
   1498c:	01c00044 	movi	r7,1
   14990:	003f7806 	br	14774 <_gp+0xfffefec4>
   14994:	01c000c4 	movi	r7,3
   14998:	003f7606 	br	14774 <_gp+0xfffefec4>
   1499c:	05400104 	movi	r21,4
   149a0:	0021883a 	mov	r16,zero
   149a4:	002d883a 	mov	r22,zero
   149a8:	01400044 	movi	r5,1
   149ac:	003f5f06 	br	1472c <_gp+0xfffefe7c>
   149b0:	05400304 	movi	r21,12
   149b4:	014000c4 	movi	r5,3
   149b8:	003f5c06 	br	1472c <_gp+0xfffefe7c>
   149bc:	04000434 	movhi	r16,16
   149c0:	0027883a 	mov	r19,zero
   149c4:	843fffc4 	addi	r16,r16,-1
   149c8:	05bfffc4 	movi	r22,-1
   149cc:	0081ffc4 	movi	r2,2047
   149d0:	003f9606 	br	1482c <_gp+0xfffeff7c>
   149d4:	8023883a 	mov	r17,r16
   149d8:	b025883a 	mov	r18,r22
   149dc:	280f883a 	mov	r7,r5
   149e0:	003f8806 	br	14804 <_gp+0xfffeff54>
   149e4:	8023883a 	mov	r17,r16
   149e8:	b025883a 	mov	r18,r22
   149ec:	480d883a 	mov	r6,r9
   149f0:	280f883a 	mov	r7,r5
   149f4:	003f8306 	br	14804 <_gp+0xfffeff54>
   149f8:	b026d43a 	srli	r19,r22,16
   149fc:	902ed43a 	srli	r23,r18,16
   14a00:	b5bfffcc 	andi	r22,r22,65535
   14a04:	94bfffcc 	andi	r18,r18,65535
   14a08:	b00b883a 	mov	r5,r22
   14a0c:	9009883a 	mov	r4,r18
   14a10:	d8c00515 	stw	r3,20(sp)
   14a14:	d9800715 	stw	r6,28(sp)
   14a18:	da000615 	stw	r8,24(sp)
   14a1c:	00127280 	call	12728 <__mulsi3>
   14a20:	980b883a 	mov	r5,r19
   14a24:	9009883a 	mov	r4,r18
   14a28:	1029883a 	mov	r20,r2
   14a2c:	00127280 	call	12728 <__mulsi3>
   14a30:	b80b883a 	mov	r5,r23
   14a34:	9809883a 	mov	r4,r19
   14a38:	102b883a 	mov	r21,r2
   14a3c:	00127280 	call	12728 <__mulsi3>
   14a40:	b809883a 	mov	r4,r23
   14a44:	b00b883a 	mov	r5,r22
   14a48:	1039883a 	mov	fp,r2
   14a4c:	00127280 	call	12728 <__mulsi3>
   14a50:	a008d43a 	srli	r4,r20,16
   14a54:	1545883a 	add	r2,r2,r21
   14a58:	d8c00517 	ldw	r3,20(sp)
   14a5c:	2085883a 	add	r2,r4,r2
   14a60:	d9800717 	ldw	r6,28(sp)
   14a64:	da000617 	ldw	r8,24(sp)
   14a68:	1540022e 	bgeu	r2,r21,14a74 <__muldf3+0x3c4>
   14a6c:	01000074 	movhi	r4,1
   14a70:	e139883a 	add	fp,fp,r4
   14a74:	100e943a 	slli	r7,r2,16
   14a78:	1004d43a 	srli	r2,r2,16
   14a7c:	882ad43a 	srli	r21,r17,16
   14a80:	a53fffcc 	andi	r20,r20,65535
   14a84:	8c7fffcc 	andi	r17,r17,65535
   14a88:	3d29883a 	add	r20,r7,r20
   14a8c:	b00b883a 	mov	r5,r22
   14a90:	8809883a 	mov	r4,r17
   14a94:	d8c00515 	stw	r3,20(sp)
   14a98:	d9800715 	stw	r6,28(sp)
   14a9c:	da000615 	stw	r8,24(sp)
   14aa0:	dd000115 	stw	r20,4(sp)
   14aa4:	d8800015 	stw	r2,0(sp)
   14aa8:	00127280 	call	12728 <__mulsi3>
   14aac:	980b883a 	mov	r5,r19
   14ab0:	8809883a 	mov	r4,r17
   14ab4:	d8800215 	stw	r2,8(sp)
   14ab8:	00127280 	call	12728 <__mulsi3>
   14abc:	9809883a 	mov	r4,r19
   14ac0:	a80b883a 	mov	r5,r21
   14ac4:	1029883a 	mov	r20,r2
   14ac8:	00127280 	call	12728 <__mulsi3>
   14acc:	b00b883a 	mov	r5,r22
   14ad0:	a809883a 	mov	r4,r21
   14ad4:	d8800415 	stw	r2,16(sp)
   14ad8:	00127280 	call	12728 <__mulsi3>
   14adc:	d9c00217 	ldw	r7,8(sp)
   14ae0:	1505883a 	add	r2,r2,r20
   14ae4:	d8c00517 	ldw	r3,20(sp)
   14ae8:	3826d43a 	srli	r19,r7,16
   14aec:	d9800717 	ldw	r6,28(sp)
   14af0:	da000617 	ldw	r8,24(sp)
   14af4:	9885883a 	add	r2,r19,r2
   14af8:	da400417 	ldw	r9,16(sp)
   14afc:	1500022e 	bgeu	r2,r20,14b08 <__muldf3+0x458>
   14b00:	01000074 	movhi	r4,1
   14b04:	4913883a 	add	r9,r9,r4
   14b08:	1028d43a 	srli	r20,r2,16
   14b0c:	1004943a 	slli	r2,r2,16
   14b10:	802cd43a 	srli	r22,r16,16
   14b14:	843fffcc 	andi	r16,r16,65535
   14b18:	3cffffcc 	andi	r19,r7,65535
   14b1c:	9009883a 	mov	r4,r18
   14b20:	800b883a 	mov	r5,r16
   14b24:	a269883a 	add	r20,r20,r9
   14b28:	d8c00515 	stw	r3,20(sp)
   14b2c:	d9800715 	stw	r6,28(sp)
   14b30:	da000615 	stw	r8,24(sp)
   14b34:	14e7883a 	add	r19,r2,r19
   14b38:	00127280 	call	12728 <__mulsi3>
   14b3c:	9009883a 	mov	r4,r18
   14b40:	b00b883a 	mov	r5,r22
   14b44:	d8800315 	stw	r2,12(sp)
   14b48:	00127280 	call	12728 <__mulsi3>
   14b4c:	b809883a 	mov	r4,r23
   14b50:	b00b883a 	mov	r5,r22
   14b54:	d8800215 	stw	r2,8(sp)
   14b58:	00127280 	call	12728 <__mulsi3>
   14b5c:	b80b883a 	mov	r5,r23
   14b60:	8009883a 	mov	r4,r16
   14b64:	d8800415 	stw	r2,16(sp)
   14b68:	00127280 	call	12728 <__mulsi3>
   14b6c:	da800317 	ldw	r10,12(sp)
   14b70:	d9c00217 	ldw	r7,8(sp)
   14b74:	d9000017 	ldw	r4,0(sp)
   14b78:	502ed43a 	srli	r23,r10,16
   14b7c:	11c5883a 	add	r2,r2,r7
   14b80:	24e5883a 	add	r18,r4,r19
   14b84:	b885883a 	add	r2,r23,r2
   14b88:	d8c00517 	ldw	r3,20(sp)
   14b8c:	d9800717 	ldw	r6,28(sp)
   14b90:	da000617 	ldw	r8,24(sp)
   14b94:	da400417 	ldw	r9,16(sp)
   14b98:	11c0022e 	bgeu	r2,r7,14ba4 <__muldf3+0x4f4>
   14b9c:	01000074 	movhi	r4,1
   14ba0:	4913883a 	add	r9,r9,r4
   14ba4:	100ed43a 	srli	r7,r2,16
   14ba8:	1004943a 	slli	r2,r2,16
   14bac:	55ffffcc 	andi	r23,r10,65535
   14bb0:	3a53883a 	add	r9,r7,r9
   14bb4:	8809883a 	mov	r4,r17
   14bb8:	800b883a 	mov	r5,r16
   14bbc:	d8c00515 	stw	r3,20(sp)
   14bc0:	d9800715 	stw	r6,28(sp)
   14bc4:	da000615 	stw	r8,24(sp)
   14bc8:	da400415 	stw	r9,16(sp)
   14bcc:	15ef883a 	add	r23,r2,r23
   14bd0:	00127280 	call	12728 <__mulsi3>
   14bd4:	8809883a 	mov	r4,r17
   14bd8:	b00b883a 	mov	r5,r22
   14bdc:	d8800215 	stw	r2,8(sp)
   14be0:	00127280 	call	12728 <__mulsi3>
   14be4:	b00b883a 	mov	r5,r22
   14be8:	a809883a 	mov	r4,r21
   14bec:	d8800315 	stw	r2,12(sp)
   14bf0:	00127280 	call	12728 <__mulsi3>
   14bf4:	8009883a 	mov	r4,r16
   14bf8:	a80b883a 	mov	r5,r21
   14bfc:	1023883a 	mov	r17,r2
   14c00:	00127280 	call	12728 <__mulsi3>
   14c04:	d9c00217 	ldw	r7,8(sp)
   14c08:	da800317 	ldw	r10,12(sp)
   14c0c:	d8c00517 	ldw	r3,20(sp)
   14c10:	3808d43a 	srli	r4,r7,16
   14c14:	1285883a 	add	r2,r2,r10
   14c18:	d9800717 	ldw	r6,28(sp)
   14c1c:	2085883a 	add	r2,r4,r2
   14c20:	da000617 	ldw	r8,24(sp)
   14c24:	da400417 	ldw	r9,16(sp)
   14c28:	1280022e 	bgeu	r2,r10,14c34 <__muldf3+0x584>
   14c2c:	01000074 	movhi	r4,1
   14c30:	8923883a 	add	r17,r17,r4
   14c34:	1008943a 	slli	r4,r2,16
   14c38:	39ffffcc 	andi	r7,r7,65535
   14c3c:	e4b9883a 	add	fp,fp,r18
   14c40:	21cf883a 	add	r7,r4,r7
   14c44:	e4e7803a 	cmpltu	r19,fp,r19
   14c48:	3d0f883a 	add	r7,r7,r20
   14c4c:	bf39883a 	add	fp,r23,fp
   14c50:	99c9883a 	add	r4,r19,r7
   14c54:	e5ef803a 	cmpltu	r23,fp,r23
   14c58:	490b883a 	add	r5,r9,r4
   14c5c:	1004d43a 	srli	r2,r2,16
   14c60:	b965883a 	add	r18,r23,r5
   14c64:	24c9803a 	cmpltu	r4,r4,r19
   14c68:	3d29803a 	cmpltu	r20,r7,r20
   14c6c:	a128b03a 	or	r20,r20,r4
   14c70:	95ef803a 	cmpltu	r23,r18,r23
   14c74:	2a53803a 	cmpltu	r9,r5,r9
   14c78:	a0a9883a 	add	r20,r20,r2
   14c7c:	4deeb03a 	or	r23,r9,r23
   14c80:	a5ef883a 	add	r23,r20,r23
   14c84:	bc63883a 	add	r17,r23,r17
   14c88:	e004927a 	slli	r2,fp,9
   14c8c:	d9000117 	ldw	r4,4(sp)
   14c90:	882e927a 	slli	r23,r17,9
   14c94:	9022d5fa 	srli	r17,r18,23
   14c98:	e038d5fa 	srli	fp,fp,23
   14c9c:	1104b03a 	or	r2,r2,r4
   14ca0:	9024927a 	slli	r18,r18,9
   14ca4:	1004c03a 	cmpne	r2,r2,zero
   14ca8:	bc62b03a 	or	r17,r23,r17
   14cac:	1738b03a 	or	fp,r2,fp
   14cb0:	8880402c 	andhi	r2,r17,256
   14cb4:	e4a4b03a 	or	r18,fp,r18
   14cb8:	10000726 	beq	r2,zero,14cd8 <__muldf3+0x628>
   14cbc:	9006d07a 	srli	r3,r18,1
   14cc0:	880497fa 	slli	r2,r17,31
   14cc4:	9480004c 	andi	r18,r18,1
   14cc8:	8822d07a 	srli	r17,r17,1
   14ccc:	1ca4b03a 	or	r18,r3,r18
   14cd0:	14a4b03a 	or	r18,r2,r18
   14cd4:	4007883a 	mov	r3,r8
   14cd8:	1880ffc4 	addi	r2,r3,1023
   14cdc:	0080460e 	bge	zero,r2,14df8 <__muldf3+0x748>
   14ce0:	910001cc 	andi	r4,r18,7
   14ce4:	20000726 	beq	r4,zero,14d04 <__muldf3+0x654>
   14ce8:	910003cc 	andi	r4,r18,15
   14cec:	01400104 	movi	r5,4
   14cf0:	21400426 	beq	r4,r5,14d04 <__muldf3+0x654>
   14cf4:	9149883a 	add	r4,r18,r5
   14cf8:	24a5803a 	cmpltu	r18,r4,r18
   14cfc:	8ca3883a 	add	r17,r17,r18
   14d00:	2025883a 	mov	r18,r4
   14d04:	8900402c 	andhi	r4,r17,256
   14d08:	20000426 	beq	r4,zero,14d1c <__muldf3+0x66c>
   14d0c:	18810004 	addi	r2,r3,1024
   14d10:	00ffc034 	movhi	r3,65280
   14d14:	18ffffc4 	addi	r3,r3,-1
   14d18:	88e2703a 	and	r17,r17,r3
   14d1c:	00c1ff84 	movi	r3,2046
   14d20:	18bf1316 	blt	r3,r2,14970 <_gp+0xffff00c0>
   14d24:	882c977a 	slli	r22,r17,29
   14d28:	9024d0fa 	srli	r18,r18,3
   14d2c:	8822927a 	slli	r17,r17,9
   14d30:	1081ffcc 	andi	r2,r2,2047
   14d34:	b4acb03a 	or	r22,r22,r18
   14d38:	8820d33a 	srli	r16,r17,12
   14d3c:	3027883a 	mov	r19,r6
   14d40:	003eba06 	br	1482c <_gp+0xfffeff7c>
   14d44:	8080022c 	andhi	r2,r16,8
   14d48:	10000926 	beq	r2,zero,14d70 <__muldf3+0x6c0>
   14d4c:	8880022c 	andhi	r2,r17,8
   14d50:	1000071e 	bne	r2,zero,14d70 <__muldf3+0x6c0>
   14d54:	00800434 	movhi	r2,16
   14d58:	8c000234 	orhi	r16,r17,8
   14d5c:	10bfffc4 	addi	r2,r2,-1
   14d60:	e027883a 	mov	r19,fp
   14d64:	80a0703a 	and	r16,r16,r2
   14d68:	902d883a 	mov	r22,r18
   14d6c:	003f1706 	br	149cc <_gp+0xffff011c>
   14d70:	00800434 	movhi	r2,16
   14d74:	84000234 	orhi	r16,r16,8
   14d78:	10bfffc4 	addi	r2,r2,-1
   14d7c:	80a0703a 	and	r16,r16,r2
   14d80:	003f1206 	br	149cc <_gp+0xffff011c>
   14d84:	147ff604 	addi	r17,r2,-40
   14d88:	3462983a 	sll	r17,r6,r17
   14d8c:	0025883a 	mov	r18,zero
   14d90:	003ef306 	br	14960 <_gp+0xffff00b0>
   14d94:	3009883a 	mov	r4,r6
   14d98:	d9400215 	stw	r5,8(sp)
   14d9c:	d9800715 	stw	r6,28(sp)
   14da0:	da400415 	stw	r9,16(sp)
   14da4:	da800315 	stw	r10,12(sp)
   14da8:	0015a840 	call	15a84 <__clzsi2>
   14dac:	10800804 	addi	r2,r2,32
   14db0:	da800317 	ldw	r10,12(sp)
   14db4:	da400417 	ldw	r9,16(sp)
   14db8:	d9800717 	ldw	r6,28(sp)
   14dbc:	d9400217 	ldw	r5,8(sp)
   14dc0:	003edd06 	br	14938 <_gp+0xffff0088>
   14dc4:	143ff604 	addi	r16,r2,-40
   14dc8:	ac20983a 	sll	r16,r21,r16
   14dcc:	002d883a 	mov	r22,zero
   14dd0:	003ec106 	br	148d8 <_gp+0xffff0028>
   14dd4:	d9800715 	stw	r6,28(sp)
   14dd8:	d9c00215 	stw	r7,8(sp)
   14ddc:	da400415 	stw	r9,16(sp)
   14de0:	0015a840 	call	15a84 <__clzsi2>
   14de4:	10800804 	addi	r2,r2,32
   14de8:	da400417 	ldw	r9,16(sp)
   14dec:	d9c00217 	ldw	r7,8(sp)
   14df0:	d9800717 	ldw	r6,28(sp)
   14df4:	003eae06 	br	148b0 <_gp+0xffff0000>
   14df8:	00c00044 	movi	r3,1
   14dfc:	1887c83a 	sub	r3,r3,r2
   14e00:	01000e04 	movi	r4,56
   14e04:	20fe8516 	blt	r4,r3,1481c <_gp+0xfffeff6c>
   14e08:	010007c4 	movi	r4,31
   14e0c:	20c01b16 	blt	r4,r3,14e7c <__muldf3+0x7cc>
   14e10:	00800804 	movi	r2,32
   14e14:	10c5c83a 	sub	r2,r2,r3
   14e18:	888a983a 	sll	r5,r17,r2
   14e1c:	90c8d83a 	srl	r4,r18,r3
   14e20:	9084983a 	sll	r2,r18,r2
   14e24:	88e2d83a 	srl	r17,r17,r3
   14e28:	2906b03a 	or	r3,r5,r4
   14e2c:	1004c03a 	cmpne	r2,r2,zero
   14e30:	1886b03a 	or	r3,r3,r2
   14e34:	188001cc 	andi	r2,r3,7
   14e38:	10000726 	beq	r2,zero,14e58 <__muldf3+0x7a8>
   14e3c:	188003cc 	andi	r2,r3,15
   14e40:	01000104 	movi	r4,4
   14e44:	11000426 	beq	r2,r4,14e58 <__muldf3+0x7a8>
   14e48:	1805883a 	mov	r2,r3
   14e4c:	10c00104 	addi	r3,r2,4
   14e50:	1885803a 	cmpltu	r2,r3,r2
   14e54:	88a3883a 	add	r17,r17,r2
   14e58:	8880202c 	andhi	r2,r17,128
   14e5c:	10001c26 	beq	r2,zero,14ed0 <__muldf3+0x820>
   14e60:	3027883a 	mov	r19,r6
   14e64:	00800044 	movi	r2,1
   14e68:	0021883a 	mov	r16,zero
   14e6c:	002d883a 	mov	r22,zero
   14e70:	003e6e06 	br	1482c <_gp+0xfffeff7c>
   14e74:	4007883a 	mov	r3,r8
   14e78:	003f9706 	br	14cd8 <_gp+0xffff0428>
   14e7c:	017ff844 	movi	r5,-31
   14e80:	2885c83a 	sub	r2,r5,r2
   14e84:	888ad83a 	srl	r5,r17,r2
   14e88:	00800804 	movi	r2,32
   14e8c:	18801a26 	beq	r3,r2,14ef8 <__muldf3+0x848>
   14e90:	01001004 	movi	r4,64
   14e94:	20c7c83a 	sub	r3,r4,r3
   14e98:	88e2983a 	sll	r17,r17,r3
   14e9c:	8ca4b03a 	or	r18,r17,r18
   14ea0:	9004c03a 	cmpne	r2,r18,zero
   14ea4:	2884b03a 	or	r2,r5,r2
   14ea8:	144001cc 	andi	r17,r2,7
   14eac:	88000d1e 	bne	r17,zero,14ee4 <__muldf3+0x834>
   14eb0:	0021883a 	mov	r16,zero
   14eb4:	102cd0fa 	srli	r22,r2,3
   14eb8:	3027883a 	mov	r19,r6
   14ebc:	0005883a 	mov	r2,zero
   14ec0:	b46cb03a 	or	r22,r22,r17
   14ec4:	003e5906 	br	1482c <_gp+0xfffeff7c>
   14ec8:	1007883a 	mov	r3,r2
   14ecc:	0023883a 	mov	r17,zero
   14ed0:	8820927a 	slli	r16,r17,9
   14ed4:	1805883a 	mov	r2,r3
   14ed8:	8822977a 	slli	r17,r17,29
   14edc:	8020d33a 	srli	r16,r16,12
   14ee0:	003ff406 	br	14eb4 <_gp+0xffff0604>
   14ee4:	10c003cc 	andi	r3,r2,15
   14ee8:	01000104 	movi	r4,4
   14eec:	193ff626 	beq	r3,r4,14ec8 <_gp+0xffff0618>
   14ef0:	0023883a 	mov	r17,zero
   14ef4:	003fd506 	br	14e4c <_gp+0xffff059c>
   14ef8:	0023883a 	mov	r17,zero
   14efc:	003fe706 	br	14e9c <_gp+0xffff05ec>
   14f00:	00800434 	movhi	r2,16
   14f04:	8c000234 	orhi	r16,r17,8
   14f08:	10bfffc4 	addi	r2,r2,-1
   14f0c:	3027883a 	mov	r19,r6
   14f10:	80a0703a 	and	r16,r16,r2
   14f14:	902d883a 	mov	r22,r18
   14f18:	003eac06 	br	149cc <_gp+0xffff011c>

00014f1c <__subdf3>:
   14f1c:	02000434 	movhi	r8,16
   14f20:	423fffc4 	addi	r8,r8,-1
   14f24:	defffb04 	addi	sp,sp,-20
   14f28:	2a14703a 	and	r10,r5,r8
   14f2c:	3812d53a 	srli	r9,r7,20
   14f30:	3a10703a 	and	r8,r7,r8
   14f34:	2006d77a 	srli	r3,r4,29
   14f38:	3004d77a 	srli	r2,r6,29
   14f3c:	dc000015 	stw	r16,0(sp)
   14f40:	501490fa 	slli	r10,r10,3
   14f44:	2820d53a 	srli	r16,r5,20
   14f48:	401090fa 	slli	r8,r8,3
   14f4c:	dc800215 	stw	r18,8(sp)
   14f50:	dc400115 	stw	r17,4(sp)
   14f54:	dfc00415 	stw	ra,16(sp)
   14f58:	202290fa 	slli	r17,r4,3
   14f5c:	dcc00315 	stw	r19,12(sp)
   14f60:	4a41ffcc 	andi	r9,r9,2047
   14f64:	0101ffc4 	movi	r4,2047
   14f68:	2824d7fa 	srli	r18,r5,31
   14f6c:	8401ffcc 	andi	r16,r16,2047
   14f70:	50c6b03a 	or	r3,r10,r3
   14f74:	380ed7fa 	srli	r7,r7,31
   14f78:	408ab03a 	or	r5,r8,r2
   14f7c:	300c90fa 	slli	r6,r6,3
   14f80:	49009626 	beq	r9,r4,151dc <__subdf3+0x2c0>
   14f84:	39c0005c 	xori	r7,r7,1
   14f88:	8245c83a 	sub	r2,r16,r9
   14f8c:	3c807426 	beq	r7,r18,15160 <__subdf3+0x244>
   14f90:	0080af0e 	bge	zero,r2,15250 <__subdf3+0x334>
   14f94:	48002a1e 	bne	r9,zero,15040 <__subdf3+0x124>
   14f98:	2988b03a 	or	r4,r5,r6
   14f9c:	20009a1e 	bne	r4,zero,15208 <__subdf3+0x2ec>
   14fa0:	888001cc 	andi	r2,r17,7
   14fa4:	10000726 	beq	r2,zero,14fc4 <__subdf3+0xa8>
   14fa8:	888003cc 	andi	r2,r17,15
   14fac:	01000104 	movi	r4,4
   14fb0:	11000426 	beq	r2,r4,14fc4 <__subdf3+0xa8>
   14fb4:	890b883a 	add	r5,r17,r4
   14fb8:	2c63803a 	cmpltu	r17,r5,r17
   14fbc:	1c47883a 	add	r3,r3,r17
   14fc0:	2823883a 	mov	r17,r5
   14fc4:	1880202c 	andhi	r2,r3,128
   14fc8:	10005926 	beq	r2,zero,15130 <__subdf3+0x214>
   14fcc:	84000044 	addi	r16,r16,1
   14fd0:	0081ffc4 	movi	r2,2047
   14fd4:	8080be26 	beq	r16,r2,152d0 <__subdf3+0x3b4>
   14fd8:	017fe034 	movhi	r5,65408
   14fdc:	297fffc4 	addi	r5,r5,-1
   14fe0:	1946703a 	and	r3,r3,r5
   14fe4:	1804977a 	slli	r2,r3,29
   14fe8:	1806927a 	slli	r3,r3,9
   14fec:	8822d0fa 	srli	r17,r17,3
   14ff0:	8401ffcc 	andi	r16,r16,2047
   14ff4:	180ad33a 	srli	r5,r3,12
   14ff8:	9100004c 	andi	r4,r18,1
   14ffc:	1444b03a 	or	r2,r2,r17
   15000:	80c1ffcc 	andi	r3,r16,2047
   15004:	1820953a 	slli	r16,r3,20
   15008:	20c03fcc 	andi	r3,r4,255
   1500c:	180897fa 	slli	r4,r3,31
   15010:	00c00434 	movhi	r3,16
   15014:	18ffffc4 	addi	r3,r3,-1
   15018:	28c6703a 	and	r3,r5,r3
   1501c:	1c06b03a 	or	r3,r3,r16
   15020:	1906b03a 	or	r3,r3,r4
   15024:	dfc00417 	ldw	ra,16(sp)
   15028:	dcc00317 	ldw	r19,12(sp)
   1502c:	dc800217 	ldw	r18,8(sp)
   15030:	dc400117 	ldw	r17,4(sp)
   15034:	dc000017 	ldw	r16,0(sp)
   15038:	dec00504 	addi	sp,sp,20
   1503c:	f800283a 	ret
   15040:	0101ffc4 	movi	r4,2047
   15044:	813fd626 	beq	r16,r4,14fa0 <_gp+0xffff06f0>
   15048:	29402034 	orhi	r5,r5,128
   1504c:	01000e04 	movi	r4,56
   15050:	2080a316 	blt	r4,r2,152e0 <__subdf3+0x3c4>
   15054:	010007c4 	movi	r4,31
   15058:	2080c616 	blt	r4,r2,15374 <__subdf3+0x458>
   1505c:	01000804 	movi	r4,32
   15060:	2089c83a 	sub	r4,r4,r2
   15064:	2910983a 	sll	r8,r5,r4
   15068:	308ed83a 	srl	r7,r6,r2
   1506c:	3108983a 	sll	r4,r6,r4
   15070:	2884d83a 	srl	r2,r5,r2
   15074:	41ccb03a 	or	r6,r8,r7
   15078:	2008c03a 	cmpne	r4,r4,zero
   1507c:	310cb03a 	or	r6,r6,r4
   15080:	898dc83a 	sub	r6,r17,r6
   15084:	89a3803a 	cmpltu	r17,r17,r6
   15088:	1887c83a 	sub	r3,r3,r2
   1508c:	1c47c83a 	sub	r3,r3,r17
   15090:	3023883a 	mov	r17,r6
   15094:	1880202c 	andhi	r2,r3,128
   15098:	10002326 	beq	r2,zero,15128 <__subdf3+0x20c>
   1509c:	04c02034 	movhi	r19,128
   150a0:	9cffffc4 	addi	r19,r19,-1
   150a4:	1ce6703a 	and	r19,r3,r19
   150a8:	98007a26 	beq	r19,zero,15294 <__subdf3+0x378>
   150ac:	9809883a 	mov	r4,r19
   150b0:	0015a840 	call	15a84 <__clzsi2>
   150b4:	113ffe04 	addi	r4,r2,-8
   150b8:	00c007c4 	movi	r3,31
   150bc:	19007b16 	blt	r3,r4,152ac <__subdf3+0x390>
   150c0:	00800804 	movi	r2,32
   150c4:	1105c83a 	sub	r2,r2,r4
   150c8:	8884d83a 	srl	r2,r17,r2
   150cc:	9906983a 	sll	r3,r19,r4
   150d0:	8922983a 	sll	r17,r17,r4
   150d4:	10c4b03a 	or	r2,r2,r3
   150d8:	24007816 	blt	r4,r16,152bc <__subdf3+0x3a0>
   150dc:	2421c83a 	sub	r16,r4,r16
   150e0:	80c00044 	addi	r3,r16,1
   150e4:	010007c4 	movi	r4,31
   150e8:	20c09516 	blt	r4,r3,15340 <__subdf3+0x424>
   150ec:	01400804 	movi	r5,32
   150f0:	28cbc83a 	sub	r5,r5,r3
   150f4:	88c8d83a 	srl	r4,r17,r3
   150f8:	8962983a 	sll	r17,r17,r5
   150fc:	114a983a 	sll	r5,r2,r5
   15100:	10c6d83a 	srl	r3,r2,r3
   15104:	8804c03a 	cmpne	r2,r17,zero
   15108:	290ab03a 	or	r5,r5,r4
   1510c:	28a2b03a 	or	r17,r5,r2
   15110:	0021883a 	mov	r16,zero
   15114:	003fa206 	br	14fa0 <_gp+0xffff06f0>
   15118:	2090b03a 	or	r8,r4,r2
   1511c:	40018e26 	beq	r8,zero,15758 <__subdf3+0x83c>
   15120:	1007883a 	mov	r3,r2
   15124:	2023883a 	mov	r17,r4
   15128:	888001cc 	andi	r2,r17,7
   1512c:	103f9e1e 	bne	r2,zero,14fa8 <_gp+0xffff06f8>
   15130:	1804977a 	slli	r2,r3,29
   15134:	8822d0fa 	srli	r17,r17,3
   15138:	1810d0fa 	srli	r8,r3,3
   1513c:	9100004c 	andi	r4,r18,1
   15140:	1444b03a 	or	r2,r2,r17
   15144:	00c1ffc4 	movi	r3,2047
   15148:	80c02826 	beq	r16,r3,151ec <__subdf3+0x2d0>
   1514c:	01400434 	movhi	r5,16
   15150:	297fffc4 	addi	r5,r5,-1
   15154:	80e0703a 	and	r16,r16,r3
   15158:	414a703a 	and	r5,r8,r5
   1515c:	003fa806 	br	15000 <_gp+0xffff0750>
   15160:	0080630e 	bge	zero,r2,152f0 <__subdf3+0x3d4>
   15164:	48003026 	beq	r9,zero,15228 <__subdf3+0x30c>
   15168:	0101ffc4 	movi	r4,2047
   1516c:	813f8c26 	beq	r16,r4,14fa0 <_gp+0xffff06f0>
   15170:	29402034 	orhi	r5,r5,128
   15174:	01000e04 	movi	r4,56
   15178:	2080a90e 	bge	r4,r2,15420 <__subdf3+0x504>
   1517c:	298cb03a 	or	r6,r5,r6
   15180:	3012c03a 	cmpne	r9,r6,zero
   15184:	0005883a 	mov	r2,zero
   15188:	4c53883a 	add	r9,r9,r17
   1518c:	4c63803a 	cmpltu	r17,r9,r17
   15190:	10c7883a 	add	r3,r2,r3
   15194:	88c7883a 	add	r3,r17,r3
   15198:	4823883a 	mov	r17,r9
   1519c:	1880202c 	andhi	r2,r3,128
   151a0:	1000d026 	beq	r2,zero,154e4 <__subdf3+0x5c8>
   151a4:	84000044 	addi	r16,r16,1
   151a8:	0081ffc4 	movi	r2,2047
   151ac:	8080fe26 	beq	r16,r2,155a8 <__subdf3+0x68c>
   151b0:	00bfe034 	movhi	r2,65408
   151b4:	10bfffc4 	addi	r2,r2,-1
   151b8:	1886703a 	and	r3,r3,r2
   151bc:	880ad07a 	srli	r5,r17,1
   151c0:	180497fa 	slli	r2,r3,31
   151c4:	8900004c 	andi	r4,r17,1
   151c8:	2922b03a 	or	r17,r5,r4
   151cc:	1806d07a 	srli	r3,r3,1
   151d0:	1462b03a 	or	r17,r2,r17
   151d4:	3825883a 	mov	r18,r7
   151d8:	003f7106 	br	14fa0 <_gp+0xffff06f0>
   151dc:	2984b03a 	or	r2,r5,r6
   151e0:	103f6826 	beq	r2,zero,14f84 <_gp+0xffff06d4>
   151e4:	39c03fcc 	andi	r7,r7,255
   151e8:	003f6706 	br	14f88 <_gp+0xffff06d8>
   151ec:	4086b03a 	or	r3,r8,r2
   151f0:	18015226 	beq	r3,zero,1573c <__subdf3+0x820>
   151f4:	00c00434 	movhi	r3,16
   151f8:	41400234 	orhi	r5,r8,8
   151fc:	18ffffc4 	addi	r3,r3,-1
   15200:	28ca703a 	and	r5,r5,r3
   15204:	003f7e06 	br	15000 <_gp+0xffff0750>
   15208:	10bfffc4 	addi	r2,r2,-1
   1520c:	1000491e 	bne	r2,zero,15334 <__subdf3+0x418>
   15210:	898fc83a 	sub	r7,r17,r6
   15214:	89e3803a 	cmpltu	r17,r17,r7
   15218:	1947c83a 	sub	r3,r3,r5
   1521c:	1c47c83a 	sub	r3,r3,r17
   15220:	3823883a 	mov	r17,r7
   15224:	003f9b06 	br	15094 <_gp+0xffff07e4>
   15228:	2988b03a 	or	r4,r5,r6
   1522c:	203f5c26 	beq	r4,zero,14fa0 <_gp+0xffff06f0>
   15230:	10bfffc4 	addi	r2,r2,-1
   15234:	1000931e 	bne	r2,zero,15484 <__subdf3+0x568>
   15238:	898d883a 	add	r6,r17,r6
   1523c:	3463803a 	cmpltu	r17,r6,r17
   15240:	1947883a 	add	r3,r3,r5
   15244:	88c7883a 	add	r3,r17,r3
   15248:	3023883a 	mov	r17,r6
   1524c:	003fd306 	br	1519c <_gp+0xffff08ec>
   15250:	1000541e 	bne	r2,zero,153a4 <__subdf3+0x488>
   15254:	80800044 	addi	r2,r16,1
   15258:	1081ffcc 	andi	r2,r2,2047
   1525c:	01000044 	movi	r4,1
   15260:	2080a20e 	bge	r4,r2,154ec <__subdf3+0x5d0>
   15264:	8989c83a 	sub	r4,r17,r6
   15268:	8905803a 	cmpltu	r2,r17,r4
   1526c:	1967c83a 	sub	r19,r3,r5
   15270:	98a7c83a 	sub	r19,r19,r2
   15274:	9880202c 	andhi	r2,r19,128
   15278:	10006326 	beq	r2,zero,15408 <__subdf3+0x4ec>
   1527c:	3463c83a 	sub	r17,r6,r17
   15280:	28c7c83a 	sub	r3,r5,r3
   15284:	344d803a 	cmpltu	r6,r6,r17
   15288:	19a7c83a 	sub	r19,r3,r6
   1528c:	3825883a 	mov	r18,r7
   15290:	983f861e 	bne	r19,zero,150ac <_gp+0xffff07fc>
   15294:	8809883a 	mov	r4,r17
   15298:	0015a840 	call	15a84 <__clzsi2>
   1529c:	10800804 	addi	r2,r2,32
   152a0:	113ffe04 	addi	r4,r2,-8
   152a4:	00c007c4 	movi	r3,31
   152a8:	193f850e 	bge	r3,r4,150c0 <_gp+0xffff0810>
   152ac:	10bff604 	addi	r2,r2,-40
   152b0:	8884983a 	sll	r2,r17,r2
   152b4:	0023883a 	mov	r17,zero
   152b8:	243f880e 	bge	r4,r16,150dc <_gp+0xffff082c>
   152bc:	00ffe034 	movhi	r3,65408
   152c0:	18ffffc4 	addi	r3,r3,-1
   152c4:	8121c83a 	sub	r16,r16,r4
   152c8:	10c6703a 	and	r3,r2,r3
   152cc:	003f3406 	br	14fa0 <_gp+0xffff06f0>
   152d0:	9100004c 	andi	r4,r18,1
   152d4:	000b883a 	mov	r5,zero
   152d8:	0005883a 	mov	r2,zero
   152dc:	003f4806 	br	15000 <_gp+0xffff0750>
   152e0:	298cb03a 	or	r6,r5,r6
   152e4:	300cc03a 	cmpne	r6,r6,zero
   152e8:	0005883a 	mov	r2,zero
   152ec:	003f6406 	br	15080 <_gp+0xffff07d0>
   152f0:	10009a1e 	bne	r2,zero,1555c <__subdf3+0x640>
   152f4:	82400044 	addi	r9,r16,1
   152f8:	4881ffcc 	andi	r2,r9,2047
   152fc:	02800044 	movi	r10,1
   15300:	5080670e 	bge	r10,r2,154a0 <__subdf3+0x584>
   15304:	0081ffc4 	movi	r2,2047
   15308:	4880af26 	beq	r9,r2,155c8 <__subdf3+0x6ac>
   1530c:	898d883a 	add	r6,r17,r6
   15310:	1945883a 	add	r2,r3,r5
   15314:	3447803a 	cmpltu	r3,r6,r17
   15318:	1887883a 	add	r3,r3,r2
   1531c:	182297fa 	slli	r17,r3,31
   15320:	300cd07a 	srli	r6,r6,1
   15324:	1806d07a 	srli	r3,r3,1
   15328:	4821883a 	mov	r16,r9
   1532c:	89a2b03a 	or	r17,r17,r6
   15330:	003f1b06 	br	14fa0 <_gp+0xffff06f0>
   15334:	0101ffc4 	movi	r4,2047
   15338:	813f441e 	bne	r16,r4,1504c <_gp+0xffff079c>
   1533c:	003f1806 	br	14fa0 <_gp+0xffff06f0>
   15340:	843ff844 	addi	r16,r16,-31
   15344:	01400804 	movi	r5,32
   15348:	1408d83a 	srl	r4,r2,r16
   1534c:	19405026 	beq	r3,r5,15490 <__subdf3+0x574>
   15350:	01401004 	movi	r5,64
   15354:	28c7c83a 	sub	r3,r5,r3
   15358:	10c4983a 	sll	r2,r2,r3
   1535c:	88a2b03a 	or	r17,r17,r2
   15360:	8822c03a 	cmpne	r17,r17,zero
   15364:	2462b03a 	or	r17,r4,r17
   15368:	0007883a 	mov	r3,zero
   1536c:	0021883a 	mov	r16,zero
   15370:	003f6d06 	br	15128 <_gp+0xffff0878>
   15374:	11fff804 	addi	r7,r2,-32
   15378:	01000804 	movi	r4,32
   1537c:	29ced83a 	srl	r7,r5,r7
   15380:	11004526 	beq	r2,r4,15498 <__subdf3+0x57c>
   15384:	01001004 	movi	r4,64
   15388:	2089c83a 	sub	r4,r4,r2
   1538c:	2904983a 	sll	r2,r5,r4
   15390:	118cb03a 	or	r6,r2,r6
   15394:	300cc03a 	cmpne	r6,r6,zero
   15398:	398cb03a 	or	r6,r7,r6
   1539c:	0005883a 	mov	r2,zero
   153a0:	003f3706 	br	15080 <_gp+0xffff07d0>
   153a4:	80002a26 	beq	r16,zero,15450 <__subdf3+0x534>
   153a8:	0101ffc4 	movi	r4,2047
   153ac:	49006626 	beq	r9,r4,15548 <__subdf3+0x62c>
   153b0:	0085c83a 	sub	r2,zero,r2
   153b4:	18c02034 	orhi	r3,r3,128
   153b8:	01000e04 	movi	r4,56
   153bc:	20807e16 	blt	r4,r2,155b8 <__subdf3+0x69c>
   153c0:	010007c4 	movi	r4,31
   153c4:	2080e716 	blt	r4,r2,15764 <__subdf3+0x848>
   153c8:	01000804 	movi	r4,32
   153cc:	2089c83a 	sub	r4,r4,r2
   153d0:	1914983a 	sll	r10,r3,r4
   153d4:	8890d83a 	srl	r8,r17,r2
   153d8:	8908983a 	sll	r4,r17,r4
   153dc:	1884d83a 	srl	r2,r3,r2
   153e0:	5222b03a 	or	r17,r10,r8
   153e4:	2006c03a 	cmpne	r3,r4,zero
   153e8:	88e2b03a 	or	r17,r17,r3
   153ec:	3463c83a 	sub	r17,r6,r17
   153f0:	2885c83a 	sub	r2,r5,r2
   153f4:	344d803a 	cmpltu	r6,r6,r17
   153f8:	1187c83a 	sub	r3,r2,r6
   153fc:	4821883a 	mov	r16,r9
   15400:	3825883a 	mov	r18,r7
   15404:	003f2306 	br	15094 <_gp+0xffff07e4>
   15408:	24d0b03a 	or	r8,r4,r19
   1540c:	40001b1e 	bne	r8,zero,1547c <__subdf3+0x560>
   15410:	0005883a 	mov	r2,zero
   15414:	0009883a 	mov	r4,zero
   15418:	0021883a 	mov	r16,zero
   1541c:	003f4906 	br	15144 <_gp+0xffff0894>
   15420:	010007c4 	movi	r4,31
   15424:	20803a16 	blt	r4,r2,15510 <__subdf3+0x5f4>
   15428:	01000804 	movi	r4,32
   1542c:	2089c83a 	sub	r4,r4,r2
   15430:	2912983a 	sll	r9,r5,r4
   15434:	3090d83a 	srl	r8,r6,r2
   15438:	3108983a 	sll	r4,r6,r4
   1543c:	2884d83a 	srl	r2,r5,r2
   15440:	4a12b03a 	or	r9,r9,r8
   15444:	2008c03a 	cmpne	r4,r4,zero
   15448:	4912b03a 	or	r9,r9,r4
   1544c:	003f4e06 	br	15188 <_gp+0xffff08d8>
   15450:	1c48b03a 	or	r4,r3,r17
   15454:	20003c26 	beq	r4,zero,15548 <__subdf3+0x62c>
   15458:	0084303a 	nor	r2,zero,r2
   1545c:	1000381e 	bne	r2,zero,15540 <__subdf3+0x624>
   15460:	3463c83a 	sub	r17,r6,r17
   15464:	28c5c83a 	sub	r2,r5,r3
   15468:	344d803a 	cmpltu	r6,r6,r17
   1546c:	1187c83a 	sub	r3,r2,r6
   15470:	4821883a 	mov	r16,r9
   15474:	3825883a 	mov	r18,r7
   15478:	003f0606 	br	15094 <_gp+0xffff07e4>
   1547c:	2023883a 	mov	r17,r4
   15480:	003f0906 	br	150a8 <_gp+0xffff07f8>
   15484:	0101ffc4 	movi	r4,2047
   15488:	813f3a1e 	bne	r16,r4,15174 <_gp+0xffff08c4>
   1548c:	003ec406 	br	14fa0 <_gp+0xffff06f0>
   15490:	0005883a 	mov	r2,zero
   15494:	003fb106 	br	1535c <_gp+0xffff0aac>
   15498:	0005883a 	mov	r2,zero
   1549c:	003fbc06 	br	15390 <_gp+0xffff0ae0>
   154a0:	1c44b03a 	or	r2,r3,r17
   154a4:	80008e1e 	bne	r16,zero,156e0 <__subdf3+0x7c4>
   154a8:	1000c826 	beq	r2,zero,157cc <__subdf3+0x8b0>
   154ac:	2984b03a 	or	r2,r5,r6
   154b0:	103ebb26 	beq	r2,zero,14fa0 <_gp+0xffff06f0>
   154b4:	8989883a 	add	r4,r17,r6
   154b8:	1945883a 	add	r2,r3,r5
   154bc:	2447803a 	cmpltu	r3,r4,r17
   154c0:	1887883a 	add	r3,r3,r2
   154c4:	1880202c 	andhi	r2,r3,128
   154c8:	2023883a 	mov	r17,r4
   154cc:	103f1626 	beq	r2,zero,15128 <_gp+0xffff0878>
   154d0:	00bfe034 	movhi	r2,65408
   154d4:	10bfffc4 	addi	r2,r2,-1
   154d8:	5021883a 	mov	r16,r10
   154dc:	1886703a 	and	r3,r3,r2
   154e0:	003eaf06 	br	14fa0 <_gp+0xffff06f0>
   154e4:	3825883a 	mov	r18,r7
   154e8:	003f0f06 	br	15128 <_gp+0xffff0878>
   154ec:	1c44b03a 	or	r2,r3,r17
   154f0:	8000251e 	bne	r16,zero,15588 <__subdf3+0x66c>
   154f4:	1000661e 	bne	r2,zero,15690 <__subdf3+0x774>
   154f8:	2990b03a 	or	r8,r5,r6
   154fc:	40009626 	beq	r8,zero,15758 <__subdf3+0x83c>
   15500:	2807883a 	mov	r3,r5
   15504:	3023883a 	mov	r17,r6
   15508:	3825883a 	mov	r18,r7
   1550c:	003ea406 	br	14fa0 <_gp+0xffff06f0>
   15510:	127ff804 	addi	r9,r2,-32
   15514:	01000804 	movi	r4,32
   15518:	2a52d83a 	srl	r9,r5,r9
   1551c:	11008c26 	beq	r2,r4,15750 <__subdf3+0x834>
   15520:	01001004 	movi	r4,64
   15524:	2085c83a 	sub	r2,r4,r2
   15528:	2884983a 	sll	r2,r5,r2
   1552c:	118cb03a 	or	r6,r2,r6
   15530:	300cc03a 	cmpne	r6,r6,zero
   15534:	4992b03a 	or	r9,r9,r6
   15538:	0005883a 	mov	r2,zero
   1553c:	003f1206 	br	15188 <_gp+0xffff08d8>
   15540:	0101ffc4 	movi	r4,2047
   15544:	493f9c1e 	bne	r9,r4,153b8 <_gp+0xffff0b08>
   15548:	2807883a 	mov	r3,r5
   1554c:	3023883a 	mov	r17,r6
   15550:	4821883a 	mov	r16,r9
   15554:	3825883a 	mov	r18,r7
   15558:	003e9106 	br	14fa0 <_gp+0xffff06f0>
   1555c:	80001f1e 	bne	r16,zero,155dc <__subdf3+0x6c0>
   15560:	1c48b03a 	or	r4,r3,r17
   15564:	20005a26 	beq	r4,zero,156d0 <__subdf3+0x7b4>
   15568:	0084303a 	nor	r2,zero,r2
   1556c:	1000561e 	bne	r2,zero,156c8 <__subdf3+0x7ac>
   15570:	89a3883a 	add	r17,r17,r6
   15574:	1945883a 	add	r2,r3,r5
   15578:	898d803a 	cmpltu	r6,r17,r6
   1557c:	3087883a 	add	r3,r6,r2
   15580:	4821883a 	mov	r16,r9
   15584:	003f0506 	br	1519c <_gp+0xffff08ec>
   15588:	10002b1e 	bne	r2,zero,15638 <__subdf3+0x71c>
   1558c:	2984b03a 	or	r2,r5,r6
   15590:	10008026 	beq	r2,zero,15794 <__subdf3+0x878>
   15594:	2807883a 	mov	r3,r5
   15598:	3023883a 	mov	r17,r6
   1559c:	3825883a 	mov	r18,r7
   155a0:	0401ffc4 	movi	r16,2047
   155a4:	003e7e06 	br	14fa0 <_gp+0xffff06f0>
   155a8:	3809883a 	mov	r4,r7
   155ac:	0011883a 	mov	r8,zero
   155b0:	0005883a 	mov	r2,zero
   155b4:	003ee306 	br	15144 <_gp+0xffff0894>
   155b8:	1c62b03a 	or	r17,r3,r17
   155bc:	8822c03a 	cmpne	r17,r17,zero
   155c0:	0005883a 	mov	r2,zero
   155c4:	003f8906 	br	153ec <_gp+0xffff0b3c>
   155c8:	3809883a 	mov	r4,r7
   155cc:	4821883a 	mov	r16,r9
   155d0:	0011883a 	mov	r8,zero
   155d4:	0005883a 	mov	r2,zero
   155d8:	003eda06 	br	15144 <_gp+0xffff0894>
   155dc:	0101ffc4 	movi	r4,2047
   155e0:	49003b26 	beq	r9,r4,156d0 <__subdf3+0x7b4>
   155e4:	0085c83a 	sub	r2,zero,r2
   155e8:	18c02034 	orhi	r3,r3,128
   155ec:	01000e04 	movi	r4,56
   155f0:	20806e16 	blt	r4,r2,157ac <__subdf3+0x890>
   155f4:	010007c4 	movi	r4,31
   155f8:	20807716 	blt	r4,r2,157d8 <__subdf3+0x8bc>
   155fc:	01000804 	movi	r4,32
   15600:	2089c83a 	sub	r4,r4,r2
   15604:	1914983a 	sll	r10,r3,r4
   15608:	8890d83a 	srl	r8,r17,r2
   1560c:	8908983a 	sll	r4,r17,r4
   15610:	1884d83a 	srl	r2,r3,r2
   15614:	5222b03a 	or	r17,r10,r8
   15618:	2006c03a 	cmpne	r3,r4,zero
   1561c:	88e2b03a 	or	r17,r17,r3
   15620:	89a3883a 	add	r17,r17,r6
   15624:	1145883a 	add	r2,r2,r5
   15628:	898d803a 	cmpltu	r6,r17,r6
   1562c:	3087883a 	add	r3,r6,r2
   15630:	4821883a 	mov	r16,r9
   15634:	003ed906 	br	1519c <_gp+0xffff08ec>
   15638:	2984b03a 	or	r2,r5,r6
   1563c:	10004226 	beq	r2,zero,15748 <__subdf3+0x82c>
   15640:	1808d0fa 	srli	r4,r3,3
   15644:	8822d0fa 	srli	r17,r17,3
   15648:	1806977a 	slli	r3,r3,29
   1564c:	2080022c 	andhi	r2,r4,8
   15650:	1c62b03a 	or	r17,r3,r17
   15654:	10000826 	beq	r2,zero,15678 <__subdf3+0x75c>
   15658:	2812d0fa 	srli	r9,r5,3
   1565c:	4880022c 	andhi	r2,r9,8
   15660:	1000051e 	bne	r2,zero,15678 <__subdf3+0x75c>
   15664:	300cd0fa 	srli	r6,r6,3
   15668:	2804977a 	slli	r2,r5,29
   1566c:	4809883a 	mov	r4,r9
   15670:	3825883a 	mov	r18,r7
   15674:	11a2b03a 	or	r17,r2,r6
   15678:	8806d77a 	srli	r3,r17,29
   1567c:	200890fa 	slli	r4,r4,3
   15680:	882290fa 	slli	r17,r17,3
   15684:	0401ffc4 	movi	r16,2047
   15688:	1906b03a 	or	r3,r3,r4
   1568c:	003e4406 	br	14fa0 <_gp+0xffff06f0>
   15690:	2984b03a 	or	r2,r5,r6
   15694:	103e4226 	beq	r2,zero,14fa0 <_gp+0xffff06f0>
   15698:	8989c83a 	sub	r4,r17,r6
   1569c:	8911803a 	cmpltu	r8,r17,r4
   156a0:	1945c83a 	sub	r2,r3,r5
   156a4:	1205c83a 	sub	r2,r2,r8
   156a8:	1200202c 	andhi	r8,r2,128
   156ac:	403e9a26 	beq	r8,zero,15118 <_gp+0xffff0868>
   156b0:	3463c83a 	sub	r17,r6,r17
   156b4:	28c5c83a 	sub	r2,r5,r3
   156b8:	344d803a 	cmpltu	r6,r6,r17
   156bc:	1187c83a 	sub	r3,r2,r6
   156c0:	3825883a 	mov	r18,r7
   156c4:	003e3606 	br	14fa0 <_gp+0xffff06f0>
   156c8:	0101ffc4 	movi	r4,2047
   156cc:	493fc71e 	bne	r9,r4,155ec <_gp+0xffff0d3c>
   156d0:	2807883a 	mov	r3,r5
   156d4:	3023883a 	mov	r17,r6
   156d8:	4821883a 	mov	r16,r9
   156dc:	003e3006 	br	14fa0 <_gp+0xffff06f0>
   156e0:	10003626 	beq	r2,zero,157bc <__subdf3+0x8a0>
   156e4:	2984b03a 	or	r2,r5,r6
   156e8:	10001726 	beq	r2,zero,15748 <__subdf3+0x82c>
   156ec:	1808d0fa 	srli	r4,r3,3
   156f0:	8822d0fa 	srli	r17,r17,3
   156f4:	1806977a 	slli	r3,r3,29
   156f8:	2080022c 	andhi	r2,r4,8
   156fc:	1c62b03a 	or	r17,r3,r17
   15700:	10000726 	beq	r2,zero,15720 <__subdf3+0x804>
   15704:	2812d0fa 	srli	r9,r5,3
   15708:	4880022c 	andhi	r2,r9,8
   1570c:	1000041e 	bne	r2,zero,15720 <__subdf3+0x804>
   15710:	300cd0fa 	srli	r6,r6,3
   15714:	2804977a 	slli	r2,r5,29
   15718:	4809883a 	mov	r4,r9
   1571c:	11a2b03a 	or	r17,r2,r6
   15720:	8806d77a 	srli	r3,r17,29
   15724:	200890fa 	slli	r4,r4,3
   15728:	882290fa 	slli	r17,r17,3
   1572c:	3825883a 	mov	r18,r7
   15730:	1906b03a 	or	r3,r3,r4
   15734:	0401ffc4 	movi	r16,2047
   15738:	003e1906 	br	14fa0 <_gp+0xffff06f0>
   1573c:	000b883a 	mov	r5,zero
   15740:	0005883a 	mov	r2,zero
   15744:	003e2e06 	br	15000 <_gp+0xffff0750>
   15748:	0401ffc4 	movi	r16,2047
   1574c:	003e1406 	br	14fa0 <_gp+0xffff06f0>
   15750:	0005883a 	mov	r2,zero
   15754:	003f7506 	br	1552c <_gp+0xffff0c7c>
   15758:	0005883a 	mov	r2,zero
   1575c:	0009883a 	mov	r4,zero
   15760:	003e7806 	br	15144 <_gp+0xffff0894>
   15764:	123ff804 	addi	r8,r2,-32
   15768:	01000804 	movi	r4,32
   1576c:	1a10d83a 	srl	r8,r3,r8
   15770:	11002526 	beq	r2,r4,15808 <__subdf3+0x8ec>
   15774:	01001004 	movi	r4,64
   15778:	2085c83a 	sub	r2,r4,r2
   1577c:	1884983a 	sll	r2,r3,r2
   15780:	1444b03a 	or	r2,r2,r17
   15784:	1004c03a 	cmpne	r2,r2,zero
   15788:	40a2b03a 	or	r17,r8,r2
   1578c:	0005883a 	mov	r2,zero
   15790:	003f1606 	br	153ec <_gp+0xffff0b3c>
   15794:	02000434 	movhi	r8,16
   15798:	0009883a 	mov	r4,zero
   1579c:	423fffc4 	addi	r8,r8,-1
   157a0:	00bfffc4 	movi	r2,-1
   157a4:	0401ffc4 	movi	r16,2047
   157a8:	003e6606 	br	15144 <_gp+0xffff0894>
   157ac:	1c62b03a 	or	r17,r3,r17
   157b0:	8822c03a 	cmpne	r17,r17,zero
   157b4:	0005883a 	mov	r2,zero
   157b8:	003f9906 	br	15620 <_gp+0xffff0d70>
   157bc:	2807883a 	mov	r3,r5
   157c0:	3023883a 	mov	r17,r6
   157c4:	0401ffc4 	movi	r16,2047
   157c8:	003df506 	br	14fa0 <_gp+0xffff06f0>
   157cc:	2807883a 	mov	r3,r5
   157d0:	3023883a 	mov	r17,r6
   157d4:	003df206 	br	14fa0 <_gp+0xffff06f0>
   157d8:	123ff804 	addi	r8,r2,-32
   157dc:	01000804 	movi	r4,32
   157e0:	1a10d83a 	srl	r8,r3,r8
   157e4:	11000a26 	beq	r2,r4,15810 <__subdf3+0x8f4>
   157e8:	01001004 	movi	r4,64
   157ec:	2085c83a 	sub	r2,r4,r2
   157f0:	1884983a 	sll	r2,r3,r2
   157f4:	1444b03a 	or	r2,r2,r17
   157f8:	1004c03a 	cmpne	r2,r2,zero
   157fc:	40a2b03a 	or	r17,r8,r2
   15800:	0005883a 	mov	r2,zero
   15804:	003f8606 	br	15620 <_gp+0xffff0d70>
   15808:	0005883a 	mov	r2,zero
   1580c:	003fdc06 	br	15780 <_gp+0xffff0ed0>
   15810:	0005883a 	mov	r2,zero
   15814:	003ff706 	br	157f4 <_gp+0xffff0f44>

00015818 <__fixdfsi>:
   15818:	280cd53a 	srli	r6,r5,20
   1581c:	00c00434 	movhi	r3,16
   15820:	18ffffc4 	addi	r3,r3,-1
   15824:	3181ffcc 	andi	r6,r6,2047
   15828:	01c0ff84 	movi	r7,1022
   1582c:	28c6703a 	and	r3,r5,r3
   15830:	280ad7fa 	srli	r5,r5,31
   15834:	3980120e 	bge	r7,r6,15880 <__fixdfsi+0x68>
   15838:	00810744 	movi	r2,1053
   1583c:	11800c16 	blt	r2,r6,15870 <__fixdfsi+0x58>
   15840:	00810cc4 	movi	r2,1075
   15844:	1185c83a 	sub	r2,r2,r6
   15848:	01c007c4 	movi	r7,31
   1584c:	18c00434 	orhi	r3,r3,16
   15850:	38800d16 	blt	r7,r2,15888 <__fixdfsi+0x70>
   15854:	31befb44 	addi	r6,r6,-1043
   15858:	2084d83a 	srl	r2,r4,r2
   1585c:	1986983a 	sll	r3,r3,r6
   15860:	1884b03a 	or	r2,r3,r2
   15864:	28000726 	beq	r5,zero,15884 <__fixdfsi+0x6c>
   15868:	0085c83a 	sub	r2,zero,r2
   1586c:	f800283a 	ret
   15870:	00a00034 	movhi	r2,32768
   15874:	10bfffc4 	addi	r2,r2,-1
   15878:	2885883a 	add	r2,r5,r2
   1587c:	f800283a 	ret
   15880:	0005883a 	mov	r2,zero
   15884:	f800283a 	ret
   15888:	008104c4 	movi	r2,1043
   1588c:	1185c83a 	sub	r2,r2,r6
   15890:	1884d83a 	srl	r2,r3,r2
   15894:	003ff306 	br	15864 <_gp+0xffff0fb4>

00015898 <__floatsidf>:
   15898:	defffd04 	addi	sp,sp,-12
   1589c:	dfc00215 	stw	ra,8(sp)
   158a0:	dc400115 	stw	r17,4(sp)
   158a4:	dc000015 	stw	r16,0(sp)
   158a8:	20002b26 	beq	r4,zero,15958 <__floatsidf+0xc0>
   158ac:	2023883a 	mov	r17,r4
   158b0:	2020d7fa 	srli	r16,r4,31
   158b4:	20002d16 	blt	r4,zero,1596c <__floatsidf+0xd4>
   158b8:	8809883a 	mov	r4,r17
   158bc:	0015a840 	call	15a84 <__clzsi2>
   158c0:	01410784 	movi	r5,1054
   158c4:	288bc83a 	sub	r5,r5,r2
   158c8:	01010cc4 	movi	r4,1075
   158cc:	2149c83a 	sub	r4,r4,r5
   158d0:	00c007c4 	movi	r3,31
   158d4:	1900160e 	bge	r3,r4,15930 <__floatsidf+0x98>
   158d8:	00c104c4 	movi	r3,1043
   158dc:	1947c83a 	sub	r3,r3,r5
   158e0:	88c6983a 	sll	r3,r17,r3
   158e4:	00800434 	movhi	r2,16
   158e8:	10bfffc4 	addi	r2,r2,-1
   158ec:	1886703a 	and	r3,r3,r2
   158f0:	2941ffcc 	andi	r5,r5,2047
   158f4:	800d883a 	mov	r6,r16
   158f8:	0005883a 	mov	r2,zero
   158fc:	280a953a 	slli	r5,r5,20
   15900:	31803fcc 	andi	r6,r6,255
   15904:	01000434 	movhi	r4,16
   15908:	300c97fa 	slli	r6,r6,31
   1590c:	213fffc4 	addi	r4,r4,-1
   15910:	1906703a 	and	r3,r3,r4
   15914:	1946b03a 	or	r3,r3,r5
   15918:	1986b03a 	or	r3,r3,r6
   1591c:	dfc00217 	ldw	ra,8(sp)
   15920:	dc400117 	ldw	r17,4(sp)
   15924:	dc000017 	ldw	r16,0(sp)
   15928:	dec00304 	addi	sp,sp,12
   1592c:	f800283a 	ret
   15930:	00c002c4 	movi	r3,11
   15934:	1887c83a 	sub	r3,r3,r2
   15938:	88c6d83a 	srl	r3,r17,r3
   1593c:	8904983a 	sll	r2,r17,r4
   15940:	01000434 	movhi	r4,16
   15944:	213fffc4 	addi	r4,r4,-1
   15948:	2941ffcc 	andi	r5,r5,2047
   1594c:	1906703a 	and	r3,r3,r4
   15950:	800d883a 	mov	r6,r16
   15954:	003fe906 	br	158fc <_gp+0xffff104c>
   15958:	000d883a 	mov	r6,zero
   1595c:	000b883a 	mov	r5,zero
   15960:	0007883a 	mov	r3,zero
   15964:	0005883a 	mov	r2,zero
   15968:	003fe406 	br	158fc <_gp+0xffff104c>
   1596c:	0123c83a 	sub	r17,zero,r4
   15970:	003fd106 	br	158b8 <_gp+0xffff1008>

00015974 <__extendsfdf2>:
   15974:	200ad5fa 	srli	r5,r4,23
   15978:	defffd04 	addi	sp,sp,-12
   1597c:	dc400115 	stw	r17,4(sp)
   15980:	29403fcc 	andi	r5,r5,255
   15984:	29800044 	addi	r6,r5,1
   15988:	04402034 	movhi	r17,128
   1598c:	dc000015 	stw	r16,0(sp)
   15990:	8c7fffc4 	addi	r17,r17,-1
   15994:	dfc00215 	stw	ra,8(sp)
   15998:	31803fcc 	andi	r6,r6,255
   1599c:	00800044 	movi	r2,1
   159a0:	8922703a 	and	r17,r17,r4
   159a4:	2020d7fa 	srli	r16,r4,31
   159a8:	1180110e 	bge	r2,r6,159f0 <__extendsfdf2+0x7c>
   159ac:	880cd0fa 	srli	r6,r17,3
   159b0:	8822977a 	slli	r17,r17,29
   159b4:	2940e004 	addi	r5,r5,896
   159b8:	2941ffcc 	andi	r5,r5,2047
   159bc:	2804953a 	slli	r2,r5,20
   159c0:	01400434 	movhi	r5,16
   159c4:	800697fa 	slli	r3,r16,31
   159c8:	297fffc4 	addi	r5,r5,-1
   159cc:	314a703a 	and	r5,r6,r5
   159d0:	288ab03a 	or	r5,r5,r2
   159d4:	28c6b03a 	or	r3,r5,r3
   159d8:	8805883a 	mov	r2,r17
   159dc:	dfc00217 	ldw	ra,8(sp)
   159e0:	dc400117 	ldw	r17,4(sp)
   159e4:	dc000017 	ldw	r16,0(sp)
   159e8:	dec00304 	addi	sp,sp,12
   159ec:	f800283a 	ret
   159f0:	2800111e 	bne	r5,zero,15a38 <__extendsfdf2+0xc4>
   159f4:	88001c26 	beq	r17,zero,15a68 <__extendsfdf2+0xf4>
   159f8:	8809883a 	mov	r4,r17
   159fc:	0015a840 	call	15a84 <__clzsi2>
   15a00:	00c00284 	movi	r3,10
   15a04:	18801b16 	blt	r3,r2,15a74 <__extendsfdf2+0x100>
   15a08:	018002c4 	movi	r6,11
   15a0c:	308dc83a 	sub	r6,r6,r2
   15a10:	11000544 	addi	r4,r2,21
   15a14:	8986d83a 	srl	r3,r17,r6
   15a18:	8922983a 	sll	r17,r17,r4
   15a1c:	0180e244 	movi	r6,905
   15a20:	01400434 	movhi	r5,16
   15a24:	3085c83a 	sub	r2,r6,r2
   15a28:	297fffc4 	addi	r5,r5,-1
   15a2c:	194c703a 	and	r6,r3,r5
   15a30:	1141ffcc 	andi	r5,r2,2047
   15a34:	003fe006 	br	159b8 <_gp+0xffff1108>
   15a38:	88000826 	beq	r17,zero,15a5c <__extendsfdf2+0xe8>
   15a3c:	880cd0fa 	srli	r6,r17,3
   15a40:	00800434 	movhi	r2,16
   15a44:	10bfffc4 	addi	r2,r2,-1
   15a48:	31800234 	orhi	r6,r6,8
   15a4c:	8822977a 	slli	r17,r17,29
   15a50:	308c703a 	and	r6,r6,r2
   15a54:	0141ffc4 	movi	r5,2047
   15a58:	003fd706 	br	159b8 <_gp+0xffff1108>
   15a5c:	0141ffc4 	movi	r5,2047
   15a60:	000d883a 	mov	r6,zero
   15a64:	003fd406 	br	159b8 <_gp+0xffff1108>
   15a68:	000b883a 	mov	r5,zero
   15a6c:	000d883a 	mov	r6,zero
   15a70:	003fd106 	br	159b8 <_gp+0xffff1108>
   15a74:	11bffd44 	addi	r6,r2,-11
   15a78:	8986983a 	sll	r3,r17,r6
   15a7c:	0023883a 	mov	r17,zero
   15a80:	003fe606 	br	15a1c <_gp+0xffff116c>

00015a84 <__clzsi2>:
   15a84:	00bfffd4 	movui	r2,65535
   15a88:	11000536 	bltu	r2,r4,15aa0 <__clzsi2+0x1c>
   15a8c:	00803fc4 	movi	r2,255
   15a90:	11000f36 	bltu	r2,r4,15ad0 <__clzsi2+0x4c>
   15a94:	00800804 	movi	r2,32
   15a98:	0007883a 	mov	r3,zero
   15a9c:	00000506 	br	15ab4 <__clzsi2+0x30>
   15aa0:	00804034 	movhi	r2,256
   15aa4:	10bfffc4 	addi	r2,r2,-1
   15aa8:	11000c2e 	bgeu	r2,r4,15adc <__clzsi2+0x58>
   15aac:	00800204 	movi	r2,8
   15ab0:	00c00604 	movi	r3,24
   15ab4:	20c8d83a 	srl	r4,r4,r3
   15ab8:	00c000b4 	movhi	r3,2
   15abc:	18eb4204 	addi	r3,r3,-21240
   15ac0:	1909883a 	add	r4,r3,r4
   15ac4:	20c00003 	ldbu	r3,0(r4)
   15ac8:	10c5c83a 	sub	r2,r2,r3
   15acc:	f800283a 	ret
   15ad0:	00800604 	movi	r2,24
   15ad4:	00c00204 	movi	r3,8
   15ad8:	003ff606 	br	15ab4 <_gp+0xffff1204>
   15adc:	00800404 	movi	r2,16
   15ae0:	1007883a 	mov	r3,r2
   15ae4:	003ff306 	br	15ab4 <_gp+0xffff1204>

00015ae8 <__divsi3>:
   15ae8:	20001b16 	blt	r4,zero,15b58 <__divsi3+0x70>
   15aec:	000f883a 	mov	r7,zero
   15af0:	28001616 	blt	r5,zero,15b4c <__divsi3+0x64>
   15af4:	200d883a 	mov	r6,r4
   15af8:	29001a2e 	bgeu	r5,r4,15b64 <__divsi3+0x7c>
   15afc:	00800804 	movi	r2,32
   15b00:	00c00044 	movi	r3,1
   15b04:	00000106 	br	15b0c <__divsi3+0x24>
   15b08:	10000d26 	beq	r2,zero,15b40 <__divsi3+0x58>
   15b0c:	294b883a 	add	r5,r5,r5
   15b10:	10bfffc4 	addi	r2,r2,-1
   15b14:	18c7883a 	add	r3,r3,r3
   15b18:	293ffb36 	bltu	r5,r4,15b08 <_gp+0xffff1258>
   15b1c:	0005883a 	mov	r2,zero
   15b20:	18000726 	beq	r3,zero,15b40 <__divsi3+0x58>
   15b24:	0005883a 	mov	r2,zero
   15b28:	31400236 	bltu	r6,r5,15b34 <__divsi3+0x4c>
   15b2c:	314dc83a 	sub	r6,r6,r5
   15b30:	10c4b03a 	or	r2,r2,r3
   15b34:	1806d07a 	srli	r3,r3,1
   15b38:	280ad07a 	srli	r5,r5,1
   15b3c:	183ffa1e 	bne	r3,zero,15b28 <_gp+0xffff1278>
   15b40:	38000126 	beq	r7,zero,15b48 <__divsi3+0x60>
   15b44:	0085c83a 	sub	r2,zero,r2
   15b48:	f800283a 	ret
   15b4c:	014bc83a 	sub	r5,zero,r5
   15b50:	39c0005c 	xori	r7,r7,1
   15b54:	003fe706 	br	15af4 <_gp+0xffff1244>
   15b58:	0109c83a 	sub	r4,zero,r4
   15b5c:	01c00044 	movi	r7,1
   15b60:	003fe306 	br	15af0 <_gp+0xffff1240>
   15b64:	00c00044 	movi	r3,1
   15b68:	003fee06 	br	15b24 <_gp+0xffff1274>

00015b6c <__modsi3>:
   15b6c:	20001716 	blt	r4,zero,15bcc <__modsi3+0x60>
   15b70:	000f883a 	mov	r7,zero
   15b74:	2005883a 	mov	r2,r4
   15b78:	28001216 	blt	r5,zero,15bc4 <__modsi3+0x58>
   15b7c:	2900162e 	bgeu	r5,r4,15bd8 <__modsi3+0x6c>
   15b80:	01800804 	movi	r6,32
   15b84:	00c00044 	movi	r3,1
   15b88:	00000106 	br	15b90 <__modsi3+0x24>
   15b8c:	30000a26 	beq	r6,zero,15bb8 <__modsi3+0x4c>
   15b90:	294b883a 	add	r5,r5,r5
   15b94:	31bfffc4 	addi	r6,r6,-1
   15b98:	18c7883a 	add	r3,r3,r3
   15b9c:	293ffb36 	bltu	r5,r4,15b8c <_gp+0xffff12dc>
   15ba0:	18000526 	beq	r3,zero,15bb8 <__modsi3+0x4c>
   15ba4:	1806d07a 	srli	r3,r3,1
   15ba8:	11400136 	bltu	r2,r5,15bb0 <__modsi3+0x44>
   15bac:	1145c83a 	sub	r2,r2,r5
   15bb0:	280ad07a 	srli	r5,r5,1
   15bb4:	183ffb1e 	bne	r3,zero,15ba4 <_gp+0xffff12f4>
   15bb8:	38000126 	beq	r7,zero,15bc0 <__modsi3+0x54>
   15bbc:	0085c83a 	sub	r2,zero,r2
   15bc0:	f800283a 	ret
   15bc4:	014bc83a 	sub	r5,zero,r5
   15bc8:	003fec06 	br	15b7c <_gp+0xffff12cc>
   15bcc:	0109c83a 	sub	r4,zero,r4
   15bd0:	01c00044 	movi	r7,1
   15bd4:	003fe706 	br	15b74 <_gp+0xffff12c4>
   15bd8:	00c00044 	movi	r3,1
   15bdc:	003ff106 	br	15ba4 <_gp+0xffff12f4>

00015be0 <__udivsi3>:
   15be0:	200d883a 	mov	r6,r4
   15be4:	2900152e 	bgeu	r5,r4,15c3c <__udivsi3+0x5c>
   15be8:	28001416 	blt	r5,zero,15c3c <__udivsi3+0x5c>
   15bec:	00800804 	movi	r2,32
   15bf0:	00c00044 	movi	r3,1
   15bf4:	00000206 	br	15c00 <__udivsi3+0x20>
   15bf8:	10000e26 	beq	r2,zero,15c34 <__udivsi3+0x54>
   15bfc:	28000516 	blt	r5,zero,15c14 <__udivsi3+0x34>
   15c00:	294b883a 	add	r5,r5,r5
   15c04:	10bfffc4 	addi	r2,r2,-1
   15c08:	18c7883a 	add	r3,r3,r3
   15c0c:	293ffa36 	bltu	r5,r4,15bf8 <_gp+0xffff1348>
   15c10:	18000826 	beq	r3,zero,15c34 <__udivsi3+0x54>
   15c14:	0005883a 	mov	r2,zero
   15c18:	31400236 	bltu	r6,r5,15c24 <__udivsi3+0x44>
   15c1c:	314dc83a 	sub	r6,r6,r5
   15c20:	10c4b03a 	or	r2,r2,r3
   15c24:	1806d07a 	srli	r3,r3,1
   15c28:	280ad07a 	srli	r5,r5,1
   15c2c:	183ffa1e 	bne	r3,zero,15c18 <_gp+0xffff1368>
   15c30:	f800283a 	ret
   15c34:	0005883a 	mov	r2,zero
   15c38:	f800283a 	ret
   15c3c:	00c00044 	movi	r3,1
   15c40:	003ff406 	br	15c14 <_gp+0xffff1364>

00015c44 <__umodsi3>:
   15c44:	2005883a 	mov	r2,r4
   15c48:	2900122e 	bgeu	r5,r4,15c94 <__umodsi3+0x50>
   15c4c:	28001116 	blt	r5,zero,15c94 <__umodsi3+0x50>
   15c50:	01800804 	movi	r6,32
   15c54:	00c00044 	movi	r3,1
   15c58:	00000206 	br	15c64 <__umodsi3+0x20>
   15c5c:	30000c26 	beq	r6,zero,15c90 <__umodsi3+0x4c>
   15c60:	28000516 	blt	r5,zero,15c78 <__umodsi3+0x34>
   15c64:	294b883a 	add	r5,r5,r5
   15c68:	31bfffc4 	addi	r6,r6,-1
   15c6c:	18c7883a 	add	r3,r3,r3
   15c70:	293ffa36 	bltu	r5,r4,15c5c <_gp+0xffff13ac>
   15c74:	18000626 	beq	r3,zero,15c90 <__umodsi3+0x4c>
   15c78:	1806d07a 	srli	r3,r3,1
   15c7c:	11400136 	bltu	r2,r5,15c84 <__umodsi3+0x40>
   15c80:	1145c83a 	sub	r2,r2,r5
   15c84:	280ad07a 	srli	r5,r5,1
   15c88:	183ffb1e 	bne	r3,zero,15c78 <_gp+0xffff13c8>
   15c8c:	f800283a 	ret
   15c90:	f800283a 	ret
   15c94:	00c00044 	movi	r3,1
   15c98:	003ff706 	br	15c78 <_gp+0xffff13c8>

00015c9c <clock>:
   15c9c:	008000b4 	movhi	r2,2
   15ca0:	10b22f04 	addi	r2,r2,-14148
   15ca4:	11000017 	ldw	r4,0(r2)
   15ca8:	defffb04 	addi	sp,sp,-20
   15cac:	d80b883a 	mov	r5,sp
   15cb0:	dfc00415 	stw	ra,16(sp)
   15cb4:	0015e400 	call	15e40 <_times_r>
   15cb8:	00ffffc4 	movi	r3,-1
   15cbc:	10c00726 	beq	r2,r3,15cdc <clock+0x40>
   15cc0:	d8c00017 	ldw	r3,0(sp)
   15cc4:	d8800117 	ldw	r2,4(sp)
   15cc8:	1885883a 	add	r2,r3,r2
   15ccc:	d8c00217 	ldw	r3,8(sp)
   15cd0:	10c7883a 	add	r3,r2,r3
   15cd4:	d8800317 	ldw	r2,12(sp)
   15cd8:	1885883a 	add	r2,r3,r2
   15cdc:	dfc00417 	ldw	ra,16(sp)
   15ce0:	dec00504 	addi	sp,sp,20
   15ce4:	f800283a 	ret

00015ce8 <__errno>:
   15ce8:	008000b4 	movhi	r2,2
   15cec:	10b22f04 	addi	r2,r2,-14148
   15cf0:	10800017 	ldw	r2,0(r2)
   15cf4:	f800283a 	ret

00015cf8 <memcpy>:
   15cf8:	defffd04 	addi	sp,sp,-12
   15cfc:	dfc00215 	stw	ra,8(sp)
   15d00:	dc400115 	stw	r17,4(sp)
   15d04:	dc000015 	stw	r16,0(sp)
   15d08:	00c003c4 	movi	r3,15
   15d0c:	2005883a 	mov	r2,r4
   15d10:	1980452e 	bgeu	r3,r6,15e28 <memcpy+0x130>
   15d14:	2906b03a 	or	r3,r5,r4
   15d18:	18c000cc 	andi	r3,r3,3
   15d1c:	1800441e 	bne	r3,zero,15e30 <memcpy+0x138>
   15d20:	347ffc04 	addi	r17,r6,-16
   15d24:	8822d13a 	srli	r17,r17,4
   15d28:	28c00104 	addi	r3,r5,4
   15d2c:	23400104 	addi	r13,r4,4
   15d30:	8820913a 	slli	r16,r17,4
   15d34:	2b000204 	addi	r12,r5,8
   15d38:	22c00204 	addi	r11,r4,8
   15d3c:	84000504 	addi	r16,r16,20
   15d40:	2a800304 	addi	r10,r5,12
   15d44:	22400304 	addi	r9,r4,12
   15d48:	2c21883a 	add	r16,r5,r16
   15d4c:	2811883a 	mov	r8,r5
   15d50:	200f883a 	mov	r7,r4
   15d54:	41000017 	ldw	r4,0(r8)
   15d58:	1fc00017 	ldw	ra,0(r3)
   15d5c:	63c00017 	ldw	r15,0(r12)
   15d60:	39000015 	stw	r4,0(r7)
   15d64:	53800017 	ldw	r14,0(r10)
   15d68:	6fc00015 	stw	ra,0(r13)
   15d6c:	5bc00015 	stw	r15,0(r11)
   15d70:	4b800015 	stw	r14,0(r9)
   15d74:	18c00404 	addi	r3,r3,16
   15d78:	39c00404 	addi	r7,r7,16
   15d7c:	42000404 	addi	r8,r8,16
   15d80:	6b400404 	addi	r13,r13,16
   15d84:	63000404 	addi	r12,r12,16
   15d88:	5ac00404 	addi	r11,r11,16
   15d8c:	52800404 	addi	r10,r10,16
   15d90:	4a400404 	addi	r9,r9,16
   15d94:	1c3fef1e 	bne	r3,r16,15d54 <_gp+0xffff14a4>
   15d98:	89c00044 	addi	r7,r17,1
   15d9c:	380e913a 	slli	r7,r7,4
   15da0:	310003cc 	andi	r4,r6,15
   15da4:	02c000c4 	movi	r11,3
   15da8:	11c7883a 	add	r3,r2,r7
   15dac:	29cb883a 	add	r5,r5,r7
   15db0:	5900212e 	bgeu	r11,r4,15e38 <memcpy+0x140>
   15db4:	1813883a 	mov	r9,r3
   15db8:	2811883a 	mov	r8,r5
   15dbc:	200f883a 	mov	r7,r4
   15dc0:	42800017 	ldw	r10,0(r8)
   15dc4:	4a400104 	addi	r9,r9,4
   15dc8:	39ffff04 	addi	r7,r7,-4
   15dcc:	4abfff15 	stw	r10,-4(r9)
   15dd0:	42000104 	addi	r8,r8,4
   15dd4:	59fffa36 	bltu	r11,r7,15dc0 <_gp+0xffff1510>
   15dd8:	213fff04 	addi	r4,r4,-4
   15ddc:	2008d0ba 	srli	r4,r4,2
   15de0:	318000cc 	andi	r6,r6,3
   15de4:	21000044 	addi	r4,r4,1
   15de8:	2109883a 	add	r4,r4,r4
   15dec:	2109883a 	add	r4,r4,r4
   15df0:	1907883a 	add	r3,r3,r4
   15df4:	290b883a 	add	r5,r5,r4
   15df8:	30000626 	beq	r6,zero,15e14 <memcpy+0x11c>
   15dfc:	198d883a 	add	r6,r3,r6
   15e00:	29c00003 	ldbu	r7,0(r5)
   15e04:	18c00044 	addi	r3,r3,1
   15e08:	29400044 	addi	r5,r5,1
   15e0c:	19ffffc5 	stb	r7,-1(r3)
   15e10:	19bffb1e 	bne	r3,r6,15e00 <_gp+0xffff1550>
   15e14:	dfc00217 	ldw	ra,8(sp)
   15e18:	dc400117 	ldw	r17,4(sp)
   15e1c:	dc000017 	ldw	r16,0(sp)
   15e20:	dec00304 	addi	sp,sp,12
   15e24:	f800283a 	ret
   15e28:	2007883a 	mov	r3,r4
   15e2c:	003ff206 	br	15df8 <_gp+0xffff1548>
   15e30:	2007883a 	mov	r3,r4
   15e34:	003ff106 	br	15dfc <_gp+0xffff154c>
   15e38:	200d883a 	mov	r6,r4
   15e3c:	003fee06 	br	15df8 <_gp+0xffff1548>

00015e40 <_times_r>:
   15e40:	2809883a 	mov	r4,r5
   15e44:	00163d41 	jmpi	163d4 <times>

00015e48 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   15e48:	defff004 	addi	sp,sp,-64
   15e4c:	df000f15 	stw	fp,60(sp)
   15e50:	df000f04 	addi	fp,sp,60
   15e54:	e13ffd15 	stw	r4,-12(fp)
   15e58:	e17ffe15 	stw	r5,-8(fp)
   15e5c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   15e60:	00bffa84 	movi	r2,-22
   15e64:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15e68:	e0bffd17 	ldw	r2,-12(fp)
   15e6c:	10800828 	cmpgeui	r2,r2,32
   15e70:	1000501e 	bne	r2,zero,15fb4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e74:	0005303a 	rdctl	r2,status
   15e78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e7c:	e0fff617 	ldw	r3,-40(fp)
   15e80:	00bfff84 	movi	r2,-2
   15e84:	1884703a 	and	r2,r3,r2
   15e88:	1001703a 	wrctl	status,r2
  
  return context;
   15e8c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   15e90:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   15e94:	008000b4 	movhi	r2,2
   15e98:	10b8fc04 	addi	r2,r2,-7184
   15e9c:	e0fffd17 	ldw	r3,-12(fp)
   15ea0:	180690fa 	slli	r3,r3,3
   15ea4:	10c5883a 	add	r2,r2,r3
   15ea8:	e0ffff17 	ldw	r3,-4(fp)
   15eac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   15eb0:	008000b4 	movhi	r2,2
   15eb4:	10b8fc04 	addi	r2,r2,-7184
   15eb8:	e0fffd17 	ldw	r3,-12(fp)
   15ebc:	180690fa 	slli	r3,r3,3
   15ec0:	10c5883a 	add	r2,r2,r3
   15ec4:	10800104 	addi	r2,r2,4
   15ec8:	e0fffe17 	ldw	r3,-8(fp)
   15ecc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   15ed0:	e0bfff17 	ldw	r2,-4(fp)
   15ed4:	10001926 	beq	r2,zero,15f3c <alt_irq_register+0xf4>
   15ed8:	e0bffd17 	ldw	r2,-12(fp)
   15edc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ee0:	0005303a 	rdctl	r2,status
   15ee4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ee8:	e0fff717 	ldw	r3,-36(fp)
   15eec:	00bfff84 	movi	r2,-2
   15ef0:	1884703a 	and	r2,r3,r2
   15ef4:	1001703a 	wrctl	status,r2
  
  return context;
   15ef8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15efc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   15f00:	00c00044 	movi	r3,1
   15f04:	e0bff217 	ldw	r2,-56(fp)
   15f08:	1884983a 	sll	r2,r3,r2
   15f0c:	1007883a 	mov	r3,r2
   15f10:	d0a6bb17 	ldw	r2,-25876(gp)
   15f14:	1884b03a 	or	r2,r3,r2
   15f18:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15f1c:	d0a6bb17 	ldw	r2,-25876(gp)
   15f20:	100170fa 	wrctl	ienable,r2
   15f24:	e0bff817 	ldw	r2,-32(fp)
   15f28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f2c:	e0bff917 	ldw	r2,-28(fp)
   15f30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15f34:	0005883a 	mov	r2,zero
   15f38:	00001906 	br	15fa0 <alt_irq_register+0x158>
   15f3c:	e0bffd17 	ldw	r2,-12(fp)
   15f40:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f44:	0005303a 	rdctl	r2,status
   15f48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f4c:	e0fffa17 	ldw	r3,-24(fp)
   15f50:	00bfff84 	movi	r2,-2
   15f54:	1884703a 	and	r2,r3,r2
   15f58:	1001703a 	wrctl	status,r2
  
  return context;
   15f5c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15f60:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   15f64:	00c00044 	movi	r3,1
   15f68:	e0bff417 	ldw	r2,-48(fp)
   15f6c:	1884983a 	sll	r2,r3,r2
   15f70:	0084303a 	nor	r2,zero,r2
   15f74:	1007883a 	mov	r3,r2
   15f78:	d0a6bb17 	ldw	r2,-25876(gp)
   15f7c:	1884703a 	and	r2,r3,r2
   15f80:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15f84:	d0a6bb17 	ldw	r2,-25876(gp)
   15f88:	100170fa 	wrctl	ienable,r2
   15f8c:	e0bffb17 	ldw	r2,-20(fp)
   15f90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f94:	e0bffc17 	ldw	r2,-16(fp)
   15f98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15f9c:	0005883a 	mov	r2,zero
   15fa0:	e0bff115 	stw	r2,-60(fp)
   15fa4:	e0bff317 	ldw	r2,-52(fp)
   15fa8:	e0bff515 	stw	r2,-44(fp)
   15fac:	e0bff517 	ldw	r2,-44(fp)
   15fb0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   15fb4:	e0bff117 	ldw	r2,-60(fp)
}
   15fb8:	e037883a 	mov	sp,fp
   15fbc:	df000017 	ldw	fp,0(sp)
   15fc0:	dec00104 	addi	sp,sp,4
   15fc4:	f800283a 	ret

00015fc8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   15fc8:	defffc04 	addi	sp,sp,-16
   15fcc:	df000315 	stw	fp,12(sp)
   15fd0:	df000304 	addi	fp,sp,12
   15fd4:	e13ffd15 	stw	r4,-12(fp)
   15fd8:	e17ffe15 	stw	r5,-8(fp)
   15fdc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   15fe0:	e0fffe17 	ldw	r3,-8(fp)
   15fe4:	e0bffd17 	ldw	r2,-12(fp)
   15fe8:	18800c26 	beq	r3,r2,1601c <alt_load_section+0x54>
  {
    while( to != end )
   15fec:	00000806 	br	16010 <alt_load_section+0x48>
    {
      *to++ = *from++;
   15ff0:	e0bffe17 	ldw	r2,-8(fp)
   15ff4:	10c00104 	addi	r3,r2,4
   15ff8:	e0fffe15 	stw	r3,-8(fp)
   15ffc:	e0fffd17 	ldw	r3,-12(fp)
   16000:	19000104 	addi	r4,r3,4
   16004:	e13ffd15 	stw	r4,-12(fp)
   16008:	18c00017 	ldw	r3,0(r3)
   1600c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   16010:	e0fffe17 	ldw	r3,-8(fp)
   16014:	e0bfff17 	ldw	r2,-4(fp)
   16018:	18bff51e 	bne	r3,r2,15ff0 <_gp+0xffff1740>
    {
      *to++ = *from++;
    }
  }
}
   1601c:	0001883a 	nop
   16020:	e037883a 	mov	sp,fp
   16024:	df000017 	ldw	fp,0(sp)
   16028:	dec00104 	addi	sp,sp,4
   1602c:	f800283a 	ret

00016030 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   16030:	defffe04 	addi	sp,sp,-8
   16034:	dfc00115 	stw	ra,4(sp)
   16038:	df000015 	stw	fp,0(sp)
   1603c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   16040:	018000b4 	movhi	r6,2
   16044:	31b23c04 	addi	r6,r6,-14096
   16048:	014000b4 	movhi	r5,2
   1604c:	296b9404 	addi	r5,r5,-20912
   16050:	010000b4 	movhi	r4,2
   16054:	21323c04 	addi	r4,r4,-14096
   16058:	0015fc80 	call	15fc8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1605c:	01800074 	movhi	r6,1
   16060:	31808d04 	addi	r6,r6,564
   16064:	01400074 	movhi	r5,1
   16068:	29400804 	addi	r5,r5,32
   1606c:	01000074 	movhi	r4,1
   16070:	21000804 	addi	r4,r4,32
   16074:	0015fc80 	call	15fc8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   16078:	018000b4 	movhi	r6,2
   1607c:	31ab9404 	addi	r6,r6,-20912
   16080:	014000b4 	movhi	r5,2
   16084:	296b0004 	addi	r5,r5,-21504
   16088:	010000b4 	movhi	r4,2
   1608c:	212b0004 	addi	r4,r4,-21504
   16090:	0015fc80 	call	15fc8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   16094:	00176680 	call	17668 <alt_dcache_flush_all>
  alt_icache_flush_all();
   16098:	00178e40 	call	178e4 <alt_icache_flush_all>
}
   1609c:	0001883a 	nop
   160a0:	e037883a 	mov	sp,fp
   160a4:	dfc00117 	ldw	ra,4(sp)
   160a8:	df000017 	ldw	fp,0(sp)
   160ac:	dec00204 	addi	sp,sp,8
   160b0:	f800283a 	ret

000160b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   160b4:	defffd04 	addi	sp,sp,-12
   160b8:	dfc00215 	stw	ra,8(sp)
   160bc:	df000115 	stw	fp,4(sp)
   160c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   160c4:	0009883a 	mov	r4,zero
   160c8:	00164800 	call	16480 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   160cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   160d0:	00164b80 	call	164b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   160d4:	018000b4 	movhi	r6,2
   160d8:	31ab8304 	addi	r6,r6,-20980
   160dc:	014000b4 	movhi	r5,2
   160e0:	296b8304 	addi	r5,r5,-20980
   160e4:	010000b4 	movhi	r4,2
   160e8:	212b8304 	addi	r4,r4,-20980
   160ec:	00179e80 	call	179e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   160f0:	00177940 	call	17794 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   160f4:	01000074 	movhi	r4,1
   160f8:	211dfd04 	addi	r4,r4,30708
   160fc:	001819c0 	call	1819c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   16100:	d0a6bc17 	ldw	r2,-25872(gp)
   16104:	d0e6bd17 	ldw	r3,-25868(gp)
   16108:	d126be17 	ldw	r4,-25864(gp)
   1610c:	200d883a 	mov	r6,r4
   16110:	180b883a 	mov	r5,r3
   16114:	1009883a 	mov	r4,r2
   16118:	00107540 	call	10754 <main>
   1611c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   16120:	01000044 	movi	r4,1
   16124:	00175900 	call	17590 <close>
  exit (result);
   16128:	e13fff17 	ldw	r4,-4(fp)
   1612c:	00181b00 	call	181b0 <exit>

00016130 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   16130:	defff204 	addi	sp,sp,-56
   16134:	dfc00a15 	stw	ra,40(sp)
   16138:	df000915 	stw	fp,36(sp)
   1613c:	df000904 	addi	fp,sp,36
   16140:	e13fff15 	stw	r4,-4(fp)
   16144:	e1400215 	stw	r5,8(fp)
   16148:	e1800315 	stw	r6,12(fp)
   1614c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   16150:	e0800204 	addi	r2,fp,8
   16154:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   16158:	e0bfff17 	ldw	r2,-4(fp)
   1615c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   16160:	00006f06 	br	16320 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   16164:	e0bff807 	ldb	r2,-32(fp)
   16168:	10800960 	cmpeqi	r2,r2,37
   1616c:	1000041e 	bne	r2,zero,16180 <alt_printf+0x50>
        {
            alt_putchar(c);
   16170:	e0bff807 	ldb	r2,-32(fp)
   16174:	1009883a 	mov	r4,r2
   16178:	001635c0 	call	1635c <alt_putchar>
   1617c:	00006806 	br	16320 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   16180:	e0bff717 	ldw	r2,-36(fp)
   16184:	10c00044 	addi	r3,r2,1
   16188:	e0fff715 	stw	r3,-36(fp)
   1618c:	10800003 	ldbu	r2,0(r2)
   16190:	e0bff805 	stb	r2,-32(fp)
   16194:	e0bff807 	ldb	r2,-32(fp)
   16198:	10006926 	beq	r2,zero,16340 <alt_printf+0x210>
            {
                if (c == '%')
   1619c:	e0bff807 	ldb	r2,-32(fp)
   161a0:	10800958 	cmpnei	r2,r2,37
   161a4:	1000041e 	bne	r2,zero,161b8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   161a8:	e0bff807 	ldb	r2,-32(fp)
   161ac:	1009883a 	mov	r4,r2
   161b0:	001635c0 	call	1635c <alt_putchar>
   161b4:	00005a06 	br	16320 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   161b8:	e0bff807 	ldb	r2,-32(fp)
   161bc:	108018d8 	cmpnei	r2,r2,99
   161c0:	1000081e 	bne	r2,zero,161e4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   161c4:	e0bffe17 	ldw	r2,-8(fp)
   161c8:	10c00104 	addi	r3,r2,4
   161cc:	e0fffe15 	stw	r3,-8(fp)
   161d0:	10800017 	ldw	r2,0(r2)
   161d4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   161d8:	e13ffd17 	ldw	r4,-12(fp)
   161dc:	001635c0 	call	1635c <alt_putchar>
   161e0:	00004f06 	br	16320 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   161e4:	e0bff807 	ldb	r2,-32(fp)
   161e8:	10801e18 	cmpnei	r2,r2,120
   161ec:	1000341e 	bne	r2,zero,162c0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   161f0:	e0bffe17 	ldw	r2,-8(fp)
   161f4:	10c00104 	addi	r3,r2,4
   161f8:	e0fffe15 	stw	r3,-8(fp)
   161fc:	10800017 	ldw	r2,0(r2)
   16200:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   16204:	e0bffb17 	ldw	r2,-20(fp)
   16208:	1000031e 	bne	r2,zero,16218 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1620c:	01000c04 	movi	r4,48
   16210:	001635c0 	call	1635c <alt_putchar>
                        continue;
   16214:	00004206 	br	16320 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   16218:	00800704 	movi	r2,28
   1621c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   16220:	00000306 	br	16230 <alt_printf+0x100>
                        digit_shift -= 4;
   16224:	e0bff917 	ldw	r2,-28(fp)
   16228:	10bfff04 	addi	r2,r2,-4
   1622c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   16230:	00c003c4 	movi	r3,15
   16234:	e0bff917 	ldw	r2,-28(fp)
   16238:	1884983a 	sll	r2,r3,r2
   1623c:	1007883a 	mov	r3,r2
   16240:	e0bffb17 	ldw	r2,-20(fp)
   16244:	1884703a 	and	r2,r3,r2
   16248:	103ff626 	beq	r2,zero,16224 <_gp+0xffff1974>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   1624c:	00001906 	br	162b4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   16250:	00c003c4 	movi	r3,15
   16254:	e0bff917 	ldw	r2,-28(fp)
   16258:	1884983a 	sll	r2,r3,r2
   1625c:	1007883a 	mov	r3,r2
   16260:	e0bffb17 	ldw	r2,-20(fp)
   16264:	1886703a 	and	r3,r3,r2
   16268:	e0bff917 	ldw	r2,-28(fp)
   1626c:	1884d83a 	srl	r2,r3,r2
   16270:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   16274:	e0bffc17 	ldw	r2,-16(fp)
   16278:	108002a8 	cmpgeui	r2,r2,10
   1627c:	1000041e 	bne	r2,zero,16290 <alt_printf+0x160>
                            c = '0' + digit;
   16280:	e0bffc17 	ldw	r2,-16(fp)
   16284:	10800c04 	addi	r2,r2,48
   16288:	e0bff805 	stb	r2,-32(fp)
   1628c:	00000306 	br	1629c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   16290:	e0bffc17 	ldw	r2,-16(fp)
   16294:	108015c4 	addi	r2,r2,87
   16298:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   1629c:	e0bff807 	ldb	r2,-32(fp)
   162a0:	1009883a 	mov	r4,r2
   162a4:	001635c0 	call	1635c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   162a8:	e0bff917 	ldw	r2,-28(fp)
   162ac:	10bfff04 	addi	r2,r2,-4
   162b0:	e0bff915 	stw	r2,-28(fp)
   162b4:	e0bff917 	ldw	r2,-28(fp)
   162b8:	103fe50e 	bge	r2,zero,16250 <_gp+0xffff19a0>
   162bc:	00001806 	br	16320 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   162c0:	e0bff807 	ldb	r2,-32(fp)
   162c4:	10801cd8 	cmpnei	r2,r2,115
   162c8:	1000151e 	bne	r2,zero,16320 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   162cc:	e0bffe17 	ldw	r2,-8(fp)
   162d0:	10c00104 	addi	r3,r2,4
   162d4:	e0fffe15 	stw	r3,-8(fp)
   162d8:	10800017 	ldw	r2,0(r2)
   162dc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   162e0:	00000906 	br	16308 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   162e4:	e0bffa17 	ldw	r2,-24(fp)
   162e8:	10c00044 	addi	r3,r2,1
   162ec:	e0fffa15 	stw	r3,-24(fp)
   162f0:	10800003 	ldbu	r2,0(r2)
   162f4:	10803fcc 	andi	r2,r2,255
   162f8:	1080201c 	xori	r2,r2,128
   162fc:	10bfe004 	addi	r2,r2,-128
   16300:	1009883a 	mov	r4,r2
   16304:	001635c0 	call	1635c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   16308:	e0bffa17 	ldw	r2,-24(fp)
   1630c:	10800003 	ldbu	r2,0(r2)
   16310:	10803fcc 	andi	r2,r2,255
   16314:	1080201c 	xori	r2,r2,128
   16318:	10bfe004 	addi	r2,r2,-128
   1631c:	103ff11e 	bne	r2,zero,162e4 <_gp+0xffff1a34>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   16320:	e0bff717 	ldw	r2,-36(fp)
   16324:	10c00044 	addi	r3,r2,1
   16328:	e0fff715 	stw	r3,-36(fp)
   1632c:	10800003 	ldbu	r2,0(r2)
   16330:	e0bff805 	stb	r2,-32(fp)
   16334:	e0bff807 	ldb	r2,-32(fp)
   16338:	103f8a1e 	bne	r2,zero,16164 <_gp+0xffff18b4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1633c:	00000106 	br	16344 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   16340:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   16344:	0001883a 	nop
   16348:	e037883a 	mov	sp,fp
   1634c:	dfc00117 	ldw	ra,4(sp)
   16350:	df000017 	ldw	fp,0(sp)
   16354:	dec00504 	addi	sp,sp,20
   16358:	f800283a 	ret

0001635c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   1635c:	defffd04 	addi	sp,sp,-12
   16360:	dfc00215 	stw	ra,8(sp)
   16364:	df000115 	stw	fp,4(sp)
   16368:	df000104 	addi	fp,sp,4
   1636c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   16370:	d0a00317 	ldw	r2,-32756(gp)
   16374:	10800217 	ldw	r2,8(r2)
   16378:	100b883a 	mov	r5,r2
   1637c:	e13fff17 	ldw	r4,-4(fp)
   16380:	00183040 	call	18304 <putc>
#endif
#endif
}
   16384:	e037883a 	mov	sp,fp
   16388:	dfc00117 	ldw	ra,4(sp)
   1638c:	df000017 	ldw	fp,0(sp)
   16390:	dec00204 	addi	sp,sp,8
   16394:	f800283a 	ret

00016398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16398:	defffe04 	addi	sp,sp,-8
   1639c:	dfc00115 	stw	ra,4(sp)
   163a0:	df000015 	stw	fp,0(sp)
   163a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   163a8:	d0a00a17 	ldw	r2,-32728(gp)
   163ac:	10000326 	beq	r2,zero,163bc <alt_get_errno+0x24>
   163b0:	d0a00a17 	ldw	r2,-32728(gp)
   163b4:	103ee83a 	callr	r2
   163b8:	00000106 	br	163c0 <alt_get_errno+0x28>
   163bc:	d0a6c204 	addi	r2,gp,-25848
}
   163c0:	e037883a 	mov	sp,fp
   163c4:	dfc00117 	ldw	ra,4(sp)
   163c8:	df000017 	ldw	fp,0(sp)
   163cc:	dec00204 	addi	sp,sp,8
   163d0:	f800283a 	ret

000163d4 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   163d4:	defffc04 	addi	sp,sp,-16
   163d8:	dfc00315 	stw	ra,12(sp)
   163dc:	df000215 	stw	fp,8(sp)
   163e0:	df000204 	addi	fp,sp,8
   163e4:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   163e8:	d0a6c017 	ldw	r2,-25856(gp)
  clock_t ticks = alt_nticks(); 
   163ec:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   163f0:	d0a6bf17 	ldw	r2,-25860(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   163f4:	1000061e 	bne	r2,zero,16410 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
   163f8:	00163980 	call	16398 <alt_get_errno>
   163fc:	1007883a 	mov	r3,r2
   16400:	00801604 	movi	r2,88
   16404:	18800015 	stw	r2,0(r3)
    return 0;
   16408:	0005883a 	mov	r2,zero
   1640c:	00000a06 	br	16438 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   16410:	e0bfff17 	ldw	r2,-4(fp)
   16414:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   16418:	e0bfff17 	ldw	r2,-4(fp)
   1641c:	e0fffe17 	ldw	r3,-8(fp)
   16420:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   16424:	e0bfff17 	ldw	r2,-4(fp)
   16428:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   1642c:	e0bfff17 	ldw	r2,-4(fp)
   16430:	10000315 	stw	zero,12(r2)

  return ticks;
   16434:	e0bffe17 	ldw	r2,-8(fp)
}
   16438:	e037883a 	mov	sp,fp
   1643c:	dfc00117 	ldw	ra,4(sp)
   16440:	df000017 	ldw	fp,0(sp)
   16444:	dec00204 	addi	sp,sp,8
   16448:	f800283a 	ret

0001644c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1644c:	defffd04 	addi	sp,sp,-12
   16450:	dfc00215 	stw	ra,8(sp)
   16454:	df000115 	stw	fp,4(sp)
   16458:	df000104 	addi	fp,sp,4
   1645c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16460:	d1600704 	addi	r5,gp,-32740
   16464:	e13fff17 	ldw	r4,-4(fp)
   16468:	00176f00 	call	176f0 <alt_dev_llist_insert>
}
   1646c:	e037883a 	mov	sp,fp
   16470:	dfc00117 	ldw	ra,4(sp)
   16474:	df000017 	ldw	fp,0(sp)
   16478:	dec00204 	addi	sp,sp,8
   1647c:	f800283a 	ret

00016480 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   16480:	defffd04 	addi	sp,sp,-12
   16484:	dfc00215 	stw	ra,8(sp)
   16488:	df000115 	stw	fp,4(sp)
   1648c:	df000104 	addi	fp,sp,4
   16490:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   16494:	0017f100 	call	17f10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16498:	00800044 	movi	r2,1
   1649c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   164a0:	0001883a 	nop
   164a4:	e037883a 	mov	sp,fp
   164a8:	dfc00117 	ldw	ra,4(sp)
   164ac:	df000017 	ldw	fp,0(sp)
   164b0:	dec00204 	addi	sp,sp,8
   164b4:	f800283a 	ret

000164b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   164b8:	defffe04 	addi	sp,sp,-8
   164bc:	dfc00115 	stw	ra,4(sp)
   164c0:	df000015 	stw	fp,0(sp)
   164c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   164c8:	01c0fa04 	movi	r7,1000
   164cc:	01800044 	movi	r6,1
   164d0:	000b883a 	mov	r5,zero
   164d4:	010000b4 	movhi	r4,2
   164d8:	21040004 	addi	r4,r4,4096
   164dc:	00170040 	call	17004 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   164e0:	000d883a 	mov	r6,zero
   164e4:	000b883a 	mov	r5,zero
   164e8:	010000b4 	movhi	r4,2
   164ec:	212ca704 	addi	r4,r4,-19812
   164f0:	001668c0 	call	1668c <altera_avalon_jtag_uart_init>
   164f4:	010000b4 	movhi	r4,2
   164f8:	212c9d04 	addi	r4,r4,-19852
   164fc:	001644c0 	call	1644c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   16500:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   16504:	010000b4 	movhi	r4,2
   16508:	2130b504 	addi	r4,r4,-15660
   1650c:	001644c0 	call	1644c <alt_dev_reg>
}
   16510:	0001883a 	nop
   16514:	e037883a 	mov	sp,fp
   16518:	dfc00117 	ldw	ra,4(sp)
   1651c:	df000017 	ldw	fp,0(sp)
   16520:	dec00204 	addi	sp,sp,8
   16524:	f800283a 	ret

00016528 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16528:	defffa04 	addi	sp,sp,-24
   1652c:	dfc00515 	stw	ra,20(sp)
   16530:	df000415 	stw	fp,16(sp)
   16534:	df000404 	addi	fp,sp,16
   16538:	e13ffd15 	stw	r4,-12(fp)
   1653c:	e17ffe15 	stw	r5,-8(fp)
   16540:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16544:	e0bffd17 	ldw	r2,-12(fp)
   16548:	10800017 	ldw	r2,0(r2)
   1654c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   16550:	e0bffc17 	ldw	r2,-16(fp)
   16554:	10c00a04 	addi	r3,r2,40
   16558:	e0bffd17 	ldw	r2,-12(fp)
   1655c:	10800217 	ldw	r2,8(r2)
   16560:	100f883a 	mov	r7,r2
   16564:	e1bfff17 	ldw	r6,-4(fp)
   16568:	e17ffe17 	ldw	r5,-8(fp)
   1656c:	1809883a 	mov	r4,r3
   16570:	0016b480 	call	16b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   16574:	e037883a 	mov	sp,fp
   16578:	dfc00117 	ldw	ra,4(sp)
   1657c:	df000017 	ldw	fp,0(sp)
   16580:	dec00204 	addi	sp,sp,8
   16584:	f800283a 	ret

00016588 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   16588:	defffa04 	addi	sp,sp,-24
   1658c:	dfc00515 	stw	ra,20(sp)
   16590:	df000415 	stw	fp,16(sp)
   16594:	df000404 	addi	fp,sp,16
   16598:	e13ffd15 	stw	r4,-12(fp)
   1659c:	e17ffe15 	stw	r5,-8(fp)
   165a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   165a4:	e0bffd17 	ldw	r2,-12(fp)
   165a8:	10800017 	ldw	r2,0(r2)
   165ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   165b0:	e0bffc17 	ldw	r2,-16(fp)
   165b4:	10c00a04 	addi	r3,r2,40
   165b8:	e0bffd17 	ldw	r2,-12(fp)
   165bc:	10800217 	ldw	r2,8(r2)
   165c0:	100f883a 	mov	r7,r2
   165c4:	e1bfff17 	ldw	r6,-4(fp)
   165c8:	e17ffe17 	ldw	r5,-8(fp)
   165cc:	1809883a 	mov	r4,r3
   165d0:	0016d640 	call	16d64 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   165d4:	e037883a 	mov	sp,fp
   165d8:	dfc00117 	ldw	ra,4(sp)
   165dc:	df000017 	ldw	fp,0(sp)
   165e0:	dec00204 	addi	sp,sp,8
   165e4:	f800283a 	ret

000165e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   165e8:	defffc04 	addi	sp,sp,-16
   165ec:	dfc00315 	stw	ra,12(sp)
   165f0:	df000215 	stw	fp,8(sp)
   165f4:	df000204 	addi	fp,sp,8
   165f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   165fc:	e0bfff17 	ldw	r2,-4(fp)
   16600:	10800017 	ldw	r2,0(r2)
   16604:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16608:	e0bffe17 	ldw	r2,-8(fp)
   1660c:	10c00a04 	addi	r3,r2,40
   16610:	e0bfff17 	ldw	r2,-4(fp)
   16614:	10800217 	ldw	r2,8(r2)
   16618:	100b883a 	mov	r5,r2
   1661c:	1809883a 	mov	r4,r3
   16620:	00169f00 	call	169f0 <altera_avalon_jtag_uart_close>
}
   16624:	e037883a 	mov	sp,fp
   16628:	dfc00117 	ldw	ra,4(sp)
   1662c:	df000017 	ldw	fp,0(sp)
   16630:	dec00204 	addi	sp,sp,8
   16634:	f800283a 	ret

00016638 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   16638:	defffa04 	addi	sp,sp,-24
   1663c:	dfc00515 	stw	ra,20(sp)
   16640:	df000415 	stw	fp,16(sp)
   16644:	df000404 	addi	fp,sp,16
   16648:	e13ffd15 	stw	r4,-12(fp)
   1664c:	e17ffe15 	stw	r5,-8(fp)
   16650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16654:	e0bffd17 	ldw	r2,-12(fp)
   16658:	10800017 	ldw	r2,0(r2)
   1665c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   16660:	e0bffc17 	ldw	r2,-16(fp)
   16664:	10800a04 	addi	r2,r2,40
   16668:	e1bfff17 	ldw	r6,-4(fp)
   1666c:	e17ffe17 	ldw	r5,-8(fp)
   16670:	1009883a 	mov	r4,r2
   16674:	0016a580 	call	16a58 <altera_avalon_jtag_uart_ioctl>
}
   16678:	e037883a 	mov	sp,fp
   1667c:	dfc00117 	ldw	ra,4(sp)
   16680:	df000017 	ldw	fp,0(sp)
   16684:	dec00204 	addi	sp,sp,8
   16688:	f800283a 	ret

0001668c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1668c:	defffb04 	addi	sp,sp,-20
   16690:	dfc00415 	stw	ra,16(sp)
   16694:	df000315 	stw	fp,12(sp)
   16698:	df000304 	addi	fp,sp,12
   1669c:	e13ffd15 	stw	r4,-12(fp)
   166a0:	e17ffe15 	stw	r5,-8(fp)
   166a4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   166a8:	e0bffd17 	ldw	r2,-12(fp)
   166ac:	00c00044 	movi	r3,1
   166b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   166b4:	e0bffd17 	ldw	r2,-12(fp)
   166b8:	10800017 	ldw	r2,0(r2)
   166bc:	10800104 	addi	r2,r2,4
   166c0:	1007883a 	mov	r3,r2
   166c4:	e0bffd17 	ldw	r2,-12(fp)
   166c8:	10800817 	ldw	r2,32(r2)
   166cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   166d0:	e0bfff17 	ldw	r2,-4(fp)
   166d4:	01800074 	movhi	r6,1
   166d8:	3199d004 	addi	r6,r6,26432
   166dc:	e17ffd17 	ldw	r5,-12(fp)
   166e0:	1009883a 	mov	r4,r2
   166e4:	0015e480 	call	15e48 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   166e8:	e0bffd17 	ldw	r2,-12(fp)
   166ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   166f0:	e0bffd17 	ldw	r2,-12(fp)
   166f4:	10800204 	addi	r2,r2,8
   166f8:	d0e6bf17 	ldw	r3,-25860(gp)
   166fc:	e1fffd17 	ldw	r7,-12(fp)
   16700:	01800074 	movhi	r6,1
   16704:	319a5404 	addi	r6,r6,26960
   16708:	180b883a 	mov	r5,r3
   1670c:	1009883a 	mov	r4,r2
   16710:	00174280 	call	17428 <alt_alarm_start>
   16714:	1000040e 	bge	r2,zero,16728 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16718:	e0fffd17 	ldw	r3,-12(fp)
   1671c:	00a00034 	movhi	r2,32768
   16720:	10bfffc4 	addi	r2,r2,-1
   16724:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16728:	0001883a 	nop
   1672c:	e037883a 	mov	sp,fp
   16730:	dfc00117 	ldw	ra,4(sp)
   16734:	df000017 	ldw	fp,0(sp)
   16738:	dec00204 	addi	sp,sp,8
   1673c:	f800283a 	ret

00016740 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16740:	defff704 	addi	sp,sp,-36
   16744:	df000815 	stw	fp,32(sp)
   16748:	df000804 	addi	fp,sp,32
   1674c:	e13ffe15 	stw	r4,-8(fp)
   16750:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16754:	e0bffe17 	ldw	r2,-8(fp)
   16758:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   1675c:	e0bffa17 	ldw	r2,-24(fp)
   16760:	10800017 	ldw	r2,0(r2)
   16764:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16768:	e0bffb17 	ldw	r2,-20(fp)
   1676c:	10800104 	addi	r2,r2,4
   16770:	10800037 	ldwio	r2,0(r2)
   16774:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16778:	e0bffc17 	ldw	r2,-16(fp)
   1677c:	1080c00c 	andi	r2,r2,768
   16780:	10006d26 	beq	r2,zero,16938 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16784:	e0bffc17 	ldw	r2,-16(fp)
   16788:	1080400c 	andi	r2,r2,256
   1678c:	10003526 	beq	r2,zero,16864 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16790:	00800074 	movhi	r2,1
   16794:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16798:	e0bffa17 	ldw	r2,-24(fp)
   1679c:	10800a17 	ldw	r2,40(r2)
   167a0:	10800044 	addi	r2,r2,1
   167a4:	1081ffcc 	andi	r2,r2,2047
   167a8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   167ac:	e0bffa17 	ldw	r2,-24(fp)
   167b0:	10c00b17 	ldw	r3,44(r2)
   167b4:	e0bffd17 	ldw	r2,-12(fp)
   167b8:	18801526 	beq	r3,r2,16810 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   167bc:	e0bffb17 	ldw	r2,-20(fp)
   167c0:	10800037 	ldwio	r2,0(r2)
   167c4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   167c8:	e0bff817 	ldw	r2,-32(fp)
   167cc:	10a0000c 	andi	r2,r2,32768
   167d0:	10001126 	beq	r2,zero,16818 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   167d4:	e0bffa17 	ldw	r2,-24(fp)
   167d8:	10800a17 	ldw	r2,40(r2)
   167dc:	e0fff817 	ldw	r3,-32(fp)
   167e0:	1809883a 	mov	r4,r3
   167e4:	e0fffa17 	ldw	r3,-24(fp)
   167e8:	1885883a 	add	r2,r3,r2
   167ec:	10800e04 	addi	r2,r2,56
   167f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   167f4:	e0bffa17 	ldw	r2,-24(fp)
   167f8:	10800a17 	ldw	r2,40(r2)
   167fc:	10800044 	addi	r2,r2,1
   16800:	10c1ffcc 	andi	r3,r2,2047
   16804:	e0bffa17 	ldw	r2,-24(fp)
   16808:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1680c:	003fe206 	br	16798 <_gp+0xffff1ee8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16810:	0001883a 	nop
   16814:	00000106 	br	1681c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   16818:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1681c:	e0bff817 	ldw	r2,-32(fp)
   16820:	10bfffec 	andhi	r2,r2,65535
   16824:	10000f26 	beq	r2,zero,16864 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16828:	e0bffa17 	ldw	r2,-24(fp)
   1682c:	10c00817 	ldw	r3,32(r2)
   16830:	00bfff84 	movi	r2,-2
   16834:	1886703a 	and	r3,r3,r2
   16838:	e0bffa17 	ldw	r2,-24(fp)
   1683c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16840:	e0bffb17 	ldw	r2,-20(fp)
   16844:	10800104 	addi	r2,r2,4
   16848:	1007883a 	mov	r3,r2
   1684c:	e0bffa17 	ldw	r2,-24(fp)
   16850:	10800817 	ldw	r2,32(r2)
   16854:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16858:	e0bffb17 	ldw	r2,-20(fp)
   1685c:	10800104 	addi	r2,r2,4
   16860:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   16864:	e0bffc17 	ldw	r2,-16(fp)
   16868:	1080800c 	andi	r2,r2,512
   1686c:	103fbe26 	beq	r2,zero,16768 <_gp+0xffff1eb8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16870:	e0bffc17 	ldw	r2,-16(fp)
   16874:	1004d43a 	srli	r2,r2,16
   16878:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1687c:	00001406 	br	168d0 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16880:	e0bffb17 	ldw	r2,-20(fp)
   16884:	e0fffa17 	ldw	r3,-24(fp)
   16888:	18c00d17 	ldw	r3,52(r3)
   1688c:	e13ffa17 	ldw	r4,-24(fp)
   16890:	20c7883a 	add	r3,r4,r3
   16894:	18c20e04 	addi	r3,r3,2104
   16898:	18c00003 	ldbu	r3,0(r3)
   1689c:	18c03fcc 	andi	r3,r3,255
   168a0:	18c0201c 	xori	r3,r3,128
   168a4:	18ffe004 	addi	r3,r3,-128
   168a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   168ac:	e0bffa17 	ldw	r2,-24(fp)
   168b0:	10800d17 	ldw	r2,52(r2)
   168b4:	10800044 	addi	r2,r2,1
   168b8:	10c1ffcc 	andi	r3,r2,2047
   168bc:	e0bffa17 	ldw	r2,-24(fp)
   168c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   168c4:	e0bff917 	ldw	r2,-28(fp)
   168c8:	10bfffc4 	addi	r2,r2,-1
   168cc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   168d0:	e0bff917 	ldw	r2,-28(fp)
   168d4:	10000526 	beq	r2,zero,168ec <altera_avalon_jtag_uart_irq+0x1ac>
   168d8:	e0bffa17 	ldw	r2,-24(fp)
   168dc:	10c00d17 	ldw	r3,52(r2)
   168e0:	e0bffa17 	ldw	r2,-24(fp)
   168e4:	10800c17 	ldw	r2,48(r2)
   168e8:	18bfe51e 	bne	r3,r2,16880 <_gp+0xffff1fd0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   168ec:	e0bff917 	ldw	r2,-28(fp)
   168f0:	103f9d26 	beq	r2,zero,16768 <_gp+0xffff1eb8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   168f4:	e0bffa17 	ldw	r2,-24(fp)
   168f8:	10c00817 	ldw	r3,32(r2)
   168fc:	00bfff44 	movi	r2,-3
   16900:	1886703a 	and	r3,r3,r2
   16904:	e0bffa17 	ldw	r2,-24(fp)
   16908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1690c:	e0bffa17 	ldw	r2,-24(fp)
   16910:	10800017 	ldw	r2,0(r2)
   16914:	10800104 	addi	r2,r2,4
   16918:	1007883a 	mov	r3,r2
   1691c:	e0bffa17 	ldw	r2,-24(fp)
   16920:	10800817 	ldw	r2,32(r2)
   16924:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16928:	e0bffb17 	ldw	r2,-20(fp)
   1692c:	10800104 	addi	r2,r2,4
   16930:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16934:	003f8c06 	br	16768 <_gp+0xffff1eb8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16938:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1693c:	0001883a 	nop
   16940:	e037883a 	mov	sp,fp
   16944:	df000017 	ldw	fp,0(sp)
   16948:	dec00104 	addi	sp,sp,4
   1694c:	f800283a 	ret

00016950 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16950:	defff804 	addi	sp,sp,-32
   16954:	df000715 	stw	fp,28(sp)
   16958:	df000704 	addi	fp,sp,28
   1695c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16960:	e0bffb17 	ldw	r2,-20(fp)
   16964:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   16968:	e0bff917 	ldw	r2,-28(fp)
   1696c:	10800017 	ldw	r2,0(r2)
   16970:	10800104 	addi	r2,r2,4
   16974:	10800037 	ldwio	r2,0(r2)
   16978:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1697c:	e0bffa17 	ldw	r2,-24(fp)
   16980:	1081000c 	andi	r2,r2,1024
   16984:	10000b26 	beq	r2,zero,169b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   16988:	e0bff917 	ldw	r2,-28(fp)
   1698c:	10800017 	ldw	r2,0(r2)
   16990:	10800104 	addi	r2,r2,4
   16994:	1007883a 	mov	r3,r2
   16998:	e0bff917 	ldw	r2,-28(fp)
   1699c:	10800817 	ldw	r2,32(r2)
   169a0:	10810014 	ori	r2,r2,1024
   169a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   169a8:	e0bff917 	ldw	r2,-28(fp)
   169ac:	10000915 	stw	zero,36(r2)
   169b0:	00000a06 	br	169dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   169b4:	e0bff917 	ldw	r2,-28(fp)
   169b8:	10c00917 	ldw	r3,36(r2)
   169bc:	00a00034 	movhi	r2,32768
   169c0:	10bfff04 	addi	r2,r2,-4
   169c4:	10c00536 	bltu	r2,r3,169dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   169c8:	e0bff917 	ldw	r2,-28(fp)
   169cc:	10800917 	ldw	r2,36(r2)
   169d0:	10c00044 	addi	r3,r2,1
   169d4:	e0bff917 	ldw	r2,-28(fp)
   169d8:	10c00915 	stw	r3,36(r2)
   169dc:	d0a6bf17 	ldw	r2,-25860(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   169e0:	e037883a 	mov	sp,fp
   169e4:	df000017 	ldw	fp,0(sp)
   169e8:	dec00104 	addi	sp,sp,4
   169ec:	f800283a 	ret

000169f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   169f0:	defffd04 	addi	sp,sp,-12
   169f4:	df000215 	stw	fp,8(sp)
   169f8:	df000204 	addi	fp,sp,8
   169fc:	e13ffe15 	stw	r4,-8(fp)
   16a00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16a04:	00000506 	br	16a1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   16a08:	e0bfff17 	ldw	r2,-4(fp)
   16a0c:	1090000c 	andi	r2,r2,16384
   16a10:	10000226 	beq	r2,zero,16a1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16a14:	00bffd44 	movi	r2,-11
   16a18:	00000b06 	br	16a48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	10c00d17 	ldw	r3,52(r2)
   16a24:	e0bffe17 	ldw	r2,-8(fp)
   16a28:	10800c17 	ldw	r2,48(r2)
   16a2c:	18800526 	beq	r3,r2,16a44 <altera_avalon_jtag_uart_close+0x54>
   16a30:	e0bffe17 	ldw	r2,-8(fp)
   16a34:	10c00917 	ldw	r3,36(r2)
   16a38:	e0bffe17 	ldw	r2,-8(fp)
   16a3c:	10800117 	ldw	r2,4(r2)
   16a40:	18bff136 	bltu	r3,r2,16a08 <_gp+0xffff2158>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16a44:	0005883a 	mov	r2,zero
}
   16a48:	e037883a 	mov	sp,fp
   16a4c:	df000017 	ldw	fp,0(sp)
   16a50:	dec00104 	addi	sp,sp,4
   16a54:	f800283a 	ret

00016a58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16a58:	defffa04 	addi	sp,sp,-24
   16a5c:	df000515 	stw	fp,20(sp)
   16a60:	df000504 	addi	fp,sp,20
   16a64:	e13ffd15 	stw	r4,-12(fp)
   16a68:	e17ffe15 	stw	r5,-8(fp)
   16a6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16a70:	00bff9c4 	movi	r2,-25
   16a74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   16a78:	e0bffe17 	ldw	r2,-8(fp)
   16a7c:	10da8060 	cmpeqi	r3,r2,27137
   16a80:	1800031e 	bne	r3,zero,16a90 <altera_avalon_jtag_uart_ioctl+0x38>
   16a84:	109a80a0 	cmpeqi	r2,r2,27138
   16a88:	1000181e 	bne	r2,zero,16aec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16a8c:	00002906 	br	16b34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16a90:	e0bffd17 	ldw	r2,-12(fp)
   16a94:	10c00117 	ldw	r3,4(r2)
   16a98:	00a00034 	movhi	r2,32768
   16a9c:	10bfffc4 	addi	r2,r2,-1
   16aa0:	18802126 	beq	r3,r2,16b28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   16aa4:	e0bfff17 	ldw	r2,-4(fp)
   16aa8:	10800017 	ldw	r2,0(r2)
   16aac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16ab0:	e0bffc17 	ldw	r2,-16(fp)
   16ab4:	10800090 	cmplti	r2,r2,2
   16ab8:	1000061e 	bne	r2,zero,16ad4 <altera_avalon_jtag_uart_ioctl+0x7c>
   16abc:	e0fffc17 	ldw	r3,-16(fp)
   16ac0:	00a00034 	movhi	r2,32768
   16ac4:	10bfffc4 	addi	r2,r2,-1
   16ac8:	18800226 	beq	r3,r2,16ad4 <altera_avalon_jtag_uart_ioctl+0x7c>
   16acc:	e0bffc17 	ldw	r2,-16(fp)
   16ad0:	00000206 	br	16adc <altera_avalon_jtag_uart_ioctl+0x84>
   16ad4:	00a00034 	movhi	r2,32768
   16ad8:	10bfff84 	addi	r2,r2,-2
   16adc:	e0fffd17 	ldw	r3,-12(fp)
   16ae0:	18800115 	stw	r2,4(r3)
      rc = 0;
   16ae4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16ae8:	00000f06 	br	16b28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16aec:	e0bffd17 	ldw	r2,-12(fp)
   16af0:	10c00117 	ldw	r3,4(r2)
   16af4:	00a00034 	movhi	r2,32768
   16af8:	10bfffc4 	addi	r2,r2,-1
   16afc:	18800c26 	beq	r3,r2,16b30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16b00:	e0bffd17 	ldw	r2,-12(fp)
   16b04:	10c00917 	ldw	r3,36(r2)
   16b08:	e0bffd17 	ldw	r2,-12(fp)
   16b0c:	10800117 	ldw	r2,4(r2)
   16b10:	1885803a 	cmpltu	r2,r3,r2
   16b14:	10c03fcc 	andi	r3,r2,255
   16b18:	e0bfff17 	ldw	r2,-4(fp)
   16b1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16b20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16b24:	00000206 	br	16b30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16b28:	0001883a 	nop
   16b2c:	00000106 	br	16b34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16b30:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16b34:	e0bffb17 	ldw	r2,-20(fp)
}
   16b38:	e037883a 	mov	sp,fp
   16b3c:	df000017 	ldw	fp,0(sp)
   16b40:	dec00104 	addi	sp,sp,4
   16b44:	f800283a 	ret

00016b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   16b48:	defff304 	addi	sp,sp,-52
   16b4c:	dfc00c15 	stw	ra,48(sp)
   16b50:	df000b15 	stw	fp,44(sp)
   16b54:	df000b04 	addi	fp,sp,44
   16b58:	e13ffc15 	stw	r4,-16(fp)
   16b5c:	e17ffd15 	stw	r5,-12(fp)
   16b60:	e1bffe15 	stw	r6,-8(fp)
   16b64:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16b68:	e0bffd17 	ldw	r2,-12(fp)
   16b6c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16b70:	00004706 	br	16c90 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16b74:	e0bffc17 	ldw	r2,-16(fp)
   16b78:	10800a17 	ldw	r2,40(r2)
   16b7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   16b80:	e0bffc17 	ldw	r2,-16(fp)
   16b84:	10800b17 	ldw	r2,44(r2)
   16b88:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   16b8c:	e0fff717 	ldw	r3,-36(fp)
   16b90:	e0bff817 	ldw	r2,-32(fp)
   16b94:	18800536 	bltu	r3,r2,16bac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   16b98:	e0fff717 	ldw	r3,-36(fp)
   16b9c:	e0bff817 	ldw	r2,-32(fp)
   16ba0:	1885c83a 	sub	r2,r3,r2
   16ba4:	e0bff615 	stw	r2,-40(fp)
   16ba8:	00000406 	br	16bbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   16bac:	00c20004 	movi	r3,2048
   16bb0:	e0bff817 	ldw	r2,-32(fp)
   16bb4:	1885c83a 	sub	r2,r3,r2
   16bb8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16bbc:	e0bff617 	ldw	r2,-40(fp)
   16bc0:	10001e26 	beq	r2,zero,16c3c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   16bc4:	e0fffe17 	ldw	r3,-8(fp)
   16bc8:	e0bff617 	ldw	r2,-40(fp)
   16bcc:	1880022e 	bgeu	r3,r2,16bd8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   16bd0:	e0bffe17 	ldw	r2,-8(fp)
   16bd4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16bd8:	e0bffc17 	ldw	r2,-16(fp)
   16bdc:	10c00e04 	addi	r3,r2,56
   16be0:	e0bff817 	ldw	r2,-32(fp)
   16be4:	1885883a 	add	r2,r3,r2
   16be8:	e1bff617 	ldw	r6,-40(fp)
   16bec:	100b883a 	mov	r5,r2
   16bf0:	e13ff517 	ldw	r4,-44(fp)
   16bf4:	0015cf80 	call	15cf8 <memcpy>
      ptr   += n;
   16bf8:	e0fff517 	ldw	r3,-44(fp)
   16bfc:	e0bff617 	ldw	r2,-40(fp)
   16c00:	1885883a 	add	r2,r3,r2
   16c04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   16c08:	e0fffe17 	ldw	r3,-8(fp)
   16c0c:	e0bff617 	ldw	r2,-40(fp)
   16c10:	1885c83a 	sub	r2,r3,r2
   16c14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16c18:	e0fff817 	ldw	r3,-32(fp)
   16c1c:	e0bff617 	ldw	r2,-40(fp)
   16c20:	1885883a 	add	r2,r3,r2
   16c24:	10c1ffcc 	andi	r3,r2,2047
   16c28:	e0bffc17 	ldw	r2,-16(fp)
   16c2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   16c30:	e0bffe17 	ldw	r2,-8(fp)
   16c34:	00bfcf16 	blt	zero,r2,16b74 <_gp+0xffff22c4>
   16c38:	00000106 	br	16c40 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16c3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16c40:	e0fff517 	ldw	r3,-44(fp)
   16c44:	e0bffd17 	ldw	r2,-12(fp)
   16c48:	1880141e 	bne	r3,r2,16c9c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16c4c:	e0bfff17 	ldw	r2,-4(fp)
   16c50:	1090000c 	andi	r2,r2,16384
   16c54:	1000131e 	bne	r2,zero,16ca4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16c58:	0001883a 	nop
   16c5c:	e0bffc17 	ldw	r2,-16(fp)
   16c60:	10c00a17 	ldw	r3,40(r2)
   16c64:	e0bff717 	ldw	r2,-36(fp)
   16c68:	1880051e 	bne	r3,r2,16c80 <altera_avalon_jtag_uart_read+0x138>
   16c6c:	e0bffc17 	ldw	r2,-16(fp)
   16c70:	10c00917 	ldw	r3,36(r2)
   16c74:	e0bffc17 	ldw	r2,-16(fp)
   16c78:	10800117 	ldw	r2,4(r2)
   16c7c:	18bff736 	bltu	r3,r2,16c5c <_gp+0xffff23ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16c80:	e0bffc17 	ldw	r2,-16(fp)
   16c84:	10c00a17 	ldw	r3,40(r2)
   16c88:	e0bff717 	ldw	r2,-36(fp)
   16c8c:	18800726 	beq	r3,r2,16cac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16c90:	e0bffe17 	ldw	r2,-8(fp)
   16c94:	00bfb716 	blt	zero,r2,16b74 <_gp+0xffff22c4>
   16c98:	00000506 	br	16cb0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16c9c:	0001883a 	nop
   16ca0:	00000306 	br	16cb0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16ca4:	0001883a 	nop
   16ca8:	00000106 	br	16cb0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16cac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   16cb0:	e0fff517 	ldw	r3,-44(fp)
   16cb4:	e0bffd17 	ldw	r2,-12(fp)
   16cb8:	18801826 	beq	r3,r2,16d1c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cbc:	0005303a 	rdctl	r2,status
   16cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cc4:	e0fffb17 	ldw	r3,-20(fp)
   16cc8:	00bfff84 	movi	r2,-2
   16ccc:	1884703a 	and	r2,r3,r2
   16cd0:	1001703a 	wrctl	status,r2
  
  return context;
   16cd4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16cd8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16cdc:	e0bffc17 	ldw	r2,-16(fp)
   16ce0:	10800817 	ldw	r2,32(r2)
   16ce4:	10c00054 	ori	r3,r2,1
   16ce8:	e0bffc17 	ldw	r2,-16(fp)
   16cec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16cf0:	e0bffc17 	ldw	r2,-16(fp)
   16cf4:	10800017 	ldw	r2,0(r2)
   16cf8:	10800104 	addi	r2,r2,4
   16cfc:	1007883a 	mov	r3,r2
   16d00:	e0bffc17 	ldw	r2,-16(fp)
   16d04:	10800817 	ldw	r2,32(r2)
   16d08:	18800035 	stwio	r2,0(r3)
   16d0c:	e0bffa17 	ldw	r2,-24(fp)
   16d10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d14:	e0bff917 	ldw	r2,-28(fp)
   16d18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16d1c:	e0fff517 	ldw	r3,-44(fp)
   16d20:	e0bffd17 	ldw	r2,-12(fp)
   16d24:	18800426 	beq	r3,r2,16d38 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   16d28:	e0fff517 	ldw	r3,-44(fp)
   16d2c:	e0bffd17 	ldw	r2,-12(fp)
   16d30:	1885c83a 	sub	r2,r3,r2
   16d34:	00000606 	br	16d50 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   16d38:	e0bfff17 	ldw	r2,-4(fp)
   16d3c:	1090000c 	andi	r2,r2,16384
   16d40:	10000226 	beq	r2,zero,16d4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   16d44:	00bffd44 	movi	r2,-11
   16d48:	00000106 	br	16d50 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   16d4c:	00bffec4 	movi	r2,-5
}
   16d50:	e037883a 	mov	sp,fp
   16d54:	dfc00117 	ldw	ra,4(sp)
   16d58:	df000017 	ldw	fp,0(sp)
   16d5c:	dec00204 	addi	sp,sp,8
   16d60:	f800283a 	ret

00016d64 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16d64:	defff304 	addi	sp,sp,-52
   16d68:	dfc00c15 	stw	ra,48(sp)
   16d6c:	df000b15 	stw	fp,44(sp)
   16d70:	df000b04 	addi	fp,sp,44
   16d74:	e13ffc15 	stw	r4,-16(fp)
   16d78:	e17ffd15 	stw	r5,-12(fp)
   16d7c:	e1bffe15 	stw	r6,-8(fp)
   16d80:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16d84:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16d88:	e0bffd17 	ldw	r2,-12(fp)
   16d8c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16d90:	00003706 	br	16e70 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16d94:	e0bffc17 	ldw	r2,-16(fp)
   16d98:	10800c17 	ldw	r2,48(r2)
   16d9c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   16da0:	e0bffc17 	ldw	r2,-16(fp)
   16da4:	10800d17 	ldw	r2,52(r2)
   16da8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   16dac:	e0fff917 	ldw	r3,-28(fp)
   16db0:	e0bff517 	ldw	r2,-44(fp)
   16db4:	1880062e 	bgeu	r3,r2,16dd0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   16db8:	e0fff517 	ldw	r3,-44(fp)
   16dbc:	e0bff917 	ldw	r2,-28(fp)
   16dc0:	1885c83a 	sub	r2,r3,r2
   16dc4:	10bfffc4 	addi	r2,r2,-1
   16dc8:	e0bff615 	stw	r2,-40(fp)
   16dcc:	00000b06 	br	16dfc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   16dd0:	e0bff517 	ldw	r2,-44(fp)
   16dd4:	10000526 	beq	r2,zero,16dec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16dd8:	00c20004 	movi	r3,2048
   16ddc:	e0bff917 	ldw	r2,-28(fp)
   16de0:	1885c83a 	sub	r2,r3,r2
   16de4:	e0bff615 	stw	r2,-40(fp)
   16de8:	00000406 	br	16dfc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16dec:	00c1ffc4 	movi	r3,2047
   16df0:	e0bff917 	ldw	r2,-28(fp)
   16df4:	1885c83a 	sub	r2,r3,r2
   16df8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16dfc:	e0bff617 	ldw	r2,-40(fp)
   16e00:	10001e26 	beq	r2,zero,16e7c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   16e04:	e0fffe17 	ldw	r3,-8(fp)
   16e08:	e0bff617 	ldw	r2,-40(fp)
   16e0c:	1880022e 	bgeu	r3,r2,16e18 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   16e10:	e0bffe17 	ldw	r2,-8(fp)
   16e14:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16e18:	e0bffc17 	ldw	r2,-16(fp)
   16e1c:	10c20e04 	addi	r3,r2,2104
   16e20:	e0bff917 	ldw	r2,-28(fp)
   16e24:	1885883a 	add	r2,r3,r2
   16e28:	e1bff617 	ldw	r6,-40(fp)
   16e2c:	e17ffd17 	ldw	r5,-12(fp)
   16e30:	1009883a 	mov	r4,r2
   16e34:	0015cf80 	call	15cf8 <memcpy>
      ptr   += n;
   16e38:	e0fffd17 	ldw	r3,-12(fp)
   16e3c:	e0bff617 	ldw	r2,-40(fp)
   16e40:	1885883a 	add	r2,r3,r2
   16e44:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16e48:	e0fffe17 	ldw	r3,-8(fp)
   16e4c:	e0bff617 	ldw	r2,-40(fp)
   16e50:	1885c83a 	sub	r2,r3,r2
   16e54:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16e58:	e0fff917 	ldw	r3,-28(fp)
   16e5c:	e0bff617 	ldw	r2,-40(fp)
   16e60:	1885883a 	add	r2,r3,r2
   16e64:	10c1ffcc 	andi	r3,r2,2047
   16e68:	e0bffc17 	ldw	r2,-16(fp)
   16e6c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16e70:	e0bffe17 	ldw	r2,-8(fp)
   16e74:	00bfc716 	blt	zero,r2,16d94 <_gp+0xffff24e4>
   16e78:	00000106 	br	16e80 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16e7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e80:	0005303a 	rdctl	r2,status
   16e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e88:	e0fffb17 	ldw	r3,-20(fp)
   16e8c:	00bfff84 	movi	r2,-2
   16e90:	1884703a 	and	r2,r3,r2
   16e94:	1001703a 	wrctl	status,r2
  
  return context;
   16e98:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16e9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16ea0:	e0bffc17 	ldw	r2,-16(fp)
   16ea4:	10800817 	ldw	r2,32(r2)
   16ea8:	10c00094 	ori	r3,r2,2
   16eac:	e0bffc17 	ldw	r2,-16(fp)
   16eb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16eb4:	e0bffc17 	ldw	r2,-16(fp)
   16eb8:	10800017 	ldw	r2,0(r2)
   16ebc:	10800104 	addi	r2,r2,4
   16ec0:	1007883a 	mov	r3,r2
   16ec4:	e0bffc17 	ldw	r2,-16(fp)
   16ec8:	10800817 	ldw	r2,32(r2)
   16ecc:	18800035 	stwio	r2,0(r3)
   16ed0:	e0bffa17 	ldw	r2,-24(fp)
   16ed4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ed8:	e0bff817 	ldw	r2,-32(fp)
   16edc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16ee0:	e0bffe17 	ldw	r2,-8(fp)
   16ee4:	0080100e 	bge	zero,r2,16f28 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   16ee8:	e0bfff17 	ldw	r2,-4(fp)
   16eec:	1090000c 	andi	r2,r2,16384
   16ef0:	1000101e 	bne	r2,zero,16f34 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16ef4:	0001883a 	nop
   16ef8:	e0bffc17 	ldw	r2,-16(fp)
   16efc:	10c00d17 	ldw	r3,52(r2)
   16f00:	e0bff517 	ldw	r2,-44(fp)
   16f04:	1880051e 	bne	r3,r2,16f1c <altera_avalon_jtag_uart_write+0x1b8>
   16f08:	e0bffc17 	ldw	r2,-16(fp)
   16f0c:	10c00917 	ldw	r3,36(r2)
   16f10:	e0bffc17 	ldw	r2,-16(fp)
   16f14:	10800117 	ldw	r2,4(r2)
   16f18:	18bff736 	bltu	r3,r2,16ef8 <_gp+0xffff2648>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16f1c:	e0bffc17 	ldw	r2,-16(fp)
   16f20:	10800917 	ldw	r2,36(r2)
   16f24:	1000051e 	bne	r2,zero,16f3c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   16f28:	e0bffe17 	ldw	r2,-8(fp)
   16f2c:	00bfd016 	blt	zero,r2,16e70 <_gp+0xffff25c0>
   16f30:	00000306 	br	16f40 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16f34:	0001883a 	nop
   16f38:	00000106 	br	16f40 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16f3c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   16f40:	e0fffd17 	ldw	r3,-12(fp)
   16f44:	e0bff717 	ldw	r2,-36(fp)
   16f48:	18800426 	beq	r3,r2,16f5c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   16f4c:	e0fffd17 	ldw	r3,-12(fp)
   16f50:	e0bff717 	ldw	r2,-36(fp)
   16f54:	1885c83a 	sub	r2,r3,r2
   16f58:	00000606 	br	16f74 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   16f5c:	e0bfff17 	ldw	r2,-4(fp)
   16f60:	1090000c 	andi	r2,r2,16384
   16f64:	10000226 	beq	r2,zero,16f70 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   16f68:	00bffd44 	movi	r2,-11
   16f6c:	00000106 	br	16f74 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16f70:	00bffec4 	movi	r2,-5
}
   16f74:	e037883a 	mov	sp,fp
   16f78:	dfc00117 	ldw	ra,4(sp)
   16f7c:	df000017 	ldw	fp,0(sp)
   16f80:	dec00204 	addi	sp,sp,8
   16f84:	f800283a 	ret

00016f88 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16f88:	defff904 	addi	sp,sp,-28
   16f8c:	dfc00615 	stw	ra,24(sp)
   16f90:	df000515 	stw	fp,20(sp)
   16f94:	df000504 	addi	fp,sp,20
   16f98:	e13ffe15 	stw	r4,-8(fp)
   16f9c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16fa0:	0007883a 	mov	r3,zero
   16fa4:	e0bffe17 	ldw	r2,-8(fp)
   16fa8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16fac:	e0bffe17 	ldw	r2,-8(fp)
   16fb0:	10800104 	addi	r2,r2,4
   16fb4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fb8:	0005303a 	rdctl	r2,status
   16fbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fc0:	e0fffc17 	ldw	r3,-16(fp)
   16fc4:	00bfff84 	movi	r2,-2
   16fc8:	1884703a 	and	r2,r3,r2
   16fcc:	1001703a 	wrctl	status,r2
  
  return context;
   16fd0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16fd4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16fd8:	0017e080 	call	17e08 <alt_tick>
   16fdc:	e0bffb17 	ldw	r2,-20(fp)
   16fe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fe4:	e0bffd17 	ldw	r2,-12(fp)
   16fe8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16fec:	0001883a 	nop
   16ff0:	e037883a 	mov	sp,fp
   16ff4:	dfc00117 	ldw	ra,4(sp)
   16ff8:	df000017 	ldw	fp,0(sp)
   16ffc:	dec00204 	addi	sp,sp,8
   17000:	f800283a 	ret

00017004 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   17004:	defff904 	addi	sp,sp,-28
   17008:	dfc00615 	stw	ra,24(sp)
   1700c:	df000515 	stw	fp,20(sp)
   17010:	df000504 	addi	fp,sp,20
   17014:	e13ffc15 	stw	r4,-16(fp)
   17018:	e17ffd15 	stw	r5,-12(fp)
   1701c:	e1bffe15 	stw	r6,-8(fp)
   17020:	e1ffff15 	stw	r7,-4(fp)
   17024:	e0bfff17 	ldw	r2,-4(fp)
   17028:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1702c:	d0a6bf17 	ldw	r2,-25860(gp)
   17030:	1000021e 	bne	r2,zero,1703c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   17034:	e0bffb17 	ldw	r2,-20(fp)
   17038:	d0a6bf15 	stw	r2,-25860(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1703c:	e0bffc17 	ldw	r2,-16(fp)
   17040:	10800104 	addi	r2,r2,4
   17044:	00c001c4 	movi	r3,7
   17048:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1704c:	01800074 	movhi	r6,1
   17050:	319be204 	addi	r6,r6,28552
   17054:	e17ffc17 	ldw	r5,-16(fp)
   17058:	e13ffe17 	ldw	r4,-8(fp)
   1705c:	0015e480 	call	15e48 <alt_irq_register>
#endif  
}
   17060:	0001883a 	nop
   17064:	e037883a 	mov	sp,fp
   17068:	dfc00117 	ldw	ra,4(sp)
   1706c:	df000017 	ldw	fp,0(sp)
   17070:	dec00204 	addi	sp,sp,8
   17074:	f800283a 	ret

00017078 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   17078:	defffc04 	addi	sp,sp,-16
   1707c:	dfc00315 	stw	ra,12(sp)
   17080:	df000215 	stw	fp,8(sp)
   17084:	df000204 	addi	fp,sp,8
   17088:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   1708c:	d1600704 	addi	r5,gp,-32740
   17090:	e13fff17 	ldw	r4,-4(fp)
   17094:	00178540 	call	17854 <alt_find_dev>
   17098:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1709c:	e0bffe17 	ldw	r2,-8(fp)
}
   170a0:	e037883a 	mov	sp,fp
   170a4:	dfc00117 	ldw	ra,4(sp)
   170a8:	df000017 	ldw	fp,0(sp)
   170ac:	dec00204 	addi	sp,sp,8
   170b0:	f800283a 	ret

000170b4 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   170b4:	defffd04 	addi	sp,sp,-12
   170b8:	df000215 	stw	fp,8(sp)
   170bc:	df000204 	addi	fp,sp,8
   170c0:	e13ffe15 	stw	r4,-8(fp)
   170c4:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   170c8:	e0bffe17 	ldw	r2,-8(fp)
   170cc:	10800a17 	ldw	r2,40(r2)
   170d0:	10800023 	ldbuio	r2,0(r2)
   170d4:	10803fcc 	andi	r2,r2,255
   170d8:	1007883a 	mov	r3,r2
   170dc:	e0bfff17 	ldw	r2,-4(fp)
   170e0:	10c00005 	stb	r3,0(r2)

	return 0;
   170e4:	0005883a 	mov	r2,zero
}
   170e8:	e037883a 	mov	sp,fp
   170ec:	df000017 	ldw	fp,0(sp)
   170f0:	dec00104 	addi	sp,sp,4
   170f4:	f800283a 	ret

000170f8 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   170f8:	defffc04 	addi	sp,sp,-16
   170fc:	df000315 	stw	fp,12(sp)
   17100:	df000304 	addi	fp,sp,12
   17104:	e13ffd15 	stw	r4,-12(fp)
   17108:	2805883a 	mov	r2,r5
   1710c:	e1bfff15 	stw	r6,-4(fp)
   17110:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   17114:	e0bffd17 	ldw	r2,-12(fp)
   17118:	10800a17 	ldw	r2,40(r2)
   1711c:	1007883a 	mov	r3,r2
   17120:	e0bffe03 	ldbu	r2,-8(fp)
   17124:	10800fcc 	andi	r2,r2,63
   17128:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1712c:	e0bffd17 	ldw	r2,-12(fp)
   17130:	10800a17 	ldw	r2,40(r2)
   17134:	10800044 	addi	r2,r2,1
   17138:	10800023 	ldbuio	r2,0(r2)
   1713c:	10803fcc 	andi	r2,r2,255
   17140:	1007883a 	mov	r3,r2
   17144:	e0bfff17 	ldw	r2,-4(fp)
   17148:	10c00005 	stb	r3,0(r2)

	return 0;
   1714c:	0005883a 	mov	r2,zero
}
   17150:	e037883a 	mov	sp,fp
   17154:	df000017 	ldw	fp,0(sp)
   17158:	dec00104 	addi	sp,sp,4
   1715c:	f800283a 	ret

00017160 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   17160:	defffc04 	addi	sp,sp,-16
   17164:	df000315 	stw	fp,12(sp)
   17168:	df000304 	addi	fp,sp,12
   1716c:	e13ffd15 	stw	r4,-12(fp)
   17170:	2807883a 	mov	r3,r5
   17174:	3005883a 	mov	r2,r6
   17178:	e0fffe05 	stb	r3,-8(fp)
   1717c:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   17180:	e0bffd17 	ldw	r2,-12(fp)
   17184:	10800a17 	ldw	r2,40(r2)
   17188:	1007883a 	mov	r3,r2
   1718c:	e0bffe03 	ldbu	r2,-8(fp)
   17190:	10800fcc 	andi	r2,r2,63
   17194:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   17198:	e0bffd17 	ldw	r2,-12(fp)
   1719c:	10800a17 	ldw	r2,40(r2)
   171a0:	10800044 	addi	r2,r2,1
   171a4:	1007883a 	mov	r3,r2
   171a8:	e0bfff03 	ldbu	r2,-4(fp)
   171ac:	18800025 	stbio	r2,0(r3)

	return 0;
   171b0:	0005883a 	mov	r2,zero
}
   171b4:	e037883a 	mov	sp,fp
   171b8:	df000017 	ldw	fp,0(sp)
   171bc:	dec00104 	addi	sp,sp,4
   171c0:	f800283a 	ret

000171c4 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   171c4:	defffd04 	addi	sp,sp,-12
   171c8:	df000215 	stw	fp,8(sp)
   171cc:	df000204 	addi	fp,sp,8
   171d0:	e13ffe15 	stw	r4,-8(fp)
   171d4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   171d8:	e0bffe17 	ldw	r2,-8(fp)
   171dc:	10800a17 	ldw	r2,40(r2)
   171e0:	1007883a 	mov	r3,r2
   171e4:	00800c84 	movi	r2,50
   171e8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   171ec:	e0bffe17 	ldw	r2,-8(fp)
   171f0:	10800a17 	ldw	r2,40(r2)
   171f4:	10800044 	addi	r2,r2,1
   171f8:	10800023 	ldbuio	r2,0(r2)
   171fc:	10803fcc 	andi	r2,r2,255
   17200:	10ffffcc 	andi	r3,r2,65535
   17204:	e0bfff17 	ldw	r2,-4(fp)
   17208:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1720c:	e0bffe17 	ldw	r2,-8(fp)
   17210:	10800a17 	ldw	r2,40(r2)
   17214:	1007883a 	mov	r3,r2
   17218:	00800cc4 	movi	r2,51
   1721c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   17220:	e0bffe17 	ldw	r2,-8(fp)
   17224:	10800a17 	ldw	r2,40(r2)
   17228:	10800044 	addi	r2,r2,1
   1722c:	10800023 	ldbuio	r2,0(r2)
   17230:	10803fcc 	andi	r2,r2,255
   17234:	10bfffcc 	andi	r2,r2,65535
   17238:	1004923a 	slli	r2,r2,8
   1723c:	e0ffff17 	ldw	r3,-4(fp)
   17240:	18c00017 	ldw	r3,0(r3)
   17244:	1885883a 	add	r2,r3,r2
   17248:	1007883a 	mov	r3,r2
   1724c:	e0bfff17 	ldw	r2,-4(fp)
   17250:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   17254:	e0bfff17 	ldw	r2,-4(fp)
   17258:	10800017 	ldw	r2,0(r2)
   1725c:	10a0000c 	andi	r2,r2,32768
   17260:	10000626 	beq	r2,zero,1727c <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   17264:	e0bfff17 	ldw	r2,-4(fp)
   17268:	10800017 	ldw	r2,0(r2)
   1726c:	10bffff4 	orhi	r2,r2,65535
   17270:	1007883a 	mov	r3,r2
   17274:	e0bfff17 	ldw	r2,-4(fp)
   17278:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   1727c:	0005883a 	mov	r2,zero
}
   17280:	e037883a 	mov	sp,fp
   17284:	df000017 	ldw	fp,0(sp)
   17288:	dec00104 	addi	sp,sp,4
   1728c:	f800283a 	ret

00017290 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   17290:	defffd04 	addi	sp,sp,-12
   17294:	df000215 	stw	fp,8(sp)
   17298:	df000204 	addi	fp,sp,8
   1729c:	e13ffe15 	stw	r4,-8(fp)
   172a0:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   172a4:	e0bffe17 	ldw	r2,-8(fp)
   172a8:	10800a17 	ldw	r2,40(r2)
   172ac:	1007883a 	mov	r3,r2
   172b0:	00800d04 	movi	r2,52
   172b4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   172b8:	e0bffe17 	ldw	r2,-8(fp)
   172bc:	10800a17 	ldw	r2,40(r2)
   172c0:	10800044 	addi	r2,r2,1
   172c4:	10800023 	ldbuio	r2,0(r2)
   172c8:	10803fcc 	andi	r2,r2,255
   172cc:	10ffffcc 	andi	r3,r2,65535
   172d0:	e0bfff17 	ldw	r2,-4(fp)
   172d4:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   172d8:	e0bffe17 	ldw	r2,-8(fp)
   172dc:	10800a17 	ldw	r2,40(r2)
   172e0:	1007883a 	mov	r3,r2
   172e4:	00800d44 	movi	r2,53
   172e8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   172ec:	e0bffe17 	ldw	r2,-8(fp)
   172f0:	10800a17 	ldw	r2,40(r2)
   172f4:	10800044 	addi	r2,r2,1
   172f8:	10800023 	ldbuio	r2,0(r2)
   172fc:	10803fcc 	andi	r2,r2,255
   17300:	10bfffcc 	andi	r2,r2,65535
   17304:	1004923a 	slli	r2,r2,8
   17308:	e0ffff17 	ldw	r3,-4(fp)
   1730c:	18c00017 	ldw	r3,0(r3)
   17310:	1885883a 	add	r2,r3,r2
   17314:	1007883a 	mov	r3,r2
   17318:	e0bfff17 	ldw	r2,-4(fp)
   1731c:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   17320:	e0bfff17 	ldw	r2,-4(fp)
   17324:	10800017 	ldw	r2,0(r2)
   17328:	10a0000c 	andi	r2,r2,32768
   1732c:	10000626 	beq	r2,zero,17348 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   17330:	e0bfff17 	ldw	r2,-4(fp)
   17334:	10800017 	ldw	r2,0(r2)
   17338:	10bffff4 	orhi	r2,r2,65535
   1733c:	1007883a 	mov	r3,r2
   17340:	e0bfff17 	ldw	r2,-4(fp)
   17344:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   17348:	0005883a 	mov	r2,zero
}
   1734c:	e037883a 	mov	sp,fp
   17350:	df000017 	ldw	fp,0(sp)
   17354:	dec00104 	addi	sp,sp,4
   17358:	f800283a 	ret

0001735c <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   1735c:	defffd04 	addi	sp,sp,-12
   17360:	df000215 	stw	fp,8(sp)
   17364:	df000204 	addi	fp,sp,8
   17368:	e13ffe15 	stw	r4,-8(fp)
   1736c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   17370:	e0bffe17 	ldw	r2,-8(fp)
   17374:	10800a17 	ldw	r2,40(r2)
   17378:	1007883a 	mov	r3,r2
   1737c:	00800d84 	movi	r2,54
   17380:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   17384:	e0bffe17 	ldw	r2,-8(fp)
   17388:	10800a17 	ldw	r2,40(r2)
   1738c:	10800044 	addi	r2,r2,1
   17390:	10800023 	ldbuio	r2,0(r2)
   17394:	10803fcc 	andi	r2,r2,255
   17398:	10ffffcc 	andi	r3,r2,65535
   1739c:	e0bfff17 	ldw	r2,-4(fp)
   173a0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   173a4:	e0bffe17 	ldw	r2,-8(fp)
   173a8:	10800a17 	ldw	r2,40(r2)
   173ac:	1007883a 	mov	r3,r2
   173b0:	00800dc4 	movi	r2,55
   173b4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   173b8:	e0bffe17 	ldw	r2,-8(fp)
   173bc:	10800a17 	ldw	r2,40(r2)
   173c0:	10800044 	addi	r2,r2,1
   173c4:	10800023 	ldbuio	r2,0(r2)
   173c8:	10803fcc 	andi	r2,r2,255
   173cc:	10bfffcc 	andi	r2,r2,65535
   173d0:	1004923a 	slli	r2,r2,8
   173d4:	e0ffff17 	ldw	r3,-4(fp)
   173d8:	18c00017 	ldw	r3,0(r3)
   173dc:	1885883a 	add	r2,r3,r2
   173e0:	1007883a 	mov	r3,r2
   173e4:	e0bfff17 	ldw	r2,-4(fp)
   173e8:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   173ec:	e0bfff17 	ldw	r2,-4(fp)
   173f0:	10800017 	ldw	r2,0(r2)
   173f4:	10a0000c 	andi	r2,r2,32768
   173f8:	10000626 	beq	r2,zero,17414 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   173fc:	e0bfff17 	ldw	r2,-4(fp)
   17400:	10800017 	ldw	r2,0(r2)
   17404:	10bffff4 	orhi	r2,r2,65535
   17408:	1007883a 	mov	r3,r2
   1740c:	e0bfff17 	ldw	r2,-4(fp)
   17410:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   17414:	0005883a 	mov	r2,zero
}
   17418:	e037883a 	mov	sp,fp
   1741c:	df000017 	ldw	fp,0(sp)
   17420:	dec00104 	addi	sp,sp,4
   17424:	f800283a 	ret

00017428 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   17428:	defff504 	addi	sp,sp,-44
   1742c:	df000a15 	stw	fp,40(sp)
   17430:	df000a04 	addi	fp,sp,40
   17434:	e13ffc15 	stw	r4,-16(fp)
   17438:	e17ffd15 	stw	r5,-12(fp)
   1743c:	e1bffe15 	stw	r6,-8(fp)
   17440:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   17444:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   17448:	d0a6bf17 	ldw	r2,-25860(gp)
  
  if (alt_ticks_per_second ())
   1744c:	10003c26 	beq	r2,zero,17540 <alt_alarm_start+0x118>
  {
    if (alarm)
   17450:	e0bffc17 	ldw	r2,-16(fp)
   17454:	10003826 	beq	r2,zero,17538 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   17458:	e0bffc17 	ldw	r2,-16(fp)
   1745c:	e0fffe17 	ldw	r3,-8(fp)
   17460:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   17464:	e0bffc17 	ldw	r2,-16(fp)
   17468:	e0ffff17 	ldw	r3,-4(fp)
   1746c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17470:	0005303a 	rdctl	r2,status
   17474:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17478:	e0fff917 	ldw	r3,-28(fp)
   1747c:	00bfff84 	movi	r2,-2
   17480:	1884703a 	and	r2,r3,r2
   17484:	1001703a 	wrctl	status,r2
  
  return context;
   17488:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1748c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   17490:	d0a6c017 	ldw	r2,-25856(gp)
      
      current_nticks = alt_nticks();
   17494:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   17498:	e0fffd17 	ldw	r3,-12(fp)
   1749c:	e0bff617 	ldw	r2,-40(fp)
   174a0:	1885883a 	add	r2,r3,r2
   174a4:	10c00044 	addi	r3,r2,1
   174a8:	e0bffc17 	ldw	r2,-16(fp)
   174ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   174b0:	e0bffc17 	ldw	r2,-16(fp)
   174b4:	10c00217 	ldw	r3,8(r2)
   174b8:	e0bff617 	ldw	r2,-40(fp)
   174bc:	1880042e 	bgeu	r3,r2,174d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   174c0:	e0bffc17 	ldw	r2,-16(fp)
   174c4:	00c00044 	movi	r3,1
   174c8:	10c00405 	stb	r3,16(r2)
   174cc:	00000206 	br	174d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   174d0:	e0bffc17 	ldw	r2,-16(fp)
   174d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   174d8:	e0bffc17 	ldw	r2,-16(fp)
   174dc:	d0e00b04 	addi	r3,gp,-32724
   174e0:	e0fffa15 	stw	r3,-24(fp)
   174e4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   174e8:	e0bffb17 	ldw	r2,-20(fp)
   174ec:	e0fffa17 	ldw	r3,-24(fp)
   174f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   174f4:	e0bffa17 	ldw	r2,-24(fp)
   174f8:	10c00017 	ldw	r3,0(r2)
   174fc:	e0bffb17 	ldw	r2,-20(fp)
   17500:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17504:	e0bffa17 	ldw	r2,-24(fp)
   17508:	10800017 	ldw	r2,0(r2)
   1750c:	e0fffb17 	ldw	r3,-20(fp)
   17510:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   17514:	e0bffa17 	ldw	r2,-24(fp)
   17518:	e0fffb17 	ldw	r3,-20(fp)
   1751c:	10c00015 	stw	r3,0(r2)
   17520:	e0bff817 	ldw	r2,-32(fp)
   17524:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17528:	e0bff717 	ldw	r2,-36(fp)
   1752c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   17530:	0005883a 	mov	r2,zero
   17534:	00000306 	br	17544 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   17538:	00bffa84 	movi	r2,-22
   1753c:	00000106 	br	17544 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   17540:	00bfde84 	movi	r2,-134
  }
}
   17544:	e037883a 	mov	sp,fp
   17548:	df000017 	ldw	fp,0(sp)
   1754c:	dec00104 	addi	sp,sp,4
   17550:	f800283a 	ret

00017554 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17554:	defffe04 	addi	sp,sp,-8
   17558:	dfc00115 	stw	ra,4(sp)
   1755c:	df000015 	stw	fp,0(sp)
   17560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17564:	d0a00a17 	ldw	r2,-32728(gp)
   17568:	10000326 	beq	r2,zero,17578 <alt_get_errno+0x24>
   1756c:	d0a00a17 	ldw	r2,-32728(gp)
   17570:	103ee83a 	callr	r2
   17574:	00000106 	br	1757c <alt_get_errno+0x28>
   17578:	d0a6c204 	addi	r2,gp,-25848
}
   1757c:	e037883a 	mov	sp,fp
   17580:	dfc00117 	ldw	ra,4(sp)
   17584:	df000017 	ldw	fp,0(sp)
   17588:	dec00204 	addi	sp,sp,8
   1758c:	f800283a 	ret

00017590 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17590:	defffb04 	addi	sp,sp,-20
   17594:	dfc00415 	stw	ra,16(sp)
   17598:	df000315 	stw	fp,12(sp)
   1759c:	df000304 	addi	fp,sp,12
   175a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   175a4:	e0bfff17 	ldw	r2,-4(fp)
   175a8:	10000816 	blt	r2,zero,175cc <close+0x3c>
   175ac:	01400304 	movi	r5,12
   175b0:	e13fff17 	ldw	r4,-4(fp)
   175b4:	00127280 	call	12728 <__mulsi3>
   175b8:	1007883a 	mov	r3,r2
   175bc:	008000b4 	movhi	r2,2
   175c0:	10b0ca04 	addi	r2,r2,-15576
   175c4:	1885883a 	add	r2,r3,r2
   175c8:	00000106 	br	175d0 <close+0x40>
   175cc:	0005883a 	mov	r2,zero
   175d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   175d4:	e0bffd17 	ldw	r2,-12(fp)
   175d8:	10001926 	beq	r2,zero,17640 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   175dc:	e0bffd17 	ldw	r2,-12(fp)
   175e0:	10800017 	ldw	r2,0(r2)
   175e4:	10800417 	ldw	r2,16(r2)
   175e8:	10000626 	beq	r2,zero,17604 <close+0x74>
   175ec:	e0bffd17 	ldw	r2,-12(fp)
   175f0:	10800017 	ldw	r2,0(r2)
   175f4:	10800417 	ldw	r2,16(r2)
   175f8:	e13ffd17 	ldw	r4,-12(fp)
   175fc:	103ee83a 	callr	r2
   17600:	00000106 	br	17608 <close+0x78>
   17604:	0005883a 	mov	r2,zero
   17608:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1760c:	e13fff17 	ldw	r4,-4(fp)
   17610:	0017ce80 	call	17ce8 <alt_release_fd>
    if (rval < 0)
   17614:	e0bffe17 	ldw	r2,-8(fp)
   17618:	1000070e 	bge	r2,zero,17638 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1761c:	00175540 	call	17554 <alt_get_errno>
   17620:	1007883a 	mov	r3,r2
   17624:	e0bffe17 	ldw	r2,-8(fp)
   17628:	0085c83a 	sub	r2,zero,r2
   1762c:	18800015 	stw	r2,0(r3)
      return -1;
   17630:	00bfffc4 	movi	r2,-1
   17634:	00000706 	br	17654 <close+0xc4>
    }
    return 0;
   17638:	0005883a 	mov	r2,zero
   1763c:	00000506 	br	17654 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17640:	00175540 	call	17554 <alt_get_errno>
   17644:	1007883a 	mov	r3,r2
   17648:	00801444 	movi	r2,81
   1764c:	18800015 	stw	r2,0(r3)
    return -1;
   17650:	00bfffc4 	movi	r2,-1
  }
}
   17654:	e037883a 	mov	sp,fp
   17658:	dfc00117 	ldw	ra,4(sp)
   1765c:	df000017 	ldw	fp,0(sp)
   17660:	dec00204 	addi	sp,sp,8
   17664:	f800283a 	ret

00017668 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   17668:	deffff04 	addi	sp,sp,-4
   1766c:	df000015 	stw	fp,0(sp)
   17670:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   17674:	0001883a 	nop
   17678:	e037883a 	mov	sp,fp
   1767c:	df000017 	ldw	fp,0(sp)
   17680:	dec00104 	addi	sp,sp,4
   17684:	f800283a 	ret

00017688 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   17688:	defffc04 	addi	sp,sp,-16
   1768c:	df000315 	stw	fp,12(sp)
   17690:	df000304 	addi	fp,sp,12
   17694:	e13ffd15 	stw	r4,-12(fp)
   17698:	e17ffe15 	stw	r5,-8(fp)
   1769c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   176a0:	e0bfff17 	ldw	r2,-4(fp)
}
   176a4:	e037883a 	mov	sp,fp
   176a8:	df000017 	ldw	fp,0(sp)
   176ac:	dec00104 	addi	sp,sp,4
   176b0:	f800283a 	ret

000176b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176b4:	defffe04 	addi	sp,sp,-8
   176b8:	dfc00115 	stw	ra,4(sp)
   176bc:	df000015 	stw	fp,0(sp)
   176c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   176c4:	d0a00a17 	ldw	r2,-32728(gp)
   176c8:	10000326 	beq	r2,zero,176d8 <alt_get_errno+0x24>
   176cc:	d0a00a17 	ldw	r2,-32728(gp)
   176d0:	103ee83a 	callr	r2
   176d4:	00000106 	br	176dc <alt_get_errno+0x28>
   176d8:	d0a6c204 	addi	r2,gp,-25848
}
   176dc:	e037883a 	mov	sp,fp
   176e0:	dfc00117 	ldw	ra,4(sp)
   176e4:	df000017 	ldw	fp,0(sp)
   176e8:	dec00204 	addi	sp,sp,8
   176ec:	f800283a 	ret

000176f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   176f0:	defffa04 	addi	sp,sp,-24
   176f4:	dfc00515 	stw	ra,20(sp)
   176f8:	df000415 	stw	fp,16(sp)
   176fc:	df000404 	addi	fp,sp,16
   17700:	e13ffe15 	stw	r4,-8(fp)
   17704:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   17708:	e0bffe17 	ldw	r2,-8(fp)
   1770c:	10000326 	beq	r2,zero,1771c <alt_dev_llist_insert+0x2c>
   17710:	e0bffe17 	ldw	r2,-8(fp)
   17714:	10800217 	ldw	r2,8(r2)
   17718:	1000061e 	bne	r2,zero,17734 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1771c:	00176b40 	call	176b4 <alt_get_errno>
   17720:	1007883a 	mov	r3,r2
   17724:	00800584 	movi	r2,22
   17728:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1772c:	00bffa84 	movi	r2,-22
   17730:	00001306 	br	17780 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17734:	e0bffe17 	ldw	r2,-8(fp)
   17738:	e0ffff17 	ldw	r3,-4(fp)
   1773c:	e0fffc15 	stw	r3,-16(fp)
   17740:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17744:	e0bffd17 	ldw	r2,-12(fp)
   17748:	e0fffc17 	ldw	r3,-16(fp)
   1774c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   17750:	e0bffc17 	ldw	r2,-16(fp)
   17754:	10c00017 	ldw	r3,0(r2)
   17758:	e0bffd17 	ldw	r2,-12(fp)
   1775c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17760:	e0bffc17 	ldw	r2,-16(fp)
   17764:	10800017 	ldw	r2,0(r2)
   17768:	e0fffd17 	ldw	r3,-12(fp)
   1776c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   17770:	e0bffc17 	ldw	r2,-16(fp)
   17774:	e0fffd17 	ldw	r3,-12(fp)
   17778:	10c00015 	stw	r3,0(r2)

  return 0;  
   1777c:	0005883a 	mov	r2,zero
}
   17780:	e037883a 	mov	sp,fp
   17784:	dfc00117 	ldw	ra,4(sp)
   17788:	df000017 	ldw	fp,0(sp)
   1778c:	dec00204 	addi	sp,sp,8
   17790:	f800283a 	ret

00017794 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   17794:	defffd04 	addi	sp,sp,-12
   17798:	dfc00215 	stw	ra,8(sp)
   1779c:	df000115 	stw	fp,4(sp)
   177a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   177a4:	008000b4 	movhi	r2,2
   177a8:	10aaff04 	addi	r2,r2,-21508
   177ac:	e0bfff15 	stw	r2,-4(fp)
   177b0:	00000606 	br	177cc <_do_ctors+0x38>
        (*ctor) (); 
   177b4:	e0bfff17 	ldw	r2,-4(fp)
   177b8:	10800017 	ldw	r2,0(r2)
   177bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   177c0:	e0bfff17 	ldw	r2,-4(fp)
   177c4:	10bfff04 	addi	r2,r2,-4
   177c8:	e0bfff15 	stw	r2,-4(fp)
   177cc:	e0ffff17 	ldw	r3,-4(fp)
   177d0:	008000b4 	movhi	r2,2
   177d4:	10ab0004 	addi	r2,r2,-21504
   177d8:	18bff62e 	bgeu	r3,r2,177b4 <_gp+0xffff2f04>
        (*ctor) (); 
}
   177dc:	0001883a 	nop
   177e0:	e037883a 	mov	sp,fp
   177e4:	dfc00117 	ldw	ra,4(sp)
   177e8:	df000017 	ldw	fp,0(sp)
   177ec:	dec00204 	addi	sp,sp,8
   177f0:	f800283a 	ret

000177f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   177f4:	defffd04 	addi	sp,sp,-12
   177f8:	dfc00215 	stw	ra,8(sp)
   177fc:	df000115 	stw	fp,4(sp)
   17800:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17804:	008000b4 	movhi	r2,2
   17808:	10aaff04 	addi	r2,r2,-21508
   1780c:	e0bfff15 	stw	r2,-4(fp)
   17810:	00000606 	br	1782c <_do_dtors+0x38>
        (*dtor) (); 
   17814:	e0bfff17 	ldw	r2,-4(fp)
   17818:	10800017 	ldw	r2,0(r2)
   1781c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17820:	e0bfff17 	ldw	r2,-4(fp)
   17824:	10bfff04 	addi	r2,r2,-4
   17828:	e0bfff15 	stw	r2,-4(fp)
   1782c:	e0ffff17 	ldw	r3,-4(fp)
   17830:	008000b4 	movhi	r2,2
   17834:	10ab0004 	addi	r2,r2,-21504
   17838:	18bff62e 	bgeu	r3,r2,17814 <_gp+0xffff2f64>
        (*dtor) (); 
}
   1783c:	0001883a 	nop
   17840:	e037883a 	mov	sp,fp
   17844:	dfc00117 	ldw	ra,4(sp)
   17848:	df000017 	ldw	fp,0(sp)
   1784c:	dec00204 	addi	sp,sp,8
   17850:	f800283a 	ret

00017854 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17854:	defffa04 	addi	sp,sp,-24
   17858:	dfc00515 	stw	ra,20(sp)
   1785c:	df000415 	stw	fp,16(sp)
   17860:	df000404 	addi	fp,sp,16
   17864:	e13ffe15 	stw	r4,-8(fp)
   17868:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1786c:	e0bfff17 	ldw	r2,-4(fp)
   17870:	10800017 	ldw	r2,0(r2)
   17874:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17878:	e13ffe17 	ldw	r4,-8(fp)
   1787c:	00183cc0 	call	183cc <strlen>
   17880:	10800044 	addi	r2,r2,1
   17884:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17888:	00000d06 	br	178c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1788c:	e0bffc17 	ldw	r2,-16(fp)
   17890:	10800217 	ldw	r2,8(r2)
   17894:	e0fffd17 	ldw	r3,-12(fp)
   17898:	180d883a 	mov	r6,r3
   1789c:	e17ffe17 	ldw	r5,-8(fp)
   178a0:	1009883a 	mov	r4,r2
   178a4:	00181e80 	call	181e8 <memcmp>
   178a8:	1000021e 	bne	r2,zero,178b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   178ac:	e0bffc17 	ldw	r2,-16(fp)
   178b0:	00000706 	br	178d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   178b4:	e0bffc17 	ldw	r2,-16(fp)
   178b8:	10800017 	ldw	r2,0(r2)
   178bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   178c0:	e0fffc17 	ldw	r3,-16(fp)
   178c4:	e0bfff17 	ldw	r2,-4(fp)
   178c8:	18bff01e 	bne	r3,r2,1788c <_gp+0xffff2fdc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   178cc:	0005883a 	mov	r2,zero
}
   178d0:	e037883a 	mov	sp,fp
   178d4:	dfc00117 	ldw	ra,4(sp)
   178d8:	df000017 	ldw	fp,0(sp)
   178dc:	dec00204 	addi	sp,sp,8
   178e0:	f800283a 	ret

000178e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   178e4:	deffff04 	addi	sp,sp,-4
   178e8:	df000015 	stw	fp,0(sp)
   178ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   178f0:	0001883a 	nop
   178f4:	e037883a 	mov	sp,fp
   178f8:	df000017 	ldw	fp,0(sp)
   178fc:	dec00104 	addi	sp,sp,4
   17900:	f800283a 	ret

00017904 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   17904:	defff804 	addi	sp,sp,-32
   17908:	dfc00715 	stw	ra,28(sp)
   1790c:	df000615 	stw	fp,24(sp)
   17910:	dc000515 	stw	r16,20(sp)
   17914:	df000604 	addi	fp,sp,24
   17918:	e13ffb15 	stw	r4,-20(fp)
   1791c:	e17ffc15 	stw	r5,-16(fp)
   17920:	e1bffd15 	stw	r6,-12(fp)
   17924:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   17928:	e1bffe17 	ldw	r6,-8(fp)
   1792c:	e17ffd17 	ldw	r5,-12(fp)
   17930:	e13ffc17 	ldw	r4,-16(fp)
   17934:	0017b8c0 	call	17b8c <open>
   17938:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1793c:	e0bffa17 	ldw	r2,-24(fp)
   17940:	10002216 	blt	r2,zero,179cc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   17944:	040000b4 	movhi	r16,2
   17948:	8430ca04 	addi	r16,r16,-15576
   1794c:	e0bffa17 	ldw	r2,-24(fp)
   17950:	01400304 	movi	r5,12
   17954:	1009883a 	mov	r4,r2
   17958:	00127280 	call	12728 <__mulsi3>
   1795c:	8085883a 	add	r2,r16,r2
   17960:	10c00017 	ldw	r3,0(r2)
   17964:	e0bffb17 	ldw	r2,-20(fp)
   17968:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1796c:	040000b4 	movhi	r16,2
   17970:	8430ca04 	addi	r16,r16,-15576
   17974:	e0bffa17 	ldw	r2,-24(fp)
   17978:	01400304 	movi	r5,12
   1797c:	1009883a 	mov	r4,r2
   17980:	00127280 	call	12728 <__mulsi3>
   17984:	8085883a 	add	r2,r16,r2
   17988:	10800104 	addi	r2,r2,4
   1798c:	10c00017 	ldw	r3,0(r2)
   17990:	e0bffb17 	ldw	r2,-20(fp)
   17994:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   17998:	040000b4 	movhi	r16,2
   1799c:	8430ca04 	addi	r16,r16,-15576
   179a0:	e0bffa17 	ldw	r2,-24(fp)
   179a4:	01400304 	movi	r5,12
   179a8:	1009883a 	mov	r4,r2
   179ac:	00127280 	call	12728 <__mulsi3>
   179b0:	8085883a 	add	r2,r16,r2
   179b4:	10800204 	addi	r2,r2,8
   179b8:	10c00017 	ldw	r3,0(r2)
   179bc:	e0bffb17 	ldw	r2,-20(fp)
   179c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   179c4:	e13ffa17 	ldw	r4,-24(fp)
   179c8:	0017ce80 	call	17ce8 <alt_release_fd>
  }
} 
   179cc:	0001883a 	nop
   179d0:	e6ffff04 	addi	sp,fp,-4
   179d4:	dfc00217 	ldw	ra,8(sp)
   179d8:	df000117 	ldw	fp,4(sp)
   179dc:	dc000017 	ldw	r16,0(sp)
   179e0:	dec00304 	addi	sp,sp,12
   179e4:	f800283a 	ret

000179e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   179e8:	defffb04 	addi	sp,sp,-20
   179ec:	dfc00415 	stw	ra,16(sp)
   179f0:	df000315 	stw	fp,12(sp)
   179f4:	df000304 	addi	fp,sp,12
   179f8:	e13ffd15 	stw	r4,-12(fp)
   179fc:	e17ffe15 	stw	r5,-8(fp)
   17a00:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   17a04:	01c07fc4 	movi	r7,511
   17a08:	01800044 	movi	r6,1
   17a0c:	e17ffd17 	ldw	r5,-12(fp)
   17a10:	010000b4 	movhi	r4,2
   17a14:	2130cd04 	addi	r4,r4,-15564
   17a18:	00179040 	call	17904 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17a1c:	01c07fc4 	movi	r7,511
   17a20:	000d883a 	mov	r6,zero
   17a24:	e17ffe17 	ldw	r5,-8(fp)
   17a28:	010000b4 	movhi	r4,2
   17a2c:	2130ca04 	addi	r4,r4,-15576
   17a30:	00179040 	call	17904 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   17a34:	01c07fc4 	movi	r7,511
   17a38:	01800044 	movi	r6,1
   17a3c:	e17fff17 	ldw	r5,-4(fp)
   17a40:	010000b4 	movhi	r4,2
   17a44:	2130d004 	addi	r4,r4,-15552
   17a48:	00179040 	call	17904 <alt_open_fd>
}  
   17a4c:	0001883a 	nop
   17a50:	e037883a 	mov	sp,fp
   17a54:	dfc00117 	ldw	ra,4(sp)
   17a58:	df000017 	ldw	fp,0(sp)
   17a5c:	dec00204 	addi	sp,sp,8
   17a60:	f800283a 	ret

00017a64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17a64:	defffe04 	addi	sp,sp,-8
   17a68:	dfc00115 	stw	ra,4(sp)
   17a6c:	df000015 	stw	fp,0(sp)
   17a70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17a74:	d0a00a17 	ldw	r2,-32728(gp)
   17a78:	10000326 	beq	r2,zero,17a88 <alt_get_errno+0x24>
   17a7c:	d0a00a17 	ldw	r2,-32728(gp)
   17a80:	103ee83a 	callr	r2
   17a84:	00000106 	br	17a8c <alt_get_errno+0x28>
   17a88:	d0a6c204 	addi	r2,gp,-25848
}
   17a8c:	e037883a 	mov	sp,fp
   17a90:	dfc00117 	ldw	ra,4(sp)
   17a94:	df000017 	ldw	fp,0(sp)
   17a98:	dec00204 	addi	sp,sp,8
   17a9c:	f800283a 	ret

00017aa0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   17aa0:	defffb04 	addi	sp,sp,-20
   17aa4:	dfc00415 	stw	ra,16(sp)
   17aa8:	df000315 	stw	fp,12(sp)
   17aac:	dc000215 	stw	r16,8(sp)
   17ab0:	df000304 	addi	fp,sp,12
   17ab4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   17ab8:	e0bffe17 	ldw	r2,-8(fp)
   17abc:	10800217 	ldw	r2,8(r2)
   17ac0:	10d00034 	orhi	r3,r2,16384
   17ac4:	e0bffe17 	ldw	r2,-8(fp)
   17ac8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17acc:	e03ffd15 	stw	zero,-12(fp)
   17ad0:	00002306 	br	17b60 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17ad4:	040000b4 	movhi	r16,2
   17ad8:	8430ca04 	addi	r16,r16,-15576
   17adc:	e0bffd17 	ldw	r2,-12(fp)
   17ae0:	01400304 	movi	r5,12
   17ae4:	1009883a 	mov	r4,r2
   17ae8:	00127280 	call	12728 <__mulsi3>
   17aec:	8085883a 	add	r2,r16,r2
   17af0:	10c00017 	ldw	r3,0(r2)
   17af4:	e0bffe17 	ldw	r2,-8(fp)
   17af8:	10800017 	ldw	r2,0(r2)
   17afc:	1880151e 	bne	r3,r2,17b54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17b00:	040000b4 	movhi	r16,2
   17b04:	8430ca04 	addi	r16,r16,-15576
   17b08:	e0bffd17 	ldw	r2,-12(fp)
   17b0c:	01400304 	movi	r5,12
   17b10:	1009883a 	mov	r4,r2
   17b14:	00127280 	call	12728 <__mulsi3>
   17b18:	8085883a 	add	r2,r16,r2
   17b1c:	10800204 	addi	r2,r2,8
   17b20:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17b24:	10000b0e 	bge	r2,zero,17b54 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17b28:	01400304 	movi	r5,12
   17b2c:	e13ffd17 	ldw	r4,-12(fp)
   17b30:	00127280 	call	12728 <__mulsi3>
   17b34:	1007883a 	mov	r3,r2
   17b38:	008000b4 	movhi	r2,2
   17b3c:	10b0ca04 	addi	r2,r2,-15576
   17b40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17b44:	e0bffe17 	ldw	r2,-8(fp)
   17b48:	18800226 	beq	r3,r2,17b54 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17b4c:	00bffcc4 	movi	r2,-13
   17b50:	00000806 	br	17b74 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17b54:	e0bffd17 	ldw	r2,-12(fp)
   17b58:	10800044 	addi	r2,r2,1
   17b5c:	e0bffd15 	stw	r2,-12(fp)
   17b60:	d0a00917 	ldw	r2,-32732(gp)
   17b64:	1007883a 	mov	r3,r2
   17b68:	e0bffd17 	ldw	r2,-12(fp)
   17b6c:	18bfd92e 	bgeu	r3,r2,17ad4 <_gp+0xffff3224>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   17b70:	0005883a 	mov	r2,zero
}
   17b74:	e6ffff04 	addi	sp,fp,-4
   17b78:	dfc00217 	ldw	ra,8(sp)
   17b7c:	df000117 	ldw	fp,4(sp)
   17b80:	dc000017 	ldw	r16,0(sp)
   17b84:	dec00304 	addi	sp,sp,12
   17b88:	f800283a 	ret

00017b8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   17b8c:	defff604 	addi	sp,sp,-40
   17b90:	dfc00915 	stw	ra,36(sp)
   17b94:	df000815 	stw	fp,32(sp)
   17b98:	df000804 	addi	fp,sp,32
   17b9c:	e13ffd15 	stw	r4,-12(fp)
   17ba0:	e17ffe15 	stw	r5,-8(fp)
   17ba4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   17ba8:	00bfffc4 	movi	r2,-1
   17bac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   17bb0:	00bffb44 	movi	r2,-19
   17bb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   17bb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17bbc:	d1600704 	addi	r5,gp,-32740
   17bc0:	e13ffd17 	ldw	r4,-12(fp)
   17bc4:	00178540 	call	17854 <alt_find_dev>
   17bc8:	e0bff815 	stw	r2,-32(fp)
   17bcc:	e0bff817 	ldw	r2,-32(fp)
   17bd0:	1000051e 	bne	r2,zero,17be8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17bd4:	e13ffd17 	ldw	r4,-12(fp)
   17bd8:	0017f340 	call	17f34 <alt_find_file>
   17bdc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17be0:	00800044 	movi	r2,1
   17be4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17be8:	e0bff817 	ldw	r2,-32(fp)
   17bec:	10002b26 	beq	r2,zero,17c9c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17bf0:	e13ff817 	ldw	r4,-32(fp)
   17bf4:	001803c0 	call	1803c <alt_get_fd>
   17bf8:	e0bff915 	stw	r2,-28(fp)
   17bfc:	e0bff917 	ldw	r2,-28(fp)
   17c00:	1000030e 	bge	r2,zero,17c10 <open+0x84>
    {
      status = index;
   17c04:	e0bff917 	ldw	r2,-28(fp)
   17c08:	e0bffa15 	stw	r2,-24(fp)
   17c0c:	00002506 	br	17ca4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17c10:	01400304 	movi	r5,12
   17c14:	e13ff917 	ldw	r4,-28(fp)
   17c18:	00127280 	call	12728 <__mulsi3>
   17c1c:	1007883a 	mov	r3,r2
   17c20:	008000b4 	movhi	r2,2
   17c24:	10b0ca04 	addi	r2,r2,-15576
   17c28:	1885883a 	add	r2,r3,r2
   17c2c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17c30:	e0fffe17 	ldw	r3,-8(fp)
   17c34:	00900034 	movhi	r2,16384
   17c38:	10bfffc4 	addi	r2,r2,-1
   17c3c:	1886703a 	and	r3,r3,r2
   17c40:	e0bffc17 	ldw	r2,-16(fp)
   17c44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17c48:	e0bffb17 	ldw	r2,-20(fp)
   17c4c:	1000051e 	bne	r2,zero,17c64 <open+0xd8>
   17c50:	e13ffc17 	ldw	r4,-16(fp)
   17c54:	0017aa00 	call	17aa0 <alt_file_locked>
   17c58:	e0bffa15 	stw	r2,-24(fp)
   17c5c:	e0bffa17 	ldw	r2,-24(fp)
   17c60:	10001016 	blt	r2,zero,17ca4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   17c64:	e0bff817 	ldw	r2,-32(fp)
   17c68:	10800317 	ldw	r2,12(r2)
   17c6c:	10000826 	beq	r2,zero,17c90 <open+0x104>
   17c70:	e0bff817 	ldw	r2,-32(fp)
   17c74:	10800317 	ldw	r2,12(r2)
   17c78:	e1ffff17 	ldw	r7,-4(fp)
   17c7c:	e1bffe17 	ldw	r6,-8(fp)
   17c80:	e17ffd17 	ldw	r5,-12(fp)
   17c84:	e13ffc17 	ldw	r4,-16(fp)
   17c88:	103ee83a 	callr	r2
   17c8c:	00000106 	br	17c94 <open+0x108>
   17c90:	0005883a 	mov	r2,zero
   17c94:	e0bffa15 	stw	r2,-24(fp)
   17c98:	00000206 	br	17ca4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   17c9c:	00bffb44 	movi	r2,-19
   17ca0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   17ca4:	e0bffa17 	ldw	r2,-24(fp)
   17ca8:	1000090e 	bge	r2,zero,17cd0 <open+0x144>
  {
    alt_release_fd (index);  
   17cac:	e13ff917 	ldw	r4,-28(fp)
   17cb0:	0017ce80 	call	17ce8 <alt_release_fd>
    ALT_ERRNO = -status;
   17cb4:	0017a640 	call	17a64 <alt_get_errno>
   17cb8:	1007883a 	mov	r3,r2
   17cbc:	e0bffa17 	ldw	r2,-24(fp)
   17cc0:	0085c83a 	sub	r2,zero,r2
   17cc4:	18800015 	stw	r2,0(r3)
    return -1;
   17cc8:	00bfffc4 	movi	r2,-1
   17ccc:	00000106 	br	17cd4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   17cd0:	e0bff917 	ldw	r2,-28(fp)
}
   17cd4:	e037883a 	mov	sp,fp
   17cd8:	dfc00117 	ldw	ra,4(sp)
   17cdc:	df000017 	ldw	fp,0(sp)
   17ce0:	dec00204 	addi	sp,sp,8
   17ce4:	f800283a 	ret

00017ce8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   17ce8:	defffc04 	addi	sp,sp,-16
   17cec:	dfc00315 	stw	ra,12(sp)
   17cf0:	df000215 	stw	fp,8(sp)
   17cf4:	dc000115 	stw	r16,4(sp)
   17cf8:	df000204 	addi	fp,sp,8
   17cfc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   17d00:	e0bffe17 	ldw	r2,-8(fp)
   17d04:	108000d0 	cmplti	r2,r2,3
   17d08:	1000111e 	bne	r2,zero,17d50 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   17d0c:	040000b4 	movhi	r16,2
   17d10:	8430ca04 	addi	r16,r16,-15576
   17d14:	e0bffe17 	ldw	r2,-8(fp)
   17d18:	01400304 	movi	r5,12
   17d1c:	1009883a 	mov	r4,r2
   17d20:	00127280 	call	12728 <__mulsi3>
   17d24:	8085883a 	add	r2,r16,r2
   17d28:	10800204 	addi	r2,r2,8
   17d2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   17d30:	040000b4 	movhi	r16,2
   17d34:	8430ca04 	addi	r16,r16,-15576
   17d38:	e0bffe17 	ldw	r2,-8(fp)
   17d3c:	01400304 	movi	r5,12
   17d40:	1009883a 	mov	r4,r2
   17d44:	00127280 	call	12728 <__mulsi3>
   17d48:	8085883a 	add	r2,r16,r2
   17d4c:	10000015 	stw	zero,0(r2)
  }
}
   17d50:	0001883a 	nop
   17d54:	e6ffff04 	addi	sp,fp,-4
   17d58:	dfc00217 	ldw	ra,8(sp)
   17d5c:	df000117 	ldw	fp,4(sp)
   17d60:	dc000017 	ldw	r16,0(sp)
   17d64:	dec00304 	addi	sp,sp,12
   17d68:	f800283a 	ret

00017d6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17d6c:	defffa04 	addi	sp,sp,-24
   17d70:	df000515 	stw	fp,20(sp)
   17d74:	df000504 	addi	fp,sp,20
   17d78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d7c:	0005303a 	rdctl	r2,status
   17d80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d84:	e0fffc17 	ldw	r3,-16(fp)
   17d88:	00bfff84 	movi	r2,-2
   17d8c:	1884703a 	and	r2,r3,r2
   17d90:	1001703a 	wrctl	status,r2
  
  return context;
   17d94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17d98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17d9c:	e0bfff17 	ldw	r2,-4(fp)
   17da0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   17da4:	e0bffd17 	ldw	r2,-12(fp)
   17da8:	10800017 	ldw	r2,0(r2)
   17dac:	e0fffd17 	ldw	r3,-12(fp)
   17db0:	18c00117 	ldw	r3,4(r3)
   17db4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17db8:	e0bffd17 	ldw	r2,-12(fp)
   17dbc:	10800117 	ldw	r2,4(r2)
   17dc0:	e0fffd17 	ldw	r3,-12(fp)
   17dc4:	18c00017 	ldw	r3,0(r3)
   17dc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17dcc:	e0bffd17 	ldw	r2,-12(fp)
   17dd0:	e0fffd17 	ldw	r3,-12(fp)
   17dd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17dd8:	e0bffd17 	ldw	r2,-12(fp)
   17ddc:	e0fffd17 	ldw	r3,-12(fp)
   17de0:	10c00015 	stw	r3,0(r2)
   17de4:	e0bffb17 	ldw	r2,-20(fp)
   17de8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dec:	e0bffe17 	ldw	r2,-8(fp)
   17df0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   17df4:	0001883a 	nop
   17df8:	e037883a 	mov	sp,fp
   17dfc:	df000017 	ldw	fp,0(sp)
   17e00:	dec00104 	addi	sp,sp,4
   17e04:	f800283a 	ret

00017e08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   17e08:	defffb04 	addi	sp,sp,-20
   17e0c:	dfc00415 	stw	ra,16(sp)
   17e10:	df000315 	stw	fp,12(sp)
   17e14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17e18:	d0a00b17 	ldw	r2,-32724(gp)
   17e1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17e20:	d0a6c017 	ldw	r2,-25856(gp)
   17e24:	10800044 	addi	r2,r2,1
   17e28:	d0a6c015 	stw	r2,-25856(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17e2c:	00002e06 	br	17ee8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   17e30:	e0bffd17 	ldw	r2,-12(fp)
   17e34:	10800017 	ldw	r2,0(r2)
   17e38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   17e3c:	e0bffd17 	ldw	r2,-12(fp)
   17e40:	10800403 	ldbu	r2,16(r2)
   17e44:	10803fcc 	andi	r2,r2,255
   17e48:	10000426 	beq	r2,zero,17e5c <alt_tick+0x54>
   17e4c:	d0a6c017 	ldw	r2,-25856(gp)
   17e50:	1000021e 	bne	r2,zero,17e5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   17e54:	e0bffd17 	ldw	r2,-12(fp)
   17e58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17e5c:	e0bffd17 	ldw	r2,-12(fp)
   17e60:	10800217 	ldw	r2,8(r2)
   17e64:	d0e6c017 	ldw	r3,-25856(gp)
   17e68:	18801d36 	bltu	r3,r2,17ee0 <alt_tick+0xd8>
   17e6c:	e0bffd17 	ldw	r2,-12(fp)
   17e70:	10800403 	ldbu	r2,16(r2)
   17e74:	10803fcc 	andi	r2,r2,255
   17e78:	1000191e 	bne	r2,zero,17ee0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17e7c:	e0bffd17 	ldw	r2,-12(fp)
   17e80:	10800317 	ldw	r2,12(r2)
   17e84:	e0fffd17 	ldw	r3,-12(fp)
   17e88:	18c00517 	ldw	r3,20(r3)
   17e8c:	1809883a 	mov	r4,r3
   17e90:	103ee83a 	callr	r2
   17e94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17e98:	e0bfff17 	ldw	r2,-4(fp)
   17e9c:	1000031e 	bne	r2,zero,17eac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17ea0:	e13ffd17 	ldw	r4,-12(fp)
   17ea4:	0017d6c0 	call	17d6c <alt_alarm_stop>
   17ea8:	00000d06 	br	17ee0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17eac:	e0bffd17 	ldw	r2,-12(fp)
   17eb0:	10c00217 	ldw	r3,8(r2)
   17eb4:	e0bfff17 	ldw	r2,-4(fp)
   17eb8:	1887883a 	add	r3,r3,r2
   17ebc:	e0bffd17 	ldw	r2,-12(fp)
   17ec0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17ec4:	e0bffd17 	ldw	r2,-12(fp)
   17ec8:	10c00217 	ldw	r3,8(r2)
   17ecc:	d0a6c017 	ldw	r2,-25856(gp)
   17ed0:	1880032e 	bgeu	r3,r2,17ee0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   17ed4:	e0bffd17 	ldw	r2,-12(fp)
   17ed8:	00c00044 	movi	r3,1
   17edc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17ee0:	e0bffe17 	ldw	r2,-8(fp)
   17ee4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17ee8:	e0fffd17 	ldw	r3,-12(fp)
   17eec:	d0a00b04 	addi	r2,gp,-32724
   17ef0:	18bfcf1e 	bne	r3,r2,17e30 <_gp+0xffff3580>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17ef4:	0001883a 	nop
}
   17ef8:	0001883a 	nop
   17efc:	e037883a 	mov	sp,fp
   17f00:	dfc00117 	ldw	ra,4(sp)
   17f04:	df000017 	ldw	fp,0(sp)
   17f08:	dec00204 	addi	sp,sp,8
   17f0c:	f800283a 	ret

00017f10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17f10:	deffff04 	addi	sp,sp,-4
   17f14:	df000015 	stw	fp,0(sp)
   17f18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17f1c:	000170fa 	wrctl	ienable,zero
}
   17f20:	0001883a 	nop
   17f24:	e037883a 	mov	sp,fp
   17f28:	df000017 	ldw	fp,0(sp)
   17f2c:	dec00104 	addi	sp,sp,4
   17f30:	f800283a 	ret

00017f34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17f34:	defffb04 	addi	sp,sp,-20
   17f38:	dfc00415 	stw	ra,16(sp)
   17f3c:	df000315 	stw	fp,12(sp)
   17f40:	df000304 	addi	fp,sp,12
   17f44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17f48:	d0a00517 	ldw	r2,-32748(gp)
   17f4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17f50:	00003106 	br	18018 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17f54:	e0bffd17 	ldw	r2,-12(fp)
   17f58:	10800217 	ldw	r2,8(r2)
   17f5c:	1009883a 	mov	r4,r2
   17f60:	00183cc0 	call	183cc <strlen>
   17f64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17f68:	e0bffd17 	ldw	r2,-12(fp)
   17f6c:	10c00217 	ldw	r3,8(r2)
   17f70:	e0bffe17 	ldw	r2,-8(fp)
   17f74:	10bfffc4 	addi	r2,r2,-1
   17f78:	1885883a 	add	r2,r3,r2
   17f7c:	10800003 	ldbu	r2,0(r2)
   17f80:	10803fcc 	andi	r2,r2,255
   17f84:	1080201c 	xori	r2,r2,128
   17f88:	10bfe004 	addi	r2,r2,-128
   17f8c:	10800bd8 	cmpnei	r2,r2,47
   17f90:	1000031e 	bne	r2,zero,17fa0 <alt_find_file+0x6c>
    {
      len -= 1;
   17f94:	e0bffe17 	ldw	r2,-8(fp)
   17f98:	10bfffc4 	addi	r2,r2,-1
   17f9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17fa0:	e0bffe17 	ldw	r2,-8(fp)
   17fa4:	e0ffff17 	ldw	r3,-4(fp)
   17fa8:	1885883a 	add	r2,r3,r2
   17fac:	10800003 	ldbu	r2,0(r2)
   17fb0:	10803fcc 	andi	r2,r2,255
   17fb4:	1080201c 	xori	r2,r2,128
   17fb8:	10bfe004 	addi	r2,r2,-128
   17fbc:	10800be0 	cmpeqi	r2,r2,47
   17fc0:	1000081e 	bne	r2,zero,17fe4 <alt_find_file+0xb0>
   17fc4:	e0bffe17 	ldw	r2,-8(fp)
   17fc8:	e0ffff17 	ldw	r3,-4(fp)
   17fcc:	1885883a 	add	r2,r3,r2
   17fd0:	10800003 	ldbu	r2,0(r2)
   17fd4:	10803fcc 	andi	r2,r2,255
   17fd8:	1080201c 	xori	r2,r2,128
   17fdc:	10bfe004 	addi	r2,r2,-128
   17fe0:	10000a1e 	bne	r2,zero,1800c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17fe4:	e0bffd17 	ldw	r2,-12(fp)
   17fe8:	10800217 	ldw	r2,8(r2)
   17fec:	e0fffe17 	ldw	r3,-8(fp)
   17ff0:	180d883a 	mov	r6,r3
   17ff4:	e17fff17 	ldw	r5,-4(fp)
   17ff8:	1009883a 	mov	r4,r2
   17ffc:	00181e80 	call	181e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18000:	1000021e 	bne	r2,zero,1800c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   18004:	e0bffd17 	ldw	r2,-12(fp)
   18008:	00000706 	br	18028 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1800c:	e0bffd17 	ldw	r2,-12(fp)
   18010:	10800017 	ldw	r2,0(r2)
   18014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18018:	e0fffd17 	ldw	r3,-12(fp)
   1801c:	d0a00504 	addi	r2,gp,-32748
   18020:	18bfcc1e 	bne	r3,r2,17f54 <_gp+0xffff36a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   18024:	0005883a 	mov	r2,zero
}
   18028:	e037883a 	mov	sp,fp
   1802c:	dfc00117 	ldw	ra,4(sp)
   18030:	df000017 	ldw	fp,0(sp)
   18034:	dec00204 	addi	sp,sp,8
   18038:	f800283a 	ret

0001803c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1803c:	defffa04 	addi	sp,sp,-24
   18040:	dfc00515 	stw	ra,20(sp)
   18044:	df000415 	stw	fp,16(sp)
   18048:	dc000315 	stw	r16,12(sp)
   1804c:	df000404 	addi	fp,sp,16
   18050:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   18054:	00bffa04 	movi	r2,-24
   18058:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1805c:	e03ffc15 	stw	zero,-16(fp)
   18060:	00001d06 	br	180d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   18064:	040000b4 	movhi	r16,2
   18068:	8430ca04 	addi	r16,r16,-15576
   1806c:	e0bffc17 	ldw	r2,-16(fp)
   18070:	01400304 	movi	r5,12
   18074:	1009883a 	mov	r4,r2
   18078:	00127280 	call	12728 <__mulsi3>
   1807c:	8085883a 	add	r2,r16,r2
   18080:	10800017 	ldw	r2,0(r2)
   18084:	1000111e 	bne	r2,zero,180cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   18088:	040000b4 	movhi	r16,2
   1808c:	8430ca04 	addi	r16,r16,-15576
   18090:	e0bffc17 	ldw	r2,-16(fp)
   18094:	01400304 	movi	r5,12
   18098:	1009883a 	mov	r4,r2
   1809c:	00127280 	call	12728 <__mulsi3>
   180a0:	8085883a 	add	r2,r16,r2
   180a4:	e0fffe17 	ldw	r3,-8(fp)
   180a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   180ac:	d0e00917 	ldw	r3,-32732(gp)
   180b0:	e0bffc17 	ldw	r2,-16(fp)
   180b4:	1880020e 	bge	r3,r2,180c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   180b8:	e0bffc17 	ldw	r2,-16(fp)
   180bc:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   180c0:	e0bffc17 	ldw	r2,-16(fp)
   180c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   180c8:	00000606 	br	180e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   180cc:	e0bffc17 	ldw	r2,-16(fp)
   180d0:	10800044 	addi	r2,r2,1
   180d4:	e0bffc15 	stw	r2,-16(fp)
   180d8:	e0bffc17 	ldw	r2,-16(fp)
   180dc:	10800810 	cmplti	r2,r2,32
   180e0:	103fe01e 	bne	r2,zero,18064 <_gp+0xffff37b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   180e4:	e0bffd17 	ldw	r2,-12(fp)
}
   180e8:	e6ffff04 	addi	sp,fp,-4
   180ec:	dfc00217 	ldw	ra,8(sp)
   180f0:	df000117 	ldw	fp,4(sp)
   180f4:	dc000017 	ldw	r16,0(sp)
   180f8:	dec00304 	addi	sp,sp,12
   180fc:	f800283a 	ret

00018100 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   18100:	defffe04 	addi	sp,sp,-8
   18104:	df000115 	stw	fp,4(sp)
   18108:	df000104 	addi	fp,sp,4
   1810c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   18110:	e0bfff17 	ldw	r2,-4(fp)
   18114:	10bffe84 	addi	r2,r2,-6
   18118:	10c00428 	cmpgeui	r3,r2,16
   1811c:	18001a1e 	bne	r3,zero,18188 <alt_exception_cause_generated_bad_addr+0x88>
   18120:	100690ba 	slli	r3,r2,2
   18124:	008000b4 	movhi	r2,2
   18128:	10a04e04 	addi	r2,r2,-32456
   1812c:	1885883a 	add	r2,r3,r2
   18130:	10800017 	ldw	r2,0(r2)
   18134:	1000683a 	jmp	r2
   18138:	00018178 	rdprs	zero,zero,1541
   1813c:	00018178 	rdprs	zero,zero,1541
   18140:	00018188 	cmpgei	zero,zero,1542
   18144:	00018188 	cmpgei	zero,zero,1542
   18148:	00018188 	cmpgei	zero,zero,1542
   1814c:	00018178 	rdprs	zero,zero,1541
   18150:	00018180 	call	1818 <__alt_mem_onchip_memory-0xe7e8>
   18154:	00018188 	cmpgei	zero,zero,1542
   18158:	00018178 	rdprs	zero,zero,1541
   1815c:	00018178 	rdprs	zero,zero,1541
   18160:	00018188 	cmpgei	zero,zero,1542
   18164:	00018178 	rdprs	zero,zero,1541
   18168:	00018180 	call	1818 <__alt_mem_onchip_memory-0xe7e8>
   1816c:	00018188 	cmpgei	zero,zero,1542
   18170:	00018188 	cmpgei	zero,zero,1542
   18174:	00018178 	rdprs	zero,zero,1541
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   18178:	00800044 	movi	r2,1
   1817c:	00000306 	br	1818c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   18180:	0005883a 	mov	r2,zero
   18184:	00000106 	br	1818c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   18188:	0005883a 	mov	r2,zero
  }
}
   1818c:	e037883a 	mov	sp,fp
   18190:	df000017 	ldw	fp,0(sp)
   18194:	dec00104 	addi	sp,sp,4
   18198:	f800283a 	ret

0001819c <atexit>:
   1819c:	200b883a 	mov	r5,r4
   181a0:	000f883a 	mov	r7,zero
   181a4:	000d883a 	mov	r6,zero
   181a8:	0009883a 	mov	r4,zero
   181ac:	00187101 	jmpi	18710 <__register_exitproc>

000181b0 <exit>:
   181b0:	defffe04 	addi	sp,sp,-8
   181b4:	000b883a 	mov	r5,zero
   181b8:	dc000015 	stw	r16,0(sp)
   181bc:	dfc00115 	stw	ra,4(sp)
   181c0:	2021883a 	mov	r16,r4
   181c4:	00188280 	call	18828 <__call_exitprocs>
   181c8:	008000b4 	movhi	r2,2
   181cc:	10b22e04 	addi	r2,r2,-14152
   181d0:	11000017 	ldw	r4,0(r2)
   181d4:	20800f17 	ldw	r2,60(r4)
   181d8:	10000126 	beq	r2,zero,181e0 <exit+0x30>
   181dc:	103ee83a 	callr	r2
   181e0:	8009883a 	mov	r4,r16
   181e4:	001a5640 	call	1a564 <_exit>

000181e8 <memcmp>:
   181e8:	01c000c4 	movi	r7,3
   181ec:	3980192e 	bgeu	r7,r6,18254 <memcmp+0x6c>
   181f0:	2144b03a 	or	r2,r4,r5
   181f4:	11c4703a 	and	r2,r2,r7
   181f8:	10000f26 	beq	r2,zero,18238 <memcmp+0x50>
   181fc:	20800003 	ldbu	r2,0(r4)
   18200:	28c00003 	ldbu	r3,0(r5)
   18204:	10c0151e 	bne	r2,r3,1825c <memcmp+0x74>
   18208:	31bfff84 	addi	r6,r6,-2
   1820c:	01ffffc4 	movi	r7,-1
   18210:	00000406 	br	18224 <memcmp+0x3c>
   18214:	20800003 	ldbu	r2,0(r4)
   18218:	28c00003 	ldbu	r3,0(r5)
   1821c:	31bfffc4 	addi	r6,r6,-1
   18220:	10c00e1e 	bne	r2,r3,1825c <memcmp+0x74>
   18224:	21000044 	addi	r4,r4,1
   18228:	29400044 	addi	r5,r5,1
   1822c:	31fff91e 	bne	r6,r7,18214 <_gp+0xffff3964>
   18230:	0005883a 	mov	r2,zero
   18234:	f800283a 	ret
   18238:	20c00017 	ldw	r3,0(r4)
   1823c:	28800017 	ldw	r2,0(r5)
   18240:	18bfee1e 	bne	r3,r2,181fc <_gp+0xffff394c>
   18244:	31bfff04 	addi	r6,r6,-4
   18248:	21000104 	addi	r4,r4,4
   1824c:	29400104 	addi	r5,r5,4
   18250:	39bff936 	bltu	r7,r6,18238 <_gp+0xffff3988>
   18254:	303fe91e 	bne	r6,zero,181fc <_gp+0xffff394c>
   18258:	003ff506 	br	18230 <_gp+0xffff3980>
   1825c:	10c5c83a 	sub	r2,r2,r3
   18260:	f800283a 	ret

00018264 <_putc_r>:
   18264:	defffc04 	addi	sp,sp,-16
   18268:	dc000215 	stw	r16,8(sp)
   1826c:	dfc00315 	stw	ra,12(sp)
   18270:	2021883a 	mov	r16,r4
   18274:	20000226 	beq	r4,zero,18280 <_putc_r+0x1c>
   18278:	20800e17 	ldw	r2,56(r4)
   1827c:	10001b26 	beq	r2,zero,182ec <_putc_r+0x88>
   18280:	30800217 	ldw	r2,8(r6)
   18284:	10bfffc4 	addi	r2,r2,-1
   18288:	30800215 	stw	r2,8(r6)
   1828c:	10000a16 	blt	r2,zero,182b8 <_putc_r+0x54>
   18290:	30800017 	ldw	r2,0(r6)
   18294:	11400005 	stb	r5,0(r2)
   18298:	30800017 	ldw	r2,0(r6)
   1829c:	10c00044 	addi	r3,r2,1
   182a0:	30c00015 	stw	r3,0(r6)
   182a4:	10800003 	ldbu	r2,0(r2)
   182a8:	dfc00317 	ldw	ra,12(sp)
   182ac:	dc000217 	ldw	r16,8(sp)
   182b0:	dec00404 	addi	sp,sp,16
   182b4:	f800283a 	ret
   182b8:	30c00617 	ldw	r3,24(r6)
   182bc:	10c00616 	blt	r2,r3,182d8 <_putc_r+0x74>
   182c0:	30800017 	ldw	r2,0(r6)
   182c4:	00c00284 	movi	r3,10
   182c8:	11400005 	stb	r5,0(r2)
   182cc:	30800017 	ldw	r2,0(r6)
   182d0:	11400003 	ldbu	r5,0(r2)
   182d4:	28fff11e 	bne	r5,r3,1829c <_gp+0xffff39ec>
   182d8:	8009883a 	mov	r4,r16
   182dc:	dfc00317 	ldw	ra,12(sp)
   182e0:	dc000217 	ldw	r16,8(sp)
   182e4:	dec00404 	addi	sp,sp,16
   182e8:	00184641 	jmpi	18464 <__swbuf_r>
   182ec:	d9400015 	stw	r5,0(sp)
   182f0:	d9800115 	stw	r6,4(sp)
   182f4:	0018fb00 	call	18fb0 <__sinit>
   182f8:	d9800117 	ldw	r6,4(sp)
   182fc:	d9400017 	ldw	r5,0(sp)
   18300:	003fdf06 	br	18280 <_gp+0xffff39d0>

00018304 <putc>:
   18304:	008000b4 	movhi	r2,2
   18308:	defffc04 	addi	sp,sp,-16
   1830c:	10b22f04 	addi	r2,r2,-14148
   18310:	dc000115 	stw	r16,4(sp)
   18314:	14000017 	ldw	r16,0(r2)
   18318:	dc400215 	stw	r17,8(sp)
   1831c:	dfc00315 	stw	ra,12(sp)
   18320:	2023883a 	mov	r17,r4
   18324:	80000226 	beq	r16,zero,18330 <putc+0x2c>
   18328:	80800e17 	ldw	r2,56(r16)
   1832c:	10001a26 	beq	r2,zero,18398 <putc+0x94>
   18330:	28800217 	ldw	r2,8(r5)
   18334:	10bfffc4 	addi	r2,r2,-1
   18338:	28800215 	stw	r2,8(r5)
   1833c:	10000b16 	blt	r2,zero,1836c <putc+0x68>
   18340:	28800017 	ldw	r2,0(r5)
   18344:	14400005 	stb	r17,0(r2)
   18348:	28800017 	ldw	r2,0(r5)
   1834c:	10c00044 	addi	r3,r2,1
   18350:	28c00015 	stw	r3,0(r5)
   18354:	10800003 	ldbu	r2,0(r2)
   18358:	dfc00317 	ldw	ra,12(sp)
   1835c:	dc400217 	ldw	r17,8(sp)
   18360:	dc000117 	ldw	r16,4(sp)
   18364:	dec00404 	addi	sp,sp,16
   18368:	f800283a 	ret
   1836c:	28c00617 	ldw	r3,24(r5)
   18370:	10c00e16 	blt	r2,r3,183ac <putc+0xa8>
   18374:	28800017 	ldw	r2,0(r5)
   18378:	01000284 	movi	r4,10
   1837c:	14400005 	stb	r17,0(r2)
   18380:	28800017 	ldw	r2,0(r5)
   18384:	10c00003 	ldbu	r3,0(r2)
   18388:	193ff01e 	bne	r3,r4,1834c <_gp+0xffff3a9c>
   1838c:	280d883a 	mov	r6,r5
   18390:	180b883a 	mov	r5,r3
   18394:	00000706 	br	183b4 <putc+0xb0>
   18398:	8009883a 	mov	r4,r16
   1839c:	d9400015 	stw	r5,0(sp)
   183a0:	0018fb00 	call	18fb0 <__sinit>
   183a4:	d9400017 	ldw	r5,0(sp)
   183a8:	003fe106 	br	18330 <_gp+0xffff3a80>
   183ac:	280d883a 	mov	r6,r5
   183b0:	880b883a 	mov	r5,r17
   183b4:	8009883a 	mov	r4,r16
   183b8:	dfc00317 	ldw	ra,12(sp)
   183bc:	dc400217 	ldw	r17,8(sp)
   183c0:	dc000117 	ldw	r16,4(sp)
   183c4:	dec00404 	addi	sp,sp,16
   183c8:	00184641 	jmpi	18464 <__swbuf_r>

000183cc <strlen>:
   183cc:	208000cc 	andi	r2,r4,3
   183d0:	10002026 	beq	r2,zero,18454 <strlen+0x88>
   183d4:	20800007 	ldb	r2,0(r4)
   183d8:	10002026 	beq	r2,zero,1845c <strlen+0x90>
   183dc:	2005883a 	mov	r2,r4
   183e0:	00000206 	br	183ec <strlen+0x20>
   183e4:	10c00007 	ldb	r3,0(r2)
   183e8:	18001826 	beq	r3,zero,1844c <strlen+0x80>
   183ec:	10800044 	addi	r2,r2,1
   183f0:	10c000cc 	andi	r3,r2,3
   183f4:	183ffb1e 	bne	r3,zero,183e4 <_gp+0xffff3b34>
   183f8:	10c00017 	ldw	r3,0(r2)
   183fc:	01ffbff4 	movhi	r7,65279
   18400:	39ffbfc4 	addi	r7,r7,-257
   18404:	00ca303a 	nor	r5,zero,r3
   18408:	01a02074 	movhi	r6,32897
   1840c:	19c7883a 	add	r3,r3,r7
   18410:	31a02004 	addi	r6,r6,-32640
   18414:	1946703a 	and	r3,r3,r5
   18418:	1986703a 	and	r3,r3,r6
   1841c:	1800091e 	bne	r3,zero,18444 <strlen+0x78>
   18420:	10800104 	addi	r2,r2,4
   18424:	10c00017 	ldw	r3,0(r2)
   18428:	19cb883a 	add	r5,r3,r7
   1842c:	00c6303a 	nor	r3,zero,r3
   18430:	28c6703a 	and	r3,r5,r3
   18434:	1986703a 	and	r3,r3,r6
   18438:	183ff926 	beq	r3,zero,18420 <_gp+0xffff3b70>
   1843c:	00000106 	br	18444 <strlen+0x78>
   18440:	10800044 	addi	r2,r2,1
   18444:	10c00007 	ldb	r3,0(r2)
   18448:	183ffd1e 	bne	r3,zero,18440 <_gp+0xffff3b90>
   1844c:	1105c83a 	sub	r2,r2,r4
   18450:	f800283a 	ret
   18454:	2005883a 	mov	r2,r4
   18458:	003fe706 	br	183f8 <_gp+0xffff3b48>
   1845c:	0005883a 	mov	r2,zero
   18460:	f800283a 	ret

00018464 <__swbuf_r>:
   18464:	defffb04 	addi	sp,sp,-20
   18468:	dcc00315 	stw	r19,12(sp)
   1846c:	dc800215 	stw	r18,8(sp)
   18470:	dc000015 	stw	r16,0(sp)
   18474:	dfc00415 	stw	ra,16(sp)
   18478:	dc400115 	stw	r17,4(sp)
   1847c:	2025883a 	mov	r18,r4
   18480:	2827883a 	mov	r19,r5
   18484:	3021883a 	mov	r16,r6
   18488:	20000226 	beq	r4,zero,18494 <__swbuf_r+0x30>
   1848c:	20800e17 	ldw	r2,56(r4)
   18490:	10004226 	beq	r2,zero,1859c <__swbuf_r+0x138>
   18494:	80800617 	ldw	r2,24(r16)
   18498:	8100030b 	ldhu	r4,12(r16)
   1849c:	80800215 	stw	r2,8(r16)
   184a0:	2080020c 	andi	r2,r4,8
   184a4:	10003626 	beq	r2,zero,18580 <__swbuf_r+0x11c>
   184a8:	80c00417 	ldw	r3,16(r16)
   184ac:	18003426 	beq	r3,zero,18580 <__swbuf_r+0x11c>
   184b0:	2088000c 	andi	r2,r4,8192
   184b4:	9c403fcc 	andi	r17,r19,255
   184b8:	10001a26 	beq	r2,zero,18524 <__swbuf_r+0xc0>
   184bc:	80800017 	ldw	r2,0(r16)
   184c0:	81000517 	ldw	r4,20(r16)
   184c4:	10c7c83a 	sub	r3,r2,r3
   184c8:	1900200e 	bge	r3,r4,1854c <__swbuf_r+0xe8>
   184cc:	18c00044 	addi	r3,r3,1
   184d0:	81000217 	ldw	r4,8(r16)
   184d4:	11400044 	addi	r5,r2,1
   184d8:	81400015 	stw	r5,0(r16)
   184dc:	213fffc4 	addi	r4,r4,-1
   184e0:	81000215 	stw	r4,8(r16)
   184e4:	14c00005 	stb	r19,0(r2)
   184e8:	80800517 	ldw	r2,20(r16)
   184ec:	10c01e26 	beq	r2,r3,18568 <__swbuf_r+0x104>
   184f0:	8080030b 	ldhu	r2,12(r16)
   184f4:	1080004c 	andi	r2,r2,1
   184f8:	10000226 	beq	r2,zero,18504 <__swbuf_r+0xa0>
   184fc:	00800284 	movi	r2,10
   18500:	88801926 	beq	r17,r2,18568 <__swbuf_r+0x104>
   18504:	8805883a 	mov	r2,r17
   18508:	dfc00417 	ldw	ra,16(sp)
   1850c:	dcc00317 	ldw	r19,12(sp)
   18510:	dc800217 	ldw	r18,8(sp)
   18514:	dc400117 	ldw	r17,4(sp)
   18518:	dc000017 	ldw	r16,0(sp)
   1851c:	dec00504 	addi	sp,sp,20
   18520:	f800283a 	ret
   18524:	81401917 	ldw	r5,100(r16)
   18528:	00b7ffc4 	movi	r2,-8193
   1852c:	21080014 	ori	r4,r4,8192
   18530:	2884703a 	and	r2,r5,r2
   18534:	80801915 	stw	r2,100(r16)
   18538:	80800017 	ldw	r2,0(r16)
   1853c:	8100030d 	sth	r4,12(r16)
   18540:	81000517 	ldw	r4,20(r16)
   18544:	10c7c83a 	sub	r3,r2,r3
   18548:	193fe016 	blt	r3,r4,184cc <_gp+0xffff3c1c>
   1854c:	800b883a 	mov	r5,r16
   18550:	9009883a 	mov	r4,r18
   18554:	0018bc40 	call	18bc4 <_fflush_r>
   18558:	1000071e 	bne	r2,zero,18578 <__swbuf_r+0x114>
   1855c:	80800017 	ldw	r2,0(r16)
   18560:	00c00044 	movi	r3,1
   18564:	003fda06 	br	184d0 <_gp+0xffff3c20>
   18568:	800b883a 	mov	r5,r16
   1856c:	9009883a 	mov	r4,r18
   18570:	0018bc40 	call	18bc4 <_fflush_r>
   18574:	103fe326 	beq	r2,zero,18504 <_gp+0xffff3c54>
   18578:	00bfffc4 	movi	r2,-1
   1857c:	003fe206 	br	18508 <_gp+0xffff3c58>
   18580:	800b883a 	mov	r5,r16
   18584:	9009883a 	mov	r4,r18
   18588:	00185bc0 	call	185bc <__swsetup_r>
   1858c:	103ffa1e 	bne	r2,zero,18578 <_gp+0xffff3cc8>
   18590:	8100030b 	ldhu	r4,12(r16)
   18594:	80c00417 	ldw	r3,16(r16)
   18598:	003fc506 	br	184b0 <_gp+0xffff3c00>
   1859c:	0018fb00 	call	18fb0 <__sinit>
   185a0:	003fbc06 	br	18494 <_gp+0xffff3be4>

000185a4 <__swbuf>:
   185a4:	008000b4 	movhi	r2,2
   185a8:	10b22f04 	addi	r2,r2,-14148
   185ac:	280d883a 	mov	r6,r5
   185b0:	200b883a 	mov	r5,r4
   185b4:	11000017 	ldw	r4,0(r2)
   185b8:	00184641 	jmpi	18464 <__swbuf_r>

000185bc <__swsetup_r>:
   185bc:	008000b4 	movhi	r2,2
   185c0:	defffd04 	addi	sp,sp,-12
   185c4:	10b22f04 	addi	r2,r2,-14148
   185c8:	dc400115 	stw	r17,4(sp)
   185cc:	2023883a 	mov	r17,r4
   185d0:	11000017 	ldw	r4,0(r2)
   185d4:	dc000015 	stw	r16,0(sp)
   185d8:	dfc00215 	stw	ra,8(sp)
   185dc:	2821883a 	mov	r16,r5
   185e0:	20000226 	beq	r4,zero,185ec <__swsetup_r+0x30>
   185e4:	20800e17 	ldw	r2,56(r4)
   185e8:	10003126 	beq	r2,zero,186b0 <__swsetup_r+0xf4>
   185ec:	8080030b 	ldhu	r2,12(r16)
   185f0:	10c0020c 	andi	r3,r2,8
   185f4:	1009883a 	mov	r4,r2
   185f8:	18000f26 	beq	r3,zero,18638 <__swsetup_r+0x7c>
   185fc:	80c00417 	ldw	r3,16(r16)
   18600:	18001526 	beq	r3,zero,18658 <__swsetup_r+0x9c>
   18604:	1100004c 	andi	r4,r2,1
   18608:	20001c1e 	bne	r4,zero,1867c <__swsetup_r+0xc0>
   1860c:	1080008c 	andi	r2,r2,2
   18610:	1000291e 	bne	r2,zero,186b8 <__swsetup_r+0xfc>
   18614:	80800517 	ldw	r2,20(r16)
   18618:	80800215 	stw	r2,8(r16)
   1861c:	18001c26 	beq	r3,zero,18690 <__swsetup_r+0xd4>
   18620:	0005883a 	mov	r2,zero
   18624:	dfc00217 	ldw	ra,8(sp)
   18628:	dc400117 	ldw	r17,4(sp)
   1862c:	dc000017 	ldw	r16,0(sp)
   18630:	dec00304 	addi	sp,sp,12
   18634:	f800283a 	ret
   18638:	2080040c 	andi	r2,r4,16
   1863c:	10002e26 	beq	r2,zero,186f8 <__swsetup_r+0x13c>
   18640:	2080010c 	andi	r2,r4,4
   18644:	10001e1e 	bne	r2,zero,186c0 <__swsetup_r+0x104>
   18648:	80c00417 	ldw	r3,16(r16)
   1864c:	20800214 	ori	r2,r4,8
   18650:	8080030d 	sth	r2,12(r16)
   18654:	183feb1e 	bne	r3,zero,18604 <_gp+0xffff3d54>
   18658:	1100a00c 	andi	r4,r2,640
   1865c:	01408004 	movi	r5,512
   18660:	217fe826 	beq	r4,r5,18604 <_gp+0xffff3d54>
   18664:	800b883a 	mov	r5,r16
   18668:	8809883a 	mov	r4,r17
   1866c:	00195bc0 	call	195bc <__smakebuf_r>
   18670:	8080030b 	ldhu	r2,12(r16)
   18674:	80c00417 	ldw	r3,16(r16)
   18678:	003fe206 	br	18604 <_gp+0xffff3d54>
   1867c:	80800517 	ldw	r2,20(r16)
   18680:	80000215 	stw	zero,8(r16)
   18684:	0085c83a 	sub	r2,zero,r2
   18688:	80800615 	stw	r2,24(r16)
   1868c:	183fe41e 	bne	r3,zero,18620 <_gp+0xffff3d70>
   18690:	80c0030b 	ldhu	r3,12(r16)
   18694:	0005883a 	mov	r2,zero
   18698:	1900200c 	andi	r4,r3,128
   1869c:	203fe126 	beq	r4,zero,18624 <_gp+0xffff3d74>
   186a0:	18c01014 	ori	r3,r3,64
   186a4:	80c0030d 	sth	r3,12(r16)
   186a8:	00bfffc4 	movi	r2,-1
   186ac:	003fdd06 	br	18624 <_gp+0xffff3d74>
   186b0:	0018fb00 	call	18fb0 <__sinit>
   186b4:	003fcd06 	br	185ec <_gp+0xffff3d3c>
   186b8:	0005883a 	mov	r2,zero
   186bc:	003fd606 	br	18618 <_gp+0xffff3d68>
   186c0:	81400c17 	ldw	r5,48(r16)
   186c4:	28000626 	beq	r5,zero,186e0 <__swsetup_r+0x124>
   186c8:	80801004 	addi	r2,r16,64
   186cc:	28800326 	beq	r5,r2,186dc <__swsetup_r+0x120>
   186d0:	8809883a 	mov	r4,r17
   186d4:	00191240 	call	19124 <_free_r>
   186d8:	8100030b 	ldhu	r4,12(r16)
   186dc:	80000c15 	stw	zero,48(r16)
   186e0:	80c00417 	ldw	r3,16(r16)
   186e4:	00bff6c4 	movi	r2,-37
   186e8:	1108703a 	and	r4,r2,r4
   186ec:	80000115 	stw	zero,4(r16)
   186f0:	80c00015 	stw	r3,0(r16)
   186f4:	003fd506 	br	1864c <_gp+0xffff3d9c>
   186f8:	00800244 	movi	r2,9
   186fc:	88800015 	stw	r2,0(r17)
   18700:	20801014 	ori	r2,r4,64
   18704:	8080030d 	sth	r2,12(r16)
   18708:	00bfffc4 	movi	r2,-1
   1870c:	003fc506 	br	18624 <_gp+0xffff3d74>

00018710 <__register_exitproc>:
   18710:	defffa04 	addi	sp,sp,-24
   18714:	dc000315 	stw	r16,12(sp)
   18718:	040000b4 	movhi	r16,2
   1871c:	84322e04 	addi	r16,r16,-14152
   18720:	80c00017 	ldw	r3,0(r16)
   18724:	dc400415 	stw	r17,16(sp)
   18728:	dfc00515 	stw	ra,20(sp)
   1872c:	18805217 	ldw	r2,328(r3)
   18730:	2023883a 	mov	r17,r4
   18734:	10003726 	beq	r2,zero,18814 <__register_exitproc+0x104>
   18738:	10c00117 	ldw	r3,4(r2)
   1873c:	010007c4 	movi	r4,31
   18740:	20c00e16 	blt	r4,r3,1877c <__register_exitproc+0x6c>
   18744:	1a000044 	addi	r8,r3,1
   18748:	8800221e 	bne	r17,zero,187d4 <__register_exitproc+0xc4>
   1874c:	18c00084 	addi	r3,r3,2
   18750:	18c7883a 	add	r3,r3,r3
   18754:	18c7883a 	add	r3,r3,r3
   18758:	12000115 	stw	r8,4(r2)
   1875c:	10c7883a 	add	r3,r2,r3
   18760:	19400015 	stw	r5,0(r3)
   18764:	0005883a 	mov	r2,zero
   18768:	dfc00517 	ldw	ra,20(sp)
   1876c:	dc400417 	ldw	r17,16(sp)
   18770:	dc000317 	ldw	r16,12(sp)
   18774:	dec00604 	addi	sp,sp,24
   18778:	f800283a 	ret
   1877c:	00800034 	movhi	r2,0
   18780:	10800004 	addi	r2,r2,0
   18784:	10002626 	beq	r2,zero,18820 <__register_exitproc+0x110>
   18788:	01006404 	movi	r4,400
   1878c:	d9400015 	stw	r5,0(sp)
   18790:	d9800115 	stw	r6,4(sp)
   18794:	d9c00215 	stw	r7,8(sp)
   18798:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   1879c:	d9400017 	ldw	r5,0(sp)
   187a0:	d9800117 	ldw	r6,4(sp)
   187a4:	d9c00217 	ldw	r7,8(sp)
   187a8:	10001d26 	beq	r2,zero,18820 <__register_exitproc+0x110>
   187ac:	81000017 	ldw	r4,0(r16)
   187b0:	10000115 	stw	zero,4(r2)
   187b4:	02000044 	movi	r8,1
   187b8:	22405217 	ldw	r9,328(r4)
   187bc:	0007883a 	mov	r3,zero
   187c0:	12400015 	stw	r9,0(r2)
   187c4:	20805215 	stw	r2,328(r4)
   187c8:	10006215 	stw	zero,392(r2)
   187cc:	10006315 	stw	zero,396(r2)
   187d0:	883fde26 	beq	r17,zero,1874c <_gp+0xffff3e9c>
   187d4:	18c9883a 	add	r4,r3,r3
   187d8:	2109883a 	add	r4,r4,r4
   187dc:	1109883a 	add	r4,r2,r4
   187e0:	21802215 	stw	r6,136(r4)
   187e4:	01800044 	movi	r6,1
   187e8:	12406217 	ldw	r9,392(r2)
   187ec:	30cc983a 	sll	r6,r6,r3
   187f0:	4992b03a 	or	r9,r9,r6
   187f4:	12406215 	stw	r9,392(r2)
   187f8:	21c04215 	stw	r7,264(r4)
   187fc:	01000084 	movi	r4,2
   18800:	893fd21e 	bne	r17,r4,1874c <_gp+0xffff3e9c>
   18804:	11006317 	ldw	r4,396(r2)
   18808:	218cb03a 	or	r6,r4,r6
   1880c:	11806315 	stw	r6,396(r2)
   18810:	003fce06 	br	1874c <_gp+0xffff3e9c>
   18814:	18805304 	addi	r2,r3,332
   18818:	18805215 	stw	r2,328(r3)
   1881c:	003fc606 	br	18738 <_gp+0xffff3e88>
   18820:	00bfffc4 	movi	r2,-1
   18824:	003fd006 	br	18768 <_gp+0xffff3eb8>

00018828 <__call_exitprocs>:
   18828:	defff504 	addi	sp,sp,-44
   1882c:	df000915 	stw	fp,36(sp)
   18830:	dd400615 	stw	r21,24(sp)
   18834:	dc800315 	stw	r18,12(sp)
   18838:	dfc00a15 	stw	ra,40(sp)
   1883c:	ddc00815 	stw	r23,32(sp)
   18840:	dd800715 	stw	r22,28(sp)
   18844:	dd000515 	stw	r20,20(sp)
   18848:	dcc00415 	stw	r19,16(sp)
   1884c:	dc400215 	stw	r17,8(sp)
   18850:	dc000115 	stw	r16,4(sp)
   18854:	d9000015 	stw	r4,0(sp)
   18858:	2839883a 	mov	fp,r5
   1885c:	04800044 	movi	r18,1
   18860:	057fffc4 	movi	r21,-1
   18864:	008000b4 	movhi	r2,2
   18868:	10b22e04 	addi	r2,r2,-14152
   1886c:	12000017 	ldw	r8,0(r2)
   18870:	45005217 	ldw	r20,328(r8)
   18874:	44c05204 	addi	r19,r8,328
   18878:	a0001c26 	beq	r20,zero,188ec <__call_exitprocs+0xc4>
   1887c:	a0800117 	ldw	r2,4(r20)
   18880:	15ffffc4 	addi	r23,r2,-1
   18884:	b8000d16 	blt	r23,zero,188bc <__call_exitprocs+0x94>
   18888:	14000044 	addi	r16,r2,1
   1888c:	8421883a 	add	r16,r16,r16
   18890:	8421883a 	add	r16,r16,r16
   18894:	84402004 	addi	r17,r16,128
   18898:	a463883a 	add	r17,r20,r17
   1889c:	a421883a 	add	r16,r20,r16
   188a0:	e0001e26 	beq	fp,zero,1891c <__call_exitprocs+0xf4>
   188a4:	80804017 	ldw	r2,256(r16)
   188a8:	e0801c26 	beq	fp,r2,1891c <__call_exitprocs+0xf4>
   188ac:	bdffffc4 	addi	r23,r23,-1
   188b0:	843fff04 	addi	r16,r16,-4
   188b4:	8c7fff04 	addi	r17,r17,-4
   188b8:	bd7ff91e 	bne	r23,r21,188a0 <_gp+0xffff3ff0>
   188bc:	00800034 	movhi	r2,0
   188c0:	10800004 	addi	r2,r2,0
   188c4:	10000926 	beq	r2,zero,188ec <__call_exitprocs+0xc4>
   188c8:	a0800117 	ldw	r2,4(r20)
   188cc:	1000301e 	bne	r2,zero,18990 <__call_exitprocs+0x168>
   188d0:	a0800017 	ldw	r2,0(r20)
   188d4:	10003226 	beq	r2,zero,189a0 <__call_exitprocs+0x178>
   188d8:	a009883a 	mov	r4,r20
   188dc:	98800015 	stw	r2,0(r19)
   188e0:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   188e4:	9d000017 	ldw	r20,0(r19)
   188e8:	a03fe41e 	bne	r20,zero,1887c <_gp+0xffff3fcc>
   188ec:	dfc00a17 	ldw	ra,40(sp)
   188f0:	df000917 	ldw	fp,36(sp)
   188f4:	ddc00817 	ldw	r23,32(sp)
   188f8:	dd800717 	ldw	r22,28(sp)
   188fc:	dd400617 	ldw	r21,24(sp)
   18900:	dd000517 	ldw	r20,20(sp)
   18904:	dcc00417 	ldw	r19,16(sp)
   18908:	dc800317 	ldw	r18,12(sp)
   1890c:	dc400217 	ldw	r17,8(sp)
   18910:	dc000117 	ldw	r16,4(sp)
   18914:	dec00b04 	addi	sp,sp,44
   18918:	f800283a 	ret
   1891c:	a0800117 	ldw	r2,4(r20)
   18920:	80c00017 	ldw	r3,0(r16)
   18924:	10bfffc4 	addi	r2,r2,-1
   18928:	15c01426 	beq	r2,r23,1897c <__call_exitprocs+0x154>
   1892c:	80000015 	stw	zero,0(r16)
   18930:	183fde26 	beq	r3,zero,188ac <_gp+0xffff3ffc>
   18934:	95c8983a 	sll	r4,r18,r23
   18938:	a0806217 	ldw	r2,392(r20)
   1893c:	a5800117 	ldw	r22,4(r20)
   18940:	2084703a 	and	r2,r4,r2
   18944:	10000b26 	beq	r2,zero,18974 <__call_exitprocs+0x14c>
   18948:	a0806317 	ldw	r2,396(r20)
   1894c:	2088703a 	and	r4,r4,r2
   18950:	20000c1e 	bne	r4,zero,18984 <__call_exitprocs+0x15c>
   18954:	89400017 	ldw	r5,0(r17)
   18958:	d9000017 	ldw	r4,0(sp)
   1895c:	183ee83a 	callr	r3
   18960:	a0800117 	ldw	r2,4(r20)
   18964:	15bfbf1e 	bne	r2,r22,18864 <_gp+0xffff3fb4>
   18968:	98800017 	ldw	r2,0(r19)
   1896c:	153fcf26 	beq	r2,r20,188ac <_gp+0xffff3ffc>
   18970:	003fbc06 	br	18864 <_gp+0xffff3fb4>
   18974:	183ee83a 	callr	r3
   18978:	003ff906 	br	18960 <_gp+0xffff40b0>
   1897c:	a5c00115 	stw	r23,4(r20)
   18980:	003feb06 	br	18930 <_gp+0xffff4080>
   18984:	89000017 	ldw	r4,0(r17)
   18988:	183ee83a 	callr	r3
   1898c:	003ff406 	br	18960 <_gp+0xffff40b0>
   18990:	a0800017 	ldw	r2,0(r20)
   18994:	a027883a 	mov	r19,r20
   18998:	1029883a 	mov	r20,r2
   1899c:	003fb606 	br	18878 <_gp+0xffff3fc8>
   189a0:	0005883a 	mov	r2,zero
   189a4:	003ffb06 	br	18994 <_gp+0xffff40e4>

000189a8 <__sflush_r>:
   189a8:	2880030b 	ldhu	r2,12(r5)
   189ac:	defffb04 	addi	sp,sp,-20
   189b0:	dcc00315 	stw	r19,12(sp)
   189b4:	dc400115 	stw	r17,4(sp)
   189b8:	dfc00415 	stw	ra,16(sp)
   189bc:	dc800215 	stw	r18,8(sp)
   189c0:	dc000015 	stw	r16,0(sp)
   189c4:	10c0020c 	andi	r3,r2,8
   189c8:	2823883a 	mov	r17,r5
   189cc:	2027883a 	mov	r19,r4
   189d0:	1800311e 	bne	r3,zero,18a98 <__sflush_r+0xf0>
   189d4:	28c00117 	ldw	r3,4(r5)
   189d8:	10820014 	ori	r2,r2,2048
   189dc:	2880030d 	sth	r2,12(r5)
   189e0:	00c04b0e 	bge	zero,r3,18b10 <__sflush_r+0x168>
   189e4:	8a000a17 	ldw	r8,40(r17)
   189e8:	40002326 	beq	r8,zero,18a78 <__sflush_r+0xd0>
   189ec:	9c000017 	ldw	r16,0(r19)
   189f0:	10c4000c 	andi	r3,r2,4096
   189f4:	98000015 	stw	zero,0(r19)
   189f8:	18004826 	beq	r3,zero,18b1c <__sflush_r+0x174>
   189fc:	89801417 	ldw	r6,80(r17)
   18a00:	10c0010c 	andi	r3,r2,4
   18a04:	18000626 	beq	r3,zero,18a20 <__sflush_r+0x78>
   18a08:	88c00117 	ldw	r3,4(r17)
   18a0c:	88800c17 	ldw	r2,48(r17)
   18a10:	30cdc83a 	sub	r6,r6,r3
   18a14:	10000226 	beq	r2,zero,18a20 <__sflush_r+0x78>
   18a18:	88800f17 	ldw	r2,60(r17)
   18a1c:	308dc83a 	sub	r6,r6,r2
   18a20:	89400717 	ldw	r5,28(r17)
   18a24:	000f883a 	mov	r7,zero
   18a28:	9809883a 	mov	r4,r19
   18a2c:	403ee83a 	callr	r8
   18a30:	00ffffc4 	movi	r3,-1
   18a34:	10c04426 	beq	r2,r3,18b48 <__sflush_r+0x1a0>
   18a38:	88c0030b 	ldhu	r3,12(r17)
   18a3c:	89000417 	ldw	r4,16(r17)
   18a40:	88000115 	stw	zero,4(r17)
   18a44:	197dffcc 	andi	r5,r3,63487
   18a48:	8940030d 	sth	r5,12(r17)
   18a4c:	89000015 	stw	r4,0(r17)
   18a50:	18c4000c 	andi	r3,r3,4096
   18a54:	18002c1e 	bne	r3,zero,18b08 <__sflush_r+0x160>
   18a58:	89400c17 	ldw	r5,48(r17)
   18a5c:	9c000015 	stw	r16,0(r19)
   18a60:	28000526 	beq	r5,zero,18a78 <__sflush_r+0xd0>
   18a64:	88801004 	addi	r2,r17,64
   18a68:	28800226 	beq	r5,r2,18a74 <__sflush_r+0xcc>
   18a6c:	9809883a 	mov	r4,r19
   18a70:	00191240 	call	19124 <_free_r>
   18a74:	88000c15 	stw	zero,48(r17)
   18a78:	0005883a 	mov	r2,zero
   18a7c:	dfc00417 	ldw	ra,16(sp)
   18a80:	dcc00317 	ldw	r19,12(sp)
   18a84:	dc800217 	ldw	r18,8(sp)
   18a88:	dc400117 	ldw	r17,4(sp)
   18a8c:	dc000017 	ldw	r16,0(sp)
   18a90:	dec00504 	addi	sp,sp,20
   18a94:	f800283a 	ret
   18a98:	2c800417 	ldw	r18,16(r5)
   18a9c:	903ff626 	beq	r18,zero,18a78 <_gp+0xffff41c8>
   18aa0:	2c000017 	ldw	r16,0(r5)
   18aa4:	108000cc 	andi	r2,r2,3
   18aa8:	2c800015 	stw	r18,0(r5)
   18aac:	84a1c83a 	sub	r16,r16,r18
   18ab0:	1000131e 	bne	r2,zero,18b00 <__sflush_r+0x158>
   18ab4:	28800517 	ldw	r2,20(r5)
   18ab8:	88800215 	stw	r2,8(r17)
   18abc:	04000316 	blt	zero,r16,18acc <__sflush_r+0x124>
   18ac0:	003fed06 	br	18a78 <_gp+0xffff41c8>
   18ac4:	90a5883a 	add	r18,r18,r2
   18ac8:	043feb0e 	bge	zero,r16,18a78 <_gp+0xffff41c8>
   18acc:	88800917 	ldw	r2,36(r17)
   18ad0:	89400717 	ldw	r5,28(r17)
   18ad4:	800f883a 	mov	r7,r16
   18ad8:	900d883a 	mov	r6,r18
   18adc:	9809883a 	mov	r4,r19
   18ae0:	103ee83a 	callr	r2
   18ae4:	80a1c83a 	sub	r16,r16,r2
   18ae8:	00bff616 	blt	zero,r2,18ac4 <_gp+0xffff4214>
   18aec:	88c0030b 	ldhu	r3,12(r17)
   18af0:	00bfffc4 	movi	r2,-1
   18af4:	18c01014 	ori	r3,r3,64
   18af8:	88c0030d 	sth	r3,12(r17)
   18afc:	003fdf06 	br	18a7c <_gp+0xffff41cc>
   18b00:	0005883a 	mov	r2,zero
   18b04:	003fec06 	br	18ab8 <_gp+0xffff4208>
   18b08:	88801415 	stw	r2,80(r17)
   18b0c:	003fd206 	br	18a58 <_gp+0xffff41a8>
   18b10:	28c00f17 	ldw	r3,60(r5)
   18b14:	00ffb316 	blt	zero,r3,189e4 <_gp+0xffff4134>
   18b18:	003fd706 	br	18a78 <_gp+0xffff41c8>
   18b1c:	89400717 	ldw	r5,28(r17)
   18b20:	000d883a 	mov	r6,zero
   18b24:	01c00044 	movi	r7,1
   18b28:	9809883a 	mov	r4,r19
   18b2c:	403ee83a 	callr	r8
   18b30:	100d883a 	mov	r6,r2
   18b34:	00bfffc4 	movi	r2,-1
   18b38:	30801426 	beq	r6,r2,18b8c <__sflush_r+0x1e4>
   18b3c:	8880030b 	ldhu	r2,12(r17)
   18b40:	8a000a17 	ldw	r8,40(r17)
   18b44:	003fae06 	br	18a00 <_gp+0xffff4150>
   18b48:	98c00017 	ldw	r3,0(r19)
   18b4c:	183fba26 	beq	r3,zero,18a38 <_gp+0xffff4188>
   18b50:	01000744 	movi	r4,29
   18b54:	19000626 	beq	r3,r4,18b70 <__sflush_r+0x1c8>
   18b58:	01000584 	movi	r4,22
   18b5c:	19000426 	beq	r3,r4,18b70 <__sflush_r+0x1c8>
   18b60:	88c0030b 	ldhu	r3,12(r17)
   18b64:	18c01014 	ori	r3,r3,64
   18b68:	88c0030d 	sth	r3,12(r17)
   18b6c:	003fc306 	br	18a7c <_gp+0xffff41cc>
   18b70:	8880030b 	ldhu	r2,12(r17)
   18b74:	88c00417 	ldw	r3,16(r17)
   18b78:	88000115 	stw	zero,4(r17)
   18b7c:	10bdffcc 	andi	r2,r2,63487
   18b80:	8880030d 	sth	r2,12(r17)
   18b84:	88c00015 	stw	r3,0(r17)
   18b88:	003fb306 	br	18a58 <_gp+0xffff41a8>
   18b8c:	98800017 	ldw	r2,0(r19)
   18b90:	103fea26 	beq	r2,zero,18b3c <_gp+0xffff428c>
   18b94:	00c00744 	movi	r3,29
   18b98:	10c00226 	beq	r2,r3,18ba4 <__sflush_r+0x1fc>
   18b9c:	00c00584 	movi	r3,22
   18ba0:	10c0031e 	bne	r2,r3,18bb0 <__sflush_r+0x208>
   18ba4:	9c000015 	stw	r16,0(r19)
   18ba8:	0005883a 	mov	r2,zero
   18bac:	003fb306 	br	18a7c <_gp+0xffff41cc>
   18bb0:	88c0030b 	ldhu	r3,12(r17)
   18bb4:	3005883a 	mov	r2,r6
   18bb8:	18c01014 	ori	r3,r3,64
   18bbc:	88c0030d 	sth	r3,12(r17)
   18bc0:	003fae06 	br	18a7c <_gp+0xffff41cc>

00018bc4 <_fflush_r>:
   18bc4:	defffd04 	addi	sp,sp,-12
   18bc8:	dc000115 	stw	r16,4(sp)
   18bcc:	dfc00215 	stw	ra,8(sp)
   18bd0:	2021883a 	mov	r16,r4
   18bd4:	20000226 	beq	r4,zero,18be0 <_fflush_r+0x1c>
   18bd8:	20800e17 	ldw	r2,56(r4)
   18bdc:	10000c26 	beq	r2,zero,18c10 <_fflush_r+0x4c>
   18be0:	2880030f 	ldh	r2,12(r5)
   18be4:	1000051e 	bne	r2,zero,18bfc <_fflush_r+0x38>
   18be8:	0005883a 	mov	r2,zero
   18bec:	dfc00217 	ldw	ra,8(sp)
   18bf0:	dc000117 	ldw	r16,4(sp)
   18bf4:	dec00304 	addi	sp,sp,12
   18bf8:	f800283a 	ret
   18bfc:	8009883a 	mov	r4,r16
   18c00:	dfc00217 	ldw	ra,8(sp)
   18c04:	dc000117 	ldw	r16,4(sp)
   18c08:	dec00304 	addi	sp,sp,12
   18c0c:	00189a81 	jmpi	189a8 <__sflush_r>
   18c10:	d9400015 	stw	r5,0(sp)
   18c14:	0018fb00 	call	18fb0 <__sinit>
   18c18:	d9400017 	ldw	r5,0(sp)
   18c1c:	003ff006 	br	18be0 <_gp+0xffff4330>

00018c20 <fflush>:
   18c20:	20000526 	beq	r4,zero,18c38 <fflush+0x18>
   18c24:	008000b4 	movhi	r2,2
   18c28:	10b22f04 	addi	r2,r2,-14148
   18c2c:	200b883a 	mov	r5,r4
   18c30:	11000017 	ldw	r4,0(r2)
   18c34:	0018bc41 	jmpi	18bc4 <_fflush_r>
   18c38:	008000b4 	movhi	r2,2
   18c3c:	10b22e04 	addi	r2,r2,-14152
   18c40:	11000017 	ldw	r4,0(r2)
   18c44:	014000b4 	movhi	r5,2
   18c48:	2962f104 	addi	r5,r5,-29756
   18c4c:	00194f81 	jmpi	194f8 <_fwalk_reent>

00018c50 <__fp_unlock>:
   18c50:	0005883a 	mov	r2,zero
   18c54:	f800283a 	ret

00018c58 <_cleanup_r>:
   18c58:	014000b4 	movhi	r5,2
   18c5c:	2968bc04 	addi	r5,r5,-23824
   18c60:	00194f81 	jmpi	194f8 <_fwalk_reent>

00018c64 <__sinit.part.1>:
   18c64:	defff704 	addi	sp,sp,-36
   18c68:	00c000b4 	movhi	r3,2
   18c6c:	dfc00815 	stw	ra,32(sp)
   18c70:	ddc00715 	stw	r23,28(sp)
   18c74:	dd800615 	stw	r22,24(sp)
   18c78:	dd400515 	stw	r21,20(sp)
   18c7c:	dd000415 	stw	r20,16(sp)
   18c80:	dcc00315 	stw	r19,12(sp)
   18c84:	dc800215 	stw	r18,8(sp)
   18c88:	dc400115 	stw	r17,4(sp)
   18c8c:	dc000015 	stw	r16,0(sp)
   18c90:	18e31604 	addi	r3,r3,-29608
   18c94:	24000117 	ldw	r16,4(r4)
   18c98:	20c00f15 	stw	r3,60(r4)
   18c9c:	2080bb04 	addi	r2,r4,748
   18ca0:	00c000c4 	movi	r3,3
   18ca4:	20c0b915 	stw	r3,740(r4)
   18ca8:	2080ba15 	stw	r2,744(r4)
   18cac:	2000b815 	stw	zero,736(r4)
   18cb0:	05c00204 	movi	r23,8
   18cb4:	00800104 	movi	r2,4
   18cb8:	2025883a 	mov	r18,r4
   18cbc:	b80d883a 	mov	r6,r23
   18cc0:	81001704 	addi	r4,r16,92
   18cc4:	000b883a 	mov	r5,zero
   18cc8:	80000015 	stw	zero,0(r16)
   18ccc:	80000115 	stw	zero,4(r16)
   18cd0:	80000215 	stw	zero,8(r16)
   18cd4:	8080030d 	sth	r2,12(r16)
   18cd8:	80001915 	stw	zero,100(r16)
   18cdc:	8000038d 	sth	zero,14(r16)
   18ce0:	80000415 	stw	zero,16(r16)
   18ce4:	80000515 	stw	zero,20(r16)
   18ce8:	80000615 	stw	zero,24(r16)
   18cec:	0019f840 	call	19f84 <memset>
   18cf0:	058000b4 	movhi	r22,2
   18cf4:	94400217 	ldw	r17,8(r18)
   18cf8:	054000b4 	movhi	r21,2
   18cfc:	050000b4 	movhi	r20,2
   18d00:	04c000b4 	movhi	r19,2
   18d04:	b5a84004 	addi	r22,r22,-24320
   18d08:	ad685704 	addi	r21,r21,-24228
   18d0c:	a5287604 	addi	r20,r20,-24104
   18d10:	9ce88d04 	addi	r19,r19,-24012
   18d14:	85800815 	stw	r22,32(r16)
   18d18:	85400915 	stw	r21,36(r16)
   18d1c:	85000a15 	stw	r20,40(r16)
   18d20:	84c00b15 	stw	r19,44(r16)
   18d24:	84000715 	stw	r16,28(r16)
   18d28:	00800284 	movi	r2,10
   18d2c:	8880030d 	sth	r2,12(r17)
   18d30:	00800044 	movi	r2,1
   18d34:	b80d883a 	mov	r6,r23
   18d38:	89001704 	addi	r4,r17,92
   18d3c:	000b883a 	mov	r5,zero
   18d40:	88000015 	stw	zero,0(r17)
   18d44:	88000115 	stw	zero,4(r17)
   18d48:	88000215 	stw	zero,8(r17)
   18d4c:	88001915 	stw	zero,100(r17)
   18d50:	8880038d 	sth	r2,14(r17)
   18d54:	88000415 	stw	zero,16(r17)
   18d58:	88000515 	stw	zero,20(r17)
   18d5c:	88000615 	stw	zero,24(r17)
   18d60:	0019f840 	call	19f84 <memset>
   18d64:	94000317 	ldw	r16,12(r18)
   18d68:	00800484 	movi	r2,18
   18d6c:	8c400715 	stw	r17,28(r17)
   18d70:	8d800815 	stw	r22,32(r17)
   18d74:	8d400915 	stw	r21,36(r17)
   18d78:	8d000a15 	stw	r20,40(r17)
   18d7c:	8cc00b15 	stw	r19,44(r17)
   18d80:	8080030d 	sth	r2,12(r16)
   18d84:	00800084 	movi	r2,2
   18d88:	80000015 	stw	zero,0(r16)
   18d8c:	80000115 	stw	zero,4(r16)
   18d90:	80000215 	stw	zero,8(r16)
   18d94:	80001915 	stw	zero,100(r16)
   18d98:	8080038d 	sth	r2,14(r16)
   18d9c:	80000415 	stw	zero,16(r16)
   18da0:	80000515 	stw	zero,20(r16)
   18da4:	80000615 	stw	zero,24(r16)
   18da8:	b80d883a 	mov	r6,r23
   18dac:	000b883a 	mov	r5,zero
   18db0:	81001704 	addi	r4,r16,92
   18db4:	0019f840 	call	19f84 <memset>
   18db8:	00800044 	movi	r2,1
   18dbc:	84000715 	stw	r16,28(r16)
   18dc0:	85800815 	stw	r22,32(r16)
   18dc4:	85400915 	stw	r21,36(r16)
   18dc8:	85000a15 	stw	r20,40(r16)
   18dcc:	84c00b15 	stw	r19,44(r16)
   18dd0:	90800e15 	stw	r2,56(r18)
   18dd4:	dfc00817 	ldw	ra,32(sp)
   18dd8:	ddc00717 	ldw	r23,28(sp)
   18ddc:	dd800617 	ldw	r22,24(sp)
   18de0:	dd400517 	ldw	r21,20(sp)
   18de4:	dd000417 	ldw	r20,16(sp)
   18de8:	dcc00317 	ldw	r19,12(sp)
   18dec:	dc800217 	ldw	r18,8(sp)
   18df0:	dc400117 	ldw	r17,4(sp)
   18df4:	dc000017 	ldw	r16,0(sp)
   18df8:	dec00904 	addi	sp,sp,36
   18dfc:	f800283a 	ret

00018e00 <__fp_lock>:
   18e00:	0005883a 	mov	r2,zero
   18e04:	f800283a 	ret

00018e08 <__sfmoreglue>:
   18e08:	defffc04 	addi	sp,sp,-16
   18e0c:	dc800215 	stw	r18,8(sp)
   18e10:	2825883a 	mov	r18,r5
   18e14:	dc000015 	stw	r16,0(sp)
   18e18:	01401a04 	movi	r5,104
   18e1c:	2021883a 	mov	r16,r4
   18e20:	913fffc4 	addi	r4,r18,-1
   18e24:	dfc00315 	stw	ra,12(sp)
   18e28:	dc400115 	stw	r17,4(sp)
   18e2c:	00127280 	call	12728 <__mulsi3>
   18e30:	8009883a 	mov	r4,r16
   18e34:	11401d04 	addi	r5,r2,116
   18e38:	1023883a 	mov	r17,r2
   18e3c:	00197780 	call	19778 <_malloc_r>
   18e40:	1021883a 	mov	r16,r2
   18e44:	10000726 	beq	r2,zero,18e64 <__sfmoreglue+0x5c>
   18e48:	11000304 	addi	r4,r2,12
   18e4c:	10000015 	stw	zero,0(r2)
   18e50:	14800115 	stw	r18,4(r2)
   18e54:	11000215 	stw	r4,8(r2)
   18e58:	89801a04 	addi	r6,r17,104
   18e5c:	000b883a 	mov	r5,zero
   18e60:	0019f840 	call	19f84 <memset>
   18e64:	8005883a 	mov	r2,r16
   18e68:	dfc00317 	ldw	ra,12(sp)
   18e6c:	dc800217 	ldw	r18,8(sp)
   18e70:	dc400117 	ldw	r17,4(sp)
   18e74:	dc000017 	ldw	r16,0(sp)
   18e78:	dec00404 	addi	sp,sp,16
   18e7c:	f800283a 	ret

00018e80 <__sfp>:
   18e80:	defffb04 	addi	sp,sp,-20
   18e84:	dc000015 	stw	r16,0(sp)
   18e88:	040000b4 	movhi	r16,2
   18e8c:	84322e04 	addi	r16,r16,-14152
   18e90:	dcc00315 	stw	r19,12(sp)
   18e94:	2027883a 	mov	r19,r4
   18e98:	81000017 	ldw	r4,0(r16)
   18e9c:	dfc00415 	stw	ra,16(sp)
   18ea0:	dc800215 	stw	r18,8(sp)
   18ea4:	20800e17 	ldw	r2,56(r4)
   18ea8:	dc400115 	stw	r17,4(sp)
   18eac:	1000021e 	bne	r2,zero,18eb8 <__sfp+0x38>
   18eb0:	0018c640 	call	18c64 <__sinit.part.1>
   18eb4:	81000017 	ldw	r4,0(r16)
   18eb8:	2480b804 	addi	r18,r4,736
   18ebc:	047fffc4 	movi	r17,-1
   18ec0:	91000117 	ldw	r4,4(r18)
   18ec4:	94000217 	ldw	r16,8(r18)
   18ec8:	213fffc4 	addi	r4,r4,-1
   18ecc:	20000a16 	blt	r4,zero,18ef8 <__sfp+0x78>
   18ed0:	8080030f 	ldh	r2,12(r16)
   18ed4:	10000c26 	beq	r2,zero,18f08 <__sfp+0x88>
   18ed8:	80c01d04 	addi	r3,r16,116
   18edc:	00000206 	br	18ee8 <__sfp+0x68>
   18ee0:	18bfe60f 	ldh	r2,-104(r3)
   18ee4:	10000826 	beq	r2,zero,18f08 <__sfp+0x88>
   18ee8:	213fffc4 	addi	r4,r4,-1
   18eec:	1c3ffd04 	addi	r16,r3,-12
   18ef0:	18c01a04 	addi	r3,r3,104
   18ef4:	247ffa1e 	bne	r4,r17,18ee0 <_gp+0xffff4630>
   18ef8:	90800017 	ldw	r2,0(r18)
   18efc:	10001d26 	beq	r2,zero,18f74 <__sfp+0xf4>
   18f00:	1025883a 	mov	r18,r2
   18f04:	003fee06 	br	18ec0 <_gp+0xffff4610>
   18f08:	00bfffc4 	movi	r2,-1
   18f0c:	8080038d 	sth	r2,14(r16)
   18f10:	00800044 	movi	r2,1
   18f14:	8080030d 	sth	r2,12(r16)
   18f18:	80001915 	stw	zero,100(r16)
   18f1c:	80000015 	stw	zero,0(r16)
   18f20:	80000215 	stw	zero,8(r16)
   18f24:	80000115 	stw	zero,4(r16)
   18f28:	80000415 	stw	zero,16(r16)
   18f2c:	80000515 	stw	zero,20(r16)
   18f30:	80000615 	stw	zero,24(r16)
   18f34:	01800204 	movi	r6,8
   18f38:	000b883a 	mov	r5,zero
   18f3c:	81001704 	addi	r4,r16,92
   18f40:	0019f840 	call	19f84 <memset>
   18f44:	8005883a 	mov	r2,r16
   18f48:	80000c15 	stw	zero,48(r16)
   18f4c:	80000d15 	stw	zero,52(r16)
   18f50:	80001115 	stw	zero,68(r16)
   18f54:	80001215 	stw	zero,72(r16)
   18f58:	dfc00417 	ldw	ra,16(sp)
   18f5c:	dcc00317 	ldw	r19,12(sp)
   18f60:	dc800217 	ldw	r18,8(sp)
   18f64:	dc400117 	ldw	r17,4(sp)
   18f68:	dc000017 	ldw	r16,0(sp)
   18f6c:	dec00504 	addi	sp,sp,20
   18f70:	f800283a 	ret
   18f74:	01400104 	movi	r5,4
   18f78:	9809883a 	mov	r4,r19
   18f7c:	0018e080 	call	18e08 <__sfmoreglue>
   18f80:	90800015 	stw	r2,0(r18)
   18f84:	103fde1e 	bne	r2,zero,18f00 <_gp+0xffff4650>
   18f88:	00800304 	movi	r2,12
   18f8c:	98800015 	stw	r2,0(r19)
   18f90:	0005883a 	mov	r2,zero
   18f94:	003ff006 	br	18f58 <_gp+0xffff46a8>

00018f98 <_cleanup>:
   18f98:	008000b4 	movhi	r2,2
   18f9c:	10b22e04 	addi	r2,r2,-14152
   18fa0:	11000017 	ldw	r4,0(r2)
   18fa4:	014000b4 	movhi	r5,2
   18fa8:	2968bc04 	addi	r5,r5,-23824
   18fac:	00194f81 	jmpi	194f8 <_fwalk_reent>

00018fb0 <__sinit>:
   18fb0:	20800e17 	ldw	r2,56(r4)
   18fb4:	10000126 	beq	r2,zero,18fbc <__sinit+0xc>
   18fb8:	f800283a 	ret
   18fbc:	0018c641 	jmpi	18c64 <__sinit.part.1>

00018fc0 <__sfp_lock_acquire>:
   18fc0:	f800283a 	ret

00018fc4 <__sfp_lock_release>:
   18fc4:	f800283a 	ret

00018fc8 <__sinit_lock_acquire>:
   18fc8:	f800283a 	ret

00018fcc <__sinit_lock_release>:
   18fcc:	f800283a 	ret

00018fd0 <__fp_lock_all>:
   18fd0:	008000b4 	movhi	r2,2
   18fd4:	10b22f04 	addi	r2,r2,-14148
   18fd8:	11000017 	ldw	r4,0(r2)
   18fdc:	014000b4 	movhi	r5,2
   18fe0:	29638004 	addi	r5,r5,-29184
   18fe4:	00194341 	jmpi	19434 <_fwalk>

00018fe8 <__fp_unlock_all>:
   18fe8:	008000b4 	movhi	r2,2
   18fec:	10b22f04 	addi	r2,r2,-14148
   18ff0:	11000017 	ldw	r4,0(r2)
   18ff4:	014000b4 	movhi	r5,2
   18ff8:	29631404 	addi	r5,r5,-29616
   18ffc:	00194341 	jmpi	19434 <_fwalk>

00019000 <_malloc_trim_r>:
   19000:	defffb04 	addi	sp,sp,-20
   19004:	dcc00315 	stw	r19,12(sp)
   19008:	04c000b4 	movhi	r19,2
   1900c:	dc800215 	stw	r18,8(sp)
   19010:	dc400115 	stw	r17,4(sp)
   19014:	dc000015 	stw	r16,0(sp)
   19018:	dfc00415 	stw	ra,16(sp)
   1901c:	2821883a 	mov	r16,r5
   19020:	9cf12a04 	addi	r19,r19,-15192
   19024:	2025883a 	mov	r18,r4
   19028:	001a88c0 	call	1a88c <__malloc_lock>
   1902c:	98800217 	ldw	r2,8(r19)
   19030:	14400117 	ldw	r17,4(r2)
   19034:	00bfff04 	movi	r2,-4
   19038:	88a2703a 	and	r17,r17,r2
   1903c:	8c21c83a 	sub	r16,r17,r16
   19040:	8403fbc4 	addi	r16,r16,4079
   19044:	8020d33a 	srli	r16,r16,12
   19048:	0083ffc4 	movi	r2,4095
   1904c:	843fffc4 	addi	r16,r16,-1
   19050:	8020933a 	slli	r16,r16,12
   19054:	1400060e 	bge	r2,r16,19070 <_malloc_trim_r+0x70>
   19058:	000b883a 	mov	r5,zero
   1905c:	9009883a 	mov	r4,r18
   19060:	001a0ac0 	call	1a0ac <_sbrk_r>
   19064:	98c00217 	ldw	r3,8(r19)
   19068:	1c47883a 	add	r3,r3,r17
   1906c:	10c00a26 	beq	r2,r3,19098 <_malloc_trim_r+0x98>
   19070:	9009883a 	mov	r4,r18
   19074:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19078:	0005883a 	mov	r2,zero
   1907c:	dfc00417 	ldw	ra,16(sp)
   19080:	dcc00317 	ldw	r19,12(sp)
   19084:	dc800217 	ldw	r18,8(sp)
   19088:	dc400117 	ldw	r17,4(sp)
   1908c:	dc000017 	ldw	r16,0(sp)
   19090:	dec00504 	addi	sp,sp,20
   19094:	f800283a 	ret
   19098:	040bc83a 	sub	r5,zero,r16
   1909c:	9009883a 	mov	r4,r18
   190a0:	001a0ac0 	call	1a0ac <_sbrk_r>
   190a4:	00ffffc4 	movi	r3,-1
   190a8:	10c00d26 	beq	r2,r3,190e0 <_malloc_trim_r+0xe0>
   190ac:	00c000b4 	movhi	r3,2
   190b0:	18f8f204 	addi	r3,r3,-7224
   190b4:	18800017 	ldw	r2,0(r3)
   190b8:	99000217 	ldw	r4,8(r19)
   190bc:	8c23c83a 	sub	r17,r17,r16
   190c0:	8c400054 	ori	r17,r17,1
   190c4:	1421c83a 	sub	r16,r2,r16
   190c8:	24400115 	stw	r17,4(r4)
   190cc:	9009883a 	mov	r4,r18
   190d0:	1c000015 	stw	r16,0(r3)
   190d4:	001a8b00 	call	1a8b0 <__malloc_unlock>
   190d8:	00800044 	movi	r2,1
   190dc:	003fe706 	br	1907c <_gp+0xffff47cc>
   190e0:	000b883a 	mov	r5,zero
   190e4:	9009883a 	mov	r4,r18
   190e8:	001a0ac0 	call	1a0ac <_sbrk_r>
   190ec:	99000217 	ldw	r4,8(r19)
   190f0:	014003c4 	movi	r5,15
   190f4:	1107c83a 	sub	r3,r2,r4
   190f8:	28ffdd0e 	bge	r5,r3,19070 <_gp+0xffff47c0>
   190fc:	014000b4 	movhi	r5,2
   19100:	29723904 	addi	r5,r5,-14108
   19104:	29400017 	ldw	r5,0(r5)
   19108:	18c00054 	ori	r3,r3,1
   1910c:	20c00115 	stw	r3,4(r4)
   19110:	00c000b4 	movhi	r3,2
   19114:	1145c83a 	sub	r2,r2,r5
   19118:	18f8f204 	addi	r3,r3,-7224
   1911c:	18800015 	stw	r2,0(r3)
   19120:	003fd306 	br	19070 <_gp+0xffff47c0>

00019124 <_free_r>:
   19124:	28004126 	beq	r5,zero,1922c <_free_r+0x108>
   19128:	defffd04 	addi	sp,sp,-12
   1912c:	dc400115 	stw	r17,4(sp)
   19130:	dc000015 	stw	r16,0(sp)
   19134:	2023883a 	mov	r17,r4
   19138:	2821883a 	mov	r16,r5
   1913c:	dfc00215 	stw	ra,8(sp)
   19140:	001a88c0 	call	1a88c <__malloc_lock>
   19144:	81ffff17 	ldw	r7,-4(r16)
   19148:	00bfff84 	movi	r2,-2
   1914c:	010000b4 	movhi	r4,2
   19150:	81bffe04 	addi	r6,r16,-8
   19154:	3884703a 	and	r2,r7,r2
   19158:	21312a04 	addi	r4,r4,-15192
   1915c:	308b883a 	add	r5,r6,r2
   19160:	2a400117 	ldw	r9,4(r5)
   19164:	22000217 	ldw	r8,8(r4)
   19168:	00ffff04 	movi	r3,-4
   1916c:	48c6703a 	and	r3,r9,r3
   19170:	2a005726 	beq	r5,r8,192d0 <_free_r+0x1ac>
   19174:	28c00115 	stw	r3,4(r5)
   19178:	39c0004c 	andi	r7,r7,1
   1917c:	3800091e 	bne	r7,zero,191a4 <_free_r+0x80>
   19180:	823ffe17 	ldw	r8,-8(r16)
   19184:	22400204 	addi	r9,r4,8
   19188:	320dc83a 	sub	r6,r6,r8
   1918c:	31c00217 	ldw	r7,8(r6)
   19190:	1205883a 	add	r2,r2,r8
   19194:	3a406526 	beq	r7,r9,1932c <_free_r+0x208>
   19198:	32000317 	ldw	r8,12(r6)
   1919c:	3a000315 	stw	r8,12(r7)
   191a0:	41c00215 	stw	r7,8(r8)
   191a4:	28cf883a 	add	r7,r5,r3
   191a8:	39c00117 	ldw	r7,4(r7)
   191ac:	39c0004c 	andi	r7,r7,1
   191b0:	38003a26 	beq	r7,zero,1929c <_free_r+0x178>
   191b4:	10c00054 	ori	r3,r2,1
   191b8:	30c00115 	stw	r3,4(r6)
   191bc:	3087883a 	add	r3,r6,r2
   191c0:	18800015 	stw	r2,0(r3)
   191c4:	00c07fc4 	movi	r3,511
   191c8:	18801936 	bltu	r3,r2,19230 <_free_r+0x10c>
   191cc:	1004d0fa 	srli	r2,r2,3
   191d0:	01c00044 	movi	r7,1
   191d4:	21400117 	ldw	r5,4(r4)
   191d8:	10c00044 	addi	r3,r2,1
   191dc:	18c7883a 	add	r3,r3,r3
   191e0:	1005d0ba 	srai	r2,r2,2
   191e4:	18c7883a 	add	r3,r3,r3
   191e8:	18c7883a 	add	r3,r3,r3
   191ec:	1907883a 	add	r3,r3,r4
   191f0:	3884983a 	sll	r2,r7,r2
   191f4:	19c00017 	ldw	r7,0(r3)
   191f8:	1a3ffe04 	addi	r8,r3,-8
   191fc:	1144b03a 	or	r2,r2,r5
   19200:	32000315 	stw	r8,12(r6)
   19204:	31c00215 	stw	r7,8(r6)
   19208:	20800115 	stw	r2,4(r4)
   1920c:	19800015 	stw	r6,0(r3)
   19210:	39800315 	stw	r6,12(r7)
   19214:	8809883a 	mov	r4,r17
   19218:	dfc00217 	ldw	ra,8(sp)
   1921c:	dc400117 	ldw	r17,4(sp)
   19220:	dc000017 	ldw	r16,0(sp)
   19224:	dec00304 	addi	sp,sp,12
   19228:	001a8b01 	jmpi	1a8b0 <__malloc_unlock>
   1922c:	f800283a 	ret
   19230:	100ad27a 	srli	r5,r2,9
   19234:	00c00104 	movi	r3,4
   19238:	19404a36 	bltu	r3,r5,19364 <_free_r+0x240>
   1923c:	100ad1ba 	srli	r5,r2,6
   19240:	28c00e44 	addi	r3,r5,57
   19244:	18c7883a 	add	r3,r3,r3
   19248:	29400e04 	addi	r5,r5,56
   1924c:	18c7883a 	add	r3,r3,r3
   19250:	18c7883a 	add	r3,r3,r3
   19254:	1909883a 	add	r4,r3,r4
   19258:	20c00017 	ldw	r3,0(r4)
   1925c:	01c000b4 	movhi	r7,2
   19260:	213ffe04 	addi	r4,r4,-8
   19264:	39f12a04 	addi	r7,r7,-15192
   19268:	20c04426 	beq	r4,r3,1937c <_free_r+0x258>
   1926c:	01ffff04 	movi	r7,-4
   19270:	19400117 	ldw	r5,4(r3)
   19274:	29ca703a 	and	r5,r5,r7
   19278:	1140022e 	bgeu	r2,r5,19284 <_free_r+0x160>
   1927c:	18c00217 	ldw	r3,8(r3)
   19280:	20fffb1e 	bne	r4,r3,19270 <_gp+0xffff49c0>
   19284:	19000317 	ldw	r4,12(r3)
   19288:	31000315 	stw	r4,12(r6)
   1928c:	30c00215 	stw	r3,8(r6)
   19290:	21800215 	stw	r6,8(r4)
   19294:	19800315 	stw	r6,12(r3)
   19298:	003fde06 	br	19214 <_gp+0xffff4964>
   1929c:	29c00217 	ldw	r7,8(r5)
   192a0:	10c5883a 	add	r2,r2,r3
   192a4:	00c000b4 	movhi	r3,2
   192a8:	18f12c04 	addi	r3,r3,-15184
   192ac:	38c03b26 	beq	r7,r3,1939c <_free_r+0x278>
   192b0:	2a000317 	ldw	r8,12(r5)
   192b4:	11400054 	ori	r5,r2,1
   192b8:	3087883a 	add	r3,r6,r2
   192bc:	3a000315 	stw	r8,12(r7)
   192c0:	41c00215 	stw	r7,8(r8)
   192c4:	31400115 	stw	r5,4(r6)
   192c8:	18800015 	stw	r2,0(r3)
   192cc:	003fbd06 	br	191c4 <_gp+0xffff4914>
   192d0:	39c0004c 	andi	r7,r7,1
   192d4:	10c5883a 	add	r2,r2,r3
   192d8:	3800071e 	bne	r7,zero,192f8 <_free_r+0x1d4>
   192dc:	81fffe17 	ldw	r7,-8(r16)
   192e0:	31cdc83a 	sub	r6,r6,r7
   192e4:	30c00317 	ldw	r3,12(r6)
   192e8:	31400217 	ldw	r5,8(r6)
   192ec:	11c5883a 	add	r2,r2,r7
   192f0:	28c00315 	stw	r3,12(r5)
   192f4:	19400215 	stw	r5,8(r3)
   192f8:	10c00054 	ori	r3,r2,1
   192fc:	30c00115 	stw	r3,4(r6)
   19300:	00c000b4 	movhi	r3,2
   19304:	18f23a04 	addi	r3,r3,-14104
   19308:	18c00017 	ldw	r3,0(r3)
   1930c:	21800215 	stw	r6,8(r4)
   19310:	10ffc036 	bltu	r2,r3,19214 <_gp+0xffff4964>
   19314:	008000b4 	movhi	r2,2
   19318:	10b8f104 	addi	r2,r2,-7228
   1931c:	11400017 	ldw	r5,0(r2)
   19320:	8809883a 	mov	r4,r17
   19324:	00190000 	call	19000 <_malloc_trim_r>
   19328:	003fba06 	br	19214 <_gp+0xffff4964>
   1932c:	28c9883a 	add	r4,r5,r3
   19330:	21000117 	ldw	r4,4(r4)
   19334:	2100004c 	andi	r4,r4,1
   19338:	2000391e 	bne	r4,zero,19420 <_free_r+0x2fc>
   1933c:	29c00217 	ldw	r7,8(r5)
   19340:	29000317 	ldw	r4,12(r5)
   19344:	1885883a 	add	r2,r3,r2
   19348:	10c00054 	ori	r3,r2,1
   1934c:	39000315 	stw	r4,12(r7)
   19350:	21c00215 	stw	r7,8(r4)
   19354:	30c00115 	stw	r3,4(r6)
   19358:	308d883a 	add	r6,r6,r2
   1935c:	30800015 	stw	r2,0(r6)
   19360:	003fac06 	br	19214 <_gp+0xffff4964>
   19364:	00c00504 	movi	r3,20
   19368:	19401536 	bltu	r3,r5,193c0 <_free_r+0x29c>
   1936c:	28c01704 	addi	r3,r5,92
   19370:	18c7883a 	add	r3,r3,r3
   19374:	294016c4 	addi	r5,r5,91
   19378:	003fb406 	br	1924c <_gp+0xffff499c>
   1937c:	280bd0ba 	srai	r5,r5,2
   19380:	00c00044 	movi	r3,1
   19384:	38800117 	ldw	r2,4(r7)
   19388:	194a983a 	sll	r5,r3,r5
   1938c:	2007883a 	mov	r3,r4
   19390:	2884b03a 	or	r2,r5,r2
   19394:	38800115 	stw	r2,4(r7)
   19398:	003fbb06 	br	19288 <_gp+0xffff49d8>
   1939c:	21800515 	stw	r6,20(r4)
   193a0:	21800415 	stw	r6,16(r4)
   193a4:	10c00054 	ori	r3,r2,1
   193a8:	31c00315 	stw	r7,12(r6)
   193ac:	31c00215 	stw	r7,8(r6)
   193b0:	30c00115 	stw	r3,4(r6)
   193b4:	308d883a 	add	r6,r6,r2
   193b8:	30800015 	stw	r2,0(r6)
   193bc:	003f9506 	br	19214 <_gp+0xffff4964>
   193c0:	00c01504 	movi	r3,84
   193c4:	19400536 	bltu	r3,r5,193dc <_free_r+0x2b8>
   193c8:	100ad33a 	srli	r5,r2,12
   193cc:	28c01bc4 	addi	r3,r5,111
   193d0:	18c7883a 	add	r3,r3,r3
   193d4:	29401b84 	addi	r5,r5,110
   193d8:	003f9c06 	br	1924c <_gp+0xffff499c>
   193dc:	00c05504 	movi	r3,340
   193e0:	19400536 	bltu	r3,r5,193f8 <_free_r+0x2d4>
   193e4:	100ad3fa 	srli	r5,r2,15
   193e8:	28c01e04 	addi	r3,r5,120
   193ec:	18c7883a 	add	r3,r3,r3
   193f0:	29401dc4 	addi	r5,r5,119
   193f4:	003f9506 	br	1924c <_gp+0xffff499c>
   193f8:	00c15504 	movi	r3,1364
   193fc:	19400536 	bltu	r3,r5,19414 <_free_r+0x2f0>
   19400:	100ad4ba 	srli	r5,r2,18
   19404:	28c01f44 	addi	r3,r5,125
   19408:	18c7883a 	add	r3,r3,r3
   1940c:	29401f04 	addi	r5,r5,124
   19410:	003f8e06 	br	1924c <_gp+0xffff499c>
   19414:	00c03f84 	movi	r3,254
   19418:	01401f84 	movi	r5,126
   1941c:	003f8b06 	br	1924c <_gp+0xffff499c>
   19420:	10c00054 	ori	r3,r2,1
   19424:	30c00115 	stw	r3,4(r6)
   19428:	308d883a 	add	r6,r6,r2
   1942c:	30800015 	stw	r2,0(r6)
   19430:	003f7806 	br	19214 <_gp+0xffff4964>

00019434 <_fwalk>:
   19434:	defff704 	addi	sp,sp,-36
   19438:	dd000415 	stw	r20,16(sp)
   1943c:	dfc00815 	stw	ra,32(sp)
   19440:	ddc00715 	stw	r23,28(sp)
   19444:	dd800615 	stw	r22,24(sp)
   19448:	dd400515 	stw	r21,20(sp)
   1944c:	dcc00315 	stw	r19,12(sp)
   19450:	dc800215 	stw	r18,8(sp)
   19454:	dc400115 	stw	r17,4(sp)
   19458:	dc000015 	stw	r16,0(sp)
   1945c:	2500b804 	addi	r20,r4,736
   19460:	a0002326 	beq	r20,zero,194f0 <_fwalk+0xbc>
   19464:	282b883a 	mov	r21,r5
   19468:	002f883a 	mov	r23,zero
   1946c:	05800044 	movi	r22,1
   19470:	04ffffc4 	movi	r19,-1
   19474:	a4400117 	ldw	r17,4(r20)
   19478:	a4800217 	ldw	r18,8(r20)
   1947c:	8c7fffc4 	addi	r17,r17,-1
   19480:	88000d16 	blt	r17,zero,194b8 <_fwalk+0x84>
   19484:	94000304 	addi	r16,r18,12
   19488:	94800384 	addi	r18,r18,14
   1948c:	8080000b 	ldhu	r2,0(r16)
   19490:	8c7fffc4 	addi	r17,r17,-1
   19494:	813ffd04 	addi	r4,r16,-12
   19498:	b080042e 	bgeu	r22,r2,194ac <_fwalk+0x78>
   1949c:	9080000f 	ldh	r2,0(r18)
   194a0:	14c00226 	beq	r2,r19,194ac <_fwalk+0x78>
   194a4:	a83ee83a 	callr	r21
   194a8:	b8aeb03a 	or	r23,r23,r2
   194ac:	84001a04 	addi	r16,r16,104
   194b0:	94801a04 	addi	r18,r18,104
   194b4:	8cfff51e 	bne	r17,r19,1948c <_gp+0xffff4bdc>
   194b8:	a5000017 	ldw	r20,0(r20)
   194bc:	a03fed1e 	bne	r20,zero,19474 <_gp+0xffff4bc4>
   194c0:	b805883a 	mov	r2,r23
   194c4:	dfc00817 	ldw	ra,32(sp)
   194c8:	ddc00717 	ldw	r23,28(sp)
   194cc:	dd800617 	ldw	r22,24(sp)
   194d0:	dd400517 	ldw	r21,20(sp)
   194d4:	dd000417 	ldw	r20,16(sp)
   194d8:	dcc00317 	ldw	r19,12(sp)
   194dc:	dc800217 	ldw	r18,8(sp)
   194e0:	dc400117 	ldw	r17,4(sp)
   194e4:	dc000017 	ldw	r16,0(sp)
   194e8:	dec00904 	addi	sp,sp,36
   194ec:	f800283a 	ret
   194f0:	002f883a 	mov	r23,zero
   194f4:	003ff206 	br	194c0 <_gp+0xffff4c10>

000194f8 <_fwalk_reent>:
   194f8:	defff704 	addi	sp,sp,-36
   194fc:	dd000415 	stw	r20,16(sp)
   19500:	dfc00815 	stw	ra,32(sp)
   19504:	ddc00715 	stw	r23,28(sp)
   19508:	dd800615 	stw	r22,24(sp)
   1950c:	dd400515 	stw	r21,20(sp)
   19510:	dcc00315 	stw	r19,12(sp)
   19514:	dc800215 	stw	r18,8(sp)
   19518:	dc400115 	stw	r17,4(sp)
   1951c:	dc000015 	stw	r16,0(sp)
   19520:	2500b804 	addi	r20,r4,736
   19524:	a0002326 	beq	r20,zero,195b4 <_fwalk_reent+0xbc>
   19528:	282b883a 	mov	r21,r5
   1952c:	2027883a 	mov	r19,r4
   19530:	002f883a 	mov	r23,zero
   19534:	05800044 	movi	r22,1
   19538:	04bfffc4 	movi	r18,-1
   1953c:	a4400117 	ldw	r17,4(r20)
   19540:	a4000217 	ldw	r16,8(r20)
   19544:	8c7fffc4 	addi	r17,r17,-1
   19548:	88000c16 	blt	r17,zero,1957c <_fwalk_reent+0x84>
   1954c:	84000304 	addi	r16,r16,12
   19550:	8080000b 	ldhu	r2,0(r16)
   19554:	8c7fffc4 	addi	r17,r17,-1
   19558:	817ffd04 	addi	r5,r16,-12
   1955c:	b080052e 	bgeu	r22,r2,19574 <_fwalk_reent+0x7c>
   19560:	8080008f 	ldh	r2,2(r16)
   19564:	9809883a 	mov	r4,r19
   19568:	14800226 	beq	r2,r18,19574 <_fwalk_reent+0x7c>
   1956c:	a83ee83a 	callr	r21
   19570:	b8aeb03a 	or	r23,r23,r2
   19574:	84001a04 	addi	r16,r16,104
   19578:	8cbff51e 	bne	r17,r18,19550 <_gp+0xffff4ca0>
   1957c:	a5000017 	ldw	r20,0(r20)
   19580:	a03fee1e 	bne	r20,zero,1953c <_gp+0xffff4c8c>
   19584:	b805883a 	mov	r2,r23
   19588:	dfc00817 	ldw	ra,32(sp)
   1958c:	ddc00717 	ldw	r23,28(sp)
   19590:	dd800617 	ldw	r22,24(sp)
   19594:	dd400517 	ldw	r21,20(sp)
   19598:	dd000417 	ldw	r20,16(sp)
   1959c:	dcc00317 	ldw	r19,12(sp)
   195a0:	dc800217 	ldw	r18,8(sp)
   195a4:	dc400117 	ldw	r17,4(sp)
   195a8:	dc000017 	ldw	r16,0(sp)
   195ac:	dec00904 	addi	sp,sp,36
   195b0:	f800283a 	ret
   195b4:	002f883a 	mov	r23,zero
   195b8:	003ff206 	br	19584 <_gp+0xffff4cd4>

000195bc <__smakebuf_r>:
   195bc:	2880030b 	ldhu	r2,12(r5)
   195c0:	10c0008c 	andi	r3,r2,2
   195c4:	1800411e 	bne	r3,zero,196cc <__smakebuf_r+0x110>
   195c8:	deffec04 	addi	sp,sp,-80
   195cc:	dc000f15 	stw	r16,60(sp)
   195d0:	2821883a 	mov	r16,r5
   195d4:	2940038f 	ldh	r5,14(r5)
   195d8:	dc401015 	stw	r17,64(sp)
   195dc:	dfc01315 	stw	ra,76(sp)
   195e0:	dcc01215 	stw	r19,72(sp)
   195e4:	dc801115 	stw	r18,68(sp)
   195e8:	2023883a 	mov	r17,r4
   195ec:	28001c16 	blt	r5,zero,19660 <__smakebuf_r+0xa4>
   195f0:	d80d883a 	mov	r6,sp
   195f4:	001a3f40 	call	1a3f4 <_fstat_r>
   195f8:	10001816 	blt	r2,zero,1965c <__smakebuf_r+0xa0>
   195fc:	d8800117 	ldw	r2,4(sp)
   19600:	00e00014 	movui	r3,32768
   19604:	10bc000c 	andi	r2,r2,61440
   19608:	14c80020 	cmpeqi	r19,r2,8192
   1960c:	10c03726 	beq	r2,r3,196ec <__smakebuf_r+0x130>
   19610:	80c0030b 	ldhu	r3,12(r16)
   19614:	18c20014 	ori	r3,r3,2048
   19618:	80c0030d 	sth	r3,12(r16)
   1961c:	00c80004 	movi	r3,8192
   19620:	10c0521e 	bne	r2,r3,1976c <__smakebuf_r+0x1b0>
   19624:	8140038f 	ldh	r5,14(r16)
   19628:	8809883a 	mov	r4,r17
   1962c:	001a4500 	call	1a450 <_isatty_r>
   19630:	10004c26 	beq	r2,zero,19764 <__smakebuf_r+0x1a8>
   19634:	8080030b 	ldhu	r2,12(r16)
   19638:	80c010c4 	addi	r3,r16,67
   1963c:	80c00015 	stw	r3,0(r16)
   19640:	10800054 	ori	r2,r2,1
   19644:	8080030d 	sth	r2,12(r16)
   19648:	00800044 	movi	r2,1
   1964c:	80c00415 	stw	r3,16(r16)
   19650:	80800515 	stw	r2,20(r16)
   19654:	04810004 	movi	r18,1024
   19658:	00000706 	br	19678 <__smakebuf_r+0xbc>
   1965c:	8080030b 	ldhu	r2,12(r16)
   19660:	10c0200c 	andi	r3,r2,128
   19664:	18001f1e 	bne	r3,zero,196e4 <__smakebuf_r+0x128>
   19668:	04810004 	movi	r18,1024
   1966c:	10820014 	ori	r2,r2,2048
   19670:	8080030d 	sth	r2,12(r16)
   19674:	0027883a 	mov	r19,zero
   19678:	900b883a 	mov	r5,r18
   1967c:	8809883a 	mov	r4,r17
   19680:	00197780 	call	19778 <_malloc_r>
   19684:	10002c26 	beq	r2,zero,19738 <__smakebuf_r+0x17c>
   19688:	80c0030b 	ldhu	r3,12(r16)
   1968c:	010000b4 	movhi	r4,2
   19690:	21231604 	addi	r4,r4,-29608
   19694:	89000f15 	stw	r4,60(r17)
   19698:	18c02014 	ori	r3,r3,128
   1969c:	80c0030d 	sth	r3,12(r16)
   196a0:	80800015 	stw	r2,0(r16)
   196a4:	80800415 	stw	r2,16(r16)
   196a8:	84800515 	stw	r18,20(r16)
   196ac:	98001a1e 	bne	r19,zero,19718 <__smakebuf_r+0x15c>
   196b0:	dfc01317 	ldw	ra,76(sp)
   196b4:	dcc01217 	ldw	r19,72(sp)
   196b8:	dc801117 	ldw	r18,68(sp)
   196bc:	dc401017 	ldw	r17,64(sp)
   196c0:	dc000f17 	ldw	r16,60(sp)
   196c4:	dec01404 	addi	sp,sp,80
   196c8:	f800283a 	ret
   196cc:	288010c4 	addi	r2,r5,67
   196d0:	28800015 	stw	r2,0(r5)
   196d4:	28800415 	stw	r2,16(r5)
   196d8:	00800044 	movi	r2,1
   196dc:	28800515 	stw	r2,20(r5)
   196e0:	f800283a 	ret
   196e4:	04801004 	movi	r18,64
   196e8:	003fe006 	br	1966c <_gp+0xffff4dbc>
   196ec:	81000a17 	ldw	r4,40(r16)
   196f0:	00c000b4 	movhi	r3,2
   196f4:	18e87604 	addi	r3,r3,-24104
   196f8:	20ffc51e 	bne	r4,r3,19610 <_gp+0xffff4d60>
   196fc:	8080030b 	ldhu	r2,12(r16)
   19700:	04810004 	movi	r18,1024
   19704:	84801315 	stw	r18,76(r16)
   19708:	1484b03a 	or	r2,r2,r18
   1970c:	8080030d 	sth	r2,12(r16)
   19710:	0027883a 	mov	r19,zero
   19714:	003fd806 	br	19678 <_gp+0xffff4dc8>
   19718:	8140038f 	ldh	r5,14(r16)
   1971c:	8809883a 	mov	r4,r17
   19720:	001a4500 	call	1a450 <_isatty_r>
   19724:	103fe226 	beq	r2,zero,196b0 <_gp+0xffff4e00>
   19728:	8080030b 	ldhu	r2,12(r16)
   1972c:	10800054 	ori	r2,r2,1
   19730:	8080030d 	sth	r2,12(r16)
   19734:	003fde06 	br	196b0 <_gp+0xffff4e00>
   19738:	8080030b 	ldhu	r2,12(r16)
   1973c:	10c0800c 	andi	r3,r2,512
   19740:	183fdb1e 	bne	r3,zero,196b0 <_gp+0xffff4e00>
   19744:	10800094 	ori	r2,r2,2
   19748:	80c010c4 	addi	r3,r16,67
   1974c:	8080030d 	sth	r2,12(r16)
   19750:	00800044 	movi	r2,1
   19754:	80c00015 	stw	r3,0(r16)
   19758:	80c00415 	stw	r3,16(r16)
   1975c:	80800515 	stw	r2,20(r16)
   19760:	003fd306 	br	196b0 <_gp+0xffff4e00>
   19764:	04810004 	movi	r18,1024
   19768:	003fc306 	br	19678 <_gp+0xffff4dc8>
   1976c:	0027883a 	mov	r19,zero
   19770:	04810004 	movi	r18,1024
   19774:	003fc006 	br	19678 <_gp+0xffff4dc8>

00019778 <_malloc_r>:
   19778:	defff504 	addi	sp,sp,-44
   1977c:	dc800315 	stw	r18,12(sp)
   19780:	dfc00a15 	stw	ra,40(sp)
   19784:	df000915 	stw	fp,36(sp)
   19788:	ddc00815 	stw	r23,32(sp)
   1978c:	dd800715 	stw	r22,28(sp)
   19790:	dd400615 	stw	r21,24(sp)
   19794:	dd000515 	stw	r20,20(sp)
   19798:	dcc00415 	stw	r19,16(sp)
   1979c:	dc400215 	stw	r17,8(sp)
   197a0:	dc000115 	stw	r16,4(sp)
   197a4:	288002c4 	addi	r2,r5,11
   197a8:	00c00584 	movi	r3,22
   197ac:	2025883a 	mov	r18,r4
   197b0:	18807f2e 	bgeu	r3,r2,199b0 <_malloc_r+0x238>
   197b4:	047ffe04 	movi	r17,-8
   197b8:	1462703a 	and	r17,r2,r17
   197bc:	8800a316 	blt	r17,zero,19a4c <_malloc_r+0x2d4>
   197c0:	8940a236 	bltu	r17,r5,19a4c <_malloc_r+0x2d4>
   197c4:	001a88c0 	call	1a88c <__malloc_lock>
   197c8:	00807dc4 	movi	r2,503
   197cc:	1441e92e 	bgeu	r2,r17,19f74 <_malloc_r+0x7fc>
   197d0:	8804d27a 	srli	r2,r17,9
   197d4:	1000a126 	beq	r2,zero,19a5c <_malloc_r+0x2e4>
   197d8:	00c00104 	movi	r3,4
   197dc:	18811e36 	bltu	r3,r2,19c58 <_malloc_r+0x4e0>
   197e0:	8804d1ba 	srli	r2,r17,6
   197e4:	12000e44 	addi	r8,r2,57
   197e8:	11c00e04 	addi	r7,r2,56
   197ec:	4209883a 	add	r4,r8,r8
   197f0:	04c000b4 	movhi	r19,2
   197f4:	2109883a 	add	r4,r4,r4
   197f8:	9cf12a04 	addi	r19,r19,-15192
   197fc:	2109883a 	add	r4,r4,r4
   19800:	9909883a 	add	r4,r19,r4
   19804:	24000117 	ldw	r16,4(r4)
   19808:	213ffe04 	addi	r4,r4,-8
   1980c:	24009726 	beq	r4,r16,19a6c <_malloc_r+0x2f4>
   19810:	80800117 	ldw	r2,4(r16)
   19814:	01bfff04 	movi	r6,-4
   19818:	014003c4 	movi	r5,15
   1981c:	1184703a 	and	r2,r2,r6
   19820:	1447c83a 	sub	r3,r2,r17
   19824:	28c00716 	blt	r5,r3,19844 <_malloc_r+0xcc>
   19828:	1800920e 	bge	r3,zero,19a74 <_malloc_r+0x2fc>
   1982c:	84000317 	ldw	r16,12(r16)
   19830:	24008e26 	beq	r4,r16,19a6c <_malloc_r+0x2f4>
   19834:	80800117 	ldw	r2,4(r16)
   19838:	1184703a 	and	r2,r2,r6
   1983c:	1447c83a 	sub	r3,r2,r17
   19840:	28fff90e 	bge	r5,r3,19828 <_gp+0xffff4f78>
   19844:	3809883a 	mov	r4,r7
   19848:	018000b4 	movhi	r6,2
   1984c:	9c000417 	ldw	r16,16(r19)
   19850:	31b12a04 	addi	r6,r6,-15192
   19854:	32000204 	addi	r8,r6,8
   19858:	82013426 	beq	r16,r8,19d2c <_malloc_r+0x5b4>
   1985c:	80c00117 	ldw	r3,4(r16)
   19860:	00bfff04 	movi	r2,-4
   19864:	188e703a 	and	r7,r3,r2
   19868:	3c45c83a 	sub	r2,r7,r17
   1986c:	00c003c4 	movi	r3,15
   19870:	18811f16 	blt	r3,r2,19cf0 <_malloc_r+0x578>
   19874:	32000515 	stw	r8,20(r6)
   19878:	32000415 	stw	r8,16(r6)
   1987c:	10007f0e 	bge	r2,zero,19a7c <_malloc_r+0x304>
   19880:	00807fc4 	movi	r2,511
   19884:	11c0fd36 	bltu	r2,r7,19c7c <_malloc_r+0x504>
   19888:	3806d0fa 	srli	r3,r7,3
   1988c:	01c00044 	movi	r7,1
   19890:	30800117 	ldw	r2,4(r6)
   19894:	19400044 	addi	r5,r3,1
   19898:	294b883a 	add	r5,r5,r5
   1989c:	1807d0ba 	srai	r3,r3,2
   198a0:	294b883a 	add	r5,r5,r5
   198a4:	294b883a 	add	r5,r5,r5
   198a8:	298b883a 	add	r5,r5,r6
   198ac:	38c6983a 	sll	r3,r7,r3
   198b0:	29c00017 	ldw	r7,0(r5)
   198b4:	2a7ffe04 	addi	r9,r5,-8
   198b8:	1886b03a 	or	r3,r3,r2
   198bc:	82400315 	stw	r9,12(r16)
   198c0:	81c00215 	stw	r7,8(r16)
   198c4:	30c00115 	stw	r3,4(r6)
   198c8:	2c000015 	stw	r16,0(r5)
   198cc:	3c000315 	stw	r16,12(r7)
   198d0:	2005d0ba 	srai	r2,r4,2
   198d4:	01400044 	movi	r5,1
   198d8:	288a983a 	sll	r5,r5,r2
   198dc:	19406f36 	bltu	r3,r5,19a9c <_malloc_r+0x324>
   198e0:	28c4703a 	and	r2,r5,r3
   198e4:	10000a1e 	bne	r2,zero,19910 <_malloc_r+0x198>
   198e8:	00bfff04 	movi	r2,-4
   198ec:	294b883a 	add	r5,r5,r5
   198f0:	2088703a 	and	r4,r4,r2
   198f4:	28c4703a 	and	r2,r5,r3
   198f8:	21000104 	addi	r4,r4,4
   198fc:	1000041e 	bne	r2,zero,19910 <_malloc_r+0x198>
   19900:	294b883a 	add	r5,r5,r5
   19904:	28c4703a 	and	r2,r5,r3
   19908:	21000104 	addi	r4,r4,4
   1990c:	103ffc26 	beq	r2,zero,19900 <_gp+0xffff5050>
   19910:	02bfff04 	movi	r10,-4
   19914:	024003c4 	movi	r9,15
   19918:	21800044 	addi	r6,r4,1
   1991c:	318d883a 	add	r6,r6,r6
   19920:	318d883a 	add	r6,r6,r6
   19924:	318d883a 	add	r6,r6,r6
   19928:	998d883a 	add	r6,r19,r6
   1992c:	333ffe04 	addi	r12,r6,-8
   19930:	2017883a 	mov	r11,r4
   19934:	31800104 	addi	r6,r6,4
   19938:	34000017 	ldw	r16,0(r6)
   1993c:	31fffd04 	addi	r7,r6,-12
   19940:	81c0041e 	bne	r16,r7,19954 <_malloc_r+0x1dc>
   19944:	0000fb06 	br	19d34 <_malloc_r+0x5bc>
   19948:	1801030e 	bge	r3,zero,19d58 <_malloc_r+0x5e0>
   1994c:	84000317 	ldw	r16,12(r16)
   19950:	81c0f826 	beq	r16,r7,19d34 <_malloc_r+0x5bc>
   19954:	80800117 	ldw	r2,4(r16)
   19958:	1284703a 	and	r2,r2,r10
   1995c:	1447c83a 	sub	r3,r2,r17
   19960:	48fff90e 	bge	r9,r3,19948 <_gp+0xffff5098>
   19964:	80800317 	ldw	r2,12(r16)
   19968:	81000217 	ldw	r4,8(r16)
   1996c:	89400054 	ori	r5,r17,1
   19970:	81400115 	stw	r5,4(r16)
   19974:	20800315 	stw	r2,12(r4)
   19978:	11000215 	stw	r4,8(r2)
   1997c:	8463883a 	add	r17,r16,r17
   19980:	9c400515 	stw	r17,20(r19)
   19984:	9c400415 	stw	r17,16(r19)
   19988:	18800054 	ori	r2,r3,1
   1998c:	88800115 	stw	r2,4(r17)
   19990:	8a000315 	stw	r8,12(r17)
   19994:	8a000215 	stw	r8,8(r17)
   19998:	88e3883a 	add	r17,r17,r3
   1999c:	88c00015 	stw	r3,0(r17)
   199a0:	9009883a 	mov	r4,r18
   199a4:	001a8b00 	call	1a8b0 <__malloc_unlock>
   199a8:	80800204 	addi	r2,r16,8
   199ac:	00001b06 	br	19a1c <_malloc_r+0x2a4>
   199b0:	04400404 	movi	r17,16
   199b4:	89402536 	bltu	r17,r5,19a4c <_malloc_r+0x2d4>
   199b8:	001a88c0 	call	1a88c <__malloc_lock>
   199bc:	00800184 	movi	r2,6
   199c0:	01000084 	movi	r4,2
   199c4:	04c000b4 	movhi	r19,2
   199c8:	1085883a 	add	r2,r2,r2
   199cc:	9cf12a04 	addi	r19,r19,-15192
   199d0:	1085883a 	add	r2,r2,r2
   199d4:	9885883a 	add	r2,r19,r2
   199d8:	14000117 	ldw	r16,4(r2)
   199dc:	10fffe04 	addi	r3,r2,-8
   199e0:	80c0d926 	beq	r16,r3,19d48 <_malloc_r+0x5d0>
   199e4:	80c00117 	ldw	r3,4(r16)
   199e8:	81000317 	ldw	r4,12(r16)
   199ec:	00bfff04 	movi	r2,-4
   199f0:	1884703a 	and	r2,r3,r2
   199f4:	81400217 	ldw	r5,8(r16)
   199f8:	8085883a 	add	r2,r16,r2
   199fc:	10c00117 	ldw	r3,4(r2)
   19a00:	29000315 	stw	r4,12(r5)
   19a04:	21400215 	stw	r5,8(r4)
   19a08:	18c00054 	ori	r3,r3,1
   19a0c:	10c00115 	stw	r3,4(r2)
   19a10:	9009883a 	mov	r4,r18
   19a14:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19a18:	80800204 	addi	r2,r16,8
   19a1c:	dfc00a17 	ldw	ra,40(sp)
   19a20:	df000917 	ldw	fp,36(sp)
   19a24:	ddc00817 	ldw	r23,32(sp)
   19a28:	dd800717 	ldw	r22,28(sp)
   19a2c:	dd400617 	ldw	r21,24(sp)
   19a30:	dd000517 	ldw	r20,20(sp)
   19a34:	dcc00417 	ldw	r19,16(sp)
   19a38:	dc800317 	ldw	r18,12(sp)
   19a3c:	dc400217 	ldw	r17,8(sp)
   19a40:	dc000117 	ldw	r16,4(sp)
   19a44:	dec00b04 	addi	sp,sp,44
   19a48:	f800283a 	ret
   19a4c:	00800304 	movi	r2,12
   19a50:	90800015 	stw	r2,0(r18)
   19a54:	0005883a 	mov	r2,zero
   19a58:	003ff006 	br	19a1c <_gp+0xffff516c>
   19a5c:	01002004 	movi	r4,128
   19a60:	02001004 	movi	r8,64
   19a64:	01c00fc4 	movi	r7,63
   19a68:	003f6106 	br	197f0 <_gp+0xffff4f40>
   19a6c:	4009883a 	mov	r4,r8
   19a70:	003f7506 	br	19848 <_gp+0xffff4f98>
   19a74:	81000317 	ldw	r4,12(r16)
   19a78:	003fde06 	br	199f4 <_gp+0xffff5144>
   19a7c:	81c5883a 	add	r2,r16,r7
   19a80:	11400117 	ldw	r5,4(r2)
   19a84:	9009883a 	mov	r4,r18
   19a88:	29400054 	ori	r5,r5,1
   19a8c:	11400115 	stw	r5,4(r2)
   19a90:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19a94:	80800204 	addi	r2,r16,8
   19a98:	003fe006 	br	19a1c <_gp+0xffff516c>
   19a9c:	9c000217 	ldw	r16,8(r19)
   19aa0:	00bfff04 	movi	r2,-4
   19aa4:	85800117 	ldw	r22,4(r16)
   19aa8:	b0ac703a 	and	r22,r22,r2
   19aac:	b4400336 	bltu	r22,r17,19abc <_malloc_r+0x344>
   19ab0:	b445c83a 	sub	r2,r22,r17
   19ab4:	00c003c4 	movi	r3,15
   19ab8:	18805d16 	blt	r3,r2,19c30 <_malloc_r+0x4b8>
   19abc:	05c000b4 	movhi	r23,2
   19ac0:	008000b4 	movhi	r2,2
   19ac4:	10b8f104 	addi	r2,r2,-7228
   19ac8:	bdf23904 	addi	r23,r23,-14108
   19acc:	15400017 	ldw	r21,0(r2)
   19ad0:	b8c00017 	ldw	r3,0(r23)
   19ad4:	00bfffc4 	movi	r2,-1
   19ad8:	858d883a 	add	r6,r16,r22
   19adc:	8d6b883a 	add	r21,r17,r21
   19ae0:	1880ea26 	beq	r3,r2,19e8c <_malloc_r+0x714>
   19ae4:	ad4403c4 	addi	r21,r21,4111
   19ae8:	00bc0004 	movi	r2,-4096
   19aec:	a8aa703a 	and	r21,r21,r2
   19af0:	a80b883a 	mov	r5,r21
   19af4:	9009883a 	mov	r4,r18
   19af8:	d9800015 	stw	r6,0(sp)
   19afc:	001a0ac0 	call	1a0ac <_sbrk_r>
   19b00:	1029883a 	mov	r20,r2
   19b04:	00bfffc4 	movi	r2,-1
   19b08:	d9800017 	ldw	r6,0(sp)
   19b0c:	a080e826 	beq	r20,r2,19eb0 <_malloc_r+0x738>
   19b10:	a180a636 	bltu	r20,r6,19dac <_malloc_r+0x634>
   19b14:	070000b4 	movhi	fp,2
   19b18:	e738f204 	addi	fp,fp,-7224
   19b1c:	e0800017 	ldw	r2,0(fp)
   19b20:	a887883a 	add	r3,r21,r2
   19b24:	e0c00015 	stw	r3,0(fp)
   19b28:	3500e626 	beq	r6,r20,19ec4 <_malloc_r+0x74c>
   19b2c:	b9000017 	ldw	r4,0(r23)
   19b30:	00bfffc4 	movi	r2,-1
   19b34:	2080ee26 	beq	r4,r2,19ef0 <_malloc_r+0x778>
   19b38:	a185c83a 	sub	r2,r20,r6
   19b3c:	10c5883a 	add	r2,r2,r3
   19b40:	e0800015 	stw	r2,0(fp)
   19b44:	a0c001cc 	andi	r3,r20,7
   19b48:	1800bc26 	beq	r3,zero,19e3c <_malloc_r+0x6c4>
   19b4c:	a0e9c83a 	sub	r20,r20,r3
   19b50:	00840204 	movi	r2,4104
   19b54:	a5000204 	addi	r20,r20,8
   19b58:	10c7c83a 	sub	r3,r2,r3
   19b5c:	a545883a 	add	r2,r20,r21
   19b60:	1083ffcc 	andi	r2,r2,4095
   19b64:	18abc83a 	sub	r21,r3,r2
   19b68:	a80b883a 	mov	r5,r21
   19b6c:	9009883a 	mov	r4,r18
   19b70:	001a0ac0 	call	1a0ac <_sbrk_r>
   19b74:	00ffffc4 	movi	r3,-1
   19b78:	10c0e126 	beq	r2,r3,19f00 <_malloc_r+0x788>
   19b7c:	1505c83a 	sub	r2,r2,r20
   19b80:	1545883a 	add	r2,r2,r21
   19b84:	10800054 	ori	r2,r2,1
   19b88:	e0c00017 	ldw	r3,0(fp)
   19b8c:	9d000215 	stw	r20,8(r19)
   19b90:	a0800115 	stw	r2,4(r20)
   19b94:	a8c7883a 	add	r3,r21,r3
   19b98:	e0c00015 	stw	r3,0(fp)
   19b9c:	84c00e26 	beq	r16,r19,19bd8 <_malloc_r+0x460>
   19ba0:	018003c4 	movi	r6,15
   19ba4:	3580a72e 	bgeu	r6,r22,19e44 <_malloc_r+0x6cc>
   19ba8:	81400117 	ldw	r5,4(r16)
   19bac:	013ffe04 	movi	r4,-8
   19bb0:	b0bffd04 	addi	r2,r22,-12
   19bb4:	1104703a 	and	r2,r2,r4
   19bb8:	2900004c 	andi	r4,r5,1
   19bbc:	2088b03a 	or	r4,r4,r2
   19bc0:	81000115 	stw	r4,4(r16)
   19bc4:	01400144 	movi	r5,5
   19bc8:	8089883a 	add	r4,r16,r2
   19bcc:	21400115 	stw	r5,4(r4)
   19bd0:	21400215 	stw	r5,8(r4)
   19bd4:	3080cd36 	bltu	r6,r2,19f0c <_malloc_r+0x794>
   19bd8:	008000b4 	movhi	r2,2
   19bdc:	10b8f004 	addi	r2,r2,-7232
   19be0:	11000017 	ldw	r4,0(r2)
   19be4:	20c0012e 	bgeu	r4,r3,19bec <_malloc_r+0x474>
   19be8:	10c00015 	stw	r3,0(r2)
   19bec:	008000b4 	movhi	r2,2
   19bf0:	10b8ef04 	addi	r2,r2,-7236
   19bf4:	11000017 	ldw	r4,0(r2)
   19bf8:	9c000217 	ldw	r16,8(r19)
   19bfc:	20c0012e 	bgeu	r4,r3,19c04 <_malloc_r+0x48c>
   19c00:	10c00015 	stw	r3,0(r2)
   19c04:	80c00117 	ldw	r3,4(r16)
   19c08:	00bfff04 	movi	r2,-4
   19c0c:	1886703a 	and	r3,r3,r2
   19c10:	1c45c83a 	sub	r2,r3,r17
   19c14:	1c400236 	bltu	r3,r17,19c20 <_malloc_r+0x4a8>
   19c18:	00c003c4 	movi	r3,15
   19c1c:	18800416 	blt	r3,r2,19c30 <_malloc_r+0x4b8>
   19c20:	9009883a 	mov	r4,r18
   19c24:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19c28:	0005883a 	mov	r2,zero
   19c2c:	003f7b06 	br	19a1c <_gp+0xffff516c>
   19c30:	88c00054 	ori	r3,r17,1
   19c34:	80c00115 	stw	r3,4(r16)
   19c38:	8463883a 	add	r17,r16,r17
   19c3c:	10800054 	ori	r2,r2,1
   19c40:	9c400215 	stw	r17,8(r19)
   19c44:	88800115 	stw	r2,4(r17)
   19c48:	9009883a 	mov	r4,r18
   19c4c:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19c50:	80800204 	addi	r2,r16,8
   19c54:	003f7106 	br	19a1c <_gp+0xffff516c>
   19c58:	00c00504 	movi	r3,20
   19c5c:	18804a2e 	bgeu	r3,r2,19d88 <_malloc_r+0x610>
   19c60:	00c01504 	movi	r3,84
   19c64:	18806e36 	bltu	r3,r2,19e20 <_malloc_r+0x6a8>
   19c68:	8804d33a 	srli	r2,r17,12
   19c6c:	12001bc4 	addi	r8,r2,111
   19c70:	11c01b84 	addi	r7,r2,110
   19c74:	4209883a 	add	r4,r8,r8
   19c78:	003edd06 	br	197f0 <_gp+0xffff4f40>
   19c7c:	3804d27a 	srli	r2,r7,9
   19c80:	00c00104 	movi	r3,4
   19c84:	1880442e 	bgeu	r3,r2,19d98 <_malloc_r+0x620>
   19c88:	00c00504 	movi	r3,20
   19c8c:	18808136 	bltu	r3,r2,19e94 <_malloc_r+0x71c>
   19c90:	11401704 	addi	r5,r2,92
   19c94:	10c016c4 	addi	r3,r2,91
   19c98:	294b883a 	add	r5,r5,r5
   19c9c:	294b883a 	add	r5,r5,r5
   19ca0:	294b883a 	add	r5,r5,r5
   19ca4:	994b883a 	add	r5,r19,r5
   19ca8:	28800017 	ldw	r2,0(r5)
   19cac:	018000b4 	movhi	r6,2
   19cb0:	297ffe04 	addi	r5,r5,-8
   19cb4:	31b12a04 	addi	r6,r6,-15192
   19cb8:	28806526 	beq	r5,r2,19e50 <_malloc_r+0x6d8>
   19cbc:	01bfff04 	movi	r6,-4
   19cc0:	10c00117 	ldw	r3,4(r2)
   19cc4:	1986703a 	and	r3,r3,r6
   19cc8:	38c0022e 	bgeu	r7,r3,19cd4 <_malloc_r+0x55c>
   19ccc:	10800217 	ldw	r2,8(r2)
   19cd0:	28bffb1e 	bne	r5,r2,19cc0 <_gp+0xffff5410>
   19cd4:	11400317 	ldw	r5,12(r2)
   19cd8:	98c00117 	ldw	r3,4(r19)
   19cdc:	81400315 	stw	r5,12(r16)
   19ce0:	80800215 	stw	r2,8(r16)
   19ce4:	2c000215 	stw	r16,8(r5)
   19ce8:	14000315 	stw	r16,12(r2)
   19cec:	003ef806 	br	198d0 <_gp+0xffff5020>
   19cf0:	88c00054 	ori	r3,r17,1
   19cf4:	80c00115 	stw	r3,4(r16)
   19cf8:	8463883a 	add	r17,r16,r17
   19cfc:	34400515 	stw	r17,20(r6)
   19d00:	34400415 	stw	r17,16(r6)
   19d04:	10c00054 	ori	r3,r2,1
   19d08:	8a000315 	stw	r8,12(r17)
   19d0c:	8a000215 	stw	r8,8(r17)
   19d10:	88c00115 	stw	r3,4(r17)
   19d14:	88a3883a 	add	r17,r17,r2
   19d18:	88800015 	stw	r2,0(r17)
   19d1c:	9009883a 	mov	r4,r18
   19d20:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19d24:	80800204 	addi	r2,r16,8
   19d28:	003f3c06 	br	19a1c <_gp+0xffff516c>
   19d2c:	30c00117 	ldw	r3,4(r6)
   19d30:	003ee706 	br	198d0 <_gp+0xffff5020>
   19d34:	5ac00044 	addi	r11,r11,1
   19d38:	588000cc 	andi	r2,r11,3
   19d3c:	31800204 	addi	r6,r6,8
   19d40:	103efd1e 	bne	r2,zero,19938 <_gp+0xffff5088>
   19d44:	00002406 	br	19dd8 <_malloc_r+0x660>
   19d48:	14000317 	ldw	r16,12(r2)
   19d4c:	143f251e 	bne	r2,r16,199e4 <_gp+0xffff5134>
   19d50:	21000084 	addi	r4,r4,2
   19d54:	003ebc06 	br	19848 <_gp+0xffff4f98>
   19d58:	8085883a 	add	r2,r16,r2
   19d5c:	10c00117 	ldw	r3,4(r2)
   19d60:	81000317 	ldw	r4,12(r16)
   19d64:	81400217 	ldw	r5,8(r16)
   19d68:	18c00054 	ori	r3,r3,1
   19d6c:	10c00115 	stw	r3,4(r2)
   19d70:	29000315 	stw	r4,12(r5)
   19d74:	21400215 	stw	r5,8(r4)
   19d78:	9009883a 	mov	r4,r18
   19d7c:	001a8b00 	call	1a8b0 <__malloc_unlock>
   19d80:	80800204 	addi	r2,r16,8
   19d84:	003f2506 	br	19a1c <_gp+0xffff516c>
   19d88:	12001704 	addi	r8,r2,92
   19d8c:	11c016c4 	addi	r7,r2,91
   19d90:	4209883a 	add	r4,r8,r8
   19d94:	003e9606 	br	197f0 <_gp+0xffff4f40>
   19d98:	3804d1ba 	srli	r2,r7,6
   19d9c:	11400e44 	addi	r5,r2,57
   19da0:	10c00e04 	addi	r3,r2,56
   19da4:	294b883a 	add	r5,r5,r5
   19da8:	003fbc06 	br	19c9c <_gp+0xffff53ec>
   19dac:	84ff5926 	beq	r16,r19,19b14 <_gp+0xffff5264>
   19db0:	008000b4 	movhi	r2,2
   19db4:	10b12a04 	addi	r2,r2,-15192
   19db8:	14000217 	ldw	r16,8(r2)
   19dbc:	00bfff04 	movi	r2,-4
   19dc0:	80c00117 	ldw	r3,4(r16)
   19dc4:	1886703a 	and	r3,r3,r2
   19dc8:	003f9106 	br	19c10 <_gp+0xffff5360>
   19dcc:	60800217 	ldw	r2,8(r12)
   19dd0:	213fffc4 	addi	r4,r4,-1
   19dd4:	1300651e 	bne	r2,r12,19f6c <_malloc_r+0x7f4>
   19dd8:	208000cc 	andi	r2,r4,3
   19ddc:	633ffe04 	addi	r12,r12,-8
   19de0:	103ffa1e 	bne	r2,zero,19dcc <_gp+0xffff551c>
   19de4:	98800117 	ldw	r2,4(r19)
   19de8:	0146303a 	nor	r3,zero,r5
   19dec:	1884703a 	and	r2,r3,r2
   19df0:	98800115 	stw	r2,4(r19)
   19df4:	294b883a 	add	r5,r5,r5
   19df8:	117f2836 	bltu	r2,r5,19a9c <_gp+0xffff51ec>
   19dfc:	283f2726 	beq	r5,zero,19a9c <_gp+0xffff51ec>
   19e00:	2886703a 	and	r3,r5,r2
   19e04:	5809883a 	mov	r4,r11
   19e08:	183ec31e 	bne	r3,zero,19918 <_gp+0xffff5068>
   19e0c:	294b883a 	add	r5,r5,r5
   19e10:	2886703a 	and	r3,r5,r2
   19e14:	21000104 	addi	r4,r4,4
   19e18:	183ffc26 	beq	r3,zero,19e0c <_gp+0xffff555c>
   19e1c:	003ebe06 	br	19918 <_gp+0xffff5068>
   19e20:	00c05504 	movi	r3,340
   19e24:	18801236 	bltu	r3,r2,19e70 <_malloc_r+0x6f8>
   19e28:	8804d3fa 	srli	r2,r17,15
   19e2c:	12001e04 	addi	r8,r2,120
   19e30:	11c01dc4 	addi	r7,r2,119
   19e34:	4209883a 	add	r4,r8,r8
   19e38:	003e6d06 	br	197f0 <_gp+0xffff4f40>
   19e3c:	00c40004 	movi	r3,4096
   19e40:	003f4606 	br	19b5c <_gp+0xffff52ac>
   19e44:	00800044 	movi	r2,1
   19e48:	a0800115 	stw	r2,4(r20)
   19e4c:	003f7406 	br	19c20 <_gp+0xffff5370>
   19e50:	1805d0ba 	srai	r2,r3,2
   19e54:	01c00044 	movi	r7,1
   19e58:	30c00117 	ldw	r3,4(r6)
   19e5c:	388e983a 	sll	r7,r7,r2
   19e60:	2805883a 	mov	r2,r5
   19e64:	38c6b03a 	or	r3,r7,r3
   19e68:	30c00115 	stw	r3,4(r6)
   19e6c:	003f9b06 	br	19cdc <_gp+0xffff542c>
   19e70:	00c15504 	movi	r3,1364
   19e74:	18801a36 	bltu	r3,r2,19ee0 <_malloc_r+0x768>
   19e78:	8804d4ba 	srli	r2,r17,18
   19e7c:	12001f44 	addi	r8,r2,125
   19e80:	11c01f04 	addi	r7,r2,124
   19e84:	4209883a 	add	r4,r8,r8
   19e88:	003e5906 	br	197f0 <_gp+0xffff4f40>
   19e8c:	ad400404 	addi	r21,r21,16
   19e90:	003f1706 	br	19af0 <_gp+0xffff5240>
   19e94:	00c01504 	movi	r3,84
   19e98:	18802336 	bltu	r3,r2,19f28 <_malloc_r+0x7b0>
   19e9c:	3804d33a 	srli	r2,r7,12
   19ea0:	11401bc4 	addi	r5,r2,111
   19ea4:	10c01b84 	addi	r3,r2,110
   19ea8:	294b883a 	add	r5,r5,r5
   19eac:	003f7b06 	br	19c9c <_gp+0xffff53ec>
   19eb0:	9c000217 	ldw	r16,8(r19)
   19eb4:	00bfff04 	movi	r2,-4
   19eb8:	80c00117 	ldw	r3,4(r16)
   19ebc:	1886703a 	and	r3,r3,r2
   19ec0:	003f5306 	br	19c10 <_gp+0xffff5360>
   19ec4:	3083ffcc 	andi	r2,r6,4095
   19ec8:	103f181e 	bne	r2,zero,19b2c <_gp+0xffff527c>
   19ecc:	99000217 	ldw	r4,8(r19)
   19ed0:	b545883a 	add	r2,r22,r21
   19ed4:	10800054 	ori	r2,r2,1
   19ed8:	20800115 	stw	r2,4(r4)
   19edc:	003f3e06 	br	19bd8 <_gp+0xffff5328>
   19ee0:	01003f84 	movi	r4,254
   19ee4:	02001fc4 	movi	r8,127
   19ee8:	01c01f84 	movi	r7,126
   19eec:	003e4006 	br	197f0 <_gp+0xffff4f40>
   19ef0:	008000b4 	movhi	r2,2
   19ef4:	10b23904 	addi	r2,r2,-14108
   19ef8:	15000015 	stw	r20,0(r2)
   19efc:	003f1106 	br	19b44 <_gp+0xffff5294>
   19f00:	00800044 	movi	r2,1
   19f04:	002b883a 	mov	r21,zero
   19f08:	003f1f06 	br	19b88 <_gp+0xffff52d8>
   19f0c:	81400204 	addi	r5,r16,8
   19f10:	9009883a 	mov	r4,r18
   19f14:	00191240 	call	19124 <_free_r>
   19f18:	008000b4 	movhi	r2,2
   19f1c:	10b8f204 	addi	r2,r2,-7224
   19f20:	10c00017 	ldw	r3,0(r2)
   19f24:	003f2c06 	br	19bd8 <_gp+0xffff5328>
   19f28:	00c05504 	movi	r3,340
   19f2c:	18800536 	bltu	r3,r2,19f44 <_malloc_r+0x7cc>
   19f30:	3804d3fa 	srli	r2,r7,15
   19f34:	11401e04 	addi	r5,r2,120
   19f38:	10c01dc4 	addi	r3,r2,119
   19f3c:	294b883a 	add	r5,r5,r5
   19f40:	003f5606 	br	19c9c <_gp+0xffff53ec>
   19f44:	00c15504 	movi	r3,1364
   19f48:	18800536 	bltu	r3,r2,19f60 <_malloc_r+0x7e8>
   19f4c:	3804d4ba 	srli	r2,r7,18
   19f50:	11401f44 	addi	r5,r2,125
   19f54:	10c01f04 	addi	r3,r2,124
   19f58:	294b883a 	add	r5,r5,r5
   19f5c:	003f4f06 	br	19c9c <_gp+0xffff53ec>
   19f60:	01403f84 	movi	r5,254
   19f64:	00c01f84 	movi	r3,126
   19f68:	003f4c06 	br	19c9c <_gp+0xffff53ec>
   19f6c:	98800117 	ldw	r2,4(r19)
   19f70:	003fa006 	br	19df4 <_gp+0xffff5544>
   19f74:	8808d0fa 	srli	r4,r17,3
   19f78:	20800044 	addi	r2,r4,1
   19f7c:	1085883a 	add	r2,r2,r2
   19f80:	003e9006 	br	199c4 <_gp+0xffff5114>

00019f84 <memset>:
   19f84:	20c000cc 	andi	r3,r4,3
   19f88:	2005883a 	mov	r2,r4
   19f8c:	18004426 	beq	r3,zero,1a0a0 <memset+0x11c>
   19f90:	31ffffc4 	addi	r7,r6,-1
   19f94:	30004026 	beq	r6,zero,1a098 <memset+0x114>
   19f98:	2813883a 	mov	r9,r5
   19f9c:	200d883a 	mov	r6,r4
   19fa0:	2007883a 	mov	r3,r4
   19fa4:	00000406 	br	19fb8 <memset+0x34>
   19fa8:	3a3fffc4 	addi	r8,r7,-1
   19fac:	31800044 	addi	r6,r6,1
   19fb0:	38003926 	beq	r7,zero,1a098 <memset+0x114>
   19fb4:	400f883a 	mov	r7,r8
   19fb8:	18c00044 	addi	r3,r3,1
   19fbc:	32400005 	stb	r9,0(r6)
   19fc0:	1a0000cc 	andi	r8,r3,3
   19fc4:	403ff81e 	bne	r8,zero,19fa8 <_gp+0xffff56f8>
   19fc8:	010000c4 	movi	r4,3
   19fcc:	21c02d2e 	bgeu	r4,r7,1a084 <memset+0x100>
   19fd0:	29003fcc 	andi	r4,r5,255
   19fd4:	200c923a 	slli	r6,r4,8
   19fd8:	3108b03a 	or	r4,r6,r4
   19fdc:	200c943a 	slli	r6,r4,16
   19fe0:	218cb03a 	or	r6,r4,r6
   19fe4:	010003c4 	movi	r4,15
   19fe8:	21c0182e 	bgeu	r4,r7,1a04c <memset+0xc8>
   19fec:	3b3ffc04 	addi	r12,r7,-16
   19ff0:	6018d13a 	srli	r12,r12,4
   19ff4:	1a000104 	addi	r8,r3,4
   19ff8:	1ac00204 	addi	r11,r3,8
   19ffc:	6008913a 	slli	r4,r12,4
   1a000:	1a800304 	addi	r10,r3,12
   1a004:	1813883a 	mov	r9,r3
   1a008:	21000504 	addi	r4,r4,20
   1a00c:	1909883a 	add	r4,r3,r4
   1a010:	49800015 	stw	r6,0(r9)
   1a014:	41800015 	stw	r6,0(r8)
   1a018:	59800015 	stw	r6,0(r11)
   1a01c:	51800015 	stw	r6,0(r10)
   1a020:	42000404 	addi	r8,r8,16
   1a024:	4a400404 	addi	r9,r9,16
   1a028:	5ac00404 	addi	r11,r11,16
   1a02c:	52800404 	addi	r10,r10,16
   1a030:	413ff71e 	bne	r8,r4,1a010 <_gp+0xffff5760>
   1a034:	63000044 	addi	r12,r12,1
   1a038:	6018913a 	slli	r12,r12,4
   1a03c:	39c003cc 	andi	r7,r7,15
   1a040:	010000c4 	movi	r4,3
   1a044:	1b07883a 	add	r3,r3,r12
   1a048:	21c00e2e 	bgeu	r4,r7,1a084 <memset+0x100>
   1a04c:	1813883a 	mov	r9,r3
   1a050:	3811883a 	mov	r8,r7
   1a054:	010000c4 	movi	r4,3
   1a058:	49800015 	stw	r6,0(r9)
   1a05c:	423fff04 	addi	r8,r8,-4
   1a060:	4a400104 	addi	r9,r9,4
   1a064:	223ffc36 	bltu	r4,r8,1a058 <_gp+0xffff57a8>
   1a068:	393fff04 	addi	r4,r7,-4
   1a06c:	2008d0ba 	srli	r4,r4,2
   1a070:	39c000cc 	andi	r7,r7,3
   1a074:	21000044 	addi	r4,r4,1
   1a078:	2109883a 	add	r4,r4,r4
   1a07c:	2109883a 	add	r4,r4,r4
   1a080:	1907883a 	add	r3,r3,r4
   1a084:	38000526 	beq	r7,zero,1a09c <memset+0x118>
   1a088:	19cf883a 	add	r7,r3,r7
   1a08c:	19400005 	stb	r5,0(r3)
   1a090:	18c00044 	addi	r3,r3,1
   1a094:	38fffd1e 	bne	r7,r3,1a08c <_gp+0xffff57dc>
   1a098:	f800283a 	ret
   1a09c:	f800283a 	ret
   1a0a0:	2007883a 	mov	r3,r4
   1a0a4:	300f883a 	mov	r7,r6
   1a0a8:	003fc706 	br	19fc8 <_gp+0xffff5718>

0001a0ac <_sbrk_r>:
   1a0ac:	defffd04 	addi	sp,sp,-12
   1a0b0:	dc000015 	stw	r16,0(sp)
   1a0b4:	040000b4 	movhi	r16,2
   1a0b8:	dc400115 	stw	r17,4(sp)
   1a0bc:	8438ee04 	addi	r16,r16,-7240
   1a0c0:	2023883a 	mov	r17,r4
   1a0c4:	2809883a 	mov	r4,r5
   1a0c8:	dfc00215 	stw	ra,8(sp)
   1a0cc:	80000015 	stw	zero,0(r16)
   1a0d0:	001aa140 	call	1aa14 <sbrk>
   1a0d4:	00ffffc4 	movi	r3,-1
   1a0d8:	10c00526 	beq	r2,r3,1a0f0 <_sbrk_r+0x44>
   1a0dc:	dfc00217 	ldw	ra,8(sp)
   1a0e0:	dc400117 	ldw	r17,4(sp)
   1a0e4:	dc000017 	ldw	r16,0(sp)
   1a0e8:	dec00304 	addi	sp,sp,12
   1a0ec:	f800283a 	ret
   1a0f0:	80c00017 	ldw	r3,0(r16)
   1a0f4:	183ff926 	beq	r3,zero,1a0dc <_gp+0xffff582c>
   1a0f8:	88c00015 	stw	r3,0(r17)
   1a0fc:	003ff706 	br	1a0dc <_gp+0xffff582c>

0001a100 <__sread>:
   1a100:	defffe04 	addi	sp,sp,-8
   1a104:	dc000015 	stw	r16,0(sp)
   1a108:	2821883a 	mov	r16,r5
   1a10c:	2940038f 	ldh	r5,14(r5)
   1a110:	dfc00115 	stw	ra,4(sp)
   1a114:	001a5040 	call	1a504 <_read_r>
   1a118:	10000716 	blt	r2,zero,1a138 <__sread+0x38>
   1a11c:	80c01417 	ldw	r3,80(r16)
   1a120:	1887883a 	add	r3,r3,r2
   1a124:	80c01415 	stw	r3,80(r16)
   1a128:	dfc00117 	ldw	ra,4(sp)
   1a12c:	dc000017 	ldw	r16,0(sp)
   1a130:	dec00204 	addi	sp,sp,8
   1a134:	f800283a 	ret
   1a138:	80c0030b 	ldhu	r3,12(r16)
   1a13c:	18fbffcc 	andi	r3,r3,61439
   1a140:	80c0030d 	sth	r3,12(r16)
   1a144:	dfc00117 	ldw	ra,4(sp)
   1a148:	dc000017 	ldw	r16,0(sp)
   1a14c:	dec00204 	addi	sp,sp,8
   1a150:	f800283a 	ret

0001a154 <__seofread>:
   1a154:	0005883a 	mov	r2,zero
   1a158:	f800283a 	ret

0001a15c <__swrite>:
   1a15c:	2880030b 	ldhu	r2,12(r5)
   1a160:	defffb04 	addi	sp,sp,-20
   1a164:	dcc00315 	stw	r19,12(sp)
   1a168:	dc800215 	stw	r18,8(sp)
   1a16c:	dc400115 	stw	r17,4(sp)
   1a170:	dc000015 	stw	r16,0(sp)
   1a174:	dfc00415 	stw	ra,16(sp)
   1a178:	10c0400c 	andi	r3,r2,256
   1a17c:	2821883a 	mov	r16,r5
   1a180:	2023883a 	mov	r17,r4
   1a184:	3025883a 	mov	r18,r6
   1a188:	3827883a 	mov	r19,r7
   1a18c:	18000526 	beq	r3,zero,1a1a4 <__swrite+0x48>
   1a190:	2940038f 	ldh	r5,14(r5)
   1a194:	01c00084 	movi	r7,2
   1a198:	000d883a 	mov	r6,zero
   1a19c:	001a4a40 	call	1a4a4 <_lseek_r>
   1a1a0:	8080030b 	ldhu	r2,12(r16)
   1a1a4:	8140038f 	ldh	r5,14(r16)
   1a1a8:	10bbffcc 	andi	r2,r2,61439
   1a1ac:	980f883a 	mov	r7,r19
   1a1b0:	900d883a 	mov	r6,r18
   1a1b4:	8809883a 	mov	r4,r17
   1a1b8:	8080030d 	sth	r2,12(r16)
   1a1bc:	dfc00417 	ldw	ra,16(sp)
   1a1c0:	dcc00317 	ldw	r19,12(sp)
   1a1c4:	dc800217 	ldw	r18,8(sp)
   1a1c8:	dc400117 	ldw	r17,4(sp)
   1a1cc:	dc000017 	ldw	r16,0(sp)
   1a1d0:	dec00504 	addi	sp,sp,20
   1a1d4:	001a23c1 	jmpi	1a23c <_write_r>

0001a1d8 <__sseek>:
   1a1d8:	defffe04 	addi	sp,sp,-8
   1a1dc:	dc000015 	stw	r16,0(sp)
   1a1e0:	2821883a 	mov	r16,r5
   1a1e4:	2940038f 	ldh	r5,14(r5)
   1a1e8:	dfc00115 	stw	ra,4(sp)
   1a1ec:	001a4a40 	call	1a4a4 <_lseek_r>
   1a1f0:	00ffffc4 	movi	r3,-1
   1a1f4:	10c00826 	beq	r2,r3,1a218 <__sseek+0x40>
   1a1f8:	80c0030b 	ldhu	r3,12(r16)
   1a1fc:	80801415 	stw	r2,80(r16)
   1a200:	18c40014 	ori	r3,r3,4096
   1a204:	80c0030d 	sth	r3,12(r16)
   1a208:	dfc00117 	ldw	ra,4(sp)
   1a20c:	dc000017 	ldw	r16,0(sp)
   1a210:	dec00204 	addi	sp,sp,8
   1a214:	f800283a 	ret
   1a218:	80c0030b 	ldhu	r3,12(r16)
   1a21c:	18fbffcc 	andi	r3,r3,61439
   1a220:	80c0030d 	sth	r3,12(r16)
   1a224:	dfc00117 	ldw	ra,4(sp)
   1a228:	dc000017 	ldw	r16,0(sp)
   1a22c:	dec00204 	addi	sp,sp,8
   1a230:	f800283a 	ret

0001a234 <__sclose>:
   1a234:	2940038f 	ldh	r5,14(r5)
   1a238:	001a29c1 	jmpi	1a29c <_close_r>

0001a23c <_write_r>:
   1a23c:	defffd04 	addi	sp,sp,-12
   1a240:	2805883a 	mov	r2,r5
   1a244:	dc000015 	stw	r16,0(sp)
   1a248:	040000b4 	movhi	r16,2
   1a24c:	dc400115 	stw	r17,4(sp)
   1a250:	300b883a 	mov	r5,r6
   1a254:	8438ee04 	addi	r16,r16,-7240
   1a258:	2023883a 	mov	r17,r4
   1a25c:	380d883a 	mov	r6,r7
   1a260:	1009883a 	mov	r4,r2
   1a264:	dfc00215 	stw	ra,8(sp)
   1a268:	80000015 	stw	zero,0(r16)
   1a26c:	001ab000 	call	1ab00 <write>
   1a270:	00ffffc4 	movi	r3,-1
   1a274:	10c00526 	beq	r2,r3,1a28c <_write_r+0x50>
   1a278:	dfc00217 	ldw	ra,8(sp)
   1a27c:	dc400117 	ldw	r17,4(sp)
   1a280:	dc000017 	ldw	r16,0(sp)
   1a284:	dec00304 	addi	sp,sp,12
   1a288:	f800283a 	ret
   1a28c:	80c00017 	ldw	r3,0(r16)
   1a290:	183ff926 	beq	r3,zero,1a278 <_gp+0xffff59c8>
   1a294:	88c00015 	stw	r3,0(r17)
   1a298:	003ff706 	br	1a278 <_gp+0xffff59c8>

0001a29c <_close_r>:
   1a29c:	defffd04 	addi	sp,sp,-12
   1a2a0:	dc000015 	stw	r16,0(sp)
   1a2a4:	040000b4 	movhi	r16,2
   1a2a8:	dc400115 	stw	r17,4(sp)
   1a2ac:	8438ee04 	addi	r16,r16,-7240
   1a2b0:	2023883a 	mov	r17,r4
   1a2b4:	2809883a 	mov	r4,r5
   1a2b8:	dfc00215 	stw	ra,8(sp)
   1a2bc:	80000015 	stw	zero,0(r16)
   1a2c0:	00175900 	call	17590 <close>
   1a2c4:	00ffffc4 	movi	r3,-1
   1a2c8:	10c00526 	beq	r2,r3,1a2e0 <_close_r+0x44>
   1a2cc:	dfc00217 	ldw	ra,8(sp)
   1a2d0:	dc400117 	ldw	r17,4(sp)
   1a2d4:	dc000017 	ldw	r16,0(sp)
   1a2d8:	dec00304 	addi	sp,sp,12
   1a2dc:	f800283a 	ret
   1a2e0:	80c00017 	ldw	r3,0(r16)
   1a2e4:	183ff926 	beq	r3,zero,1a2cc <_gp+0xffff5a1c>
   1a2e8:	88c00015 	stw	r3,0(r17)
   1a2ec:	003ff706 	br	1a2cc <_gp+0xffff5a1c>

0001a2f0 <_fclose_r>:
   1a2f0:	28003926 	beq	r5,zero,1a3d8 <_fclose_r+0xe8>
   1a2f4:	defffc04 	addi	sp,sp,-16
   1a2f8:	dc400115 	stw	r17,4(sp)
   1a2fc:	dc000015 	stw	r16,0(sp)
   1a300:	dfc00315 	stw	ra,12(sp)
   1a304:	dc800215 	stw	r18,8(sp)
   1a308:	2023883a 	mov	r17,r4
   1a30c:	2821883a 	mov	r16,r5
   1a310:	20000226 	beq	r4,zero,1a31c <_fclose_r+0x2c>
   1a314:	20800e17 	ldw	r2,56(r4)
   1a318:	10002726 	beq	r2,zero,1a3b8 <_fclose_r+0xc8>
   1a31c:	8080030f 	ldh	r2,12(r16)
   1a320:	1000071e 	bne	r2,zero,1a340 <_fclose_r+0x50>
   1a324:	0005883a 	mov	r2,zero
   1a328:	dfc00317 	ldw	ra,12(sp)
   1a32c:	dc800217 	ldw	r18,8(sp)
   1a330:	dc400117 	ldw	r17,4(sp)
   1a334:	dc000017 	ldw	r16,0(sp)
   1a338:	dec00404 	addi	sp,sp,16
   1a33c:	f800283a 	ret
   1a340:	800b883a 	mov	r5,r16
   1a344:	8809883a 	mov	r4,r17
   1a348:	00189a80 	call	189a8 <__sflush_r>
   1a34c:	1025883a 	mov	r18,r2
   1a350:	80800b17 	ldw	r2,44(r16)
   1a354:	10000426 	beq	r2,zero,1a368 <_fclose_r+0x78>
   1a358:	81400717 	ldw	r5,28(r16)
   1a35c:	8809883a 	mov	r4,r17
   1a360:	103ee83a 	callr	r2
   1a364:	10001616 	blt	r2,zero,1a3c0 <_fclose_r+0xd0>
   1a368:	8080030b 	ldhu	r2,12(r16)
   1a36c:	1080200c 	andi	r2,r2,128
   1a370:	1000151e 	bne	r2,zero,1a3c8 <_fclose_r+0xd8>
   1a374:	81400c17 	ldw	r5,48(r16)
   1a378:	28000526 	beq	r5,zero,1a390 <_fclose_r+0xa0>
   1a37c:	80801004 	addi	r2,r16,64
   1a380:	28800226 	beq	r5,r2,1a38c <_fclose_r+0x9c>
   1a384:	8809883a 	mov	r4,r17
   1a388:	00191240 	call	19124 <_free_r>
   1a38c:	80000c15 	stw	zero,48(r16)
   1a390:	81401117 	ldw	r5,68(r16)
   1a394:	28000326 	beq	r5,zero,1a3a4 <_fclose_r+0xb4>
   1a398:	8809883a 	mov	r4,r17
   1a39c:	00191240 	call	19124 <_free_r>
   1a3a0:	80001115 	stw	zero,68(r16)
   1a3a4:	0018fc00 	call	18fc0 <__sfp_lock_acquire>
   1a3a8:	8000030d 	sth	zero,12(r16)
   1a3ac:	0018fc40 	call	18fc4 <__sfp_lock_release>
   1a3b0:	9005883a 	mov	r2,r18
   1a3b4:	003fdc06 	br	1a328 <_gp+0xffff5a78>
   1a3b8:	0018fb00 	call	18fb0 <__sinit>
   1a3bc:	003fd706 	br	1a31c <_gp+0xffff5a6c>
   1a3c0:	04bfffc4 	movi	r18,-1
   1a3c4:	003fe806 	br	1a368 <_gp+0xffff5ab8>
   1a3c8:	81400417 	ldw	r5,16(r16)
   1a3cc:	8809883a 	mov	r4,r17
   1a3d0:	00191240 	call	19124 <_free_r>
   1a3d4:	003fe706 	br	1a374 <_gp+0xffff5ac4>
   1a3d8:	0005883a 	mov	r2,zero
   1a3dc:	f800283a 	ret

0001a3e0 <fclose>:
   1a3e0:	008000b4 	movhi	r2,2
   1a3e4:	10b22f04 	addi	r2,r2,-14148
   1a3e8:	200b883a 	mov	r5,r4
   1a3ec:	11000017 	ldw	r4,0(r2)
   1a3f0:	001a2f01 	jmpi	1a2f0 <_fclose_r>

0001a3f4 <_fstat_r>:
   1a3f4:	defffd04 	addi	sp,sp,-12
   1a3f8:	2805883a 	mov	r2,r5
   1a3fc:	dc000015 	stw	r16,0(sp)
   1a400:	040000b4 	movhi	r16,2
   1a404:	dc400115 	stw	r17,4(sp)
   1a408:	8438ee04 	addi	r16,r16,-7240
   1a40c:	2023883a 	mov	r17,r4
   1a410:	300b883a 	mov	r5,r6
   1a414:	1009883a 	mov	r4,r2
   1a418:	dfc00215 	stw	ra,8(sp)
   1a41c:	80000015 	stw	zero,0(r16)
   1a420:	001a5d40 	call	1a5d4 <fstat>
   1a424:	00ffffc4 	movi	r3,-1
   1a428:	10c00526 	beq	r2,r3,1a440 <_fstat_r+0x4c>
   1a42c:	dfc00217 	ldw	ra,8(sp)
   1a430:	dc400117 	ldw	r17,4(sp)
   1a434:	dc000017 	ldw	r16,0(sp)
   1a438:	dec00304 	addi	sp,sp,12
   1a43c:	f800283a 	ret
   1a440:	80c00017 	ldw	r3,0(r16)
   1a444:	183ff926 	beq	r3,zero,1a42c <_gp+0xffff5b7c>
   1a448:	88c00015 	stw	r3,0(r17)
   1a44c:	003ff706 	br	1a42c <_gp+0xffff5b7c>

0001a450 <_isatty_r>:
   1a450:	defffd04 	addi	sp,sp,-12
   1a454:	dc000015 	stw	r16,0(sp)
   1a458:	040000b4 	movhi	r16,2
   1a45c:	dc400115 	stw	r17,4(sp)
   1a460:	8438ee04 	addi	r16,r16,-7240
   1a464:	2023883a 	mov	r17,r4
   1a468:	2809883a 	mov	r4,r5
   1a46c:	dfc00215 	stw	ra,8(sp)
   1a470:	80000015 	stw	zero,0(r16)
   1a474:	001a6c80 	call	1a6c8 <isatty>
   1a478:	00ffffc4 	movi	r3,-1
   1a47c:	10c00526 	beq	r2,r3,1a494 <_isatty_r+0x44>
   1a480:	dfc00217 	ldw	ra,8(sp)
   1a484:	dc400117 	ldw	r17,4(sp)
   1a488:	dc000017 	ldw	r16,0(sp)
   1a48c:	dec00304 	addi	sp,sp,12
   1a490:	f800283a 	ret
   1a494:	80c00017 	ldw	r3,0(r16)
   1a498:	183ff926 	beq	r3,zero,1a480 <_gp+0xffff5bd0>
   1a49c:	88c00015 	stw	r3,0(r17)
   1a4a0:	003ff706 	br	1a480 <_gp+0xffff5bd0>

0001a4a4 <_lseek_r>:
   1a4a4:	defffd04 	addi	sp,sp,-12
   1a4a8:	2805883a 	mov	r2,r5
   1a4ac:	dc000015 	stw	r16,0(sp)
   1a4b0:	040000b4 	movhi	r16,2
   1a4b4:	dc400115 	stw	r17,4(sp)
   1a4b8:	300b883a 	mov	r5,r6
   1a4bc:	8438ee04 	addi	r16,r16,-7240
   1a4c0:	2023883a 	mov	r17,r4
   1a4c4:	380d883a 	mov	r6,r7
   1a4c8:	1009883a 	mov	r4,r2
   1a4cc:	dfc00215 	stw	ra,8(sp)
   1a4d0:	80000015 	stw	zero,0(r16)
   1a4d4:	001a7b00 	call	1a7b0 <lseek>
   1a4d8:	00ffffc4 	movi	r3,-1
   1a4dc:	10c00526 	beq	r2,r3,1a4f4 <_lseek_r+0x50>
   1a4e0:	dfc00217 	ldw	ra,8(sp)
   1a4e4:	dc400117 	ldw	r17,4(sp)
   1a4e8:	dc000017 	ldw	r16,0(sp)
   1a4ec:	dec00304 	addi	sp,sp,12
   1a4f0:	f800283a 	ret
   1a4f4:	80c00017 	ldw	r3,0(r16)
   1a4f8:	183ff926 	beq	r3,zero,1a4e0 <_gp+0xffff5c30>
   1a4fc:	88c00015 	stw	r3,0(r17)
   1a500:	003ff706 	br	1a4e0 <_gp+0xffff5c30>

0001a504 <_read_r>:
   1a504:	defffd04 	addi	sp,sp,-12
   1a508:	2805883a 	mov	r2,r5
   1a50c:	dc000015 	stw	r16,0(sp)
   1a510:	040000b4 	movhi	r16,2
   1a514:	dc400115 	stw	r17,4(sp)
   1a518:	300b883a 	mov	r5,r6
   1a51c:	8438ee04 	addi	r16,r16,-7240
   1a520:	2023883a 	mov	r17,r4
   1a524:	380d883a 	mov	r6,r7
   1a528:	1009883a 	mov	r4,r2
   1a52c:	dfc00215 	stw	ra,8(sp)
   1a530:	80000015 	stw	zero,0(r16)
   1a534:	001a9100 	call	1a910 <read>
   1a538:	00ffffc4 	movi	r3,-1
   1a53c:	10c00526 	beq	r2,r3,1a554 <_read_r+0x50>
   1a540:	dfc00217 	ldw	ra,8(sp)
   1a544:	dc400117 	ldw	r17,4(sp)
   1a548:	dc000017 	ldw	r16,0(sp)
   1a54c:	dec00304 	addi	sp,sp,12
   1a550:	f800283a 	ret
   1a554:	80c00017 	ldw	r3,0(r16)
   1a558:	183ff926 	beq	r3,zero,1a540 <_gp+0xffff5c90>
   1a55c:	88c00015 	stw	r3,0(r17)
   1a560:	003ff706 	br	1a540 <_gp+0xffff5c90>

0001a564 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1a564:	defffd04 	addi	sp,sp,-12
   1a568:	df000215 	stw	fp,8(sp)
   1a56c:	df000204 	addi	fp,sp,8
   1a570:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1a574:	0001883a 	nop
   1a578:	e0bfff17 	ldw	r2,-4(fp)
   1a57c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1a580:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1a584:	10000226 	beq	r2,zero,1a590 <_exit+0x2c>
    ALT_SIM_FAIL();
   1a588:	002af070 	cmpltui	zero,zero,43969
   1a58c:	00000106 	br	1a594 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1a590:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1a594:	003fff06 	br	1a594 <_gp+0xffff5ce4>

0001a598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a598:	defffe04 	addi	sp,sp,-8
   1a59c:	dfc00115 	stw	ra,4(sp)
   1a5a0:	df000015 	stw	fp,0(sp)
   1a5a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a5a8:	d0a00a17 	ldw	r2,-32728(gp)
   1a5ac:	10000326 	beq	r2,zero,1a5bc <alt_get_errno+0x24>
   1a5b0:	d0a00a17 	ldw	r2,-32728(gp)
   1a5b4:	103ee83a 	callr	r2
   1a5b8:	00000106 	br	1a5c0 <alt_get_errno+0x28>
   1a5bc:	d0a6c204 	addi	r2,gp,-25848
}
   1a5c0:	e037883a 	mov	sp,fp
   1a5c4:	dfc00117 	ldw	ra,4(sp)
   1a5c8:	df000017 	ldw	fp,0(sp)
   1a5cc:	dec00204 	addi	sp,sp,8
   1a5d0:	f800283a 	ret

0001a5d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1a5d4:	defffb04 	addi	sp,sp,-20
   1a5d8:	dfc00415 	stw	ra,16(sp)
   1a5dc:	df000315 	stw	fp,12(sp)
   1a5e0:	df000304 	addi	fp,sp,12
   1a5e4:	e13ffe15 	stw	r4,-8(fp)
   1a5e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a5ec:	e0bffe17 	ldw	r2,-8(fp)
   1a5f0:	10000816 	blt	r2,zero,1a614 <fstat+0x40>
   1a5f4:	01400304 	movi	r5,12
   1a5f8:	e13ffe17 	ldw	r4,-8(fp)
   1a5fc:	00127280 	call	12728 <__mulsi3>
   1a600:	1007883a 	mov	r3,r2
   1a604:	008000b4 	movhi	r2,2
   1a608:	10b0ca04 	addi	r2,r2,-15576
   1a60c:	1885883a 	add	r2,r3,r2
   1a610:	00000106 	br	1a618 <fstat+0x44>
   1a614:	0005883a 	mov	r2,zero
   1a618:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1a61c:	e0bffd17 	ldw	r2,-12(fp)
   1a620:	10001026 	beq	r2,zero,1a664 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a624:	e0bffd17 	ldw	r2,-12(fp)
   1a628:	10800017 	ldw	r2,0(r2)
   1a62c:	10800817 	ldw	r2,32(r2)
   1a630:	10000726 	beq	r2,zero,1a650 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1a634:	e0bffd17 	ldw	r2,-12(fp)
   1a638:	10800017 	ldw	r2,0(r2)
   1a63c:	10800817 	ldw	r2,32(r2)
   1a640:	e17fff17 	ldw	r5,-4(fp)
   1a644:	e13ffd17 	ldw	r4,-12(fp)
   1a648:	103ee83a 	callr	r2
   1a64c:	00000a06 	br	1a678 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a650:	e0bfff17 	ldw	r2,-4(fp)
   1a654:	00c80004 	movi	r3,8192
   1a658:	10c00115 	stw	r3,4(r2)
      return 0;
   1a65c:	0005883a 	mov	r2,zero
   1a660:	00000506 	br	1a678 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a664:	001a5980 	call	1a598 <alt_get_errno>
   1a668:	1007883a 	mov	r3,r2
   1a66c:	00801444 	movi	r2,81
   1a670:	18800015 	stw	r2,0(r3)
    return -1;
   1a674:	00bfffc4 	movi	r2,-1
  }
}
   1a678:	e037883a 	mov	sp,fp
   1a67c:	dfc00117 	ldw	ra,4(sp)
   1a680:	df000017 	ldw	fp,0(sp)
   1a684:	dec00204 	addi	sp,sp,8
   1a688:	f800283a 	ret

0001a68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a68c:	defffe04 	addi	sp,sp,-8
   1a690:	dfc00115 	stw	ra,4(sp)
   1a694:	df000015 	stw	fp,0(sp)
   1a698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a69c:	d0a00a17 	ldw	r2,-32728(gp)
   1a6a0:	10000326 	beq	r2,zero,1a6b0 <alt_get_errno+0x24>
   1a6a4:	d0a00a17 	ldw	r2,-32728(gp)
   1a6a8:	103ee83a 	callr	r2
   1a6ac:	00000106 	br	1a6b4 <alt_get_errno+0x28>
   1a6b0:	d0a6c204 	addi	r2,gp,-25848
}
   1a6b4:	e037883a 	mov	sp,fp
   1a6b8:	dfc00117 	ldw	ra,4(sp)
   1a6bc:	df000017 	ldw	fp,0(sp)
   1a6c0:	dec00204 	addi	sp,sp,8
   1a6c4:	f800283a 	ret

0001a6c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a6c8:	deffed04 	addi	sp,sp,-76
   1a6cc:	dfc01215 	stw	ra,72(sp)
   1a6d0:	df001115 	stw	fp,68(sp)
   1a6d4:	df001104 	addi	fp,sp,68
   1a6d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a6dc:	e0bfff17 	ldw	r2,-4(fp)
   1a6e0:	10000816 	blt	r2,zero,1a704 <isatty+0x3c>
   1a6e4:	01400304 	movi	r5,12
   1a6e8:	e13fff17 	ldw	r4,-4(fp)
   1a6ec:	00127280 	call	12728 <__mulsi3>
   1a6f0:	1007883a 	mov	r3,r2
   1a6f4:	008000b4 	movhi	r2,2
   1a6f8:	10b0ca04 	addi	r2,r2,-15576
   1a6fc:	1885883a 	add	r2,r3,r2
   1a700:	00000106 	br	1a708 <isatty+0x40>
   1a704:	0005883a 	mov	r2,zero
   1a708:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1a70c:	e0bfef17 	ldw	r2,-68(fp)
   1a710:	10000e26 	beq	r2,zero,1a74c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a714:	e0bfef17 	ldw	r2,-68(fp)
   1a718:	10800017 	ldw	r2,0(r2)
   1a71c:	10800817 	ldw	r2,32(r2)
   1a720:	1000021e 	bne	r2,zero,1a72c <isatty+0x64>
    {
      return 1;
   1a724:	00800044 	movi	r2,1
   1a728:	00000d06 	br	1a760 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a72c:	e0bff004 	addi	r2,fp,-64
   1a730:	100b883a 	mov	r5,r2
   1a734:	e13fff17 	ldw	r4,-4(fp)
   1a738:	001a5d40 	call	1a5d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a73c:	e0bff117 	ldw	r2,-60(fp)
   1a740:	10880020 	cmpeqi	r2,r2,8192
   1a744:	10803fcc 	andi	r2,r2,255
   1a748:	00000506 	br	1a760 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a74c:	001a68c0 	call	1a68c <alt_get_errno>
   1a750:	1007883a 	mov	r3,r2
   1a754:	00801444 	movi	r2,81
   1a758:	18800015 	stw	r2,0(r3)
    return 0;
   1a75c:	0005883a 	mov	r2,zero
  }
}
   1a760:	e037883a 	mov	sp,fp
   1a764:	dfc00117 	ldw	ra,4(sp)
   1a768:	df000017 	ldw	fp,0(sp)
   1a76c:	dec00204 	addi	sp,sp,8
   1a770:	f800283a 	ret

0001a774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a774:	defffe04 	addi	sp,sp,-8
   1a778:	dfc00115 	stw	ra,4(sp)
   1a77c:	df000015 	stw	fp,0(sp)
   1a780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a784:	d0a00a17 	ldw	r2,-32728(gp)
   1a788:	10000326 	beq	r2,zero,1a798 <alt_get_errno+0x24>
   1a78c:	d0a00a17 	ldw	r2,-32728(gp)
   1a790:	103ee83a 	callr	r2
   1a794:	00000106 	br	1a79c <alt_get_errno+0x28>
   1a798:	d0a6c204 	addi	r2,gp,-25848
}
   1a79c:	e037883a 	mov	sp,fp
   1a7a0:	dfc00117 	ldw	ra,4(sp)
   1a7a4:	df000017 	ldw	fp,0(sp)
   1a7a8:	dec00204 	addi	sp,sp,8
   1a7ac:	f800283a 	ret

0001a7b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1a7b0:	defff904 	addi	sp,sp,-28
   1a7b4:	dfc00615 	stw	ra,24(sp)
   1a7b8:	df000515 	stw	fp,20(sp)
   1a7bc:	df000504 	addi	fp,sp,20
   1a7c0:	e13ffd15 	stw	r4,-12(fp)
   1a7c4:	e17ffe15 	stw	r5,-8(fp)
   1a7c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1a7cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a7d0:	e0bffd17 	ldw	r2,-12(fp)
   1a7d4:	10000816 	blt	r2,zero,1a7f8 <lseek+0x48>
   1a7d8:	01400304 	movi	r5,12
   1a7dc:	e13ffd17 	ldw	r4,-12(fp)
   1a7e0:	00127280 	call	12728 <__mulsi3>
   1a7e4:	1007883a 	mov	r3,r2
   1a7e8:	008000b4 	movhi	r2,2
   1a7ec:	10b0ca04 	addi	r2,r2,-15576
   1a7f0:	1885883a 	add	r2,r3,r2
   1a7f4:	00000106 	br	1a7fc <lseek+0x4c>
   1a7f8:	0005883a 	mov	r2,zero
   1a7fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1a800:	e0bffc17 	ldw	r2,-16(fp)
   1a804:	10001026 	beq	r2,zero,1a848 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1a808:	e0bffc17 	ldw	r2,-16(fp)
   1a80c:	10800017 	ldw	r2,0(r2)
   1a810:	10800717 	ldw	r2,28(r2)
   1a814:	10000926 	beq	r2,zero,1a83c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1a818:	e0bffc17 	ldw	r2,-16(fp)
   1a81c:	10800017 	ldw	r2,0(r2)
   1a820:	10800717 	ldw	r2,28(r2)
   1a824:	e1bfff17 	ldw	r6,-4(fp)
   1a828:	e17ffe17 	ldw	r5,-8(fp)
   1a82c:	e13ffc17 	ldw	r4,-16(fp)
   1a830:	103ee83a 	callr	r2
   1a834:	e0bffb15 	stw	r2,-20(fp)
   1a838:	00000506 	br	1a850 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1a83c:	00bfde84 	movi	r2,-134
   1a840:	e0bffb15 	stw	r2,-20(fp)
   1a844:	00000206 	br	1a850 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1a848:	00bfebc4 	movi	r2,-81
   1a84c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1a850:	e0bffb17 	ldw	r2,-20(fp)
   1a854:	1000070e 	bge	r2,zero,1a874 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1a858:	001a7740 	call	1a774 <alt_get_errno>
   1a85c:	1007883a 	mov	r3,r2
   1a860:	e0bffb17 	ldw	r2,-20(fp)
   1a864:	0085c83a 	sub	r2,zero,r2
   1a868:	18800015 	stw	r2,0(r3)
    rc = -1;
   1a86c:	00bfffc4 	movi	r2,-1
   1a870:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1a874:	e0bffb17 	ldw	r2,-20(fp)
}
   1a878:	e037883a 	mov	sp,fp
   1a87c:	dfc00117 	ldw	ra,4(sp)
   1a880:	df000017 	ldw	fp,0(sp)
   1a884:	dec00204 	addi	sp,sp,8
   1a888:	f800283a 	ret

0001a88c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1a88c:	defffe04 	addi	sp,sp,-8
   1a890:	df000115 	stw	fp,4(sp)
   1a894:	df000104 	addi	fp,sp,4
   1a898:	e13fff15 	stw	r4,-4(fp)
}
   1a89c:	0001883a 	nop
   1a8a0:	e037883a 	mov	sp,fp
   1a8a4:	df000017 	ldw	fp,0(sp)
   1a8a8:	dec00104 	addi	sp,sp,4
   1a8ac:	f800283a 	ret

0001a8b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1a8b0:	defffe04 	addi	sp,sp,-8
   1a8b4:	df000115 	stw	fp,4(sp)
   1a8b8:	df000104 	addi	fp,sp,4
   1a8bc:	e13fff15 	stw	r4,-4(fp)
}
   1a8c0:	0001883a 	nop
   1a8c4:	e037883a 	mov	sp,fp
   1a8c8:	df000017 	ldw	fp,0(sp)
   1a8cc:	dec00104 	addi	sp,sp,4
   1a8d0:	f800283a 	ret

0001a8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a8d4:	defffe04 	addi	sp,sp,-8
   1a8d8:	dfc00115 	stw	ra,4(sp)
   1a8dc:	df000015 	stw	fp,0(sp)
   1a8e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a8e4:	d0a00a17 	ldw	r2,-32728(gp)
   1a8e8:	10000326 	beq	r2,zero,1a8f8 <alt_get_errno+0x24>
   1a8ec:	d0a00a17 	ldw	r2,-32728(gp)
   1a8f0:	103ee83a 	callr	r2
   1a8f4:	00000106 	br	1a8fc <alt_get_errno+0x28>
   1a8f8:	d0a6c204 	addi	r2,gp,-25848
}
   1a8fc:	e037883a 	mov	sp,fp
   1a900:	dfc00117 	ldw	ra,4(sp)
   1a904:	df000017 	ldw	fp,0(sp)
   1a908:	dec00204 	addi	sp,sp,8
   1a90c:	f800283a 	ret

0001a910 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1a910:	defff904 	addi	sp,sp,-28
   1a914:	dfc00615 	stw	ra,24(sp)
   1a918:	df000515 	stw	fp,20(sp)
   1a91c:	df000504 	addi	fp,sp,20
   1a920:	e13ffd15 	stw	r4,-12(fp)
   1a924:	e17ffe15 	stw	r5,-8(fp)
   1a928:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a92c:	e0bffd17 	ldw	r2,-12(fp)
   1a930:	10000816 	blt	r2,zero,1a954 <read+0x44>
   1a934:	01400304 	movi	r5,12
   1a938:	e13ffd17 	ldw	r4,-12(fp)
   1a93c:	00127280 	call	12728 <__mulsi3>
   1a940:	1007883a 	mov	r3,r2
   1a944:	008000b4 	movhi	r2,2
   1a948:	10b0ca04 	addi	r2,r2,-15576
   1a94c:	1885883a 	add	r2,r3,r2
   1a950:	00000106 	br	1a958 <read+0x48>
   1a954:	0005883a 	mov	r2,zero
   1a958:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1a95c:	e0bffb17 	ldw	r2,-20(fp)
   1a960:	10002226 	beq	r2,zero,1a9ec <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a964:	e0bffb17 	ldw	r2,-20(fp)
   1a968:	10800217 	ldw	r2,8(r2)
   1a96c:	108000cc 	andi	r2,r2,3
   1a970:	10800060 	cmpeqi	r2,r2,1
   1a974:	1000181e 	bne	r2,zero,1a9d8 <read+0xc8>
        (fd->dev->read))
   1a978:	e0bffb17 	ldw	r2,-20(fp)
   1a97c:	10800017 	ldw	r2,0(r2)
   1a980:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1a984:	10001426 	beq	r2,zero,1a9d8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1a988:	e0bffb17 	ldw	r2,-20(fp)
   1a98c:	10800017 	ldw	r2,0(r2)
   1a990:	10800517 	ldw	r2,20(r2)
   1a994:	e0ffff17 	ldw	r3,-4(fp)
   1a998:	180d883a 	mov	r6,r3
   1a99c:	e17ffe17 	ldw	r5,-8(fp)
   1a9a0:	e13ffb17 	ldw	r4,-20(fp)
   1a9a4:	103ee83a 	callr	r2
   1a9a8:	e0bffc15 	stw	r2,-16(fp)
   1a9ac:	e0bffc17 	ldw	r2,-16(fp)
   1a9b0:	1000070e 	bge	r2,zero,1a9d0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1a9b4:	001a8d40 	call	1a8d4 <alt_get_errno>
   1a9b8:	1007883a 	mov	r3,r2
   1a9bc:	e0bffc17 	ldw	r2,-16(fp)
   1a9c0:	0085c83a 	sub	r2,zero,r2
   1a9c4:	18800015 	stw	r2,0(r3)
          return -1;
   1a9c8:	00bfffc4 	movi	r2,-1
   1a9cc:	00000c06 	br	1aa00 <read+0xf0>
        }
        return rval;
   1a9d0:	e0bffc17 	ldw	r2,-16(fp)
   1a9d4:	00000a06 	br	1aa00 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1a9d8:	001a8d40 	call	1a8d4 <alt_get_errno>
   1a9dc:	1007883a 	mov	r3,r2
   1a9e0:	00800344 	movi	r2,13
   1a9e4:	18800015 	stw	r2,0(r3)
   1a9e8:	00000406 	br	1a9fc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1a9ec:	001a8d40 	call	1a8d4 <alt_get_errno>
   1a9f0:	1007883a 	mov	r3,r2
   1a9f4:	00801444 	movi	r2,81
   1a9f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1a9fc:	00bfffc4 	movi	r2,-1
}
   1aa00:	e037883a 	mov	sp,fp
   1aa04:	dfc00117 	ldw	ra,4(sp)
   1aa08:	df000017 	ldw	fp,0(sp)
   1aa0c:	dec00204 	addi	sp,sp,8
   1aa10:	f800283a 	ret

0001aa14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1aa14:	defff904 	addi	sp,sp,-28
   1aa18:	df000615 	stw	fp,24(sp)
   1aa1c:	df000604 	addi	fp,sp,24
   1aa20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aa24:	0005303a 	rdctl	r2,status
   1aa28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aa2c:	e0fffe17 	ldw	r3,-8(fp)
   1aa30:	00bfff84 	movi	r2,-2
   1aa34:	1884703a 	and	r2,r3,r2
   1aa38:	1001703a 	wrctl	status,r2
  
  return context;
   1aa3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1aa40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1aa44:	d0a00f17 	ldw	r2,-32708(gp)
   1aa48:	10c000c4 	addi	r3,r2,3
   1aa4c:	00bfff04 	movi	r2,-4
   1aa50:	1884703a 	and	r2,r3,r2
   1aa54:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1aa58:	d0e00f17 	ldw	r3,-32708(gp)
   1aa5c:	e0bfff17 	ldw	r2,-4(fp)
   1aa60:	1887883a 	add	r3,r3,r2
   1aa64:	008000b4 	movhi	r2,2
   1aa68:	10800004 	addi	r2,r2,0
   1aa6c:	10c0062e 	bgeu	r2,r3,1aa88 <sbrk+0x74>
   1aa70:	e0bffb17 	ldw	r2,-20(fp)
   1aa74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aa78:	e0bffa17 	ldw	r2,-24(fp)
   1aa7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1aa80:	00bfffc4 	movi	r2,-1
   1aa84:	00000b06 	br	1aab4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1aa88:	d0a00f17 	ldw	r2,-32708(gp)
   1aa8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1aa90:	d0e00f17 	ldw	r3,-32708(gp)
   1aa94:	e0bfff17 	ldw	r2,-4(fp)
   1aa98:	1885883a 	add	r2,r3,r2
   1aa9c:	d0a00f15 	stw	r2,-32708(gp)
   1aaa0:	e0bffb17 	ldw	r2,-20(fp)
   1aaa4:	e0bffc15 	stw	r2,-16(fp)
   1aaa8:	e0bffc17 	ldw	r2,-16(fp)
   1aaac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1aab0:	e0bffd17 	ldw	r2,-12(fp)
} 
   1aab4:	e037883a 	mov	sp,fp
   1aab8:	df000017 	ldw	fp,0(sp)
   1aabc:	dec00104 	addi	sp,sp,4
   1aac0:	f800283a 	ret

0001aac4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1aac4:	defffe04 	addi	sp,sp,-8
   1aac8:	dfc00115 	stw	ra,4(sp)
   1aacc:	df000015 	stw	fp,0(sp)
   1aad0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1aad4:	d0a00a17 	ldw	r2,-32728(gp)
   1aad8:	10000326 	beq	r2,zero,1aae8 <alt_get_errno+0x24>
   1aadc:	d0a00a17 	ldw	r2,-32728(gp)
   1aae0:	103ee83a 	callr	r2
   1aae4:	00000106 	br	1aaec <alt_get_errno+0x28>
   1aae8:	d0a6c204 	addi	r2,gp,-25848
}
   1aaec:	e037883a 	mov	sp,fp
   1aaf0:	dfc00117 	ldw	ra,4(sp)
   1aaf4:	df000017 	ldw	fp,0(sp)
   1aaf8:	dec00204 	addi	sp,sp,8
   1aafc:	f800283a 	ret

0001ab00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1ab00:	defff904 	addi	sp,sp,-28
   1ab04:	dfc00615 	stw	ra,24(sp)
   1ab08:	df000515 	stw	fp,20(sp)
   1ab0c:	df000504 	addi	fp,sp,20
   1ab10:	e13ffd15 	stw	r4,-12(fp)
   1ab14:	e17ffe15 	stw	r5,-8(fp)
   1ab18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1ab1c:	e0bffd17 	ldw	r2,-12(fp)
   1ab20:	10000816 	blt	r2,zero,1ab44 <write+0x44>
   1ab24:	01400304 	movi	r5,12
   1ab28:	e13ffd17 	ldw	r4,-12(fp)
   1ab2c:	00127280 	call	12728 <__mulsi3>
   1ab30:	1007883a 	mov	r3,r2
   1ab34:	008000b4 	movhi	r2,2
   1ab38:	10b0ca04 	addi	r2,r2,-15576
   1ab3c:	1885883a 	add	r2,r3,r2
   1ab40:	00000106 	br	1ab48 <write+0x48>
   1ab44:	0005883a 	mov	r2,zero
   1ab48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1ab4c:	e0bffb17 	ldw	r2,-20(fp)
   1ab50:	10002126 	beq	r2,zero,1abd8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1ab54:	e0bffb17 	ldw	r2,-20(fp)
   1ab58:	10800217 	ldw	r2,8(r2)
   1ab5c:	108000cc 	andi	r2,r2,3
   1ab60:	10001826 	beq	r2,zero,1abc4 <write+0xc4>
   1ab64:	e0bffb17 	ldw	r2,-20(fp)
   1ab68:	10800017 	ldw	r2,0(r2)
   1ab6c:	10800617 	ldw	r2,24(r2)
   1ab70:	10001426 	beq	r2,zero,1abc4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1ab74:	e0bffb17 	ldw	r2,-20(fp)
   1ab78:	10800017 	ldw	r2,0(r2)
   1ab7c:	10800617 	ldw	r2,24(r2)
   1ab80:	e0ffff17 	ldw	r3,-4(fp)
   1ab84:	180d883a 	mov	r6,r3
   1ab88:	e17ffe17 	ldw	r5,-8(fp)
   1ab8c:	e13ffb17 	ldw	r4,-20(fp)
   1ab90:	103ee83a 	callr	r2
   1ab94:	e0bffc15 	stw	r2,-16(fp)
   1ab98:	e0bffc17 	ldw	r2,-16(fp)
   1ab9c:	1000070e 	bge	r2,zero,1abbc <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1aba0:	001aac40 	call	1aac4 <alt_get_errno>
   1aba4:	1007883a 	mov	r3,r2
   1aba8:	e0bffc17 	ldw	r2,-16(fp)
   1abac:	0085c83a 	sub	r2,zero,r2
   1abb0:	18800015 	stw	r2,0(r3)
        return -1;
   1abb4:	00bfffc4 	movi	r2,-1
   1abb8:	00000c06 	br	1abec <write+0xec>
      }
      return rval;
   1abbc:	e0bffc17 	ldw	r2,-16(fp)
   1abc0:	00000a06 	br	1abec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1abc4:	001aac40 	call	1aac4 <alt_get_errno>
   1abc8:	1007883a 	mov	r3,r2
   1abcc:	00800344 	movi	r2,13
   1abd0:	18800015 	stw	r2,0(r3)
   1abd4:	00000406 	br	1abe8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1abd8:	001aac40 	call	1aac4 <alt_get_errno>
   1abdc:	1007883a 	mov	r3,r2
   1abe0:	00801444 	movi	r2,81
   1abe4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1abe8:	00bfffc4 	movi	r2,-1
}
   1abec:	e037883a 	mov	sp,fp
   1abf0:	dfc00117 	ldw	ra,4(sp)
   1abf4:	df000017 	ldw	fp,0(sp)
   1abf8:	dec00204 	addi	sp,sp,8
   1abfc:	f800283a 	ret
