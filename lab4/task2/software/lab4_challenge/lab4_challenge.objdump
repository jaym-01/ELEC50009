
lab4_challenge.elf:     file format elf32-littlenios2
lab4_challenge.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00003258 memsz 0x00003258 flags r-x
    LOAD off    0x00004278 vaddr 0x00013278 paddr 0x0001340c align 2**12
         filesz 0x00000194 memsz 0x00000194 flags rw-
    LOAD off    0x000045a0 vaddr 0x000135a0 paddr 0x000135a0 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002f08  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001f0  00013088  00013088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000194  00013278  0001340c  00004278  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  000135a0  000135a0  000045a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000136d0  000136d0  0000440c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000440c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000698  00000000  00000000  00004430  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000993c  00000000  00000000  00004ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003652  00000000  00000000  0000e404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003948  00000000  00000000  00011a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009f0  00000000  00000000  000153a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002307  00000000  00000000  00015d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004efb  00000000  00000000  00018097  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001cf94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000008c0  00000000  00000000  0001cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001f4f2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001f4f5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f4f8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f4f9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001f4fa  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001f4fe  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001f502  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001f506  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001f50f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001f518  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001f521  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  0001f533  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  0001f55d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004264c  00000000  00000000  00024566  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00013088 l    d  .rodata	00000000 .rodata
00013278 l    d  .rwdata	00000000 .rwdata
000135a0 l    d  .bss	00000000 .bss
000136d0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_challenge_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab4.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
00013278 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
000122c4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000133ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013358 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012ef0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
000135cc g     O .bss	00000004 alt_instruction_exception_handler
00012878 g     F .text	0000001c _malloc_usable_size_r
00012c1c g     F .text	0000002c alt_main
00010370 g     F .text	00000014 led_write
000135d0 g     O .bss	00000100 alt_irq
0001340c g       *ABS*	00000000 __flash_rwdata_start
000136d0 g       *ABS*	00000000 __alt_heap_start
0001056c g     F .text	00000030 shift
00011f34 g     F .text	00000060 memmove
00010ff4 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
00012c48 g     F .text	00000038 alt_putstr
000133f0 g     O .rwdata	00000004 jtag_uart
00012fdc g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00012de4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000135b8 g     O .bss	00000004 errno
000135c4 g     O .bss	00000004 alt_argv
0001b3dc g       *ABS*	00000000 _gp
000102bc g     F .text	000000b4 generate_text
00013384 g     O .rwdata	00000030 alt_fd_list
00012f64 g     F .text	00000074 alt_find_dev
00011f0c g     F .text	00000028 memcpy
00011a74 g     F .text	000000dc .hidden __floatsidf
00012fe4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000135a0 g     O .bss	00000004 filter_mode
00012cfc g     F .text	0000005c altera_avalon_jtag_uart_read
00011ee4 g     F .text	00000014 malloc
000129a8 g     F .text	00000064 .hidden __udivsi3
00010280 g     F .text	0000003c jtag_uart_isr
00012274 g     F .text	00000050 _sbrk_r
000133f4 g     O .rwdata	00000004 alt_max_fd
00012aa8 g     F .text	00000094 alt_irq_register
00011b50 g     F .text	00000110 .hidden __extendsfdf2
000133e0 g     O .rwdata	00000004 _global_impure_ptr
000121d0 g     F .text	000000a4 _realloc_r
000136d0 g       *ABS*	00000000 __bss_end
00012a64 g     F .text	00000044 alt_getchar
000133dc g     O .rwdata	00000004 precision
000135bc g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000133b4 g     O .rwdata	00000028 alt_dev_null
00012eec g     F .text	00000004 alt_dcache_flush_all
000119f4 g     F .text	00000080 .hidden __fixdfsi
0001023c g     F .text	00000044 print_text
0001340c g       *ABS*	00000000 __ram_rwdata_end
000103b8 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000133f8 g     O .rwdata	00000008 alt_dev_list
00013278 g       *ABS*	00000000 __ram_rodata_end
00011dd0 g     F .text	00000114 __sfvwrite_small_str_mbf
000135a8 g     O .bss	00000001 led
00012a0c g     F .text	00000058 .hidden __umodsi3
000136d0 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011c60 g     F .text	00000064 .hidden __clzsi2
00012d58 g     F .text	00000034 altera_avalon_jtag_uart_write
00011cc4 g     F .text	0000007c _asprintf_r
00011f94 g     F .text	000000e4 _free_r
00010180 g     F .text	0000003c _start
000135ac g     O .bss	00000004 level
00012cec g     F .text	00000010 alt_sys_init
00012d94 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011064 g     F .text	00000124 .hidden __floatsisf
00010428 g     F .text	000000a8 filter
000106d4 g     F .text	00000028 .hidden __mulsi3
00013278 g       *ABS*	00000000 __ram_rwdata_start
00013088 g       *ABS*	00000000 __ram_rodata_start
00012e3c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00013058 g     F .text	00000030 memcmp
000136d0 g       *ABS*	00000000 __alt_stack_base
00011188 g     F .text	0000086c .hidden __muldf3
00012ef8 g     F .text	0000006c alt_dev_llist_insert
00012c80 g     F .text	0000004c sbrk
00012330 g     F .text	0000052c ___svfprintf_internal_r
000135a0 g       *ABS*	00000000 __bss_start
0001059c g     F .text	00000138 main
000135c0 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
00012078 g     F .text	00000158 _malloc_r
00013408 g     O .rwdata	00000004 alt_errno
000128b0 g     F .text	00000084 .hidden __divsi3
00010bc4 g     F .text	00000430 .hidden __mulsf3
00013088 g       *ABS*	00000000 __flash_rodata_start
00012ccc g     F .text	00000020 alt_irq_init
0001316c g     O .rodata	00000100 .hidden __clz_tab
00011d40 g     F .text	00000090 asprintf
000133e4 g     O .rwdata	00000004 _impure_ptr
000135c8 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000104d0 g     F .text	0000009c filter_fixed
000135a4 g     O .bss	00000001 pwm
00013400 g     O .rwdata	00000008 alt_fs_list
0001285c g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012d8c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001340c g       *ABS*	00000000 _edata
000136d0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00012934 g     F .text	00000074 .hidden __modsi3
00012e94 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010384 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00012da8 g     F .text	00000020 alt_up_accelerometer_spi_read
00012dc8 g     F .text	0000001c alt_up_accelerometer_spi_write
00012894 g     F .text	0000001c strlen
000135b0 g     O .bss	00000004 __malloc_sbrk_start
00012fd8 g     F .text	00000004 alt_icache_flush_all
000133e8 g     O .rwdata	00000004 alt_priority_mask
000135b4 g     O .bss	00000004 __malloc_free_list
000106fc g     F .text	000004c8 .hidden __addsf3
00012b3c g     F .text	000000e0 alt_load
00011ef8 g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	840d7404 	addi	r16,r16,13776

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07c17 	ldw	r2,-32272(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6acf714 	ori	gp,gp,46044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108d6814 	ori	r2,r2,13728

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cdb414 	ori	r3,r3,14032

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0012b3c0 	call	12b3c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0012c1c0 	call	12c1c <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07417 	ldw	r2,-32304(gp)
   101cc:	d1607207 	ldb	r5,-32312(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
//
//    return 0;
//}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07303 	ldbu	r2,-32308(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07303 	ldbu	r2,-32308(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07303 	ldbu	r2,-32308(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07203 	ldbu	r2,-32312(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207205 	stb	zero,-32312(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07205 	stb	r2,-32312(gp)
   10238:	f800283a 	ret

0001023c <print_text>:
const int precision = 21;

void print_text(char text)
{
    char *printMsg;
    asprintf(&printMsg, "%c\n%c", text, 0x4); // Print out the strings
   1023c:	21803fcc 	andi	r6,r4,255
int filter_mode = 0;

const int precision = 21;

void print_text(char text)
{
   10240:	defffe04 	addi	sp,sp,-8
    char *printMsg;
    asprintf(&printMsg, "%c\n%c", text, 0x4); // Print out the strings
   10244:	3180201c 	xori	r6,r6,128
   10248:	01400074 	movhi	r5,1
   1024c:	01c00104 	movi	r7,4
   10250:	31bfe004 	addi	r6,r6,-128
   10254:	294c2204 	addi	r5,r5,12424
   10258:	d809883a 	mov	r4,sp
int filter_mode = 0;

const int precision = 21;

void print_text(char text)
{
   1025c:	dfc00115 	stw	ra,4(sp)
    char *printMsg;
    asprintf(&printMsg, "%c\n%c", text, 0x4); // Print out the strings
   10260:	0011d400 	call	11d40 <asprintf>
    alt_putstr(printMsg);
   10264:	d9000017 	ldw	r4,0(sp)
   10268:	0012c480 	call	12c48 <alt_putstr>
    free(printMsg);
   1026c:	d9000017 	ldw	r4,0(sp)
   10270:	0011ef80 	call	11ef8 <free>
//    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}
   10274:	dfc00117 	ldw	ra,4(sp)
   10278:	dec00204 	addi	sp,sp,8
   1027c:	f800283a 	ret

00010280 <jtag_uart_isr>:
//	char text[2 * CHARLIM]; // The buffer for the printing text
//    char prevLetter = '!';
//    int length = 0;
//	int running = 1;

	char c = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE);
   10280:	008000b4 	movhi	r2,2
   10284:	10840e04 	addi	r2,r2,4152
   10288:	11000037 	ldwio	r4,0(r2)
//	print_text(c);
//	return;
//	char *msg;

	if(c == '1'){
   1028c:	00800c44 	movi	r2,49
   10290:	21003fcc 	andi	r4,r4,255
   10294:	2100201c 	xori	r4,r4,128
   10298:	213fe004 	addi	r4,r4,-128
   1029c:	2080031e 	bne	r4,r2,102ac <jtag_uart_isr+0x2c>
		filter_mode = 1;
   102a0:	00800044 	movi	r2,1
   102a4:	d0a07115 	stw	r2,-32316(gp)
   102a8:	00000306 	br	102b8 <jtag_uart_isr+0x38>
	}
	if(c == '0'){
   102ac:	00800c04 	movi	r2,48
   102b0:	2080011e 	bne	r4,r2,102b8 <jtag_uart_isr+0x38>
		filter_mode = 0;
   102b4:	d0207115 	stw	zero,-32316(gp)
//		*msg = "filter off";
//		print_text("0");
	}

	print_text(c);
   102b8:	001023c1 	jmpi	1023c <print_text>

000102bc <generate_text>:
    free(printMsg);
//    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

char generate_text(char curr, int *length, char *text, int *running)
{
   102bc:	2005883a 	mov	r2,r4
    if (curr == '\n')
   102c0:	21003fcc 	andi	r4,r4,255
   102c4:	2100201c 	xori	r4,r4,128
   102c8:	213fe004 	addi	r4,r4,-128
   102cc:	00c00284 	movi	r3,10
   102d0:	20c02626 	beq	r4,r3,1036c <generate_text+0xb0>
    free(printMsg);
//    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

char generate_text(char curr, int *length, char *text, int *running)
{
   102d4:	defff804 	addi	sp,sp,-32
   102d8:	dd800615 	stw	r22,24(sp)
   102dc:	dd400515 	stw	r21,20(sp)
   102e0:	dd000415 	stw	r20,16(sp)
   102e4:	dcc00315 	stw	r19,12(sp)
   102e8:	dc800215 	stw	r18,8(sp)
   102ec:	dc400115 	stw	r17,4(sp)
   102f0:	dc000015 	stw	r16,0(sp)
   102f4:	dfc00715 	stw	ra,28(sp)
   102f8:	3829883a 	mov	r20,r7
   102fc:	3025883a 	mov	r18,r6
   10300:	2827883a 	mov	r19,r5
    if (curr == '\n')
   10304:	3023883a 	mov	r17,r6
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   10308:	057fffc4 	movi	r21,-1
   1030c:	1821883a 	mov	r16,r3
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   10310:	05801f84 	movi	r22,126
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   10314:	10c03fcc 	andi	r3,r2,255
   10318:	18c0201c 	xori	r3,r3,128
   1031c:	18ffe004 	addi	r3,r3,-128
   10320:	8c89c83a 	sub	r4,r17,r18
   10324:	1d400726 	beq	r3,r21,10344 <generate_text+0x88>
   10328:	1c000626 	beq	r3,r16,10344 <generate_text+0x88>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   1032c:	1d80011e 	bne	r3,r22,10334 <generate_text+0x78>
        {
            *running = 0;
   10330:	a0000015 	stw	zero,0(r20)
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
   10334:	88800005 	stb	r2,0(r17)
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
   10338:	0012a640 	call	12a64 <alt_getchar>
   1033c:	8c400044 	addi	r17,r17,1
   10340:	003ff406 	br	10314 <__alt_data_end+0xffff0314>
    }
    *length = idx;
   10344:	99000015 	stw	r4,0(r19)

    return newCurr;
}
   10348:	dfc00717 	ldw	ra,28(sp)
   1034c:	dd800617 	ldw	r22,24(sp)
   10350:	dd400517 	ldw	r21,20(sp)
   10354:	dd000417 	ldw	r20,16(sp)
   10358:	dcc00317 	ldw	r19,12(sp)
   1035c:	dc800217 	ldw	r18,8(sp)
   10360:	dc400117 	ldw	r17,4(sp)
   10364:	dc000017 	ldw	r16,0(sp)
   10368:	dec00804 	addi	sp,sp,32
   1036c:	f800283a 	ret

00010370 <led_write>:
//
//    return 0;
//}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   10370:	008000b4 	movhi	r2,2
   10374:	21003fcc 	andi	r4,r4,255
   10378:	10840804 	addi	r2,r2,4128
   1037c:	11000035 	stwio	r4,0(r2)
   10380:	f800283a 	ret

00010384 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
//    alt_printf("raw data: %x\n", acc_read);
    acc_read += OFFSET;
   10384:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   10388:	2005d1ba 	srai	r2,r4,6

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   1038c:	2009d07a 	srai	r4,r4,1
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   10390:	10c001cc 	andi	r3,r2,7
   10394:	00800204 	movi	r2,8
   10398:	10cfc83a 	sub	r7,r2,r3
   1039c:	11ce983a 	sll	r7,r2,r7
   103a0:	10c5d83a 	sra	r2,r2,r3

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   103a4:	210007cc 	andi	r4,r4,31
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   103a8:	3884b03a 	or	r2,r7,r2
   103ac:	30800005 	stb	r2,0(r6)

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   103b0:	29000015 	stw	r4,0(r5)
   103b4:	f800283a 	ret

000103b8 <timer_init>:
	}

	print_text(c);
}

void timer_init(void * isr) {
   103b8:	defffe04 	addi	sp,sp,-8
   103bc:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   103c0:	040000b4 	movhi	r16,2
	}

	print_text(c);
}

void timer_init(void * isr) {
   103c4:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   103c8:	84040104 	addi	r16,r16,4100
   103cc:	008000c4 	movi	r2,3
   103d0:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   103d4:	00c000b4 	movhi	r3,2
   103d8:	0005883a 	mov	r2,zero
   103dc:	18c40004 	addi	r3,r3,4096
   103e0:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   103e4:	00c000b4 	movhi	r3,2
   103e8:	18c40204 	addi	r3,r3,4104
   103ec:	01424004 	movi	r5,2304
   103f0:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   103f4:	00c000b4 	movhi	r3,2
   103f8:	18c40304 	addi	r3,r3,4108
   103fc:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10400:	200d883a 	mov	r6,r4
   10404:	000b883a 	mov	r5,zero
   10408:	01000044 	movi	r4,1
   1040c:	0012aa80 	call	12aa8 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10410:	008001c4 	movi	r2,7
   10414:	80800035 	stwio	r2,0(r16)

}
   10418:	dfc00117 	ldw	ra,4(sp)
   1041c:	dc000017 	ldw	r16,0(sp)
   10420:	dec00204 	addi	sp,sp,8
   10424:	f800283a 	ret

00010428 <filter>:

alt_32 filter(float* taps, alt_32* prev_vals, int n){
   10428:	defff904 	addi	sp,sp,-28
   1042c:	dd000415 	stw	r20,16(sp)
   10430:	dcc00315 	stw	r19,12(sp)
   10434:	dc800215 	stw	r18,8(sp)
   10438:	dc400115 	stw	r17,4(sp)
   1043c:	dc000015 	stw	r16,0(sp)
   10440:	dfc00615 	stw	ra,24(sp)
   10444:	dd400515 	stw	r21,20(sp)
   10448:	3029883a 	mov	r20,r6
   1044c:	2025883a 	mov	r18,r4
   10450:	2827883a 	mov	r19,r5
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   10454:	0023883a 	mov	r17,zero
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;
   10458:	0021883a 	mov	r16,zero


    for(int i = 0; i < n; i++){
   1045c:	8d00120e 	bge	r17,r20,104a8 <filter+0x80>
        sum += taps[i] * prev_vals[i];
   10460:	99000017 	ldw	r4,0(r19)

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   10464:	8c400044 	addi	r17,r17,1
   10468:	94800104 	addi	r18,r18,4
        sum += taps[i] * prev_vals[i];
   1046c:	00110640 	call	11064 <__floatsisf>
   10470:	917fff17 	ldw	r5,-4(r18)
   10474:	1009883a 	mov	r4,r2
   10478:	9cc00104 	addi	r19,r19,4
   1047c:	0010bc40 	call	10bc4 <__mulsf3>
   10480:	8009883a 	mov	r4,r16
   10484:	102b883a 	mov	r21,r2
   10488:	00110640 	call	11064 <__floatsisf>
   1048c:	100b883a 	mov	r5,r2
   10490:	a809883a 	mov	r4,r21
   10494:	00106fc0 	call	106fc <__addsf3>
   10498:	1009883a 	mov	r4,r2
   1049c:	0010ff40 	call	10ff4 <__fixsfsi>
   104a0:	1021883a 	mov	r16,r2
   104a4:	003fed06 	br	1045c <__alt_data_end+0xffff045c>
    }

    return sum;
}
   104a8:	8005883a 	mov	r2,r16
   104ac:	dfc00617 	ldw	ra,24(sp)
   104b0:	dd400517 	ldw	r21,20(sp)
   104b4:	dd000417 	ldw	r20,16(sp)
   104b8:	dcc00317 	ldw	r19,12(sp)
   104bc:	dc800217 	ldw	r18,8(sp)
   104c0:	dc400117 	ldw	r17,4(sp)
   104c4:	dc000017 	ldw	r16,0(sp)
   104c8:	dec00704 	addi	sp,sp,28
   104cc:	f800283a 	ret

000104d0 <filter_fixed>:

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
   104d0:	defffa04 	addi	sp,sp,-24
   104d4:	dd000415 	stw	r20,16(sp)
   104d8:	dcc00315 	stw	r19,12(sp)
   104dc:	dc800215 	stw	r18,8(sp)
   104e0:	dc400115 	stw	r17,4(sp)
   104e4:	dc000015 	stw	r16,0(sp)
   104e8:	dfc00515 	stw	ra,20(sp)
   104ec:	3029883a 	mov	r20,r6
   104f0:	2025883a 	mov	r18,r4
   104f4:	2827883a 	mov	r19,r5
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   104f8:	0023883a 	mov	r17,zero

    return sum;
}

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;
   104fc:	0021883a 	mov	r16,zero


    for(int i = 0; i < n; i++){
   10500:	8d00080e 	bge	r17,r20,10524 <filter_fixed+0x54>
        sum += taps_fixed[i] * prev_vals[i];
   10504:	99400017 	ldw	r5,0(r19)
   10508:	91000017 	ldw	r4,0(r18)

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   1050c:	8c400044 	addi	r17,r17,1
   10510:	94800104 	addi	r18,r18,4
        sum += taps_fixed[i] * prev_vals[i];
   10514:	00106d40 	call	106d4 <__mulsi3>
   10518:	80a1883a 	add	r16,r16,r2
   1051c:	9cc00104 	addi	r19,r19,4
   10520:	003ff706 	br	10500 <__alt_data_end+0xffff0500>
    }

    sum /= pow(2, precision);
   10524:	8009883a 	mov	r4,r16
   10528:	0011a740 	call	11a74 <__floatsidf>
   1052c:	000d883a 	mov	r6,zero
   10530:	01cfa834 	movhi	r7,16032
   10534:	1009883a 	mov	r4,r2
   10538:	180b883a 	mov	r5,r3
   1053c:	00111880 	call	11188 <__muldf3>

    return sum;
   10540:	1009883a 	mov	r4,r2
   10544:	180b883a 	mov	r5,r3
   10548:	00119f40 	call	119f4 <__fixdfsi>
}
   1054c:	dfc00517 	ldw	ra,20(sp)
   10550:	dd000417 	ldw	r20,16(sp)
   10554:	dcc00317 	ldw	r19,12(sp)
   10558:	dc800217 	ldw	r18,8(sp)
   1055c:	dc400117 	ldw	r17,4(sp)
   10560:	dc000017 	ldw	r16,0(sp)
   10564:	dec00604 	addi	sp,sp,24
   10568:	f800283a 	ret

0001056c <shift>:

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   1056c:	30bfffc4 	addi	r2,r6,-1
   10570:	318d883a 	add	r6,r6,r6
   10574:	318d883a 	add	r6,r6,r6
   10578:	218d883a 	add	r6,r4,r6
   1057c:	31bfff04 	addi	r6,r6,-4
   10580:	0080040e 	bge	zero,r2,10594 <shift+0x28>
        prev_vals[i] = prev_vals[i - 1];
   10584:	30ffff17 	ldw	r3,-4(r6)

    return sum;
}

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   10588:	10bfffc4 	addi	r2,r2,-1
        prev_vals[i] = prev_vals[i - 1];
   1058c:	30c00015 	stw	r3,0(r6)
   10590:	003ffa06 	br	1057c <__alt_data_end+0xffff057c>
    }

    prev_vals[0] = x_read;
   10594:	21400015 	stw	r5,0(r4)
   10598:	f800283a 	ret

0001059c <main>:
//    int length = 0;
//	int running = 1;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1059c:	01000074 	movhi	r4,1
    prev_vals[0] = x_read;

    return;
}

int main() {
   105a0:	deff6704 	addi	sp,sp,-612
//    int length = 0;
//	int running = 1;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   105a4:	210c2404 	addi	r4,r4,12432
    prev_vals[0] = x_read;

    return;
}

int main() {
   105a8:	dfc09815 	stw	ra,608(sp)
   105ac:	dcc09715 	stw	r19,604(sp)
   105b0:	dc809615 	stw	r18,600(sp)
   105b4:	dc409515 	stw	r17,596(sp)
   105b8:	dc009415 	stw	r16,592(sp)
//    int length = 0;
//	int running = 1;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   105bc:	0012d8c0 	call	12d8c <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   105c0:	10003c26 	beq	r2,zero,106b4 <main+0x118>
        return 1;
    }

    const int array_size = 49;

    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   105c4:	01400074 	movhi	r5,1
   105c8:	01803104 	movi	r6,196
   105cc:	294c2a04 	addi	r5,r5,12456
   105d0:	d9006204 	addi	r4,sp,392
   105d4:	1023883a 	mov	r17,r2
   105d8:	0021883a 	mov	r16,zero
   105dc:	0011f0c0 	call	11f0c <memcpy>
    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   105e0:	04803104 	movi	r18,196
        prev_vals[i] = 0;
   105e4:	d8c03104 	addi	r3,sp,196
   105e8:	1c05883a 	add	r2,r3,r16

        fixed_taps[i] = taps[i] * pow(2, precision);
   105ec:	d8c06204 	addi	r3,sp,392
    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
        prev_vals[i] = 0;
   105f0:	10000015 	stw	zero,0(r2)

        fixed_taps[i] = taps[i] * pow(2, precision);
   105f4:	1c05883a 	add	r2,r3,r16
   105f8:	11000017 	ldw	r4,0(r2)
   105fc:	dc27883a 	add	r19,sp,r16
   10600:	84000104 	addi	r16,r16,4
   10604:	0011b500 	call	11b50 <__extendsfdf2>
   10608:	000d883a 	mov	r6,zero
   1060c:	01d05034 	movhi	r7,16704
   10610:	1009883a 	mov	r4,r2
   10614:	180b883a 	mov	r5,r3
   10618:	00111880 	call	11188 <__muldf3>
   1061c:	1009883a 	mov	r4,r2
   10620:	180b883a 	mov	r5,r3
   10624:	00119f40 	call	119f4 <__fixdfsi>
   10628:	98800015 	stw	r2,0(r19)
    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   1062c:	84bfed1e 	bne	r16,r18,105e4 <__alt_data_end+0xffff05e4>
        prev_vals[i] = 0;

        fixed_taps[i] = taps[i] * pow(2, precision);
    }

    timer_init(sys_timer_isr);
   10630:	01000074 	movhi	r4,1
   10634:	21006f04 	addi	r4,r4,444
   10638:	00103b80 	call	103b8 <timer_init>
    alt_irq_register(JTAG_UART_IRQ, NULL, jtag_uart_isr);
   1063c:	01800074 	movhi	r6,1
   10640:	3180a004 	addi	r6,r6,640
   10644:	000b883a 	mov	r5,zero
   10648:	0009883a 	mov	r4,zero
   1064c:	0012aa80 	call	12aa8 <alt_irq_register>
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK);
   10650:	008000b4 	movhi	r2,2
   10654:	10840f04 	addi	r2,r2,4156
   10658:	00c04044 	movi	r3,257
   1065c:	10c00035 	stwio	r3,0(r2)
//    	}

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        shift(& prev_vals, x_read, array_size);

        if(filter_mode == 1){
   10660:	04000044 	movi	r16,1
//    	if (IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) {
//    		char c = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK;
//    		print_text(c);
//    	}

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10664:	d9409304 	addi	r5,sp,588
   10668:	8809883a 	mov	r4,r17
   1066c:	0012de40 	call	12de4 <alt_up_accelerometer_spi_read_x_axis>
        shift(& prev_vals, x_read, array_size);
   10670:	d9409317 	ldw	r5,588(sp)
   10674:	01800c44 	movi	r6,49
   10678:	d9003104 	addi	r4,sp,196
   1067c:	001056c0 	call	1056c <shift>

        if(filter_mode == 1){
   10680:	d0a07117 	ldw	r2,-32316(gp)
   10684:	1400051e 	bne	r2,r16,1069c <main+0x100>
        	filtered_x = filter_fixed(& fixed_taps, & prev_vals, array_size);
   10688:	01800c44 	movi	r6,49
   1068c:	d9403104 	addi	r5,sp,196
   10690:	d809883a 	mov	r4,sp
   10694:	00104d00 	call	104d0 <filter_fixed>
   10698:	00000106 	br	106a0 <main+0x104>

        }
        else{
        	filtered_x = x_read;
   1069c:	d8809317 	ldw	r2,588(sp)
        }

        // filtering
        convert_read(filtered_x, & level, & led);
   106a0:	d1a07304 	addi	r6,gp,-32308
   106a4:	d1607404 	addi	r5,gp,-32304
   106a8:	1009883a 	mov	r4,r2
   106ac:	00103840 	call	10384 <convert_read>
    }
   106b0:	003fec06 	br	10664 <__alt_data_end+0xffff0664>
    return 0;

}
   106b4:	00800044 	movi	r2,1
   106b8:	dfc09817 	ldw	ra,608(sp)
   106bc:	dcc09717 	ldw	r19,604(sp)
   106c0:	dc809617 	ldw	r18,600(sp)
   106c4:	dc409517 	ldw	r17,596(sp)
   106c8:	dc009417 	ldw	r16,592(sp)
   106cc:	dec09904 	addi	sp,sp,612
   106d0:	f800283a 	ret

000106d4 <__mulsi3>:
   106d4:	0005883a 	mov	r2,zero
   106d8:	20000726 	beq	r4,zero,106f8 <__mulsi3+0x24>
   106dc:	20c0004c 	andi	r3,r4,1
   106e0:	2008d07a 	srli	r4,r4,1
   106e4:	18000126 	beq	r3,zero,106ec <__mulsi3+0x18>
   106e8:	1145883a 	add	r2,r2,r5
   106ec:	294b883a 	add	r5,r5,r5
   106f0:	203ffa1e 	bne	r4,zero,106dc <__alt_data_end+0xffff06dc>
   106f4:	f800283a 	ret
   106f8:	f800283a 	ret

000106fc <__addsf3>:
   106fc:	defffc04 	addi	sp,sp,-16
   10700:	2004d7fa 	srli	r2,r4,31
   10704:	280cd5fa 	srli	r6,r5,23
   10708:	dc000015 	stw	r16,0(sp)
   1070c:	00c02034 	movhi	r3,128
   10710:	2020d5fa 	srli	r16,r4,23
   10714:	280ed7fa 	srli	r7,r5,31
   10718:	18ffffc4 	addi	r3,r3,-1
   1071c:	dc400115 	stw	r17,4(sp)
   10720:	1908703a 	and	r4,r3,r4
   10724:	194a703a 	and	r5,r3,r5
   10728:	dfc00315 	stw	ra,12(sp)
   1072c:	dc800215 	stw	r18,8(sp)
   10730:	14403fcc 	andi	r17,r2,255
   10734:	84003fcc 	andi	r16,r16,255
   10738:	200890fa 	slli	r4,r4,3
   1073c:	31803fcc 	andi	r6,r6,255
   10740:	280a90fa 	slli	r5,r5,3
   10744:	89c05026 	beq	r17,r7,10888 <__addsf3+0x18c>
   10748:	8185c83a 	sub	r2,r16,r6
   1074c:	00807a0e 	bge	zero,r2,10938 <__addsf3+0x23c>
   10750:	30001e1e 	bne	r6,zero,107cc <__addsf3+0xd0>
   10754:	28006d1e 	bne	r5,zero,1090c <__addsf3+0x210>
   10758:	208001cc 	andi	r2,r4,7
   1075c:	10000426 	beq	r2,zero,10770 <__addsf3+0x74>
   10760:	208003cc 	andi	r2,r4,15
   10764:	00c00104 	movi	r3,4
   10768:	10c00126 	beq	r2,r3,10770 <__addsf3+0x74>
   1076c:	20c9883a 	add	r4,r4,r3
   10770:	2081002c 	andhi	r2,r4,1024
   10774:	10003926 	beq	r2,zero,1085c <__addsf3+0x160>
   10778:	84000044 	addi	r16,r16,1
   1077c:	00803fc4 	movi	r2,255
   10780:	80807826 	beq	r16,r2,10964 <__addsf3+0x268>
   10784:	200891ba 	slli	r4,r4,6
   10788:	8805883a 	mov	r2,r17
   1078c:	2008d27a 	srli	r4,r4,9
   10790:	84003fcc 	andi	r16,r16,255
   10794:	800695fa 	slli	r3,r16,23
   10798:	10803fcc 	andi	r2,r2,255
   1079c:	04002034 	movhi	r16,128
   107a0:	843fffc4 	addi	r16,r16,-1
   107a4:	100497fa 	slli	r2,r2,31
   107a8:	2408703a 	and	r4,r4,r16
   107ac:	20e0b03a 	or	r16,r4,r3
   107b0:	8084b03a 	or	r2,r16,r2
   107b4:	dfc00317 	ldw	ra,12(sp)
   107b8:	dc800217 	ldw	r18,8(sp)
   107bc:	dc400117 	ldw	r17,4(sp)
   107c0:	dc000017 	ldw	r16,0(sp)
   107c4:	dec00404 	addi	sp,sp,16
   107c8:	f800283a 	ret
   107cc:	00c03fc4 	movi	r3,255
   107d0:	80ffe126 	beq	r16,r3,10758 <__alt_data_end+0xffff0758>
   107d4:	29410034 	orhi	r5,r5,1024
   107d8:	00c006c4 	movi	r3,27
   107dc:	18807516 	blt	r3,r2,109b4 <__addsf3+0x2b8>
   107e0:	00c00804 	movi	r3,32
   107e4:	1887c83a 	sub	r3,r3,r2
   107e8:	28c6983a 	sll	r3,r5,r3
   107ec:	288ad83a 	srl	r5,r5,r2
   107f0:	1804c03a 	cmpne	r2,r3,zero
   107f4:	288ab03a 	or	r5,r5,r2
   107f8:	2149c83a 	sub	r4,r4,r5
   107fc:	2081002c 	andhi	r2,r4,1024
   10800:	10001426 	beq	r2,zero,10854 <__addsf3+0x158>
   10804:	04810034 	movhi	r18,1024
   10808:	94bfffc4 	addi	r18,r18,-1
   1080c:	24a4703a 	and	r18,r4,r18
   10810:	9009883a 	mov	r4,r18
   10814:	0011c600 	call	11c60 <__clzsi2>
   10818:	10bffec4 	addi	r2,r2,-5
   1081c:	90a4983a 	sll	r18,r18,r2
   10820:	14005416 	blt	r2,r16,10974 <__addsf3+0x278>
   10824:	1405c83a 	sub	r2,r2,r16
   10828:	11000044 	addi	r4,r2,1
   1082c:	00800804 	movi	r2,32
   10830:	1105c83a 	sub	r2,r2,r4
   10834:	9084983a 	sll	r2,r18,r2
   10838:	9124d83a 	srl	r18,r18,r4
   1083c:	0021883a 	mov	r16,zero
   10840:	1008c03a 	cmpne	r4,r2,zero
   10844:	9108b03a 	or	r4,r18,r4
   10848:	003fc306 	br	10758 <__alt_data_end+0xffff0758>
   1084c:	1000db26 	beq	r2,zero,10bbc <__addsf3+0x4c0>
   10850:	1009883a 	mov	r4,r2
   10854:	208001cc 	andi	r2,r4,7
   10858:	103fc11e 	bne	r2,zero,10760 <__alt_data_end+0xffff0760>
   1085c:	2006d0fa 	srli	r3,r4,3
   10860:	01003fc4 	movi	r4,255
   10864:	8805883a 	mov	r2,r17
   10868:	8100241e 	bne	r16,r4,108fc <__addsf3+0x200>
   1086c:	18006e26 	beq	r3,zero,10a28 <__addsf3+0x32c>
   10870:	19001034 	orhi	r4,r3,64
   10874:	00c02034 	movhi	r3,128
   10878:	18ffffc4 	addi	r3,r3,-1
   1087c:	043fffc4 	movi	r16,-1
   10880:	20c8703a 	and	r4,r4,r3
   10884:	003fc206 	br	10790 <__alt_data_end+0xffff0790>
   10888:	8187c83a 	sub	r3,r16,r6
   1088c:	00c03e0e 	bge	zero,r3,10988 <__addsf3+0x28c>
   10890:	30002326 	beq	r6,zero,10920 <__addsf3+0x224>
   10894:	01803fc4 	movi	r6,255
   10898:	81bfaf26 	beq	r16,r6,10758 <__alt_data_end+0xffff0758>
   1089c:	29410034 	orhi	r5,r5,1024
   108a0:	018006c4 	movi	r6,27
   108a4:	30c07416 	blt	r6,r3,10a78 <__addsf3+0x37c>
   108a8:	01800804 	movi	r6,32
   108ac:	30cdc83a 	sub	r6,r6,r3
   108b0:	298c983a 	sll	r6,r5,r6
   108b4:	28cad83a 	srl	r5,r5,r3
   108b8:	3006c03a 	cmpne	r3,r6,zero
   108bc:	28cab03a 	or	r5,r5,r3
   108c0:	2149883a 	add	r4,r4,r5
   108c4:	20c1002c 	andhi	r3,r4,1024
   108c8:	183fe226 	beq	r3,zero,10854 <__alt_data_end+0xffff0854>
   108cc:	84000044 	addi	r16,r16,1
   108d0:	00c03fc4 	movi	r3,255
   108d4:	80c05426 	beq	r16,r3,10a28 <__addsf3+0x32c>
   108d8:	00bf0034 	movhi	r2,64512
   108dc:	10bfffc4 	addi	r2,r2,-1
   108e0:	20c0004c 	andi	r3,r4,1
   108e4:	2088703a 	and	r4,r4,r2
   108e8:	2008d07a 	srli	r4,r4,1
   108ec:	20c8b03a 	or	r4,r4,r3
   108f0:	003f9906 	br	10758 <__alt_data_end+0xffff0758>
   108f4:	0007883a 	mov	r3,zero
   108f8:	0005883a 	mov	r2,zero
   108fc:	01002034 	movhi	r4,128
   10900:	213fffc4 	addi	r4,r4,-1
   10904:	1908703a 	and	r4,r3,r4
   10908:	003fa106 	br	10790 <__alt_data_end+0xffff0790>
   1090c:	10bfffc4 	addi	r2,r2,-1
   10910:	103fb926 	beq	r2,zero,107f8 <__alt_data_end+0xffff07f8>
   10914:	00c03fc4 	movi	r3,255
   10918:	80ffaf1e 	bne	r16,r3,107d8 <__alt_data_end+0xffff07d8>
   1091c:	003f8e06 	br	10758 <__alt_data_end+0xffff0758>
   10920:	283f8d26 	beq	r5,zero,10758 <__alt_data_end+0xffff0758>
   10924:	18ffffc4 	addi	r3,r3,-1
   10928:	183fe526 	beq	r3,zero,108c0 <__alt_data_end+0xffff08c0>
   1092c:	01803fc4 	movi	r6,255
   10930:	81bfdb1e 	bne	r16,r6,108a0 <__alt_data_end+0xffff08a0>
   10934:	003f8806 	br	10758 <__alt_data_end+0xffff0758>
   10938:	1000201e 	bne	r2,zero,109bc <__addsf3+0x2c0>
   1093c:	80800044 	addi	r2,r16,1
   10940:	10803fcc 	andi	r2,r2,255
   10944:	01800044 	movi	r6,1
   10948:	3080450e 	bge	r6,r2,10a60 <__addsf3+0x364>
   1094c:	2165c83a 	sub	r18,r4,r5
   10950:	90c1002c 	andhi	r3,r18,1024
   10954:	18002b26 	beq	r3,zero,10a04 <__addsf3+0x308>
   10958:	2925c83a 	sub	r18,r5,r4
   1095c:	3823883a 	mov	r17,r7
   10960:	003fab06 	br	10810 <__alt_data_end+0xffff0810>
   10964:	8805883a 	mov	r2,r17
   10968:	043fffc4 	movi	r16,-1
   1096c:	0009883a 	mov	r4,zero
   10970:	003f8706 	br	10790 <__alt_data_end+0xffff0790>
   10974:	013f0034 	movhi	r4,64512
   10978:	213fffc4 	addi	r4,r4,-1
   1097c:	80a1c83a 	sub	r16,r16,r2
   10980:	9108703a 	and	r4,r18,r4
   10984:	003f7406 	br	10758 <__alt_data_end+0xffff0758>
   10988:	1800411e 	bne	r3,zero,10a90 <__addsf3+0x394>
   1098c:	80c00044 	addi	r3,r16,1
   10990:	19c03fcc 	andi	r7,r3,255
   10994:	01800044 	movi	r6,1
   10998:	31c0260e 	bge	r6,r7,10a34 <__addsf3+0x338>
   1099c:	01803fc4 	movi	r6,255
   109a0:	19802126 	beq	r3,r6,10a28 <__addsf3+0x32c>
   109a4:	2149883a 	add	r4,r4,r5
   109a8:	2008d07a 	srli	r4,r4,1
   109ac:	1821883a 	mov	r16,r3
   109b0:	003f6906 	br	10758 <__alt_data_end+0xffff0758>
   109b4:	01400044 	movi	r5,1
   109b8:	003f8f06 	br	107f8 <__alt_data_end+0xffff07f8>
   109bc:	8000151e 	bne	r16,zero,10a14 <__addsf3+0x318>
   109c0:	20002f26 	beq	r4,zero,10a80 <__addsf3+0x384>
   109c4:	0084303a 	nor	r2,zero,r2
   109c8:	10000a26 	beq	r2,zero,109f4 <__addsf3+0x2f8>
   109cc:	00c03fc4 	movi	r3,255
   109d0:	30c02b26 	beq	r6,r3,10a80 <__addsf3+0x384>
   109d4:	00c006c4 	movi	r3,27
   109d8:	18806d16 	blt	r3,r2,10b90 <__addsf3+0x494>
   109dc:	00c00804 	movi	r3,32
   109e0:	1887c83a 	sub	r3,r3,r2
   109e4:	20c6983a 	sll	r3,r4,r3
   109e8:	2084d83a 	srl	r2,r4,r2
   109ec:	1808c03a 	cmpne	r4,r3,zero
   109f0:	1108b03a 	or	r4,r2,r4
   109f4:	2909c83a 	sub	r4,r5,r4
   109f8:	3021883a 	mov	r16,r6
   109fc:	3823883a 	mov	r17,r7
   10a00:	003f7e06 	br	107fc <__alt_data_end+0xffff07fc>
   10a04:	903f821e 	bne	r18,zero,10810 <__alt_data_end+0xffff0810>
   10a08:	0005883a 	mov	r2,zero
   10a0c:	0021883a 	mov	r16,zero
   10a10:	003fba06 	br	108fc <__alt_data_end+0xffff08fc>
   10a14:	00c03fc4 	movi	r3,255
   10a18:	30c01926 	beq	r6,r3,10a80 <__addsf3+0x384>
   10a1c:	0085c83a 	sub	r2,zero,r2
   10a20:	21010034 	orhi	r4,r4,1024
   10a24:	003feb06 	br	109d4 <__alt_data_end+0xffff09d4>
   10a28:	043fffc4 	movi	r16,-1
   10a2c:	0009883a 	mov	r4,zero
   10a30:	003f5706 	br	10790 <__alt_data_end+0xffff0790>
   10a34:	80004a1e 	bne	r16,zero,10b60 <__addsf3+0x464>
   10a38:	20005926 	beq	r4,zero,10ba0 <__addsf3+0x4a4>
   10a3c:	283f4626 	beq	r5,zero,10758 <__alt_data_end+0xffff0758>
   10a40:	2149883a 	add	r4,r4,r5
   10a44:	2081002c 	andhi	r2,r4,1024
   10a48:	103f8226 	beq	r2,zero,10854 <__alt_data_end+0xffff0854>
   10a4c:	00bf0034 	movhi	r2,64512
   10a50:	10bfffc4 	addi	r2,r2,-1
   10a54:	3021883a 	mov	r16,r6
   10a58:	2088703a 	and	r4,r4,r2
   10a5c:	003f3e06 	br	10758 <__alt_data_end+0xffff0758>
   10a60:	8000121e 	bne	r16,zero,10aac <__addsf3+0x3b0>
   10a64:	2000261e 	bne	r4,zero,10b00 <__addsf3+0x404>
   10a68:	283fa226 	beq	r5,zero,108f4 <__alt_data_end+0xffff08f4>
   10a6c:	2809883a 	mov	r4,r5
   10a70:	3823883a 	mov	r17,r7
   10a74:	003f3806 	br	10758 <__alt_data_end+0xffff0758>
   10a78:	01400044 	movi	r5,1
   10a7c:	003f9006 	br	108c0 <__alt_data_end+0xffff08c0>
   10a80:	2809883a 	mov	r4,r5
   10a84:	3021883a 	mov	r16,r6
   10a88:	3823883a 	mov	r17,r7
   10a8c:	003f3206 	br	10758 <__alt_data_end+0xffff0758>
   10a90:	80000c1e 	bne	r16,zero,10ac4 <__addsf3+0x3c8>
   10a94:	20002f26 	beq	r4,zero,10b54 <__addsf3+0x458>
   10a98:	00c6303a 	nor	r3,zero,r3
   10a9c:	18002b1e 	bne	r3,zero,10b4c <__addsf3+0x450>
   10aa0:	2149883a 	add	r4,r4,r5
   10aa4:	3021883a 	mov	r16,r6
   10aa8:	003f8606 	br	108c4 <__alt_data_end+0xffff08c4>
   10aac:	20001b1e 	bne	r4,zero,10b1c <__addsf3+0x420>
   10ab0:	28003926 	beq	r5,zero,10b98 <__addsf3+0x49c>
   10ab4:	2809883a 	mov	r4,r5
   10ab8:	3823883a 	mov	r17,r7
   10abc:	04003fc4 	movi	r16,255
   10ac0:	003f2506 	br	10758 <__alt_data_end+0xffff0758>
   10ac4:	01c03fc4 	movi	r7,255
   10ac8:	31c02226 	beq	r6,r7,10b54 <__addsf3+0x458>
   10acc:	00c7c83a 	sub	r3,zero,r3
   10ad0:	21010034 	orhi	r4,r4,1024
   10ad4:	01c006c4 	movi	r7,27
   10ad8:	38c03616 	blt	r7,r3,10bb4 <__addsf3+0x4b8>
   10adc:	01c00804 	movi	r7,32
   10ae0:	38cfc83a 	sub	r7,r7,r3
   10ae4:	21ce983a 	sll	r7,r4,r7
   10ae8:	20c6d83a 	srl	r3,r4,r3
   10aec:	3808c03a 	cmpne	r4,r7,zero
   10af0:	1906b03a 	or	r3,r3,r4
   10af4:	1949883a 	add	r4,r3,r5
   10af8:	3021883a 	mov	r16,r6
   10afc:	003f7106 	br	108c4 <__alt_data_end+0xffff08c4>
   10b00:	283f1526 	beq	r5,zero,10758 <__alt_data_end+0xffff0758>
   10b04:	2145c83a 	sub	r2,r4,r5
   10b08:	10c1002c 	andhi	r3,r2,1024
   10b0c:	183f4f26 	beq	r3,zero,1084c <__alt_data_end+0xffff084c>
   10b10:	2909c83a 	sub	r4,r5,r4
   10b14:	3823883a 	mov	r17,r7
   10b18:	003f0f06 	br	10758 <__alt_data_end+0xffff0758>
   10b1c:	28001a26 	beq	r5,zero,10b88 <__addsf3+0x48c>
   10b20:	2008d0fa 	srli	r4,r4,3
   10b24:	2080102c 	andhi	r2,r4,64
   10b28:	10000526 	beq	r2,zero,10b40 <__addsf3+0x444>
   10b2c:	280ad0fa 	srli	r5,r5,3
   10b30:	2880102c 	andhi	r2,r5,64
   10b34:	1000021e 	bne	r2,zero,10b40 <__addsf3+0x444>
   10b38:	2809883a 	mov	r4,r5
   10b3c:	3823883a 	mov	r17,r7
   10b40:	200890fa 	slli	r4,r4,3
   10b44:	04003fc4 	movi	r16,255
   10b48:	003f0306 	br	10758 <__alt_data_end+0xffff0758>
   10b4c:	01c03fc4 	movi	r7,255
   10b50:	31ffe01e 	bne	r6,r7,10ad4 <__alt_data_end+0xffff0ad4>
   10b54:	2809883a 	mov	r4,r5
   10b58:	3021883a 	mov	r16,r6
   10b5c:	003efe06 	br	10758 <__alt_data_end+0xffff0758>
   10b60:	20001126 	beq	r4,zero,10ba8 <__addsf3+0x4ac>
   10b64:	28000826 	beq	r5,zero,10b88 <__addsf3+0x48c>
   10b68:	2008d0fa 	srli	r4,r4,3
   10b6c:	2080102c 	andhi	r2,r4,64
   10b70:	103ff326 	beq	r2,zero,10b40 <__alt_data_end+0xffff0b40>
   10b74:	280ad0fa 	srli	r5,r5,3
   10b78:	2880102c 	andhi	r2,r5,64
   10b7c:	103ff01e 	bne	r2,zero,10b40 <__alt_data_end+0xffff0b40>
   10b80:	2809883a 	mov	r4,r5
   10b84:	003fee06 	br	10b40 <__alt_data_end+0xffff0b40>
   10b88:	04003fc4 	movi	r16,255
   10b8c:	003ef206 	br	10758 <__alt_data_end+0xffff0758>
   10b90:	01000044 	movi	r4,1
   10b94:	003f9706 	br	109f4 <__alt_data_end+0xffff09f4>
   10b98:	0005883a 	mov	r2,zero
   10b9c:	003f3406 	br	10870 <__alt_data_end+0xffff0870>
   10ba0:	2809883a 	mov	r4,r5
   10ba4:	003eec06 	br	10758 <__alt_data_end+0xffff0758>
   10ba8:	2809883a 	mov	r4,r5
   10bac:	04003fc4 	movi	r16,255
   10bb0:	003ee906 	br	10758 <__alt_data_end+0xffff0758>
   10bb4:	00c00044 	movi	r3,1
   10bb8:	003fce06 	br	10af4 <__alt_data_end+0xffff0af4>
   10bbc:	0005883a 	mov	r2,zero
   10bc0:	003f4e06 	br	108fc <__alt_data_end+0xffff08fc>

00010bc4 <__mulsf3>:
   10bc4:	defff504 	addi	sp,sp,-44
   10bc8:	dc000115 	stw	r16,4(sp)
   10bcc:	2020d5fa 	srli	r16,r4,23
   10bd0:	dd400615 	stw	r21,24(sp)
   10bd4:	202ad7fa 	srli	r21,r4,31
   10bd8:	dc800315 	stw	r18,12(sp)
   10bdc:	04802034 	movhi	r18,128
   10be0:	df000915 	stw	fp,36(sp)
   10be4:	dd000515 	stw	r20,20(sp)
   10be8:	94bfffc4 	addi	r18,r18,-1
   10bec:	dfc00a15 	stw	ra,40(sp)
   10bf0:	ddc00815 	stw	r23,32(sp)
   10bf4:	dd800715 	stw	r22,28(sp)
   10bf8:	dcc00415 	stw	r19,16(sp)
   10bfc:	dc400215 	stw	r17,8(sp)
   10c00:	84003fcc 	andi	r16,r16,255
   10c04:	9124703a 	and	r18,r18,r4
   10c08:	a829883a 	mov	r20,r21
   10c0c:	af003fcc 	andi	fp,r21,255
   10c10:	80005426 	beq	r16,zero,10d64 <__mulsf3+0x1a0>
   10c14:	00803fc4 	movi	r2,255
   10c18:	80802f26 	beq	r16,r2,10cd8 <__mulsf3+0x114>
   10c1c:	91002034 	orhi	r4,r18,128
   10c20:	202490fa 	slli	r18,r4,3
   10c24:	843fe044 	addi	r16,r16,-127
   10c28:	0023883a 	mov	r17,zero
   10c2c:	002f883a 	mov	r23,zero
   10c30:	2804d5fa 	srli	r2,r5,23
   10c34:	282cd7fa 	srli	r22,r5,31
   10c38:	01002034 	movhi	r4,128
   10c3c:	213fffc4 	addi	r4,r4,-1
   10c40:	10803fcc 	andi	r2,r2,255
   10c44:	2166703a 	and	r19,r4,r5
   10c48:	b1803fcc 	andi	r6,r22,255
   10c4c:	10004c26 	beq	r2,zero,10d80 <__mulsf3+0x1bc>
   10c50:	00c03fc4 	movi	r3,255
   10c54:	10c04726 	beq	r2,r3,10d74 <__mulsf3+0x1b0>
   10c58:	99002034 	orhi	r4,r19,128
   10c5c:	202690fa 	slli	r19,r4,3
   10c60:	10bfe044 	addi	r2,r2,-127
   10c64:	0007883a 	mov	r3,zero
   10c68:	80a1883a 	add	r16,r16,r2
   10c6c:	010003c4 	movi	r4,15
   10c70:	1c44b03a 	or	r2,r3,r17
   10c74:	b56af03a 	xor	r21,r22,r21
   10c78:	81c00044 	addi	r7,r16,1
   10c7c:	20806b36 	bltu	r4,r2,10e2c <__mulsf3+0x268>
   10c80:	100490ba 	slli	r2,r2,2
   10c84:	01000074 	movhi	r4,1
   10c88:	21032604 	addi	r4,r4,3224
   10c8c:	1105883a 	add	r2,r2,r4
   10c90:	10800017 	ldw	r2,0(r2)
   10c94:	1000683a 	jmp	r2
   10c98:	00010e2c 	andhi	zero,zero,1080
   10c9c:	00010cec 	andhi	zero,zero,1075
   10ca0:	00010cec 	andhi	zero,zero,1075
   10ca4:	00010ce8 	cmpgeui	zero,zero,1075
   10ca8:	00010e10 	cmplti	zero,zero,1080
   10cac:	00010e10 	cmplti	zero,zero,1080
   10cb0:	00010dfc 	xorhi	zero,zero,1079
   10cb4:	00010ce8 	cmpgeui	zero,zero,1075
   10cb8:	00010e10 	cmplti	zero,zero,1080
   10cbc:	00010dfc 	xorhi	zero,zero,1079
   10cc0:	00010e10 	cmplti	zero,zero,1080
   10cc4:	00010ce8 	cmpgeui	zero,zero,1075
   10cc8:	00010e1c 	xori	zero,zero,1080
   10ccc:	00010e1c 	xori	zero,zero,1080
   10cd0:	00010e1c 	xori	zero,zero,1080
   10cd4:	00010f2c 	andhi	zero,zero,1084
   10cd8:	90003b1e 	bne	r18,zero,10dc8 <__mulsf3+0x204>
   10cdc:	04400204 	movi	r17,8
   10ce0:	05c00084 	movi	r23,2
   10ce4:	003fd206 	br	10c30 <__alt_data_end+0xffff0c30>
   10ce8:	302b883a 	mov	r21,r6
   10cec:	00800084 	movi	r2,2
   10cf0:	18802626 	beq	r3,r2,10d8c <__mulsf3+0x1c8>
   10cf4:	008000c4 	movi	r2,3
   10cf8:	1880b826 	beq	r3,r2,10fdc <__mulsf3+0x418>
   10cfc:	00800044 	movi	r2,1
   10d00:	1880af1e 	bne	r3,r2,10fc0 <__mulsf3+0x3fc>
   10d04:	a829883a 	mov	r20,r21
   10d08:	0007883a 	mov	r3,zero
   10d0c:	0009883a 	mov	r4,zero
   10d10:	18803fcc 	andi	r2,r3,255
   10d14:	100695fa 	slli	r3,r2,23
   10d18:	a0803fcc 	andi	r2,r20,255
   10d1c:	100a97fa 	slli	r5,r2,31
   10d20:	00802034 	movhi	r2,128
   10d24:	10bfffc4 	addi	r2,r2,-1
   10d28:	2084703a 	and	r2,r4,r2
   10d2c:	10c4b03a 	or	r2,r2,r3
   10d30:	1144b03a 	or	r2,r2,r5
   10d34:	dfc00a17 	ldw	ra,40(sp)
   10d38:	df000917 	ldw	fp,36(sp)
   10d3c:	ddc00817 	ldw	r23,32(sp)
   10d40:	dd800717 	ldw	r22,28(sp)
   10d44:	dd400617 	ldw	r21,24(sp)
   10d48:	dd000517 	ldw	r20,20(sp)
   10d4c:	dcc00417 	ldw	r19,16(sp)
   10d50:	dc800317 	ldw	r18,12(sp)
   10d54:	dc400217 	ldw	r17,8(sp)
   10d58:	dc000117 	ldw	r16,4(sp)
   10d5c:	dec00b04 	addi	sp,sp,44
   10d60:	f800283a 	ret
   10d64:	90000d1e 	bne	r18,zero,10d9c <__mulsf3+0x1d8>
   10d68:	04400104 	movi	r17,4
   10d6c:	05c00044 	movi	r23,1
   10d70:	003faf06 	br	10c30 <__alt_data_end+0xffff0c30>
   10d74:	9806c03a 	cmpne	r3,r19,zero
   10d78:	18c00084 	addi	r3,r3,2
   10d7c:	003fba06 	br	10c68 <__alt_data_end+0xffff0c68>
   10d80:	9800141e 	bne	r19,zero,10dd4 <__mulsf3+0x210>
   10d84:	00c00044 	movi	r3,1
   10d88:	003fb706 	br	10c68 <__alt_data_end+0xffff0c68>
   10d8c:	a829883a 	mov	r20,r21
   10d90:	00ffffc4 	movi	r3,-1
   10d94:	0009883a 	mov	r4,zero
   10d98:	003fdd06 	br	10d10 <__alt_data_end+0xffff0d10>
   10d9c:	9009883a 	mov	r4,r18
   10da0:	d9400015 	stw	r5,0(sp)
   10da4:	0011c600 	call	11c60 <__clzsi2>
   10da8:	10fffec4 	addi	r3,r2,-5
   10dac:	10801d84 	addi	r2,r2,118
   10db0:	90e4983a 	sll	r18,r18,r3
   10db4:	00a1c83a 	sub	r16,zero,r2
   10db8:	0023883a 	mov	r17,zero
   10dbc:	002f883a 	mov	r23,zero
   10dc0:	d9400017 	ldw	r5,0(sp)
   10dc4:	003f9a06 	br	10c30 <__alt_data_end+0xffff0c30>
   10dc8:	04400304 	movi	r17,12
   10dcc:	05c000c4 	movi	r23,3
   10dd0:	003f9706 	br	10c30 <__alt_data_end+0xffff0c30>
   10dd4:	9809883a 	mov	r4,r19
   10dd8:	d9800015 	stw	r6,0(sp)
   10ddc:	0011c600 	call	11c60 <__clzsi2>
   10de0:	10fffec4 	addi	r3,r2,-5
   10de4:	10801d84 	addi	r2,r2,118
   10de8:	98e6983a 	sll	r19,r19,r3
   10dec:	0085c83a 	sub	r2,zero,r2
   10df0:	0007883a 	mov	r3,zero
   10df4:	d9800017 	ldw	r6,0(sp)
   10df8:	003f9b06 	br	10c68 <__alt_data_end+0xffff0c68>
   10dfc:	01002034 	movhi	r4,128
   10e00:	0029883a 	mov	r20,zero
   10e04:	213fffc4 	addi	r4,r4,-1
   10e08:	00ffffc4 	movi	r3,-1
   10e0c:	003fc006 	br	10d10 <__alt_data_end+0xffff0d10>
   10e10:	9027883a 	mov	r19,r18
   10e14:	b807883a 	mov	r3,r23
   10e18:	003fb406 	br	10cec <__alt_data_end+0xffff0cec>
   10e1c:	9027883a 	mov	r19,r18
   10e20:	e02b883a 	mov	r21,fp
   10e24:	b807883a 	mov	r3,r23
   10e28:	003fb006 	br	10cec <__alt_data_end+0xffff0cec>
   10e2c:	9028d43a 	srli	r20,r18,16
   10e30:	982cd43a 	srli	r22,r19,16
   10e34:	94bfffcc 	andi	r18,r18,65535
   10e38:	9cffffcc 	andi	r19,r19,65535
   10e3c:	980b883a 	mov	r5,r19
   10e40:	9009883a 	mov	r4,r18
   10e44:	d9c00015 	stw	r7,0(sp)
   10e48:	00106d40 	call	106d4 <__mulsi3>
   10e4c:	a00b883a 	mov	r5,r20
   10e50:	9809883a 	mov	r4,r19
   10e54:	1023883a 	mov	r17,r2
   10e58:	00106d40 	call	106d4 <__mulsi3>
   10e5c:	a009883a 	mov	r4,r20
   10e60:	b00b883a 	mov	r5,r22
   10e64:	1027883a 	mov	r19,r2
   10e68:	00106d40 	call	106d4 <__mulsi3>
   10e6c:	b00b883a 	mov	r5,r22
   10e70:	9009883a 	mov	r4,r18
   10e74:	1029883a 	mov	r20,r2
   10e78:	00106d40 	call	106d4 <__mulsi3>
   10e7c:	8806d43a 	srli	r3,r17,16
   10e80:	14c5883a 	add	r2,r2,r19
   10e84:	d9c00017 	ldw	r7,0(sp)
   10e88:	1885883a 	add	r2,r3,r2
   10e8c:	14c0022e 	bgeu	r2,r19,10e98 <__mulsf3+0x2d4>
   10e90:	00c00074 	movhi	r3,1
   10e94:	a0e9883a 	add	r20,r20,r3
   10e98:	1026943a 	slli	r19,r2,16
   10e9c:	8c7fffcc 	andi	r17,r17,65535
   10ea0:	1004d43a 	srli	r2,r2,16
   10ea4:	9c63883a 	add	r17,r19,r17
   10ea8:	882691ba 	slli	r19,r17,6
   10eac:	1505883a 	add	r2,r2,r20
   10eb0:	8822d6ba 	srli	r17,r17,26
   10eb4:	100891ba 	slli	r4,r2,6
   10eb8:	9826c03a 	cmpne	r19,r19,zero
   10ebc:	9c62b03a 	or	r17,r19,r17
   10ec0:	8926b03a 	or	r19,r17,r4
   10ec4:	9882002c 	andhi	r2,r19,2048
   10ec8:	10000426 	beq	r2,zero,10edc <__mulsf3+0x318>
   10ecc:	9804d07a 	srli	r2,r19,1
   10ed0:	9900004c 	andi	r4,r19,1
   10ed4:	3821883a 	mov	r16,r7
   10ed8:	1126b03a 	or	r19,r2,r4
   10edc:	80c01fc4 	addi	r3,r16,127
   10ee0:	00c0210e 	bge	zero,r3,10f68 <__mulsf3+0x3a4>
   10ee4:	988001cc 	andi	r2,r19,7
   10ee8:	10000426 	beq	r2,zero,10efc <__mulsf3+0x338>
   10eec:	988003cc 	andi	r2,r19,15
   10ef0:	01000104 	movi	r4,4
   10ef4:	11000126 	beq	r2,r4,10efc <__mulsf3+0x338>
   10ef8:	9927883a 	add	r19,r19,r4
   10efc:	9882002c 	andhi	r2,r19,2048
   10f00:	10000426 	beq	r2,zero,10f14 <__mulsf3+0x350>
   10f04:	00be0034 	movhi	r2,63488
   10f08:	10bfffc4 	addi	r2,r2,-1
   10f0c:	80c02004 	addi	r3,r16,128
   10f10:	98a6703a 	and	r19,r19,r2
   10f14:	00803f84 	movi	r2,254
   10f18:	10ff9c16 	blt	r2,r3,10d8c <__alt_data_end+0xffff0d8c>
   10f1c:	980891ba 	slli	r4,r19,6
   10f20:	a829883a 	mov	r20,r21
   10f24:	2008d27a 	srli	r4,r4,9
   10f28:	003f7906 	br	10d10 <__alt_data_end+0xffff0d10>
   10f2c:	9080102c 	andhi	r2,r18,64
   10f30:	10000826 	beq	r2,zero,10f54 <__mulsf3+0x390>
   10f34:	9880102c 	andhi	r2,r19,64
   10f38:	1000061e 	bne	r2,zero,10f54 <__mulsf3+0x390>
   10f3c:	00802034 	movhi	r2,128
   10f40:	99001034 	orhi	r4,r19,64
   10f44:	10bfffc4 	addi	r2,r2,-1
   10f48:	b029883a 	mov	r20,r22
   10f4c:	2088703a 	and	r4,r4,r2
   10f50:	003fad06 	br	10e08 <__alt_data_end+0xffff0e08>
   10f54:	00802034 	movhi	r2,128
   10f58:	91001034 	orhi	r4,r18,64
   10f5c:	10bfffc4 	addi	r2,r2,-1
   10f60:	2088703a 	and	r4,r4,r2
   10f64:	003fa806 	br	10e08 <__alt_data_end+0xffff0e08>
   10f68:	00800044 	movi	r2,1
   10f6c:	10c7c83a 	sub	r3,r2,r3
   10f70:	008006c4 	movi	r2,27
   10f74:	10ff6316 	blt	r2,r3,10d04 <__alt_data_end+0xffff0d04>
   10f78:	00800804 	movi	r2,32
   10f7c:	10c5c83a 	sub	r2,r2,r3
   10f80:	9884983a 	sll	r2,r19,r2
   10f84:	98c6d83a 	srl	r3,r19,r3
   10f88:	1004c03a 	cmpne	r2,r2,zero
   10f8c:	1884b03a 	or	r2,r3,r2
   10f90:	10c001cc 	andi	r3,r2,7
   10f94:	18000426 	beq	r3,zero,10fa8 <__mulsf3+0x3e4>
   10f98:	10c003cc 	andi	r3,r2,15
   10f9c:	01000104 	movi	r4,4
   10fa0:	19000126 	beq	r3,r4,10fa8 <__mulsf3+0x3e4>
   10fa4:	1105883a 	add	r2,r2,r4
   10fa8:	10c1002c 	andhi	r3,r2,1024
   10fac:	18000626 	beq	r3,zero,10fc8 <__mulsf3+0x404>
   10fb0:	a829883a 	mov	r20,r21
   10fb4:	00c00044 	movi	r3,1
   10fb8:	0009883a 	mov	r4,zero
   10fbc:	003f5406 	br	10d10 <__alt_data_end+0xffff0d10>
   10fc0:	3821883a 	mov	r16,r7
   10fc4:	003fc506 	br	10edc <__alt_data_end+0xffff0edc>
   10fc8:	100491ba 	slli	r2,r2,6
   10fcc:	a829883a 	mov	r20,r21
   10fd0:	0007883a 	mov	r3,zero
   10fd4:	1008d27a 	srli	r4,r2,9
   10fd8:	003f4d06 	br	10d10 <__alt_data_end+0xffff0d10>
   10fdc:	00802034 	movhi	r2,128
   10fe0:	99001034 	orhi	r4,r19,64
   10fe4:	10bfffc4 	addi	r2,r2,-1
   10fe8:	a829883a 	mov	r20,r21
   10fec:	2088703a 	and	r4,r4,r2
   10ff0:	003f8506 	br	10e08 <__alt_data_end+0xffff0e08>

00010ff4 <__fixsfsi>:
   10ff4:	200ad5fa 	srli	r5,r4,23
   10ff8:	00c02034 	movhi	r3,128
   10ffc:	18ffffc4 	addi	r3,r3,-1
   11000:	29403fcc 	andi	r5,r5,255
   11004:	00801f84 	movi	r2,126
   11008:	1906703a 	and	r3,r3,r4
   1100c:	2008d7fa 	srli	r4,r4,31
   11010:	11400e0e 	bge	r2,r5,1104c <__fixsfsi+0x58>
   11014:	00802744 	movi	r2,157
   11018:	11400816 	blt	r2,r5,1103c <__fixsfsi+0x48>
   1101c:	00802544 	movi	r2,149
   11020:	18c02034 	orhi	r3,r3,128
   11024:	11400b0e 	bge	r2,r5,11054 <__fixsfsi+0x60>
   11028:	28bfda84 	addi	r2,r5,-150
   1102c:	1884983a 	sll	r2,r3,r2
   11030:	20000726 	beq	r4,zero,11050 <__fixsfsi+0x5c>
   11034:	0085c83a 	sub	r2,zero,r2
   11038:	f800283a 	ret
   1103c:	00a00034 	movhi	r2,32768
   11040:	10bfffc4 	addi	r2,r2,-1
   11044:	2085883a 	add	r2,r4,r2
   11048:	f800283a 	ret
   1104c:	0005883a 	mov	r2,zero
   11050:	f800283a 	ret
   11054:	00802584 	movi	r2,150
   11058:	1145c83a 	sub	r2,r2,r5
   1105c:	1884d83a 	srl	r2,r3,r2
   11060:	003ff306 	br	11030 <__alt_data_end+0xffff1030>

00011064 <__floatsisf>:
   11064:	defffd04 	addi	sp,sp,-12
   11068:	dfc00215 	stw	ra,8(sp)
   1106c:	dc400115 	stw	r17,4(sp)
   11070:	dc000015 	stw	r16,0(sp)
   11074:	20003526 	beq	r4,zero,1114c <__floatsisf+0xe8>
   11078:	2021883a 	mov	r16,r4
   1107c:	2022d7fa 	srli	r17,r4,31
   11080:	20003616 	blt	r4,zero,1115c <__floatsisf+0xf8>
   11084:	8009883a 	mov	r4,r16
   11088:	0011c600 	call	11c60 <__clzsi2>
   1108c:	00c02784 	movi	r3,158
   11090:	1887c83a 	sub	r3,r3,r2
   11094:	01002584 	movi	r4,150
   11098:	20c01416 	blt	r4,r3,110ec <__floatsisf+0x88>
   1109c:	20c9c83a 	sub	r4,r4,r3
   110a0:	8120983a 	sll	r16,r16,r4
   110a4:	00802034 	movhi	r2,128
   110a8:	10bfffc4 	addi	r2,r2,-1
   110ac:	8809883a 	mov	r4,r17
   110b0:	80a0703a 	and	r16,r16,r2
   110b4:	18803fcc 	andi	r2,r3,255
   110b8:	100695fa 	slli	r3,r2,23
   110bc:	20803fcc 	andi	r2,r4,255
   110c0:	100897fa 	slli	r4,r2,31
   110c4:	00802034 	movhi	r2,128
   110c8:	10bfffc4 	addi	r2,r2,-1
   110cc:	8084703a 	and	r2,r16,r2
   110d0:	10c4b03a 	or	r2,r2,r3
   110d4:	1104b03a 	or	r2,r2,r4
   110d8:	dfc00217 	ldw	ra,8(sp)
   110dc:	dc400117 	ldw	r17,4(sp)
   110e0:	dc000017 	ldw	r16,0(sp)
   110e4:	dec00304 	addi	sp,sp,12
   110e8:	f800283a 	ret
   110ec:	01002644 	movi	r4,153
   110f0:	20c01c16 	blt	r4,r3,11164 <__floatsisf+0x100>
   110f4:	20c9c83a 	sub	r4,r4,r3
   110f8:	8120983a 	sll	r16,r16,r4
   110fc:	013f0034 	movhi	r4,64512
   11100:	213fffc4 	addi	r4,r4,-1
   11104:	814001cc 	andi	r5,r16,7
   11108:	8108703a 	and	r4,r16,r4
   1110c:	28000426 	beq	r5,zero,11120 <__floatsisf+0xbc>
   11110:	840003cc 	andi	r16,r16,15
   11114:	01400104 	movi	r5,4
   11118:	81400126 	beq	r16,r5,11120 <__floatsisf+0xbc>
   1111c:	2149883a 	add	r4,r4,r5
   11120:	2141002c 	andhi	r5,r4,1024
   11124:	28000526 	beq	r5,zero,1113c <__floatsisf+0xd8>
   11128:	00c027c4 	movi	r3,159
   1112c:	1887c83a 	sub	r3,r3,r2
   11130:	00bf0034 	movhi	r2,64512
   11134:	10bfffc4 	addi	r2,r2,-1
   11138:	2088703a 	and	r4,r4,r2
   1113c:	202091ba 	slli	r16,r4,6
   11140:	8809883a 	mov	r4,r17
   11144:	8020d27a 	srli	r16,r16,9
   11148:	003fda06 	br	110b4 <__alt_data_end+0xffff10b4>
   1114c:	0009883a 	mov	r4,zero
   11150:	0007883a 	mov	r3,zero
   11154:	0021883a 	mov	r16,zero
   11158:	003fd606 	br	110b4 <__alt_data_end+0xffff10b4>
   1115c:	0121c83a 	sub	r16,zero,r4
   11160:	003fc806 	br	11084 <__alt_data_end+0xffff1084>
   11164:	01002e44 	movi	r4,185
   11168:	20c9c83a 	sub	r4,r4,r3
   1116c:	01400144 	movi	r5,5
   11170:	8108983a 	sll	r4,r16,r4
   11174:	288bc83a 	sub	r5,r5,r2
   11178:	8160d83a 	srl	r16,r16,r5
   1117c:	2008c03a 	cmpne	r4,r4,zero
   11180:	8120b03a 	or	r16,r16,r4
   11184:	003fdd06 	br	110fc <__alt_data_end+0xffff10fc>

00011188 <__muldf3>:
   11188:	deffee04 	addi	sp,sp,-72
   1118c:	dd000c15 	stw	r20,48(sp)
   11190:	2828d53a 	srli	r20,r5,20
   11194:	ddc00f15 	stw	r23,60(sp)
   11198:	282ed7fa 	srli	r23,r5,31
   1119c:	dc000815 	stw	r16,32(sp)
   111a0:	04000434 	movhi	r16,16
   111a4:	dcc00b15 	stw	r19,44(sp)
   111a8:	843fffc4 	addi	r16,r16,-1
   111ac:	dfc01115 	stw	ra,68(sp)
   111b0:	df001015 	stw	fp,64(sp)
   111b4:	dd800e15 	stw	r22,56(sp)
   111b8:	dd400d15 	stw	r21,52(sp)
   111bc:	dc800a15 	stw	r18,40(sp)
   111c0:	dc400915 	stw	r17,36(sp)
   111c4:	a501ffcc 	andi	r20,r20,2047
   111c8:	2c20703a 	and	r16,r5,r16
   111cc:	b827883a 	mov	r19,r23
   111d0:	ba403fcc 	andi	r9,r23,255
   111d4:	a0006026 	beq	r20,zero,11358 <__muldf3+0x1d0>
   111d8:	0081ffc4 	movi	r2,2047
   111dc:	202d883a 	mov	r22,r4
   111e0:	a0803626 	beq	r20,r2,112bc <__muldf3+0x134>
   111e4:	84000434 	orhi	r16,r16,16
   111e8:	200ad77a 	srli	r5,r4,29
   111ec:	800490fa 	slli	r2,r16,3
   111f0:	202c90fa 	slli	r22,r4,3
   111f4:	a53f0044 	addi	r20,r20,-1023
   111f8:	28a0b03a 	or	r16,r5,r2
   111fc:	002b883a 	mov	r21,zero
   11200:	000b883a 	mov	r5,zero
   11204:	3804d53a 	srli	r2,r7,20
   11208:	3838d7fa 	srli	fp,r7,31
   1120c:	04400434 	movhi	r17,16
   11210:	8c7fffc4 	addi	r17,r17,-1
   11214:	1081ffcc 	andi	r2,r2,2047
   11218:	3025883a 	mov	r18,r6
   1121c:	3c62703a 	and	r17,r7,r17
   11220:	e2803fcc 	andi	r10,fp,255
   11224:	10006d26 	beq	r2,zero,113dc <__muldf3+0x254>
   11228:	00c1ffc4 	movi	r3,2047
   1122c:	10c06526 	beq	r2,r3,113c4 <__muldf3+0x23c>
   11230:	8c400434 	orhi	r17,r17,16
   11234:	300ed77a 	srli	r7,r6,29
   11238:	880690fa 	slli	r3,r17,3
   1123c:	302490fa 	slli	r18,r6,3
   11240:	10bf0044 	addi	r2,r2,-1023
   11244:	38e2b03a 	or	r17,r7,r3
   11248:	000f883a 	mov	r7,zero
   1124c:	a087883a 	add	r3,r20,r2
   11250:	010003c4 	movi	r4,15
   11254:	3d44b03a 	or	r2,r7,r21
   11258:	e5ccf03a 	xor	r6,fp,r23
   1125c:	1a000044 	addi	r8,r3,1
   11260:	20809b36 	bltu	r4,r2,114d0 <__muldf3+0x348>
   11264:	100490ba 	slli	r2,r2,2
   11268:	01000074 	movhi	r4,1
   1126c:	21049f04 	addi	r4,r4,4732
   11270:	1105883a 	add	r2,r2,r4
   11274:	10800017 	ldw	r2,0(r2)
   11278:	1000683a 	jmp	r2
   1127c:	000114d0 	cmplti	zero,zero,1107
   11280:	000112dc 	xori	zero,zero,1099
   11284:	000112dc 	xori	zero,zero,1099
   11288:	000112d8 	cmpnei	zero,zero,1099
   1128c:	000114ac 	andhi	zero,zero,1106
   11290:	000114ac 	andhi	zero,zero,1106
   11294:	00011494 	movui	zero,1106
   11298:	000112d8 	cmpnei	zero,zero,1099
   1129c:	000114ac 	andhi	zero,zero,1106
   112a0:	00011494 	movui	zero,1106
   112a4:	000114ac 	andhi	zero,zero,1106
   112a8:	000112d8 	cmpnei	zero,zero,1099
   112ac:	000114bc 	xorhi	zero,zero,1106
   112b0:	000114bc 	xorhi	zero,zero,1106
   112b4:	000114bc 	xorhi	zero,zero,1106
   112b8:	0001181c 	xori	zero,zero,1120
   112bc:	2404b03a 	or	r2,r4,r16
   112c0:	1000711e 	bne	r2,zero,11488 <__muldf3+0x300>
   112c4:	05400204 	movi	r21,8
   112c8:	0021883a 	mov	r16,zero
   112cc:	002d883a 	mov	r22,zero
   112d0:	01400084 	movi	r5,2
   112d4:	003fcb06 	br	11204 <__alt_data_end+0xffff1204>
   112d8:	500d883a 	mov	r6,r10
   112dc:	00800084 	movi	r2,2
   112e0:	38805926 	beq	r7,r2,11448 <__muldf3+0x2c0>
   112e4:	008000c4 	movi	r2,3
   112e8:	3881bb26 	beq	r7,r2,119d8 <__muldf3+0x850>
   112ec:	00800044 	movi	r2,1
   112f0:	3881961e 	bne	r7,r2,1194c <__muldf3+0x7c4>
   112f4:	3027883a 	mov	r19,r6
   112f8:	0005883a 	mov	r2,zero
   112fc:	0021883a 	mov	r16,zero
   11300:	002d883a 	mov	r22,zero
   11304:	1004953a 	slli	r2,r2,20
   11308:	98c03fcc 	andi	r3,r19,255
   1130c:	04400434 	movhi	r17,16
   11310:	8c7fffc4 	addi	r17,r17,-1
   11314:	180697fa 	slli	r3,r3,31
   11318:	8460703a 	and	r16,r16,r17
   1131c:	80a0b03a 	or	r16,r16,r2
   11320:	80c6b03a 	or	r3,r16,r3
   11324:	b005883a 	mov	r2,r22
   11328:	dfc01117 	ldw	ra,68(sp)
   1132c:	df001017 	ldw	fp,64(sp)
   11330:	ddc00f17 	ldw	r23,60(sp)
   11334:	dd800e17 	ldw	r22,56(sp)
   11338:	dd400d17 	ldw	r21,52(sp)
   1133c:	dd000c17 	ldw	r20,48(sp)
   11340:	dcc00b17 	ldw	r19,44(sp)
   11344:	dc800a17 	ldw	r18,40(sp)
   11348:	dc400917 	ldw	r17,36(sp)
   1134c:	dc000817 	ldw	r16,32(sp)
   11350:	dec01204 	addi	sp,sp,72
   11354:	f800283a 	ret
   11358:	2404b03a 	or	r2,r4,r16
   1135c:	202b883a 	mov	r21,r4
   11360:	10004426 	beq	r2,zero,11474 <__muldf3+0x2ec>
   11364:	80015126 	beq	r16,zero,118ac <__muldf3+0x724>
   11368:	8009883a 	mov	r4,r16
   1136c:	d9800715 	stw	r6,28(sp)
   11370:	d9c00215 	stw	r7,8(sp)
   11374:	da400415 	stw	r9,16(sp)
   11378:	0011c600 	call	11c60 <__clzsi2>
   1137c:	d9800717 	ldw	r6,28(sp)
   11380:	d9c00217 	ldw	r7,8(sp)
   11384:	da400417 	ldw	r9,16(sp)
   11388:	113ffd44 	addi	r4,r2,-11
   1138c:	00c00704 	movi	r3,28
   11390:	19014216 	blt	r3,r4,1189c <__muldf3+0x714>
   11394:	00c00744 	movi	r3,29
   11398:	15bffe04 	addi	r22,r2,-8
   1139c:	1907c83a 	sub	r3,r3,r4
   113a0:	85a0983a 	sll	r16,r16,r22
   113a4:	a8c6d83a 	srl	r3,r21,r3
   113a8:	adac983a 	sll	r22,r21,r22
   113ac:	1c20b03a 	or	r16,r3,r16
   113b0:	1080fcc4 	addi	r2,r2,1011
   113b4:	00a9c83a 	sub	r20,zero,r2
   113b8:	002b883a 	mov	r21,zero
   113bc:	000b883a 	mov	r5,zero
   113c0:	003f9006 	br	11204 <__alt_data_end+0xffff1204>
   113c4:	3446b03a 	or	r3,r6,r17
   113c8:	1800281e 	bne	r3,zero,1146c <__muldf3+0x2e4>
   113cc:	0023883a 	mov	r17,zero
   113d0:	0025883a 	mov	r18,zero
   113d4:	01c00084 	movi	r7,2
   113d8:	003f9c06 	br	1124c <__alt_data_end+0xffff124c>
   113dc:	3446b03a 	or	r3,r6,r17
   113e0:	18001e26 	beq	r3,zero,1145c <__muldf3+0x2d4>
   113e4:	88012126 	beq	r17,zero,1186c <__muldf3+0x6e4>
   113e8:	8809883a 	mov	r4,r17
   113ec:	d9400215 	stw	r5,8(sp)
   113f0:	d9800715 	stw	r6,28(sp)
   113f4:	da400415 	stw	r9,16(sp)
   113f8:	da800315 	stw	r10,12(sp)
   113fc:	0011c600 	call	11c60 <__clzsi2>
   11400:	d9400217 	ldw	r5,8(sp)
   11404:	d9800717 	ldw	r6,28(sp)
   11408:	da400417 	ldw	r9,16(sp)
   1140c:	da800317 	ldw	r10,12(sp)
   11410:	113ffd44 	addi	r4,r2,-11
   11414:	00c00704 	movi	r3,28
   11418:	19011016 	blt	r3,r4,1185c <__muldf3+0x6d4>
   1141c:	00c00744 	movi	r3,29
   11420:	14bffe04 	addi	r18,r2,-8
   11424:	1907c83a 	sub	r3,r3,r4
   11428:	8ca2983a 	sll	r17,r17,r18
   1142c:	30c6d83a 	srl	r3,r6,r3
   11430:	34a4983a 	sll	r18,r6,r18
   11434:	1c62b03a 	or	r17,r3,r17
   11438:	1080fcc4 	addi	r2,r2,1011
   1143c:	0085c83a 	sub	r2,zero,r2
   11440:	000f883a 	mov	r7,zero
   11444:	003f8106 	br	1124c <__alt_data_end+0xffff124c>
   11448:	3027883a 	mov	r19,r6
   1144c:	0081ffc4 	movi	r2,2047
   11450:	0021883a 	mov	r16,zero
   11454:	002d883a 	mov	r22,zero
   11458:	003faa06 	br	11304 <__alt_data_end+0xffff1304>
   1145c:	0023883a 	mov	r17,zero
   11460:	0025883a 	mov	r18,zero
   11464:	01c00044 	movi	r7,1
   11468:	003f7806 	br	1124c <__alt_data_end+0xffff124c>
   1146c:	01c000c4 	movi	r7,3
   11470:	003f7606 	br	1124c <__alt_data_end+0xffff124c>
   11474:	05400104 	movi	r21,4
   11478:	0021883a 	mov	r16,zero
   1147c:	002d883a 	mov	r22,zero
   11480:	01400044 	movi	r5,1
   11484:	003f5f06 	br	11204 <__alt_data_end+0xffff1204>
   11488:	05400304 	movi	r21,12
   1148c:	014000c4 	movi	r5,3
   11490:	003f5c06 	br	11204 <__alt_data_end+0xffff1204>
   11494:	04000434 	movhi	r16,16
   11498:	0027883a 	mov	r19,zero
   1149c:	843fffc4 	addi	r16,r16,-1
   114a0:	05bfffc4 	movi	r22,-1
   114a4:	0081ffc4 	movi	r2,2047
   114a8:	003f9606 	br	11304 <__alt_data_end+0xffff1304>
   114ac:	8023883a 	mov	r17,r16
   114b0:	b025883a 	mov	r18,r22
   114b4:	280f883a 	mov	r7,r5
   114b8:	003f8806 	br	112dc <__alt_data_end+0xffff12dc>
   114bc:	8023883a 	mov	r17,r16
   114c0:	b025883a 	mov	r18,r22
   114c4:	480d883a 	mov	r6,r9
   114c8:	280f883a 	mov	r7,r5
   114cc:	003f8306 	br	112dc <__alt_data_end+0xffff12dc>
   114d0:	b026d43a 	srli	r19,r22,16
   114d4:	902ed43a 	srli	r23,r18,16
   114d8:	b5bfffcc 	andi	r22,r22,65535
   114dc:	94bfffcc 	andi	r18,r18,65535
   114e0:	b00b883a 	mov	r5,r22
   114e4:	9009883a 	mov	r4,r18
   114e8:	d8c00515 	stw	r3,20(sp)
   114ec:	d9800715 	stw	r6,28(sp)
   114f0:	da000615 	stw	r8,24(sp)
   114f4:	00106d40 	call	106d4 <__mulsi3>
   114f8:	980b883a 	mov	r5,r19
   114fc:	9009883a 	mov	r4,r18
   11500:	1029883a 	mov	r20,r2
   11504:	00106d40 	call	106d4 <__mulsi3>
   11508:	b80b883a 	mov	r5,r23
   1150c:	9809883a 	mov	r4,r19
   11510:	102b883a 	mov	r21,r2
   11514:	00106d40 	call	106d4 <__mulsi3>
   11518:	b809883a 	mov	r4,r23
   1151c:	b00b883a 	mov	r5,r22
   11520:	1039883a 	mov	fp,r2
   11524:	00106d40 	call	106d4 <__mulsi3>
   11528:	a008d43a 	srli	r4,r20,16
   1152c:	1545883a 	add	r2,r2,r21
   11530:	d8c00517 	ldw	r3,20(sp)
   11534:	2085883a 	add	r2,r4,r2
   11538:	d9800717 	ldw	r6,28(sp)
   1153c:	da000617 	ldw	r8,24(sp)
   11540:	1540022e 	bgeu	r2,r21,1154c <__muldf3+0x3c4>
   11544:	01000074 	movhi	r4,1
   11548:	e139883a 	add	fp,fp,r4
   1154c:	100e943a 	slli	r7,r2,16
   11550:	1004d43a 	srli	r2,r2,16
   11554:	882ad43a 	srli	r21,r17,16
   11558:	a53fffcc 	andi	r20,r20,65535
   1155c:	8c7fffcc 	andi	r17,r17,65535
   11560:	3d29883a 	add	r20,r7,r20
   11564:	b00b883a 	mov	r5,r22
   11568:	8809883a 	mov	r4,r17
   1156c:	d8c00515 	stw	r3,20(sp)
   11570:	d9800715 	stw	r6,28(sp)
   11574:	da000615 	stw	r8,24(sp)
   11578:	dd000115 	stw	r20,4(sp)
   1157c:	d8800015 	stw	r2,0(sp)
   11580:	00106d40 	call	106d4 <__mulsi3>
   11584:	980b883a 	mov	r5,r19
   11588:	8809883a 	mov	r4,r17
   1158c:	d8800215 	stw	r2,8(sp)
   11590:	00106d40 	call	106d4 <__mulsi3>
   11594:	9809883a 	mov	r4,r19
   11598:	a80b883a 	mov	r5,r21
   1159c:	1029883a 	mov	r20,r2
   115a0:	00106d40 	call	106d4 <__mulsi3>
   115a4:	b00b883a 	mov	r5,r22
   115a8:	a809883a 	mov	r4,r21
   115ac:	d8800415 	stw	r2,16(sp)
   115b0:	00106d40 	call	106d4 <__mulsi3>
   115b4:	d9c00217 	ldw	r7,8(sp)
   115b8:	1505883a 	add	r2,r2,r20
   115bc:	d8c00517 	ldw	r3,20(sp)
   115c0:	3826d43a 	srli	r19,r7,16
   115c4:	d9800717 	ldw	r6,28(sp)
   115c8:	da000617 	ldw	r8,24(sp)
   115cc:	9885883a 	add	r2,r19,r2
   115d0:	da400417 	ldw	r9,16(sp)
   115d4:	1500022e 	bgeu	r2,r20,115e0 <__muldf3+0x458>
   115d8:	01000074 	movhi	r4,1
   115dc:	4913883a 	add	r9,r9,r4
   115e0:	1028d43a 	srli	r20,r2,16
   115e4:	1004943a 	slli	r2,r2,16
   115e8:	802cd43a 	srli	r22,r16,16
   115ec:	843fffcc 	andi	r16,r16,65535
   115f0:	3cffffcc 	andi	r19,r7,65535
   115f4:	9009883a 	mov	r4,r18
   115f8:	800b883a 	mov	r5,r16
   115fc:	a269883a 	add	r20,r20,r9
   11600:	d8c00515 	stw	r3,20(sp)
   11604:	d9800715 	stw	r6,28(sp)
   11608:	da000615 	stw	r8,24(sp)
   1160c:	14e7883a 	add	r19,r2,r19
   11610:	00106d40 	call	106d4 <__mulsi3>
   11614:	9009883a 	mov	r4,r18
   11618:	b00b883a 	mov	r5,r22
   1161c:	d8800315 	stw	r2,12(sp)
   11620:	00106d40 	call	106d4 <__mulsi3>
   11624:	b809883a 	mov	r4,r23
   11628:	b00b883a 	mov	r5,r22
   1162c:	d8800215 	stw	r2,8(sp)
   11630:	00106d40 	call	106d4 <__mulsi3>
   11634:	b80b883a 	mov	r5,r23
   11638:	8009883a 	mov	r4,r16
   1163c:	d8800415 	stw	r2,16(sp)
   11640:	00106d40 	call	106d4 <__mulsi3>
   11644:	da800317 	ldw	r10,12(sp)
   11648:	d9c00217 	ldw	r7,8(sp)
   1164c:	d9000017 	ldw	r4,0(sp)
   11650:	502ed43a 	srli	r23,r10,16
   11654:	11c5883a 	add	r2,r2,r7
   11658:	24e5883a 	add	r18,r4,r19
   1165c:	b885883a 	add	r2,r23,r2
   11660:	d8c00517 	ldw	r3,20(sp)
   11664:	d9800717 	ldw	r6,28(sp)
   11668:	da000617 	ldw	r8,24(sp)
   1166c:	da400417 	ldw	r9,16(sp)
   11670:	11c0022e 	bgeu	r2,r7,1167c <__muldf3+0x4f4>
   11674:	01000074 	movhi	r4,1
   11678:	4913883a 	add	r9,r9,r4
   1167c:	100ed43a 	srli	r7,r2,16
   11680:	1004943a 	slli	r2,r2,16
   11684:	55ffffcc 	andi	r23,r10,65535
   11688:	3a53883a 	add	r9,r7,r9
   1168c:	8809883a 	mov	r4,r17
   11690:	800b883a 	mov	r5,r16
   11694:	d8c00515 	stw	r3,20(sp)
   11698:	d9800715 	stw	r6,28(sp)
   1169c:	da000615 	stw	r8,24(sp)
   116a0:	da400415 	stw	r9,16(sp)
   116a4:	15ef883a 	add	r23,r2,r23
   116a8:	00106d40 	call	106d4 <__mulsi3>
   116ac:	8809883a 	mov	r4,r17
   116b0:	b00b883a 	mov	r5,r22
   116b4:	d8800215 	stw	r2,8(sp)
   116b8:	00106d40 	call	106d4 <__mulsi3>
   116bc:	b00b883a 	mov	r5,r22
   116c0:	a809883a 	mov	r4,r21
   116c4:	d8800315 	stw	r2,12(sp)
   116c8:	00106d40 	call	106d4 <__mulsi3>
   116cc:	8009883a 	mov	r4,r16
   116d0:	a80b883a 	mov	r5,r21
   116d4:	1023883a 	mov	r17,r2
   116d8:	00106d40 	call	106d4 <__mulsi3>
   116dc:	d9c00217 	ldw	r7,8(sp)
   116e0:	da800317 	ldw	r10,12(sp)
   116e4:	d8c00517 	ldw	r3,20(sp)
   116e8:	3808d43a 	srli	r4,r7,16
   116ec:	1285883a 	add	r2,r2,r10
   116f0:	d9800717 	ldw	r6,28(sp)
   116f4:	2085883a 	add	r2,r4,r2
   116f8:	da000617 	ldw	r8,24(sp)
   116fc:	da400417 	ldw	r9,16(sp)
   11700:	1280022e 	bgeu	r2,r10,1170c <__muldf3+0x584>
   11704:	01000074 	movhi	r4,1
   11708:	8923883a 	add	r17,r17,r4
   1170c:	1008943a 	slli	r4,r2,16
   11710:	39ffffcc 	andi	r7,r7,65535
   11714:	e4b9883a 	add	fp,fp,r18
   11718:	21cf883a 	add	r7,r4,r7
   1171c:	e4e7803a 	cmpltu	r19,fp,r19
   11720:	3d0f883a 	add	r7,r7,r20
   11724:	bf39883a 	add	fp,r23,fp
   11728:	99c9883a 	add	r4,r19,r7
   1172c:	e5ef803a 	cmpltu	r23,fp,r23
   11730:	490b883a 	add	r5,r9,r4
   11734:	1004d43a 	srli	r2,r2,16
   11738:	b965883a 	add	r18,r23,r5
   1173c:	24c9803a 	cmpltu	r4,r4,r19
   11740:	3d29803a 	cmpltu	r20,r7,r20
   11744:	a128b03a 	or	r20,r20,r4
   11748:	95ef803a 	cmpltu	r23,r18,r23
   1174c:	2a53803a 	cmpltu	r9,r5,r9
   11750:	a0a9883a 	add	r20,r20,r2
   11754:	4deeb03a 	or	r23,r9,r23
   11758:	a5ef883a 	add	r23,r20,r23
   1175c:	bc63883a 	add	r17,r23,r17
   11760:	e004927a 	slli	r2,fp,9
   11764:	d9000117 	ldw	r4,4(sp)
   11768:	882e927a 	slli	r23,r17,9
   1176c:	9022d5fa 	srli	r17,r18,23
   11770:	e038d5fa 	srli	fp,fp,23
   11774:	1104b03a 	or	r2,r2,r4
   11778:	9024927a 	slli	r18,r18,9
   1177c:	1004c03a 	cmpne	r2,r2,zero
   11780:	bc62b03a 	or	r17,r23,r17
   11784:	1738b03a 	or	fp,r2,fp
   11788:	8880402c 	andhi	r2,r17,256
   1178c:	e4a4b03a 	or	r18,fp,r18
   11790:	10000726 	beq	r2,zero,117b0 <__muldf3+0x628>
   11794:	9006d07a 	srli	r3,r18,1
   11798:	880497fa 	slli	r2,r17,31
   1179c:	9480004c 	andi	r18,r18,1
   117a0:	8822d07a 	srli	r17,r17,1
   117a4:	1ca4b03a 	or	r18,r3,r18
   117a8:	14a4b03a 	or	r18,r2,r18
   117ac:	4007883a 	mov	r3,r8
   117b0:	1880ffc4 	addi	r2,r3,1023
   117b4:	0080460e 	bge	zero,r2,118d0 <__muldf3+0x748>
   117b8:	910001cc 	andi	r4,r18,7
   117bc:	20000726 	beq	r4,zero,117dc <__muldf3+0x654>
   117c0:	910003cc 	andi	r4,r18,15
   117c4:	01400104 	movi	r5,4
   117c8:	21400426 	beq	r4,r5,117dc <__muldf3+0x654>
   117cc:	9149883a 	add	r4,r18,r5
   117d0:	24a5803a 	cmpltu	r18,r4,r18
   117d4:	8ca3883a 	add	r17,r17,r18
   117d8:	2025883a 	mov	r18,r4
   117dc:	8900402c 	andhi	r4,r17,256
   117e0:	20000426 	beq	r4,zero,117f4 <__muldf3+0x66c>
   117e4:	18810004 	addi	r2,r3,1024
   117e8:	00ffc034 	movhi	r3,65280
   117ec:	18ffffc4 	addi	r3,r3,-1
   117f0:	88e2703a 	and	r17,r17,r3
   117f4:	00c1ff84 	movi	r3,2046
   117f8:	18bf1316 	blt	r3,r2,11448 <__alt_data_end+0xffff1448>
   117fc:	882c977a 	slli	r22,r17,29
   11800:	9024d0fa 	srli	r18,r18,3
   11804:	8822927a 	slli	r17,r17,9
   11808:	1081ffcc 	andi	r2,r2,2047
   1180c:	b4acb03a 	or	r22,r22,r18
   11810:	8820d33a 	srli	r16,r17,12
   11814:	3027883a 	mov	r19,r6
   11818:	003eba06 	br	11304 <__alt_data_end+0xffff1304>
   1181c:	8080022c 	andhi	r2,r16,8
   11820:	10000926 	beq	r2,zero,11848 <__muldf3+0x6c0>
   11824:	8880022c 	andhi	r2,r17,8
   11828:	1000071e 	bne	r2,zero,11848 <__muldf3+0x6c0>
   1182c:	00800434 	movhi	r2,16
   11830:	8c000234 	orhi	r16,r17,8
   11834:	10bfffc4 	addi	r2,r2,-1
   11838:	e027883a 	mov	r19,fp
   1183c:	80a0703a 	and	r16,r16,r2
   11840:	902d883a 	mov	r22,r18
   11844:	003f1706 	br	114a4 <__alt_data_end+0xffff14a4>
   11848:	00800434 	movhi	r2,16
   1184c:	84000234 	orhi	r16,r16,8
   11850:	10bfffc4 	addi	r2,r2,-1
   11854:	80a0703a 	and	r16,r16,r2
   11858:	003f1206 	br	114a4 <__alt_data_end+0xffff14a4>
   1185c:	147ff604 	addi	r17,r2,-40
   11860:	3462983a 	sll	r17,r6,r17
   11864:	0025883a 	mov	r18,zero
   11868:	003ef306 	br	11438 <__alt_data_end+0xffff1438>
   1186c:	3009883a 	mov	r4,r6
   11870:	d9400215 	stw	r5,8(sp)
   11874:	d9800715 	stw	r6,28(sp)
   11878:	da400415 	stw	r9,16(sp)
   1187c:	da800315 	stw	r10,12(sp)
   11880:	0011c600 	call	11c60 <__clzsi2>
   11884:	10800804 	addi	r2,r2,32
   11888:	da800317 	ldw	r10,12(sp)
   1188c:	da400417 	ldw	r9,16(sp)
   11890:	d9800717 	ldw	r6,28(sp)
   11894:	d9400217 	ldw	r5,8(sp)
   11898:	003edd06 	br	11410 <__alt_data_end+0xffff1410>
   1189c:	143ff604 	addi	r16,r2,-40
   118a0:	ac20983a 	sll	r16,r21,r16
   118a4:	002d883a 	mov	r22,zero
   118a8:	003ec106 	br	113b0 <__alt_data_end+0xffff13b0>
   118ac:	d9800715 	stw	r6,28(sp)
   118b0:	d9c00215 	stw	r7,8(sp)
   118b4:	da400415 	stw	r9,16(sp)
   118b8:	0011c600 	call	11c60 <__clzsi2>
   118bc:	10800804 	addi	r2,r2,32
   118c0:	da400417 	ldw	r9,16(sp)
   118c4:	d9c00217 	ldw	r7,8(sp)
   118c8:	d9800717 	ldw	r6,28(sp)
   118cc:	003eae06 	br	11388 <__alt_data_end+0xffff1388>
   118d0:	00c00044 	movi	r3,1
   118d4:	1887c83a 	sub	r3,r3,r2
   118d8:	01000e04 	movi	r4,56
   118dc:	20fe8516 	blt	r4,r3,112f4 <__alt_data_end+0xffff12f4>
   118e0:	010007c4 	movi	r4,31
   118e4:	20c01b16 	blt	r4,r3,11954 <__muldf3+0x7cc>
   118e8:	00800804 	movi	r2,32
   118ec:	10c5c83a 	sub	r2,r2,r3
   118f0:	888a983a 	sll	r5,r17,r2
   118f4:	90c8d83a 	srl	r4,r18,r3
   118f8:	9084983a 	sll	r2,r18,r2
   118fc:	88e2d83a 	srl	r17,r17,r3
   11900:	2906b03a 	or	r3,r5,r4
   11904:	1004c03a 	cmpne	r2,r2,zero
   11908:	1886b03a 	or	r3,r3,r2
   1190c:	188001cc 	andi	r2,r3,7
   11910:	10000726 	beq	r2,zero,11930 <__muldf3+0x7a8>
   11914:	188003cc 	andi	r2,r3,15
   11918:	01000104 	movi	r4,4
   1191c:	11000426 	beq	r2,r4,11930 <__muldf3+0x7a8>
   11920:	1805883a 	mov	r2,r3
   11924:	10c00104 	addi	r3,r2,4
   11928:	1885803a 	cmpltu	r2,r3,r2
   1192c:	88a3883a 	add	r17,r17,r2
   11930:	8880202c 	andhi	r2,r17,128
   11934:	10001c26 	beq	r2,zero,119a8 <__muldf3+0x820>
   11938:	3027883a 	mov	r19,r6
   1193c:	00800044 	movi	r2,1
   11940:	0021883a 	mov	r16,zero
   11944:	002d883a 	mov	r22,zero
   11948:	003e6e06 	br	11304 <__alt_data_end+0xffff1304>
   1194c:	4007883a 	mov	r3,r8
   11950:	003f9706 	br	117b0 <__alt_data_end+0xffff17b0>
   11954:	017ff844 	movi	r5,-31
   11958:	2885c83a 	sub	r2,r5,r2
   1195c:	888ad83a 	srl	r5,r17,r2
   11960:	00800804 	movi	r2,32
   11964:	18801a26 	beq	r3,r2,119d0 <__muldf3+0x848>
   11968:	01001004 	movi	r4,64
   1196c:	20c7c83a 	sub	r3,r4,r3
   11970:	88e2983a 	sll	r17,r17,r3
   11974:	8ca4b03a 	or	r18,r17,r18
   11978:	9004c03a 	cmpne	r2,r18,zero
   1197c:	2884b03a 	or	r2,r5,r2
   11980:	144001cc 	andi	r17,r2,7
   11984:	88000d1e 	bne	r17,zero,119bc <__muldf3+0x834>
   11988:	0021883a 	mov	r16,zero
   1198c:	102cd0fa 	srli	r22,r2,3
   11990:	3027883a 	mov	r19,r6
   11994:	0005883a 	mov	r2,zero
   11998:	b46cb03a 	or	r22,r22,r17
   1199c:	003e5906 	br	11304 <__alt_data_end+0xffff1304>
   119a0:	1007883a 	mov	r3,r2
   119a4:	0023883a 	mov	r17,zero
   119a8:	8820927a 	slli	r16,r17,9
   119ac:	1805883a 	mov	r2,r3
   119b0:	8822977a 	slli	r17,r17,29
   119b4:	8020d33a 	srli	r16,r16,12
   119b8:	003ff406 	br	1198c <__alt_data_end+0xffff198c>
   119bc:	10c003cc 	andi	r3,r2,15
   119c0:	01000104 	movi	r4,4
   119c4:	193ff626 	beq	r3,r4,119a0 <__alt_data_end+0xffff19a0>
   119c8:	0023883a 	mov	r17,zero
   119cc:	003fd506 	br	11924 <__alt_data_end+0xffff1924>
   119d0:	0023883a 	mov	r17,zero
   119d4:	003fe706 	br	11974 <__alt_data_end+0xffff1974>
   119d8:	00800434 	movhi	r2,16
   119dc:	8c000234 	orhi	r16,r17,8
   119e0:	10bfffc4 	addi	r2,r2,-1
   119e4:	3027883a 	mov	r19,r6
   119e8:	80a0703a 	and	r16,r16,r2
   119ec:	902d883a 	mov	r22,r18
   119f0:	003eac06 	br	114a4 <__alt_data_end+0xffff14a4>

000119f4 <__fixdfsi>:
   119f4:	280cd53a 	srli	r6,r5,20
   119f8:	00c00434 	movhi	r3,16
   119fc:	18ffffc4 	addi	r3,r3,-1
   11a00:	3181ffcc 	andi	r6,r6,2047
   11a04:	01c0ff84 	movi	r7,1022
   11a08:	28c6703a 	and	r3,r5,r3
   11a0c:	280ad7fa 	srli	r5,r5,31
   11a10:	3980120e 	bge	r7,r6,11a5c <__fixdfsi+0x68>
   11a14:	00810744 	movi	r2,1053
   11a18:	11800c16 	blt	r2,r6,11a4c <__fixdfsi+0x58>
   11a1c:	00810cc4 	movi	r2,1075
   11a20:	1185c83a 	sub	r2,r2,r6
   11a24:	01c007c4 	movi	r7,31
   11a28:	18c00434 	orhi	r3,r3,16
   11a2c:	38800d16 	blt	r7,r2,11a64 <__fixdfsi+0x70>
   11a30:	31befb44 	addi	r6,r6,-1043
   11a34:	2084d83a 	srl	r2,r4,r2
   11a38:	1986983a 	sll	r3,r3,r6
   11a3c:	1884b03a 	or	r2,r3,r2
   11a40:	28000726 	beq	r5,zero,11a60 <__fixdfsi+0x6c>
   11a44:	0085c83a 	sub	r2,zero,r2
   11a48:	f800283a 	ret
   11a4c:	00a00034 	movhi	r2,32768
   11a50:	10bfffc4 	addi	r2,r2,-1
   11a54:	2885883a 	add	r2,r5,r2
   11a58:	f800283a 	ret
   11a5c:	0005883a 	mov	r2,zero
   11a60:	f800283a 	ret
   11a64:	008104c4 	movi	r2,1043
   11a68:	1185c83a 	sub	r2,r2,r6
   11a6c:	1884d83a 	srl	r2,r3,r2
   11a70:	003ff306 	br	11a40 <__alt_data_end+0xffff1a40>

00011a74 <__floatsidf>:
   11a74:	defffd04 	addi	sp,sp,-12
   11a78:	dfc00215 	stw	ra,8(sp)
   11a7c:	dc400115 	stw	r17,4(sp)
   11a80:	dc000015 	stw	r16,0(sp)
   11a84:	20002b26 	beq	r4,zero,11b34 <__floatsidf+0xc0>
   11a88:	2023883a 	mov	r17,r4
   11a8c:	2020d7fa 	srli	r16,r4,31
   11a90:	20002d16 	blt	r4,zero,11b48 <__floatsidf+0xd4>
   11a94:	8809883a 	mov	r4,r17
   11a98:	0011c600 	call	11c60 <__clzsi2>
   11a9c:	01410784 	movi	r5,1054
   11aa0:	288bc83a 	sub	r5,r5,r2
   11aa4:	01010cc4 	movi	r4,1075
   11aa8:	2149c83a 	sub	r4,r4,r5
   11aac:	00c007c4 	movi	r3,31
   11ab0:	1900160e 	bge	r3,r4,11b0c <__floatsidf+0x98>
   11ab4:	00c104c4 	movi	r3,1043
   11ab8:	1947c83a 	sub	r3,r3,r5
   11abc:	88c6983a 	sll	r3,r17,r3
   11ac0:	00800434 	movhi	r2,16
   11ac4:	10bfffc4 	addi	r2,r2,-1
   11ac8:	1886703a 	and	r3,r3,r2
   11acc:	2941ffcc 	andi	r5,r5,2047
   11ad0:	800d883a 	mov	r6,r16
   11ad4:	0005883a 	mov	r2,zero
   11ad8:	280a953a 	slli	r5,r5,20
   11adc:	31803fcc 	andi	r6,r6,255
   11ae0:	01000434 	movhi	r4,16
   11ae4:	300c97fa 	slli	r6,r6,31
   11ae8:	213fffc4 	addi	r4,r4,-1
   11aec:	1906703a 	and	r3,r3,r4
   11af0:	1946b03a 	or	r3,r3,r5
   11af4:	1986b03a 	or	r3,r3,r6
   11af8:	dfc00217 	ldw	ra,8(sp)
   11afc:	dc400117 	ldw	r17,4(sp)
   11b00:	dc000017 	ldw	r16,0(sp)
   11b04:	dec00304 	addi	sp,sp,12
   11b08:	f800283a 	ret
   11b0c:	00c002c4 	movi	r3,11
   11b10:	1887c83a 	sub	r3,r3,r2
   11b14:	88c6d83a 	srl	r3,r17,r3
   11b18:	8904983a 	sll	r2,r17,r4
   11b1c:	01000434 	movhi	r4,16
   11b20:	213fffc4 	addi	r4,r4,-1
   11b24:	2941ffcc 	andi	r5,r5,2047
   11b28:	1906703a 	and	r3,r3,r4
   11b2c:	800d883a 	mov	r6,r16
   11b30:	003fe906 	br	11ad8 <__alt_data_end+0xffff1ad8>
   11b34:	000d883a 	mov	r6,zero
   11b38:	000b883a 	mov	r5,zero
   11b3c:	0007883a 	mov	r3,zero
   11b40:	0005883a 	mov	r2,zero
   11b44:	003fe406 	br	11ad8 <__alt_data_end+0xffff1ad8>
   11b48:	0123c83a 	sub	r17,zero,r4
   11b4c:	003fd106 	br	11a94 <__alt_data_end+0xffff1a94>

00011b50 <__extendsfdf2>:
   11b50:	200ad5fa 	srli	r5,r4,23
   11b54:	defffd04 	addi	sp,sp,-12
   11b58:	dc400115 	stw	r17,4(sp)
   11b5c:	29403fcc 	andi	r5,r5,255
   11b60:	29800044 	addi	r6,r5,1
   11b64:	04402034 	movhi	r17,128
   11b68:	dc000015 	stw	r16,0(sp)
   11b6c:	8c7fffc4 	addi	r17,r17,-1
   11b70:	dfc00215 	stw	ra,8(sp)
   11b74:	31803fcc 	andi	r6,r6,255
   11b78:	00800044 	movi	r2,1
   11b7c:	8922703a 	and	r17,r17,r4
   11b80:	2020d7fa 	srli	r16,r4,31
   11b84:	1180110e 	bge	r2,r6,11bcc <__extendsfdf2+0x7c>
   11b88:	880cd0fa 	srli	r6,r17,3
   11b8c:	8822977a 	slli	r17,r17,29
   11b90:	2940e004 	addi	r5,r5,896
   11b94:	2941ffcc 	andi	r5,r5,2047
   11b98:	2804953a 	slli	r2,r5,20
   11b9c:	01400434 	movhi	r5,16
   11ba0:	800697fa 	slli	r3,r16,31
   11ba4:	297fffc4 	addi	r5,r5,-1
   11ba8:	314a703a 	and	r5,r6,r5
   11bac:	288ab03a 	or	r5,r5,r2
   11bb0:	28c6b03a 	or	r3,r5,r3
   11bb4:	8805883a 	mov	r2,r17
   11bb8:	dfc00217 	ldw	ra,8(sp)
   11bbc:	dc400117 	ldw	r17,4(sp)
   11bc0:	dc000017 	ldw	r16,0(sp)
   11bc4:	dec00304 	addi	sp,sp,12
   11bc8:	f800283a 	ret
   11bcc:	2800111e 	bne	r5,zero,11c14 <__extendsfdf2+0xc4>
   11bd0:	88001c26 	beq	r17,zero,11c44 <__extendsfdf2+0xf4>
   11bd4:	8809883a 	mov	r4,r17
   11bd8:	0011c600 	call	11c60 <__clzsi2>
   11bdc:	00c00284 	movi	r3,10
   11be0:	18801b16 	blt	r3,r2,11c50 <__extendsfdf2+0x100>
   11be4:	018002c4 	movi	r6,11
   11be8:	308dc83a 	sub	r6,r6,r2
   11bec:	11000544 	addi	r4,r2,21
   11bf0:	8986d83a 	srl	r3,r17,r6
   11bf4:	8922983a 	sll	r17,r17,r4
   11bf8:	0180e244 	movi	r6,905
   11bfc:	01400434 	movhi	r5,16
   11c00:	3085c83a 	sub	r2,r6,r2
   11c04:	297fffc4 	addi	r5,r5,-1
   11c08:	194c703a 	and	r6,r3,r5
   11c0c:	1141ffcc 	andi	r5,r2,2047
   11c10:	003fe006 	br	11b94 <__alt_data_end+0xffff1b94>
   11c14:	88000826 	beq	r17,zero,11c38 <__extendsfdf2+0xe8>
   11c18:	880cd0fa 	srli	r6,r17,3
   11c1c:	00800434 	movhi	r2,16
   11c20:	10bfffc4 	addi	r2,r2,-1
   11c24:	31800234 	orhi	r6,r6,8
   11c28:	8822977a 	slli	r17,r17,29
   11c2c:	308c703a 	and	r6,r6,r2
   11c30:	0141ffc4 	movi	r5,2047
   11c34:	003fd706 	br	11b94 <__alt_data_end+0xffff1b94>
   11c38:	0141ffc4 	movi	r5,2047
   11c3c:	000d883a 	mov	r6,zero
   11c40:	003fd406 	br	11b94 <__alt_data_end+0xffff1b94>
   11c44:	000b883a 	mov	r5,zero
   11c48:	000d883a 	mov	r6,zero
   11c4c:	003fd106 	br	11b94 <__alt_data_end+0xffff1b94>
   11c50:	11bffd44 	addi	r6,r2,-11
   11c54:	8986983a 	sll	r3,r17,r6
   11c58:	0023883a 	mov	r17,zero
   11c5c:	003fe606 	br	11bf8 <__alt_data_end+0xffff1bf8>

00011c60 <__clzsi2>:
   11c60:	00bfffd4 	movui	r2,65535
   11c64:	11000536 	bltu	r2,r4,11c7c <__clzsi2+0x1c>
   11c68:	00803fc4 	movi	r2,255
   11c6c:	11000f36 	bltu	r2,r4,11cac <__clzsi2+0x4c>
   11c70:	00800804 	movi	r2,32
   11c74:	0007883a 	mov	r3,zero
   11c78:	00000506 	br	11c90 <__clzsi2+0x30>
   11c7c:	00804034 	movhi	r2,256
   11c80:	10bfffc4 	addi	r2,r2,-1
   11c84:	11000c2e 	bgeu	r2,r4,11cb8 <__clzsi2+0x58>
   11c88:	00800204 	movi	r2,8
   11c8c:	00c00604 	movi	r3,24
   11c90:	20c8d83a 	srl	r4,r4,r3
   11c94:	00c00074 	movhi	r3,1
   11c98:	18cc5b04 	addi	r3,r3,12652
   11c9c:	1909883a 	add	r4,r3,r4
   11ca0:	20c00003 	ldbu	r3,0(r4)
   11ca4:	10c5c83a 	sub	r2,r2,r3
   11ca8:	f800283a 	ret
   11cac:	00800604 	movi	r2,24
   11cb0:	00c00204 	movi	r3,8
   11cb4:	003ff606 	br	11c90 <__alt_data_end+0xffff1c90>
   11cb8:	00800404 	movi	r2,16
   11cbc:	1007883a 	mov	r3,r2
   11cc0:	003ff306 	br	11c90 <__alt_data_end+0xffff1c90>

00011cc4 <_asprintf_r>:
   11cc4:	defff604 	addi	sp,sp,-40
   11cc8:	dc000715 	stw	r16,28(sp)
   11ccc:	2821883a 	mov	r16,r5
   11cd0:	dfc00815 	stw	ra,32(sp)
   11cd4:	d9c00915 	stw	r7,36(sp)
   11cd8:	0080a204 	movi	r2,648
   11cdc:	d880000d 	sth	r2,0(sp)
   11ce0:	00bfffc4 	movi	r2,-1
   11ce4:	d880008d 	sth	r2,2(sp)
   11ce8:	00800074 	movhi	r2,1
   11cec:	10877404 	addi	r2,r2,7632
   11cf0:	d8800115 	stw	r2,4(sp)
   11cf4:	00800074 	movhi	r2,1
   11cf8:	10887404 	addi	r2,r2,8656
   11cfc:	d9c00904 	addi	r7,sp,36
   11d00:	d80b883a 	mov	r5,sp
   11d04:	d8000415 	stw	zero,16(sp)
   11d08:	d8000215 	stw	zero,8(sp)
   11d0c:	d8000515 	stw	zero,20(sp)
   11d10:	d8000315 	stw	zero,12(sp)
   11d14:	d8800615 	stw	r2,24(sp)
   11d18:	00123300 	call	12330 <___svfprintf_internal_r>
   11d1c:	10000416 	blt	r2,zero,11d30 <_asprintf_r+0x6c>
   11d20:	d8c00417 	ldw	r3,16(sp)
   11d24:	18000005 	stb	zero,0(r3)
   11d28:	d8c00217 	ldw	r3,8(sp)
   11d2c:	80c00015 	stw	r3,0(r16)
   11d30:	dfc00817 	ldw	ra,32(sp)
   11d34:	dc000717 	ldw	r16,28(sp)
   11d38:	dec00a04 	addi	sp,sp,40
   11d3c:	f800283a 	ret

00011d40 <asprintf>:
   11d40:	defff504 	addi	sp,sp,-44
   11d44:	dc000715 	stw	r16,28(sp)
   11d48:	2021883a 	mov	r16,r4
   11d4c:	dfc00815 	stw	ra,32(sp)
   11d50:	d9800915 	stw	r6,36(sp)
   11d54:	d9c00a15 	stw	r7,40(sp)
   11d58:	0080a204 	movi	r2,648
   11d5c:	d880000d 	sth	r2,0(sp)
   11d60:	00bfffc4 	movi	r2,-1
   11d64:	d880008d 	sth	r2,2(sp)
   11d68:	00800074 	movhi	r2,1
   11d6c:	10877404 	addi	r2,r2,7632
   11d70:	d8800115 	stw	r2,4(sp)
   11d74:	00800074 	movhi	r2,1
   11d78:	10887404 	addi	r2,r2,8656
   11d7c:	d8800615 	stw	r2,24(sp)
   11d80:	00800074 	movhi	r2,1
   11d84:	108cf904 	addi	r2,r2,13284
   11d88:	11000017 	ldw	r4,0(r2)
   11d8c:	280d883a 	mov	r6,r5
   11d90:	d9c00904 	addi	r7,sp,36
   11d94:	d80b883a 	mov	r5,sp
   11d98:	d8000415 	stw	zero,16(sp)
   11d9c:	d8000215 	stw	zero,8(sp)
   11da0:	d8000515 	stw	zero,20(sp)
   11da4:	d8000315 	stw	zero,12(sp)
   11da8:	00123300 	call	12330 <___svfprintf_internal_r>
   11dac:	10000416 	blt	r2,zero,11dc0 <asprintf+0x80>
   11db0:	d8c00417 	ldw	r3,16(sp)
   11db4:	18000005 	stb	zero,0(r3)
   11db8:	d8c00217 	ldw	r3,8(sp)
   11dbc:	80c00015 	stw	r3,0(r16)
   11dc0:	dfc00817 	ldw	ra,32(sp)
   11dc4:	dc000717 	ldw	r16,28(sp)
   11dc8:	dec00b04 	addi	sp,sp,44
   11dcc:	f800283a 	ret

00011dd0 <__sfvwrite_small_str_mbf>:
   11dd0:	2880000b 	ldhu	r2,0(r5)
   11dd4:	10c0020c 	andi	r3,r2,8
   11dd8:	18003826 	beq	r3,zero,11ebc <__sfvwrite_small_str_mbf+0xec>
   11ddc:	28c0008f 	ldh	r3,2(r5)
   11de0:	defffa04 	addi	sp,sp,-24
   11de4:	dc000015 	stw	r16,0(sp)
   11de8:	dfc00515 	stw	ra,20(sp)
   11dec:	dd000415 	stw	r20,16(sp)
   11df0:	dcc00315 	stw	r19,12(sp)
   11df4:	dc800215 	stw	r18,8(sp)
   11df8:	dc400115 	stw	r17,4(sp)
   11dfc:	2821883a 	mov	r16,r5
   11e00:	1800290e 	bge	r3,zero,11ea8 <__sfvwrite_small_str_mbf+0xd8>
   11e04:	10c0800c 	andi	r3,r2,512
   11e08:	18002726 	beq	r3,zero,11ea8 <__sfvwrite_small_str_mbf+0xd8>
   11e0c:	28c00517 	ldw	r3,20(r5)
   11e10:	3029883a 	mov	r20,r6
   11e14:	3823883a 	mov	r17,r7
   11e18:	19c0150e 	bge	r3,r7,11e70 <__sfvwrite_small_str_mbf+0xa0>
   11e1c:	1080200c 	andi	r2,r2,128
   11e20:	10001426 	beq	r2,zero,11e74 <__sfvwrite_small_str_mbf+0xa4>
   11e24:	29400217 	ldw	r5,8(r5)
   11e28:	84800417 	ldw	r18,16(r16)
   11e2c:	80800617 	ldw	r2,24(r16)
   11e30:	9165c83a 	sub	r18,r18,r5
   11e34:	10001c26 	beq	r2,zero,11ea8 <__sfvwrite_small_str_mbf+0xd8>
   11e38:	00c00074 	movhi	r3,1
   11e3c:	18ccf904 	addi	r3,r3,13284
   11e40:	19000017 	ldw	r4,0(r3)
   11e44:	3ca7883a 	add	r19,r7,r18
   11e48:	980d883a 	mov	r6,r19
   11e4c:	103ee83a 	callr	r2
   11e50:	10001526 	beq	r2,zero,11ea8 <__sfvwrite_small_str_mbf+0xd8>
   11e54:	14a5883a 	add	r18,r2,r18
   11e58:	80800215 	stw	r2,8(r16)
   11e5c:	84800415 	stw	r18,16(r16)
   11e60:	84c00315 	stw	r19,12(r16)
   11e64:	84400515 	stw	r17,20(r16)
   11e68:	8807883a 	mov	r3,r17
   11e6c:	00000106 	br	11e74 <__sfvwrite_small_str_mbf+0xa4>
   11e70:	38c00116 	blt	r7,r3,11e78 <__sfvwrite_small_str_mbf+0xa8>
   11e74:	1823883a 	mov	r17,r3
   11e78:	81000417 	ldw	r4,16(r16)
   11e7c:	880d883a 	mov	r6,r17
   11e80:	a00b883a 	mov	r5,r20
   11e84:	0011f340 	call	11f34 <memmove>
   11e88:	80800517 	ldw	r2,20(r16)
   11e8c:	81c00417 	ldw	r7,16(r16)
   11e90:	1445c83a 	sub	r2,r2,r17
   11e94:	3c63883a 	add	r17,r7,r17
   11e98:	80800515 	stw	r2,20(r16)
   11e9c:	84400415 	stw	r17,16(r16)
   11ea0:	0005883a 	mov	r2,zero
   11ea4:	00000706 	br	11ec4 <__sfvwrite_small_str_mbf+0xf4>
   11ea8:	8080000b 	ldhu	r2,0(r16)
   11eac:	10801014 	ori	r2,r2,64
   11eb0:	8080000d 	sth	r2,0(r16)
   11eb4:	00bfffc4 	movi	r2,-1
   11eb8:	00000206 	br	11ec4 <__sfvwrite_small_str_mbf+0xf4>
   11ebc:	00bfffc4 	movi	r2,-1
   11ec0:	f800283a 	ret
   11ec4:	dfc00517 	ldw	ra,20(sp)
   11ec8:	dd000417 	ldw	r20,16(sp)
   11ecc:	dcc00317 	ldw	r19,12(sp)
   11ed0:	dc800217 	ldw	r18,8(sp)
   11ed4:	dc400117 	ldw	r17,4(sp)
   11ed8:	dc000017 	ldw	r16,0(sp)
   11edc:	dec00604 	addi	sp,sp,24
   11ee0:	f800283a 	ret

00011ee4 <malloc>:
   11ee4:	00800074 	movhi	r2,1
   11ee8:	108cf904 	addi	r2,r2,13284
   11eec:	200b883a 	mov	r5,r4
   11ef0:	11000017 	ldw	r4,0(r2)
   11ef4:	00120781 	jmpi	12078 <_malloc_r>

00011ef8 <free>:
   11ef8:	00800074 	movhi	r2,1
   11efc:	108cf904 	addi	r2,r2,13284
   11f00:	200b883a 	mov	r5,r4
   11f04:	11000017 	ldw	r4,0(r2)
   11f08:	0011f941 	jmpi	11f94 <_free_r>

00011f0c <memcpy>:
   11f0c:	2005883a 	mov	r2,r4
   11f10:	2007883a 	mov	r3,r4
   11f14:	218d883a 	add	r6,r4,r6
   11f18:	19800526 	beq	r3,r6,11f30 <memcpy+0x24>
   11f1c:	29000003 	ldbu	r4,0(r5)
   11f20:	18c00044 	addi	r3,r3,1
   11f24:	29400044 	addi	r5,r5,1
   11f28:	193fffc5 	stb	r4,-1(r3)
   11f2c:	003ffa06 	br	11f18 <__alt_data_end+0xffff1f18>
   11f30:	f800283a 	ret

00011f34 <memmove>:
   11f34:	2005883a 	mov	r2,r4
   11f38:	218f883a 	add	r7,r4,r6
   11f3c:	29000236 	bltu	r5,r4,11f48 <memmove+0x14>
   11f40:	1007883a 	mov	r3,r2
   11f44:	00000c06 	br	11f78 <memmove+0x44>
   11f48:	2987883a 	add	r3,r5,r6
   11f4c:	20fffc2e 	bgeu	r4,r3,11f40 <__alt_data_end+0xffff1f40>
   11f50:	380b883a 	mov	r5,r7
   11f54:	30cdc83a 	sub	r6,r6,r3
   11f58:	1989883a 	add	r4,r3,r6
   11f5c:	20000526 	beq	r4,zero,11f74 <memmove+0x40>
   11f60:	18ffffc4 	addi	r3,r3,-1
   11f64:	19000003 	ldbu	r4,0(r3)
   11f68:	297fffc4 	addi	r5,r5,-1
   11f6c:	29000005 	stb	r4,0(r5)
   11f70:	003ff906 	br	11f58 <__alt_data_end+0xffff1f58>
   11f74:	f800283a 	ret
   11f78:	19c00526 	beq	r3,r7,11f90 <memmove+0x5c>
   11f7c:	29000003 	ldbu	r4,0(r5)
   11f80:	18c00044 	addi	r3,r3,1
   11f84:	29400044 	addi	r5,r5,1
   11f88:	193fffc5 	stb	r4,-1(r3)
   11f8c:	003ffa06 	br	11f78 <__alt_data_end+0xffff1f78>
   11f90:	f800283a 	ret

00011f94 <_free_r>:
   11f94:	28003726 	beq	r5,zero,12074 <_free_r+0xe0>
   11f98:	28ffff17 	ldw	r3,-4(r5)
   11f9c:	28bfff04 	addi	r2,r5,-4
   11fa0:	1800010e 	bge	r3,zero,11fa8 <_free_r+0x14>
   11fa4:	10c5883a 	add	r2,r2,r3
   11fa8:	01400074 	movhi	r5,1
   11fac:	294d6d04 	addi	r5,r5,13748
   11fb0:	28c00017 	ldw	r3,0(r5)
   11fb4:	280d883a 	mov	r6,r5
   11fb8:	1800031e 	bne	r3,zero,11fc8 <_free_r+0x34>
   11fbc:	10000115 	stw	zero,4(r2)
   11fc0:	28800015 	stw	r2,0(r5)
   11fc4:	f800283a 	ret
   11fc8:	10c00c2e 	bgeu	r2,r3,11ffc <_free_r+0x68>
   11fcc:	11000017 	ldw	r4,0(r2)
   11fd0:	110b883a 	add	r5,r2,r4
   11fd4:	1940041e 	bne	r3,r5,11fe8 <_free_r+0x54>
   11fd8:	19400017 	ldw	r5,0(r3)
   11fdc:	18c00117 	ldw	r3,4(r3)
   11fe0:	2909883a 	add	r4,r5,r4
   11fe4:	11000015 	stw	r4,0(r2)
   11fe8:	10c00115 	stw	r3,4(r2)
   11fec:	30800015 	stw	r2,0(r6)
   11ff0:	f800283a 	ret
   11ff4:	11400336 	bltu	r2,r5,12004 <_free_r+0x70>
   11ff8:	2807883a 	mov	r3,r5
   11ffc:	19400117 	ldw	r5,4(r3)
   12000:	283ffc1e 	bne	r5,zero,11ff4 <__alt_data_end+0xffff1ff4>
   12004:	19c00017 	ldw	r7,0(r3)
   12008:	19cd883a 	add	r6,r3,r7
   1200c:	30800a1e 	bne	r6,r2,12038 <_free_r+0xa4>
   12010:	10800017 	ldw	r2,0(r2)
   12014:	3885883a 	add	r2,r7,r2
   12018:	18800015 	stw	r2,0(r3)
   1201c:	1889883a 	add	r4,r3,r2
   12020:	2900141e 	bne	r5,r4,12074 <_free_r+0xe0>
   12024:	29000017 	ldw	r4,0(r5)
   12028:	2085883a 	add	r2,r4,r2
   1202c:	18800015 	stw	r2,0(r3)
   12030:	28800117 	ldw	r2,4(r5)
   12034:	00000e06 	br	12070 <_free_r+0xdc>
   12038:	1180032e 	bgeu	r2,r6,12048 <_free_r+0xb4>
   1203c:	00800304 	movi	r2,12
   12040:	20800015 	stw	r2,0(r4)
   12044:	f800283a 	ret
   12048:	11000017 	ldw	r4,0(r2)
   1204c:	110d883a 	add	r6,r2,r4
   12050:	2980061e 	bne	r5,r6,1206c <_free_r+0xd8>
   12054:	29800017 	ldw	r6,0(r5)
   12058:	3109883a 	add	r4,r6,r4
   1205c:	11000015 	stw	r4,0(r2)
   12060:	29000117 	ldw	r4,4(r5)
   12064:	11000115 	stw	r4,4(r2)
   12068:	00000106 	br	12070 <_free_r+0xdc>
   1206c:	11400115 	stw	r5,4(r2)
   12070:	18800115 	stw	r2,4(r3)
   12074:	f800283a 	ret

00012078 <_malloc_r>:
   12078:	defffb04 	addi	sp,sp,-20
   1207c:	00bfff04 	movi	r2,-4
   12080:	dc400115 	stw	r17,4(sp)
   12084:	2c4000c4 	addi	r17,r5,3
   12088:	88a2703a 	and	r17,r17,r2
   1208c:	dc800215 	stw	r18,8(sp)
   12090:	dfc00415 	stw	ra,16(sp)
   12094:	dcc00315 	stw	r19,12(sp)
   12098:	dc000015 	stw	r16,0(sp)
   1209c:	8c400204 	addi	r17,r17,8
   120a0:	00800304 	movi	r2,12
   120a4:	2025883a 	mov	r18,r4
   120a8:	8880022e 	bgeu	r17,r2,120b4 <_malloc_r+0x3c>
   120ac:	1023883a 	mov	r17,r2
   120b0:	00000506 	br	120c8 <_malloc_r+0x50>
   120b4:	8800040e 	bge	r17,zero,120c8 <_malloc_r+0x50>
   120b8:	00800304 	movi	r2,12
   120bc:	90800015 	stw	r2,0(r18)
   120c0:	0005883a 	mov	r2,zero
   120c4:	00003b06 	br	121b4 <_malloc_r+0x13c>
   120c8:	897ffb36 	bltu	r17,r5,120b8 <__alt_data_end+0xffff20b8>
   120cc:	00800074 	movhi	r2,1
   120d0:	108d6d04 	addi	r2,r2,13748
   120d4:	10c00017 	ldw	r3,0(r2)
   120d8:	1009883a 	mov	r4,r2
   120dc:	1821883a 	mov	r16,r3
   120e0:	80000926 	beq	r16,zero,12108 <_malloc_r+0x90>
   120e4:	80800017 	ldw	r2,0(r16)
   120e8:	1445c83a 	sub	r2,r2,r17
   120ec:	10001516 	blt	r2,zero,12144 <_malloc_r+0xcc>
   120f0:	014002c4 	movi	r5,11
   120f4:	28800d2e 	bgeu	r5,r2,1212c <_malloc_r+0xb4>
   120f8:	80800015 	stw	r2,0(r16)
   120fc:	80a1883a 	add	r16,r16,r2
   12100:	84400015 	stw	r17,0(r16)
   12104:	8000221e 	bne	r16,zero,12190 <_malloc_r+0x118>
   12108:	04000074 	movhi	r16,1
   1210c:	840d6c04 	addi	r16,r16,13744
   12110:	80800017 	ldw	r2,0(r16)
   12114:	10000e1e 	bne	r2,zero,12150 <_malloc_r+0xd8>
   12118:	000b883a 	mov	r5,zero
   1211c:	9009883a 	mov	r4,r18
   12120:	00122740 	call	12274 <_sbrk_r>
   12124:	80800015 	stw	r2,0(r16)
   12128:	00000906 	br	12150 <_malloc_r+0xd8>
   1212c:	80800117 	ldw	r2,4(r16)
   12130:	1c00021e 	bne	r3,r16,1213c <_malloc_r+0xc4>
   12134:	20800015 	stw	r2,0(r4)
   12138:	00001506 	br	12190 <_malloc_r+0x118>
   1213c:	18800115 	stw	r2,4(r3)
   12140:	00001306 	br	12190 <_malloc_r+0x118>
   12144:	8007883a 	mov	r3,r16
   12148:	84000117 	ldw	r16,4(r16)
   1214c:	003fe406 	br	120e0 <__alt_data_end+0xffff20e0>
   12150:	880b883a 	mov	r5,r17
   12154:	9009883a 	mov	r4,r18
   12158:	00122740 	call	12274 <_sbrk_r>
   1215c:	04ffffc4 	movi	r19,-1
   12160:	14ffd526 	beq	r2,r19,120b8 <__alt_data_end+0xffff20b8>
   12164:	140000c4 	addi	r16,r2,3
   12168:	00ffff04 	movi	r3,-4
   1216c:	80e0703a 	and	r16,r16,r3
   12170:	1400021e 	bne	r2,r16,1217c <_malloc_r+0x104>
   12174:	84400015 	stw	r17,0(r16)
   12178:	00000506 	br	12190 <_malloc_r+0x118>
   1217c:	808bc83a 	sub	r5,r16,r2
   12180:	9009883a 	mov	r4,r18
   12184:	00122740 	call	12274 <_sbrk_r>
   12188:	14fffa1e 	bne	r2,r19,12174 <__alt_data_end+0xffff2174>
   1218c:	003fca06 	br	120b8 <__alt_data_end+0xffff20b8>
   12190:	810002c4 	addi	r4,r16,11
   12194:	00bffe04 	movi	r2,-8
   12198:	80c00104 	addi	r3,r16,4
   1219c:	2084703a 	and	r2,r4,r2
   121a0:	10c7c83a 	sub	r3,r2,r3
   121a4:	18000326 	beq	r3,zero,121b4 <_malloc_r+0x13c>
   121a8:	80e1883a 	add	r16,r16,r3
   121ac:	00c7c83a 	sub	r3,zero,r3
   121b0:	80c00015 	stw	r3,0(r16)
   121b4:	dfc00417 	ldw	ra,16(sp)
   121b8:	dcc00317 	ldw	r19,12(sp)
   121bc:	dc800217 	ldw	r18,8(sp)
   121c0:	dc400117 	ldw	r17,4(sp)
   121c4:	dc000017 	ldw	r16,0(sp)
   121c8:	dec00504 	addi	sp,sp,20
   121cc:	f800283a 	ret

000121d0 <_realloc_r>:
   121d0:	2800021e 	bne	r5,zero,121dc <_realloc_r+0xc>
   121d4:	300b883a 	mov	r5,r6
   121d8:	00120781 	jmpi	12078 <_malloc_r>
   121dc:	defffb04 	addi	sp,sp,-20
   121e0:	dc400115 	stw	r17,4(sp)
   121e4:	dc000015 	stw	r16,0(sp)
   121e8:	dfc00415 	stw	ra,16(sp)
   121ec:	dcc00315 	stw	r19,12(sp)
   121f0:	dc800215 	stw	r18,8(sp)
   121f4:	3023883a 	mov	r17,r6
   121f8:	2821883a 	mov	r16,r5
   121fc:	3000021e 	bne	r6,zero,12208 <_realloc_r+0x38>
   12200:	0011f940 	call	11f94 <_free_r>
   12204:	00001306 	br	12254 <_realloc_r+0x84>
   12208:	2025883a 	mov	r18,r4
   1220c:	00128780 	call	12878 <_malloc_usable_size_r>
   12210:	14400e2e 	bgeu	r2,r17,1224c <_realloc_r+0x7c>
   12214:	880b883a 	mov	r5,r17
   12218:	9009883a 	mov	r4,r18
   1221c:	00120780 	call	12078 <_malloc_r>
   12220:	1027883a 	mov	r19,r2
   12224:	10000b26 	beq	r2,zero,12254 <_realloc_r+0x84>
   12228:	880d883a 	mov	r6,r17
   1222c:	800b883a 	mov	r5,r16
   12230:	1009883a 	mov	r4,r2
   12234:	0011f0c0 	call	11f0c <memcpy>
   12238:	800b883a 	mov	r5,r16
   1223c:	9009883a 	mov	r4,r18
   12240:	0011f940 	call	11f94 <_free_r>
   12244:	9805883a 	mov	r2,r19
   12248:	00000306 	br	12258 <_realloc_r+0x88>
   1224c:	8005883a 	mov	r2,r16
   12250:	00000106 	br	12258 <_realloc_r+0x88>
   12254:	0005883a 	mov	r2,zero
   12258:	dfc00417 	ldw	ra,16(sp)
   1225c:	dcc00317 	ldw	r19,12(sp)
   12260:	dc800217 	ldw	r18,8(sp)
   12264:	dc400117 	ldw	r17,4(sp)
   12268:	dc000017 	ldw	r16,0(sp)
   1226c:	dec00504 	addi	sp,sp,20
   12270:	f800283a 	ret

00012274 <_sbrk_r>:
   12274:	defffd04 	addi	sp,sp,-12
   12278:	dc000015 	stw	r16,0(sp)
   1227c:	04000074 	movhi	r16,1
   12280:	dc400115 	stw	r17,4(sp)
   12284:	840d6e04 	addi	r16,r16,13752
   12288:	2023883a 	mov	r17,r4
   1228c:	2809883a 	mov	r4,r5
   12290:	dfc00215 	stw	ra,8(sp)
   12294:	80000015 	stw	zero,0(r16)
   12298:	0012c800 	call	12c80 <sbrk>
   1229c:	00ffffc4 	movi	r3,-1
   122a0:	10c0031e 	bne	r2,r3,122b0 <_sbrk_r+0x3c>
   122a4:	80c00017 	ldw	r3,0(r16)
   122a8:	18000126 	beq	r3,zero,122b0 <_sbrk_r+0x3c>
   122ac:	88c00015 	stw	r3,0(r17)
   122b0:	dfc00217 	ldw	ra,8(sp)
   122b4:	dc400117 	ldw	r17,4(sp)
   122b8:	dc000017 	ldw	r16,0(sp)
   122bc:	dec00304 	addi	sp,sp,12
   122c0:	f800283a 	ret

000122c4 <print_repeat>:
   122c4:	defffb04 	addi	sp,sp,-20
   122c8:	dc800315 	stw	r18,12(sp)
   122cc:	dc400215 	stw	r17,8(sp)
   122d0:	dc000115 	stw	r16,4(sp)
   122d4:	dfc00415 	stw	ra,16(sp)
   122d8:	2025883a 	mov	r18,r4
   122dc:	2823883a 	mov	r17,r5
   122e0:	d9800005 	stb	r6,0(sp)
   122e4:	3821883a 	mov	r16,r7
   122e8:	04000a0e 	bge	zero,r16,12314 <print_repeat+0x50>
   122ec:	88800117 	ldw	r2,4(r17)
   122f0:	01c00044 	movi	r7,1
   122f4:	d80d883a 	mov	r6,sp
   122f8:	880b883a 	mov	r5,r17
   122fc:	9009883a 	mov	r4,r18
   12300:	103ee83a 	callr	r2
   12304:	843fffc4 	addi	r16,r16,-1
   12308:	103ff726 	beq	r2,zero,122e8 <__alt_data_end+0xffff22e8>
   1230c:	00bfffc4 	movi	r2,-1
   12310:	00000106 	br	12318 <print_repeat+0x54>
   12314:	0005883a 	mov	r2,zero
   12318:	dfc00417 	ldw	ra,16(sp)
   1231c:	dc800317 	ldw	r18,12(sp)
   12320:	dc400217 	ldw	r17,8(sp)
   12324:	dc000117 	ldw	r16,4(sp)
   12328:	dec00504 	addi	sp,sp,20
   1232c:	f800283a 	ret

00012330 <___svfprintf_internal_r>:
   12330:	deffe504 	addi	sp,sp,-108
   12334:	d8c00804 	addi	r3,sp,32
   12338:	ddc01815 	stw	r23,96(sp)
   1233c:	dd801715 	stw	r22,92(sp)
   12340:	dd401615 	stw	r21,88(sp)
   12344:	dd001515 	stw	r20,84(sp)
   12348:	dcc01415 	stw	r19,80(sp)
   1234c:	dc801315 	stw	r18,76(sp)
   12350:	dc401215 	stw	r17,72(sp)
   12354:	dc001115 	stw	r16,68(sp)
   12358:	dfc01a15 	stw	ra,104(sp)
   1235c:	df001915 	stw	fp,100(sp)
   12360:	2029883a 	mov	r20,r4
   12364:	2823883a 	mov	r17,r5
   12368:	382d883a 	mov	r22,r7
   1236c:	d9800f15 	stw	r6,60(sp)
   12370:	0021883a 	mov	r16,zero
   12374:	d8000e15 	stw	zero,56(sp)
   12378:	d8000a15 	stw	zero,40(sp)
   1237c:	002b883a 	mov	r21,zero
   12380:	0027883a 	mov	r19,zero
   12384:	0025883a 	mov	r18,zero
   12388:	d8000c15 	stw	zero,48(sp)
   1238c:	d8000b15 	stw	zero,44(sp)
   12390:	002f883a 	mov	r23,zero
   12394:	d8c00915 	stw	r3,36(sp)
   12398:	d8c00f17 	ldw	r3,60(sp)
   1239c:	19000003 	ldbu	r4,0(r3)
   123a0:	20803fcc 	andi	r2,r4,255
   123a4:	1080201c 	xori	r2,r2,128
   123a8:	10bfe004 	addi	r2,r2,-128
   123ac:	10011e26 	beq	r2,zero,12828 <___svfprintf_internal_r+0x4f8>
   123b0:	00c00044 	movi	r3,1
   123b4:	b8c01426 	beq	r23,r3,12408 <___svfprintf_internal_r+0xd8>
   123b8:	1dc00216 	blt	r3,r23,123c4 <___svfprintf_internal_r+0x94>
   123bc:	b8000626 	beq	r23,zero,123d8 <___svfprintf_internal_r+0xa8>
   123c0:	00011506 	br	12818 <___svfprintf_internal_r+0x4e8>
   123c4:	01400084 	movi	r5,2
   123c8:	b9401d26 	beq	r23,r5,12440 <___svfprintf_internal_r+0x110>
   123cc:	014000c4 	movi	r5,3
   123d0:	b9402b26 	beq	r23,r5,12480 <___svfprintf_internal_r+0x150>
   123d4:	00011006 	br	12818 <___svfprintf_internal_r+0x4e8>
   123d8:	01400944 	movi	r5,37
   123dc:	1140fc26 	beq	r2,r5,127d0 <___svfprintf_internal_r+0x4a0>
   123e0:	88800117 	ldw	r2,4(r17)
   123e4:	d9000005 	stb	r4,0(sp)
   123e8:	01c00044 	movi	r7,1
   123ec:	d80d883a 	mov	r6,sp
   123f0:	880b883a 	mov	r5,r17
   123f4:	a009883a 	mov	r4,r20
   123f8:	103ee83a 	callr	r2
   123fc:	1000d81e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12400:	84000044 	addi	r16,r16,1
   12404:	00010406 	br	12818 <___svfprintf_internal_r+0x4e8>
   12408:	01400c04 	movi	r5,48
   1240c:	1140fa26 	beq	r2,r5,127f8 <___svfprintf_internal_r+0x4c8>
   12410:	01400944 	movi	r5,37
   12414:	11400a1e 	bne	r2,r5,12440 <___svfprintf_internal_r+0x110>
   12418:	d8800005 	stb	r2,0(sp)
   1241c:	88800117 	ldw	r2,4(r17)
   12420:	b80f883a 	mov	r7,r23
   12424:	d80d883a 	mov	r6,sp
   12428:	880b883a 	mov	r5,r17
   1242c:	a009883a 	mov	r4,r20
   12430:	103ee83a 	callr	r2
   12434:	1000ca1e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12438:	84000044 	addi	r16,r16,1
   1243c:	0000f506 	br	12814 <___svfprintf_internal_r+0x4e4>
   12440:	25fff404 	addi	r23,r4,-48
   12444:	bdc03fcc 	andi	r23,r23,255
   12448:	00c00244 	movi	r3,9
   1244c:	1dc00936 	bltu	r3,r23,12474 <___svfprintf_internal_r+0x144>
   12450:	00bfffc4 	movi	r2,-1
   12454:	90800426 	beq	r18,r2,12468 <___svfprintf_internal_r+0x138>
   12458:	01400284 	movi	r5,10
   1245c:	9009883a 	mov	r4,r18
   12460:	00106d40 	call	106d4 <__mulsi3>
   12464:	00000106 	br	1246c <___svfprintf_internal_r+0x13c>
   12468:	0005883a 	mov	r2,zero
   1246c:	b8a5883a 	add	r18,r23,r2
   12470:	0000e206 	br	127fc <___svfprintf_internal_r+0x4cc>
   12474:	01400b84 	movi	r5,46
   12478:	1140e426 	beq	r2,r5,1280c <___svfprintf_internal_r+0x4dc>
   1247c:	05c00084 	movi	r23,2
   12480:	213ff404 	addi	r4,r4,-48
   12484:	27003fcc 	andi	fp,r4,255
   12488:	00c00244 	movi	r3,9
   1248c:	1f000936 	bltu	r3,fp,124b4 <___svfprintf_internal_r+0x184>
   12490:	00bfffc4 	movi	r2,-1
   12494:	98800426 	beq	r19,r2,124a8 <___svfprintf_internal_r+0x178>
   12498:	01400284 	movi	r5,10
   1249c:	9809883a 	mov	r4,r19
   124a0:	00106d40 	call	106d4 <__mulsi3>
   124a4:	00000106 	br	124ac <___svfprintf_internal_r+0x17c>
   124a8:	0005883a 	mov	r2,zero
   124ac:	e0a7883a 	add	r19,fp,r2
   124b0:	0000d906 	br	12818 <___svfprintf_internal_r+0x4e8>
   124b4:	00c01b04 	movi	r3,108
   124b8:	10c0d226 	beq	r2,r3,12804 <___svfprintf_internal_r+0x4d4>
   124bc:	013fffc4 	movi	r4,-1
   124c0:	99000226 	beq	r19,r4,124cc <___svfprintf_internal_r+0x19c>
   124c4:	d8000b15 	stw	zero,44(sp)
   124c8:	00000106 	br	124d0 <___svfprintf_internal_r+0x1a0>
   124cc:	04c00044 	movi	r19,1
   124d0:	01001a44 	movi	r4,105
   124d4:	11001626 	beq	r2,r4,12530 <___svfprintf_internal_r+0x200>
   124d8:	20800916 	blt	r4,r2,12500 <___svfprintf_internal_r+0x1d0>
   124dc:	010018c4 	movi	r4,99
   124e0:	11008826 	beq	r2,r4,12704 <___svfprintf_internal_r+0x3d4>
   124e4:	01001904 	movi	r4,100
   124e8:	11001126 	beq	r2,r4,12530 <___svfprintf_internal_r+0x200>
   124ec:	01001604 	movi	r4,88
   124f0:	1100c81e 	bne	r2,r4,12814 <___svfprintf_internal_r+0x4e4>
   124f4:	00c00044 	movi	r3,1
   124f8:	d8c00e15 	stw	r3,56(sp)
   124fc:	00001506 	br	12554 <___svfprintf_internal_r+0x224>
   12500:	01001cc4 	movi	r4,115
   12504:	11009826 	beq	r2,r4,12768 <___svfprintf_internal_r+0x438>
   12508:	20800416 	blt	r4,r2,1251c <___svfprintf_internal_r+0x1ec>
   1250c:	01001bc4 	movi	r4,111
   12510:	1100c01e 	bne	r2,r4,12814 <___svfprintf_internal_r+0x4e4>
   12514:	05400204 	movi	r21,8
   12518:	00000f06 	br	12558 <___svfprintf_internal_r+0x228>
   1251c:	01001d44 	movi	r4,117
   12520:	11000d26 	beq	r2,r4,12558 <___svfprintf_internal_r+0x228>
   12524:	01001e04 	movi	r4,120
   12528:	11000a26 	beq	r2,r4,12554 <___svfprintf_internal_r+0x224>
   1252c:	0000b906 	br	12814 <___svfprintf_internal_r+0x4e4>
   12530:	d8c00a17 	ldw	r3,40(sp)
   12534:	b7000104 	addi	fp,r22,4
   12538:	18000726 	beq	r3,zero,12558 <___svfprintf_internal_r+0x228>
   1253c:	df000d15 	stw	fp,52(sp)
   12540:	b5c00017 	ldw	r23,0(r22)
   12544:	b800080e 	bge	r23,zero,12568 <___svfprintf_internal_r+0x238>
   12548:	05efc83a 	sub	r23,zero,r23
   1254c:	02400044 	movi	r9,1
   12550:	00000606 	br	1256c <___svfprintf_internal_r+0x23c>
   12554:	05400404 	movi	r21,16
   12558:	b0c00104 	addi	r3,r22,4
   1255c:	d8c00d15 	stw	r3,52(sp)
   12560:	b5c00017 	ldw	r23,0(r22)
   12564:	d8000a15 	stw	zero,40(sp)
   12568:	0013883a 	mov	r9,zero
   1256c:	d839883a 	mov	fp,sp
   12570:	b8001726 	beq	r23,zero,125d0 <___svfprintf_internal_r+0x2a0>
   12574:	a80b883a 	mov	r5,r21
   12578:	b809883a 	mov	r4,r23
   1257c:	da401015 	stw	r9,64(sp)
   12580:	00129a80 	call	129a8 <__udivsi3>
   12584:	a80b883a 	mov	r5,r21
   12588:	1009883a 	mov	r4,r2
   1258c:	102d883a 	mov	r22,r2
   12590:	00106d40 	call	106d4 <__mulsi3>
   12594:	b885c83a 	sub	r2,r23,r2
   12598:	00c00244 	movi	r3,9
   1259c:	da401017 	ldw	r9,64(sp)
   125a0:	18800216 	blt	r3,r2,125ac <___svfprintf_internal_r+0x27c>
   125a4:	10800c04 	addi	r2,r2,48
   125a8:	00000506 	br	125c0 <___svfprintf_internal_r+0x290>
   125ac:	d8c00e17 	ldw	r3,56(sp)
   125b0:	18000226 	beq	r3,zero,125bc <___svfprintf_internal_r+0x28c>
   125b4:	10800dc4 	addi	r2,r2,55
   125b8:	00000106 	br	125c0 <___svfprintf_internal_r+0x290>
   125bc:	108015c4 	addi	r2,r2,87
   125c0:	e0800005 	stb	r2,0(fp)
   125c4:	b02f883a 	mov	r23,r22
   125c8:	e7000044 	addi	fp,fp,1
   125cc:	003fe806 	br	12570 <__alt_data_end+0xffff2570>
   125d0:	e6efc83a 	sub	r23,fp,sp
   125d4:	9dc5c83a 	sub	r2,r19,r23
   125d8:	0080090e 	bge	zero,r2,12600 <___svfprintf_internal_r+0x2d0>
   125dc:	e085883a 	add	r2,fp,r2
   125e0:	01400c04 	movi	r5,48
   125e4:	d8c00917 	ldw	r3,36(sp)
   125e8:	e009883a 	mov	r4,fp
   125ec:	e0c0032e 	bgeu	fp,r3,125fc <___svfprintf_internal_r+0x2cc>
   125f0:	e7000044 	addi	fp,fp,1
   125f4:	21400005 	stb	r5,0(r4)
   125f8:	e0bffa1e 	bne	fp,r2,125e4 <__alt_data_end+0xffff25e4>
   125fc:	e6efc83a 	sub	r23,fp,sp
   12600:	d8c00b17 	ldw	r3,44(sp)
   12604:	4dd1883a 	add	r8,r9,r23
   12608:	922dc83a 	sub	r22,r18,r8
   1260c:	18001626 	beq	r3,zero,12668 <___svfprintf_internal_r+0x338>
   12610:	48000a26 	beq	r9,zero,1263c <___svfprintf_internal_r+0x30c>
   12614:	00800b44 	movi	r2,45
   12618:	d8800805 	stb	r2,32(sp)
   1261c:	88800117 	ldw	r2,4(r17)
   12620:	01c00044 	movi	r7,1
   12624:	d9800804 	addi	r6,sp,32
   12628:	880b883a 	mov	r5,r17
   1262c:	a009883a 	mov	r4,r20
   12630:	103ee83a 	callr	r2
   12634:	10004a1e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12638:	84000044 	addi	r16,r16,1
   1263c:	0580070e 	bge	zero,r22,1265c <___svfprintf_internal_r+0x32c>
   12640:	b00f883a 	mov	r7,r22
   12644:	01800c04 	movi	r6,48
   12648:	880b883a 	mov	r5,r17
   1264c:	a009883a 	mov	r4,r20
   12650:	00122c40 	call	122c4 <print_repeat>
   12654:	1000421e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12658:	85a1883a 	add	r16,r16,r22
   1265c:	e02d883a 	mov	r22,fp
   12660:	bf2fc83a 	sub	r23,r23,fp
   12664:	00002006 	br	126e8 <___svfprintf_internal_r+0x3b8>
   12668:	0580090e 	bge	zero,r22,12690 <___svfprintf_internal_r+0x360>
   1266c:	b00f883a 	mov	r7,r22
   12670:	01800804 	movi	r6,32
   12674:	880b883a 	mov	r5,r17
   12678:	a009883a 	mov	r4,r20
   1267c:	da401015 	stw	r9,64(sp)
   12680:	00122c40 	call	122c4 <print_repeat>
   12684:	da401017 	ldw	r9,64(sp)
   12688:	1000351e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   1268c:	85a1883a 	add	r16,r16,r22
   12690:	483ff226 	beq	r9,zero,1265c <__alt_data_end+0xffff265c>
   12694:	00800b44 	movi	r2,45
   12698:	d8800805 	stb	r2,32(sp)
   1269c:	88800117 	ldw	r2,4(r17)
   126a0:	01c00044 	movi	r7,1
   126a4:	d9800804 	addi	r6,sp,32
   126a8:	880b883a 	mov	r5,r17
   126ac:	a009883a 	mov	r4,r20
   126b0:	103ee83a 	callr	r2
   126b4:	10002a1e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   126b8:	84000044 	addi	r16,r16,1
   126bc:	003fe706 	br	1265c <__alt_data_end+0xffff265c>
   126c0:	b5bfffc4 	addi	r22,r22,-1
   126c4:	b0800003 	ldbu	r2,0(r22)
   126c8:	01c00044 	movi	r7,1
   126cc:	d9800804 	addi	r6,sp,32
   126d0:	d8800805 	stb	r2,32(sp)
   126d4:	88800117 	ldw	r2,4(r17)
   126d8:	880b883a 	mov	r5,r17
   126dc:	a009883a 	mov	r4,r20
   126e0:	103ee83a 	callr	r2
   126e4:	10001e1e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   126e8:	8585c83a 	sub	r2,r16,r22
   126ec:	b5c9883a 	add	r4,r22,r23
   126f0:	e085883a 	add	r2,fp,r2
   126f4:	013ff216 	blt	zero,r4,126c0 <__alt_data_end+0xffff26c0>
   126f8:	1021883a 	mov	r16,r2
   126fc:	dd800d17 	ldw	r22,52(sp)
   12700:	00004406 	br	12814 <___svfprintf_internal_r+0x4e4>
   12704:	00800044 	movi	r2,1
   12708:	1480080e 	bge	r2,r18,1272c <___svfprintf_internal_r+0x3fc>
   1270c:	95ffffc4 	addi	r23,r18,-1
   12710:	b80f883a 	mov	r7,r23
   12714:	01800804 	movi	r6,32
   12718:	880b883a 	mov	r5,r17
   1271c:	a009883a 	mov	r4,r20
   12720:	00122c40 	call	122c4 <print_repeat>
   12724:	10000e1e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12728:	85e1883a 	add	r16,r16,r23
   1272c:	b0800017 	ldw	r2,0(r22)
   12730:	01c00044 	movi	r7,1
   12734:	d80d883a 	mov	r6,sp
   12738:	d8800005 	stb	r2,0(sp)
   1273c:	88800117 	ldw	r2,4(r17)
   12740:	880b883a 	mov	r5,r17
   12744:	a009883a 	mov	r4,r20
   12748:	b5c00104 	addi	r23,r22,4
   1274c:	103ee83a 	callr	r2
   12750:	1000031e 	bne	r2,zero,12760 <___svfprintf_internal_r+0x430>
   12754:	84000044 	addi	r16,r16,1
   12758:	b82d883a 	mov	r22,r23
   1275c:	00002d06 	br	12814 <___svfprintf_internal_r+0x4e4>
   12760:	00bfffc4 	movi	r2,-1
   12764:	00003106 	br	1282c <___svfprintf_internal_r+0x4fc>
   12768:	b5c00017 	ldw	r23,0(r22)
   1276c:	b7000104 	addi	fp,r22,4
   12770:	b809883a 	mov	r4,r23
   12774:	00128940 	call	12894 <strlen>
   12778:	9091c83a 	sub	r8,r18,r2
   1277c:	102d883a 	mov	r22,r2
   12780:	0200090e 	bge	zero,r8,127a8 <___svfprintf_internal_r+0x478>
   12784:	400f883a 	mov	r7,r8
   12788:	01800804 	movi	r6,32
   1278c:	880b883a 	mov	r5,r17
   12790:	a009883a 	mov	r4,r20
   12794:	da001015 	stw	r8,64(sp)
   12798:	00122c40 	call	122c4 <print_repeat>
   1279c:	da001017 	ldw	r8,64(sp)
   127a0:	103fef1e 	bne	r2,zero,12760 <__alt_data_end+0xffff2760>
   127a4:	8221883a 	add	r16,r16,r8
   127a8:	88800117 	ldw	r2,4(r17)
   127ac:	b00f883a 	mov	r7,r22
   127b0:	b80d883a 	mov	r6,r23
   127b4:	880b883a 	mov	r5,r17
   127b8:	a009883a 	mov	r4,r20
   127bc:	103ee83a 	callr	r2
   127c0:	103fe71e 	bne	r2,zero,12760 <__alt_data_end+0xffff2760>
   127c4:	85a1883a 	add	r16,r16,r22
   127c8:	e02d883a 	mov	r22,fp
   127cc:	00001106 	br	12814 <___svfprintf_internal_r+0x4e4>
   127d0:	00c00044 	movi	r3,1
   127d4:	04ffffc4 	movi	r19,-1
   127d8:	d8000e15 	stw	zero,56(sp)
   127dc:	d8c00a15 	stw	r3,40(sp)
   127e0:	05400284 	movi	r21,10
   127e4:	9825883a 	mov	r18,r19
   127e8:	d8000c15 	stw	zero,48(sp)
   127ec:	d8000b15 	stw	zero,44(sp)
   127f0:	182f883a 	mov	r23,r3
   127f4:	00000806 	br	12818 <___svfprintf_internal_r+0x4e8>
   127f8:	ddc00b15 	stw	r23,44(sp)
   127fc:	05c00084 	movi	r23,2
   12800:	00000506 	br	12818 <___svfprintf_internal_r+0x4e8>
   12804:	00c00044 	movi	r3,1
   12808:	d8c00c15 	stw	r3,48(sp)
   1280c:	05c000c4 	movi	r23,3
   12810:	00000106 	br	12818 <___svfprintf_internal_r+0x4e8>
   12814:	002f883a 	mov	r23,zero
   12818:	d8c00f17 	ldw	r3,60(sp)
   1281c:	18c00044 	addi	r3,r3,1
   12820:	d8c00f15 	stw	r3,60(sp)
   12824:	003edc06 	br	12398 <__alt_data_end+0xffff2398>
   12828:	8005883a 	mov	r2,r16
   1282c:	dfc01a17 	ldw	ra,104(sp)
   12830:	df001917 	ldw	fp,100(sp)
   12834:	ddc01817 	ldw	r23,96(sp)
   12838:	dd801717 	ldw	r22,92(sp)
   1283c:	dd401617 	ldw	r21,88(sp)
   12840:	dd001517 	ldw	r20,84(sp)
   12844:	dcc01417 	ldw	r19,80(sp)
   12848:	dc801317 	ldw	r18,76(sp)
   1284c:	dc401217 	ldw	r17,72(sp)
   12850:	dc001117 	ldw	r16,68(sp)
   12854:	dec01b04 	addi	sp,sp,108
   12858:	f800283a 	ret

0001285c <__vfprintf_internal_unused>:
   1285c:	00800074 	movhi	r2,1
   12860:	108cf904 	addi	r2,r2,13284
   12864:	300f883a 	mov	r7,r6
   12868:	280d883a 	mov	r6,r5
   1286c:	200b883a 	mov	r5,r4
   12870:	11000017 	ldw	r4,0(r2)
   12874:	00123301 	jmpi	12330 <___svfprintf_internal_r>

00012878 <_malloc_usable_size_r>:
   12878:	28bfff17 	ldw	r2,-4(r5)
   1287c:	1000030e 	bge	r2,zero,1288c <_malloc_usable_size_r+0x14>
   12880:	288b883a 	add	r5,r5,r2
   12884:	28ffff17 	ldw	r3,-4(r5)
   12888:	10c5883a 	add	r2,r2,r3
   1288c:	10bfff04 	addi	r2,r2,-4
   12890:	f800283a 	ret

00012894 <strlen>:
   12894:	2005883a 	mov	r2,r4
   12898:	10c00007 	ldb	r3,0(r2)
   1289c:	18000226 	beq	r3,zero,128a8 <strlen+0x14>
   128a0:	10800044 	addi	r2,r2,1
   128a4:	003ffc06 	br	12898 <__alt_data_end+0xffff2898>
   128a8:	1105c83a 	sub	r2,r2,r4
   128ac:	f800283a 	ret

000128b0 <__divsi3>:
   128b0:	20001b16 	blt	r4,zero,12920 <__divsi3+0x70>
   128b4:	000f883a 	mov	r7,zero
   128b8:	28001616 	blt	r5,zero,12914 <__divsi3+0x64>
   128bc:	200d883a 	mov	r6,r4
   128c0:	29001a2e 	bgeu	r5,r4,1292c <__divsi3+0x7c>
   128c4:	00800804 	movi	r2,32
   128c8:	00c00044 	movi	r3,1
   128cc:	00000106 	br	128d4 <__divsi3+0x24>
   128d0:	10000d26 	beq	r2,zero,12908 <__divsi3+0x58>
   128d4:	294b883a 	add	r5,r5,r5
   128d8:	10bfffc4 	addi	r2,r2,-1
   128dc:	18c7883a 	add	r3,r3,r3
   128e0:	293ffb36 	bltu	r5,r4,128d0 <__alt_data_end+0xffff28d0>
   128e4:	0005883a 	mov	r2,zero
   128e8:	18000726 	beq	r3,zero,12908 <__divsi3+0x58>
   128ec:	0005883a 	mov	r2,zero
   128f0:	31400236 	bltu	r6,r5,128fc <__divsi3+0x4c>
   128f4:	314dc83a 	sub	r6,r6,r5
   128f8:	10c4b03a 	or	r2,r2,r3
   128fc:	1806d07a 	srli	r3,r3,1
   12900:	280ad07a 	srli	r5,r5,1
   12904:	183ffa1e 	bne	r3,zero,128f0 <__alt_data_end+0xffff28f0>
   12908:	38000126 	beq	r7,zero,12910 <__divsi3+0x60>
   1290c:	0085c83a 	sub	r2,zero,r2
   12910:	f800283a 	ret
   12914:	014bc83a 	sub	r5,zero,r5
   12918:	39c0005c 	xori	r7,r7,1
   1291c:	003fe706 	br	128bc <__alt_data_end+0xffff28bc>
   12920:	0109c83a 	sub	r4,zero,r4
   12924:	01c00044 	movi	r7,1
   12928:	003fe306 	br	128b8 <__alt_data_end+0xffff28b8>
   1292c:	00c00044 	movi	r3,1
   12930:	003fee06 	br	128ec <__alt_data_end+0xffff28ec>

00012934 <__modsi3>:
   12934:	20001716 	blt	r4,zero,12994 <__modsi3+0x60>
   12938:	000f883a 	mov	r7,zero
   1293c:	2005883a 	mov	r2,r4
   12940:	28001216 	blt	r5,zero,1298c <__modsi3+0x58>
   12944:	2900162e 	bgeu	r5,r4,129a0 <__modsi3+0x6c>
   12948:	01800804 	movi	r6,32
   1294c:	00c00044 	movi	r3,1
   12950:	00000106 	br	12958 <__modsi3+0x24>
   12954:	30000a26 	beq	r6,zero,12980 <__modsi3+0x4c>
   12958:	294b883a 	add	r5,r5,r5
   1295c:	31bfffc4 	addi	r6,r6,-1
   12960:	18c7883a 	add	r3,r3,r3
   12964:	293ffb36 	bltu	r5,r4,12954 <__alt_data_end+0xffff2954>
   12968:	18000526 	beq	r3,zero,12980 <__modsi3+0x4c>
   1296c:	1806d07a 	srli	r3,r3,1
   12970:	11400136 	bltu	r2,r5,12978 <__modsi3+0x44>
   12974:	1145c83a 	sub	r2,r2,r5
   12978:	280ad07a 	srli	r5,r5,1
   1297c:	183ffb1e 	bne	r3,zero,1296c <__alt_data_end+0xffff296c>
   12980:	38000126 	beq	r7,zero,12988 <__modsi3+0x54>
   12984:	0085c83a 	sub	r2,zero,r2
   12988:	f800283a 	ret
   1298c:	014bc83a 	sub	r5,zero,r5
   12990:	003fec06 	br	12944 <__alt_data_end+0xffff2944>
   12994:	0109c83a 	sub	r4,zero,r4
   12998:	01c00044 	movi	r7,1
   1299c:	003fe706 	br	1293c <__alt_data_end+0xffff293c>
   129a0:	00c00044 	movi	r3,1
   129a4:	003ff106 	br	1296c <__alt_data_end+0xffff296c>

000129a8 <__udivsi3>:
   129a8:	200d883a 	mov	r6,r4
   129ac:	2900152e 	bgeu	r5,r4,12a04 <__udivsi3+0x5c>
   129b0:	28001416 	blt	r5,zero,12a04 <__udivsi3+0x5c>
   129b4:	00800804 	movi	r2,32
   129b8:	00c00044 	movi	r3,1
   129bc:	00000206 	br	129c8 <__udivsi3+0x20>
   129c0:	10000e26 	beq	r2,zero,129fc <__udivsi3+0x54>
   129c4:	28000516 	blt	r5,zero,129dc <__udivsi3+0x34>
   129c8:	294b883a 	add	r5,r5,r5
   129cc:	10bfffc4 	addi	r2,r2,-1
   129d0:	18c7883a 	add	r3,r3,r3
   129d4:	293ffa36 	bltu	r5,r4,129c0 <__alt_data_end+0xffff29c0>
   129d8:	18000826 	beq	r3,zero,129fc <__udivsi3+0x54>
   129dc:	0005883a 	mov	r2,zero
   129e0:	31400236 	bltu	r6,r5,129ec <__udivsi3+0x44>
   129e4:	314dc83a 	sub	r6,r6,r5
   129e8:	10c4b03a 	or	r2,r2,r3
   129ec:	1806d07a 	srli	r3,r3,1
   129f0:	280ad07a 	srli	r5,r5,1
   129f4:	183ffa1e 	bne	r3,zero,129e0 <__alt_data_end+0xffff29e0>
   129f8:	f800283a 	ret
   129fc:	0005883a 	mov	r2,zero
   12a00:	f800283a 	ret
   12a04:	00c00044 	movi	r3,1
   12a08:	003ff406 	br	129dc <__alt_data_end+0xffff29dc>

00012a0c <__umodsi3>:
   12a0c:	2005883a 	mov	r2,r4
   12a10:	2900122e 	bgeu	r5,r4,12a5c <__umodsi3+0x50>
   12a14:	28001116 	blt	r5,zero,12a5c <__umodsi3+0x50>
   12a18:	01800804 	movi	r6,32
   12a1c:	00c00044 	movi	r3,1
   12a20:	00000206 	br	12a2c <__umodsi3+0x20>
   12a24:	30000c26 	beq	r6,zero,12a58 <__umodsi3+0x4c>
   12a28:	28000516 	blt	r5,zero,12a40 <__umodsi3+0x34>
   12a2c:	294b883a 	add	r5,r5,r5
   12a30:	31bfffc4 	addi	r6,r6,-1
   12a34:	18c7883a 	add	r3,r3,r3
   12a38:	293ffa36 	bltu	r5,r4,12a24 <__alt_data_end+0xffff2a24>
   12a3c:	18000626 	beq	r3,zero,12a58 <__umodsi3+0x4c>
   12a40:	1806d07a 	srli	r3,r3,1
   12a44:	11400136 	bltu	r2,r5,12a4c <__umodsi3+0x40>
   12a48:	1145c83a 	sub	r2,r2,r5
   12a4c:	280ad07a 	srli	r5,r5,1
   12a50:	183ffb1e 	bne	r3,zero,12a40 <__alt_data_end+0xffff2a40>
   12a54:	f800283a 	ret
   12a58:	f800283a 	ret
   12a5c:	00c00044 	movi	r3,1
   12a60:	003ff706 	br	12a40 <__alt_data_end+0xffff2a40>

00012a64 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   12a64:	00800074 	movhi	r2,1
   12a68:	108ce104 	addi	r2,r2,13188
   12a6c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   12a70:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   12a74:	01000074 	movhi	r4,1
   12a78:	01800044 	movi	r6,1
   12a7c:	d80b883a 	mov	r5,sp
   12a80:	210cfc04 	addi	r4,r4,13296
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   12a84:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   12a88:	0012cfc0 	call	12cfc <altera_avalon_jtag_uart_read>
   12a8c:	0080020e 	bge	zero,r2,12a98 <alt_getchar+0x34>
        return -1;
    }
    return c;
   12a90:	d8800007 	ldb	r2,0(sp)
   12a94:	00000106 	br	12a9c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   12a98:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   12a9c:	dfc00117 	ldw	ra,4(sp)
   12aa0:	dec00204 	addi	sp,sp,8
   12aa4:	f800283a 	ret

00012aa8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   12aa8:	008007c4 	movi	r2,31
   12aac:	11002136 	bltu	r2,r4,12b34 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ab0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ab4:	00ffff84 	movi	r3,-2
   12ab8:	38c4703a 	and	r2,r7,r3
   12abc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   12ac0:	200490fa 	slli	r2,r4,3
   12ac4:	02000074 	movhi	r8,1
   12ac8:	420d7404 	addi	r8,r8,13776
   12acc:	4085883a 	add	r2,r8,r2
   12ad0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   12ad4:	11400115 	stw	r5,4(r2)
   12ad8:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   12adc:	30000726 	beq	r6,zero,12afc <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ae0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ae4:	28c6703a 	and	r3,r5,r3
   12ae8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   12aec:	d0e07817 	ldw	r3,-32288(gp)
   12af0:	1104983a 	sll	r2,r2,r4
   12af4:	10c4b03a 	or	r2,r2,r3
   12af8:	00000706 	br	12b18 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12afc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b00:	28c6703a 	and	r3,r5,r3
   12b04:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   12b08:	1104983a 	sll	r2,r2,r4
   12b0c:	d0e07817 	ldw	r3,-32288(gp)
   12b10:	0084303a 	nor	r2,zero,r2
   12b14:	10c4703a 	and	r2,r2,r3
   12b18:	d0a07815 	stw	r2,-32288(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12b1c:	d0a07817 	ldw	r2,-32288(gp)
   12b20:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b24:	2801703a 	wrctl	status,r5
   12b28:	3801703a 	wrctl	status,r7
   12b2c:	0005883a 	mov	r2,zero
   12b30:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   12b34:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   12b38:	f800283a 	ret

00012b3c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12b3c:	deffff04 	addi	sp,sp,-4
   12b40:	01000074 	movhi	r4,1
   12b44:	01400074 	movhi	r5,1
   12b48:	dfc00015 	stw	ra,0(sp)
   12b4c:	210c9e04 	addi	r4,r4,12920
   12b50:	294d0304 	addi	r5,r5,13324

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12b54:	2140061e 	bne	r4,r5,12b70 <alt_load+0x34>
   12b58:	01000074 	movhi	r4,1
   12b5c:	01400074 	movhi	r5,1
   12b60:	21000804 	addi	r4,r4,32
   12b64:	29400804 	addi	r5,r5,32
   12b68:	2140121e 	bne	r4,r5,12bb4 <alt_load+0x78>
   12b6c:	00000b06 	br	12b9c <alt_load+0x60>
   12b70:	00c00074 	movhi	r3,1
   12b74:	18cd0304 	addi	r3,r3,13324
   12b78:	1907c83a 	sub	r3,r3,r4
   12b7c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12b80:	10fff526 	beq	r2,r3,12b58 <__alt_data_end+0xffff2b58>
    {
      *to++ = *from++;
   12b84:	114f883a 	add	r7,r2,r5
   12b88:	39c00017 	ldw	r7,0(r7)
   12b8c:	110d883a 	add	r6,r2,r4
   12b90:	10800104 	addi	r2,r2,4
   12b94:	31c00015 	stw	r7,0(r6)
   12b98:	003ff906 	br	12b80 <__alt_data_end+0xffff2b80>
   12b9c:	01000074 	movhi	r4,1
   12ba0:	01400074 	movhi	r5,1
   12ba4:	210c2204 	addi	r4,r4,12424
   12ba8:	294c2204 	addi	r5,r5,12424

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12bac:	2140101e 	bne	r4,r5,12bf0 <alt_load+0xb4>
   12bb0:	00000b06 	br	12be0 <alt_load+0xa4>
   12bb4:	00c00074 	movhi	r3,1
   12bb8:	18c06004 	addi	r3,r3,384
   12bbc:	1907c83a 	sub	r3,r3,r4
   12bc0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12bc4:	10fff526 	beq	r2,r3,12b9c <__alt_data_end+0xffff2b9c>
    {
      *to++ = *from++;
   12bc8:	114f883a 	add	r7,r2,r5
   12bcc:	39c00017 	ldw	r7,0(r7)
   12bd0:	110d883a 	add	r6,r2,r4
   12bd4:	10800104 	addi	r2,r2,4
   12bd8:	31c00015 	stw	r7,0(r6)
   12bdc:	003ff906 	br	12bc4 <__alt_data_end+0xffff2bc4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12be0:	0012eec0 	call	12eec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   12be4:	dfc00017 	ldw	ra,0(sp)
   12be8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   12bec:	0012fd81 	jmpi	12fd8 <alt_icache_flush_all>
   12bf0:	00c00074 	movhi	r3,1
   12bf4:	18cc9e04 	addi	r3,r3,12920
   12bf8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12bfc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12c00:	18bff726 	beq	r3,r2,12be0 <__alt_data_end+0xffff2be0>
    {
      *to++ = *from++;
   12c04:	114f883a 	add	r7,r2,r5
   12c08:	39c00017 	ldw	r7,0(r7)
   12c0c:	110d883a 	add	r6,r2,r4
   12c10:	10800104 	addi	r2,r2,4
   12c14:	31c00015 	stw	r7,0(r6)
   12c18:	003ff906 	br	12c00 <__alt_data_end+0xffff2c00>

00012c1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12c1c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12c20:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12c24:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12c28:	0012ccc0 	call	12ccc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12c2c:	0012cec0 	call	12cec <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12c30:	d1a07917 	ldw	r6,-32284(gp)
   12c34:	d1607a17 	ldw	r5,-32280(gp)
   12c38:	d1207b17 	ldw	r4,-32276(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   12c3c:	dfc00017 	ldw	ra,0(sp)
   12c40:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12c44:	001059c1 	jmpi	1059c <main>

00012c48 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   12c48:	defffe04 	addi	sp,sp,-8
   12c4c:	dc000015 	stw	r16,0(sp)
   12c50:	dfc00115 	stw	ra,4(sp)
   12c54:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   12c58:	00128940 	call	12894 <strlen>
   12c5c:	01000074 	movhi	r4,1
   12c60:	000f883a 	mov	r7,zero
   12c64:	100d883a 	mov	r6,r2
   12c68:	800b883a 	mov	r5,r16
   12c6c:	210cfc04 	addi	r4,r4,13296
#else
    return fputs(str, stdout);
#endif
#endif
}
   12c70:	dfc00117 	ldw	ra,4(sp)
   12c74:	dc000017 	ldw	r16,0(sp)
   12c78:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   12c7c:	0012d581 	jmpi	12d58 <altera_avalon_jtag_uart_write>

00012c80 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c80:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c84:	00bfff84 	movi	r2,-2
   12c88:	2884703a 	and	r2,r5,r2
   12c8c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12c90:	d0a00417 	ldw	r2,-32752(gp)
   12c94:	00ffff04 	movi	r3,-4
   12c98:	108000c4 	addi	r2,r2,3
   12c9c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12ca0:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12ca4:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12ca8:	1109883a 	add	r4,r2,r4
   12cac:	18c00004 	addi	r3,r3,0
   12cb0:	1900032e 	bgeu	r3,r4,12cc0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12cb4:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12cb8:	00bfffc4 	movi	r2,-1
   12cbc:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   12cc0:	d1200415 	stw	r4,-32752(gp)
   12cc4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   12cc8:	f800283a 	ret

00012ccc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12ccc:	deffff04 	addi	sp,sp,-4
   12cd0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   12cd4:	0012fdc0 	call	12fdc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12cd8:	00800044 	movi	r2,1
   12cdc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12ce0:	dfc00017 	ldw	ra,0(sp)
   12ce4:	dec00104 	addi	sp,sp,4
   12ce8:	f800283a 	ret

00012cec <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12cec:	01000074 	movhi	r4,1
   12cf0:	d1600704 	addi	r5,gp,-32740
   12cf4:	210cd604 	addi	r4,r4,13144
   12cf8:	0012ef81 	jmpi	12ef8 <alt_dev_llist_insert>

00012cfc <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   12cfc:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   12d00:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   12d04:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   12d08:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12d0c:	11800b2e 	bgeu	r2,r6,12d3c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12d10:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12d14:	1a60000c 	andi	r9,r3,32768
   12d18:	48000326 	beq	r9,zero,12d28 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12d1c:	10c00005 	stb	r3,0(r2)
   12d20:	10800044 	addi	r2,r2,1
   12d24:	003ff906 	br	12d0c <__alt_data_end+0xffff2d0c>
    else if (ptr != buffer)
   12d28:	11400226 	beq	r2,r5,12d34 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   12d2c:	1145c83a 	sub	r2,r2,r5
   12d30:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   12d34:	403ff526 	beq	r8,zero,12d0c <__alt_data_end+0xffff2d0c>
   12d38:	00000106 	br	12d40 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   12d3c:	117ffb1e 	bne	r2,r5,12d2c <__alt_data_end+0xffff2d2c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   12d40:	39d0000c 	andi	r7,r7,16384
   12d44:	3800021e 	bne	r7,zero,12d50 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   12d48:	00bffec4 	movi	r2,-5
   12d4c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   12d50:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   12d54:	f800283a 	ret

00012d58 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   12d58:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12d5c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   12d60:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12d64:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12d68:	2980072e 	bgeu	r5,r6,12d88 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12d6c:	38c00037 	ldwio	r3,0(r7)
   12d70:	18ffffec 	andhi	r3,r3,65535
   12d74:	183ffc26 	beq	r3,zero,12d68 <__alt_data_end+0xffff2d68>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   12d78:	28c00007 	ldb	r3,0(r5)
   12d7c:	20c00035 	stwio	r3,0(r4)
   12d80:	29400044 	addi	r5,r5,1
   12d84:	003ff806 	br	12d68 <__alt_data_end+0xffff2d68>

  return count;
}
   12d88:	f800283a 	ret

00012d8c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   12d8c:	d1600704 	addi	r5,gp,-32740
   12d90:	0012f641 	jmpi	12f64 <alt_find_dev>

00012d94 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   12d94:	20800a17 	ldw	r2,40(r4)
   12d98:	10800023 	ldbuio	r2,0(r2)
   12d9c:	28800005 	stb	r2,0(r5)

	return 0;
}
   12da0:	0005883a 	mov	r2,zero
   12da4:	f800283a 	ret

00012da8 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12da8:	20800a17 	ldw	r2,40(r4)
   12dac:	29400fcc 	andi	r5,r5,63
   12db0:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12db4:	20800a17 	ldw	r2,40(r4)
   12db8:	10800063 	ldbuio	r2,1(r2)
   12dbc:	30800005 	stb	r2,0(r6)

	return 0;
}
   12dc0:	0005883a 	mov	r2,zero
   12dc4:	f800283a 	ret

00012dc8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12dc8:	20800a17 	ldw	r2,40(r4)
   12dcc:	29400fcc 	andi	r5,r5,63
   12dd0:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   12dd4:	20800a17 	ldw	r2,40(r4)
   12dd8:	11800065 	stbio	r6,1(r2)

	return 0;
}
   12ddc:	0005883a 	mov	r2,zero
   12de0:	f800283a 	ret

00012de4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12de4:	20800a17 	ldw	r2,40(r4)
   12de8:	00c00c84 	movi	r3,50
   12dec:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12df0:	20800a17 	ldw	r2,40(r4)
   12df4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12df8:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12dfc:	10803fcc 	andi	r2,r2,255
   12e00:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12e04:	20800a17 	ldw	r2,40(r4)
   12e08:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12e0c:	20800a17 	ldw	r2,40(r4)
   12e10:	10800063 	ldbuio	r2,1(r2)
   12e14:	10803fcc 	andi	r2,r2,255
   12e18:	1006923a 	slli	r3,r2,8
   12e1c:	28800017 	ldw	r2,0(r5)
   12e20:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   12e24:	10e0000c 	andi	r3,r2,32768
   12e28:	18000126 	beq	r3,zero,12e30 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   12e2c:	10bffff4 	orhi	r2,r2,65535
   12e30:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12e34:	0005883a 	mov	r2,zero
   12e38:	f800283a 	ret

00012e3c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12e3c:	20800a17 	ldw	r2,40(r4)
   12e40:	00c00d04 	movi	r3,52
   12e44:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12e48:	20800a17 	ldw	r2,40(r4)
   12e4c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12e50:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12e54:	10803fcc 	andi	r2,r2,255
   12e58:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12e5c:	20800a17 	ldw	r2,40(r4)
   12e60:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12e64:	20800a17 	ldw	r2,40(r4)
   12e68:	10800063 	ldbuio	r2,1(r2)
   12e6c:	10803fcc 	andi	r2,r2,255
   12e70:	1006923a 	slli	r3,r2,8
   12e74:	28800017 	ldw	r2,0(r5)
   12e78:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   12e7c:	10e0000c 	andi	r3,r2,32768
   12e80:	18000126 	beq	r3,zero,12e88 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   12e84:	10bffff4 	orhi	r2,r2,65535
   12e88:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12e8c:	0005883a 	mov	r2,zero
   12e90:	f800283a 	ret

00012e94 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12e94:	20800a17 	ldw	r2,40(r4)
   12e98:	00c00d84 	movi	r3,54
   12e9c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12ea0:	20800a17 	ldw	r2,40(r4)
   12ea4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12ea8:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12eac:	10803fcc 	andi	r2,r2,255
   12eb0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12eb4:	20800a17 	ldw	r2,40(r4)
   12eb8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12ebc:	20800a17 	ldw	r2,40(r4)
   12ec0:	10800063 	ldbuio	r2,1(r2)
   12ec4:	10803fcc 	andi	r2,r2,255
   12ec8:	1006923a 	slli	r3,r2,8
   12ecc:	28800017 	ldw	r2,0(r5)
   12ed0:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   12ed4:	10e0000c 	andi	r3,r2,32768
   12ed8:	18000126 	beq	r3,zero,12ee0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   12edc:	10bffff4 	orhi	r2,r2,65535
   12ee0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12ee4:	0005883a 	mov	r2,zero
   12ee8:	f800283a 	ret

00012eec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12eec:	f800283a 	ret

00012ef0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   12ef0:	3005883a 	mov	r2,r6
   12ef4:	f800283a 	ret

00012ef8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12ef8:	20000226 	beq	r4,zero,12f04 <alt_dev_llist_insert+0xc>
   12efc:	20800217 	ldw	r2,8(r4)
   12f00:	1000101e 	bne	r2,zero,12f44 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   12f04:	d0a00b17 	ldw	r2,-32724(gp)
   12f08:	10000926 	beq	r2,zero,12f30 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12f0c:	deffff04 	addi	sp,sp,-4
   12f10:	dfc00015 	stw	ra,0(sp)
   12f14:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12f18:	00c00584 	movi	r3,22
   12f1c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12f20:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12f24:	dfc00017 	ldw	ra,0(sp)
   12f28:	dec00104 	addi	sp,sp,4
   12f2c:	f800283a 	ret
   12f30:	d0a07704 	addi	r2,gp,-32292
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12f34:	00c00584 	movi	r3,22
   12f38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12f3c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12f40:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   12f44:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12f48:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   12f4c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   12f50:	28800017 	ldw	r2,0(r5)
   12f54:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   12f58:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   12f5c:	0005883a 	mov	r2,zero
   12f60:	f800283a 	ret

00012f64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12f64:	defffb04 	addi	sp,sp,-20
   12f68:	dcc00315 	stw	r19,12(sp)
   12f6c:	dc800215 	stw	r18,8(sp)
   12f70:	dc400115 	stw	r17,4(sp)
   12f74:	dc000015 	stw	r16,0(sp)
   12f78:	dfc00415 	stw	ra,16(sp)
   12f7c:	2027883a 	mov	r19,r4
   12f80:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   12f84:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   12f88:	00128940 	call	12894 <strlen>
   12f8c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12f90:	84400726 	beq	r16,r17,12fb0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12f94:	81000217 	ldw	r4,8(r16)
   12f98:	900d883a 	mov	r6,r18
   12f9c:	980b883a 	mov	r5,r19
   12fa0:	00130580 	call	13058 <memcmp>
   12fa4:	10000426 	beq	r2,zero,12fb8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12fa8:	84000017 	ldw	r16,0(r16)
   12fac:	003ff806 	br	12f90 <__alt_data_end+0xffff2f90>
  }
  
  /* No match found */
  
  return NULL;
   12fb0:	0005883a 	mov	r2,zero
   12fb4:	00000106 	br	12fbc <alt_find_dev+0x58>
   12fb8:	8005883a 	mov	r2,r16
}
   12fbc:	dfc00417 	ldw	ra,16(sp)
   12fc0:	dcc00317 	ldw	r19,12(sp)
   12fc4:	dc800217 	ldw	r18,8(sp)
   12fc8:	dc400117 	ldw	r17,4(sp)
   12fcc:	dc000017 	ldw	r16,0(sp)
   12fd0:	dec00504 	addi	sp,sp,20
   12fd4:	f800283a 	ret

00012fd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12fd8:	f800283a 	ret

00012fdc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12fdc:	000170fa 	wrctl	ienable,zero
   12fe0:	f800283a 	ret

00012fe4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12fe4:	213ffe84 	addi	r4,r4,-6
   12fe8:	008003c4 	movi	r2,15
   12fec:	11001636 	bltu	r2,r4,13048 <alt_exception_cause_generated_bad_addr+0x64>
   12ff0:	200890ba 	slli	r4,r4,2
   12ff4:	00800074 	movhi	r2,1
   12ff8:	108c0204 	addi	r2,r2,12296
   12ffc:	2089883a 	add	r4,r4,r2
   13000:	20800017 	ldw	r2,0(r4)
   13004:	1000683a 	jmp	r2
   13008:	00013050 	cmplti	zero,zero,1217
   1300c:	00013050 	cmplti	zero,zero,1217
   13010:	00013048 	cmpgei	zero,zero,1217
   13014:	00013048 	cmpgei	zero,zero,1217
   13018:	00013048 	cmpgei	zero,zero,1217
   1301c:	00013050 	cmplti	zero,zero,1217
   13020:	00013048 	cmpgei	zero,zero,1217
   13024:	00013048 	cmpgei	zero,zero,1217
   13028:	00013050 	cmplti	zero,zero,1217
   1302c:	00013050 	cmplti	zero,zero,1217
   13030:	00013048 	cmpgei	zero,zero,1217
   13034:	00013050 	cmplti	zero,zero,1217
   13038:	00013048 	cmpgei	zero,zero,1217
   1303c:	00013048 	cmpgei	zero,zero,1217
   13040:	00013048 	cmpgei	zero,zero,1217
   13044:	00013050 	cmplti	zero,zero,1217
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13048:	0005883a 	mov	r2,zero
   1304c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13050:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   13054:	f800283a 	ret

00013058 <memcmp>:
   13058:	218d883a 	add	r6,r4,r6
   1305c:	21800826 	beq	r4,r6,13080 <memcmp+0x28>
   13060:	20800003 	ldbu	r2,0(r4)
   13064:	28c00003 	ldbu	r3,0(r5)
   13068:	10c00226 	beq	r2,r3,13074 <memcmp+0x1c>
   1306c:	10c5c83a 	sub	r2,r2,r3
   13070:	f800283a 	ret
   13074:	21000044 	addi	r4,r4,1
   13078:	29400044 	addi	r5,r5,1
   1307c:	003ff706 	br	1305c <__alt_data_end+0xffff305c>
   13080:	0005883a 	mov	r2,zero
   13084:	f800283a 	ret
