
lab4_challenge.elf:     file format elf32-littlenios2
lab4_challenge.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00007548 memsz 0x00007548 flags r-x
    LOAD off    0x00008568 vaddr 0x00017568 paddr 0x00017704 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags rw-
    LOAD off    0x000088a0 vaddr 0x000178a0 paddr 0x000178a0 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006f40  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004a8  000170c0  000170c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000019c  00017568  00017704  00008568  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  000178a0  000178a0  000088a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000179d0  000179d0  00008704  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008704  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000978  00000000  00000000  00008728  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000dc29  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004cf9  00000000  00000000  00016cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006198  00000000  00000000  0001b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000efc  00000000  00000000  00021b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e31  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c3c2  00000000  00000000  00025889  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00031c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001230  00000000  00000000  00031c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000350a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000350a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000350ac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000350ad  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000350ae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000350b2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000350b6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000350ba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000350c3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000350cc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000350d5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  000350e7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  00035111  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004264c  00000000  00000000  0003a11a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000170c0 l    d  .rodata	00000000 .rodata
00017568 l    d  .rwdata	00000000 .rwdata
000178a0 l    d  .bss	00000000 .bss
000179d0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_challenge_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab4.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000171c8 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
00017568 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000164b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
000173d9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000176e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017648 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00016f28 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
000178cc g     O .bss	00000004 alt_instruction_exception_handler
00016a64 g     F .text	0000001c _malloc_usable_size_r
00016c54 g     F .text	0000002c alt_main
000103c4 g     F .text	00000014 led_write
000178d0 g     O .bss	00000100 alt_irq
000121b0 g     F .text	00000014 fabs
00017704 g       *ABS*	00000000 __flash_rwdata_start
0001433c g     F .text	00000088 .hidden __eqdf2
000179d0 g       *ABS*	00000000 __alt_heap_start
000105c0 g     F .text	00000030 shift
00015eb0 g     F .text	00000060 memmove
00012f2c g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
00016c80 g     F .text	00000038 alt_putstr
000143c4 g     F .text	000000dc .hidden __gtdf2
000176e8 g     O .rwdata	00000004 jtag_uart
00017014 g     F .text	00000008 altera_nios2_gen2_irq_init
00015d3c g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
00016e1c g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000178b8 g     O .bss	00000004 errno
000178c4 g     O .bss	00000004 alt_argv
0001f6cc g       *ABS*	00000000 _gp
00010310 g     F .text	000000b4 generate_text
00017674 g     O .rwdata	00000030 alt_fd_list
00016f9c g     F .text	00000074 alt_find_dev
00015e88 g     F .text	00000028 memcpy
0001577c g     F .text	000000dc .hidden __floatsidf
000144a0 g     F .text	000000f4 .hidden __ltdf2
0001701c g     F .text	00000074 alt_exception_cause_generated_bad_addr
000121e0 g     F .text	00000074 __fpclassifyd
000178a0 g     O .bss	00000004 filter_mode
00016d34 g     F .text	0000005c altera_avalon_jtag_uart_read
00015e60 g     F .text	00000014 malloc
00015b5c g     F .text	00000064 .hidden __udivsi3
00016210 g     F .text	00000050 _sbrk_r
000176ec g     O .rwdata	00000004 alt_max_fd
00016ae0 g     F .text	00000094 alt_irq_register
0001067c g     F .text	00000120 update_coefficients
000130c0 g     F .text	000008ac .hidden __adddf3
000102a0 g     F .text	00000038 print_val
000176d0 g     O .rwdata	00000004 __fdlib_version
000176d4 g     O .rwdata	00000004 _global_impure_ptr
0001616c g     F .text	000000a4 _realloc_r
000179d0 g       *ABS*	00000000 __bss_end
00016a9c g     F .text	00000044 alt_getchar
000176cc g     O .rwdata	00000004 precision
00016494 g     F .text	0000001c strtol
000178bc g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000176a4 g     O .rwdata	00000028 alt_dev_null
00012268 g     F .text	000001ec rint
00016f24 g     F .text	00000004 alt_dcache_flush_all
000156fc g     F .text	00000080 .hidden __fixdfsi
0001023c g     F .text	00000064 print_text
00017704 g       *ABS*	00000000 __ram_rwdata_end
0001040c g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000176f0 g     O .rwdata	00000008 alt_dev_list
00017568 g       *ABS*	00000000 __ram_rodata_end
00015d4c g     F .text	00000114 __sfvwrite_small_str_mbf
000144a0 g     F .text	000000f4 .hidden __ledf2
000178a8 g     O .bss	00000001 led
00015bc0 g     F .text	00000058 .hidden __umodsi3
000179d0 g       *ABS*	00000000 end
00015d30 g     F .text	0000000c _atoi_r
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00015a00 g     F .text	00000064 .hidden __clzsi2
00016d90 g     F .text	00000034 altera_avalon_jtag_uart_write
00015c18 g     F .text	0000007c _asprintf_r
00015f30 g     F .text	000000e4 _free_r
00010180 g     F .text	0000003c _start
000178ac g     O .bss	00000004 level
00016d24 g     F .text	00000010 alt_sys_init
00016dcc g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00012f9c g     F .text	00000124 .hidden __floatsisf
0001047c g     F .text	000000a8 filter
00010e84 g     F .text	000010a4 __ieee754_pow
000109c0 g     F .text	000004c4 pow
0001260c g     F .text	00000028 .hidden __mulsi3
00017568 g       *ABS*	00000000 __ram_rwdata_start
000170c0 g       *ABS*	00000000 __ram_rodata_start
00016e74 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00017090 g     F .text	00000030 memcmp
000179d0 g       *ABS*	00000000 __alt_stack_base
0001396c g     F .text	000009d0 .hidden __divdf3
00014594 g     F .text	0000086c .hidden __muldf3
00016f30 g     F .text	0000006c alt_dev_llist_insert
00016cb8 g     F .text	0000004c sbrk
0001651c g     F .text	0000052c ___svfprintf_internal_r
000178a0 g       *ABS*	00000000 __bss_start
00015f10 g     F .text	00000020 memset
0001079c g     F .text	00000224 main
000178c0 g     O .bss	00000004 alt_envp
000102d8 g     F .text	00000038 print_end
000105f0 g     F .text	0000008c find_next_val
00012254 g     F .text	00000008 matherr
00020000 g       *ABS*	00000000 __alt_heap_limit
00016260 g     F .text	00000234 _strtol_r
00015858 g     F .text	000001a8 .hidden __truncdfsf2
00016014 g     F .text	00000158 _malloc_r
00017700 g     O .rwdata	00000004 alt_errno
00015a64 g     F .text	00000084 .hidden __divsi3
00012afc g     F .text	00000430 .hidden __mulsf3
000121c4 g     F .text	0000001c finite
000170c0 g       *ABS*	00000000 __flash_rodata_start
000125f0 g     F .text	0000001c copysign
0001433c g     F .text	00000088 .hidden __nedf2
00016d04 g     F .text	00000020 alt_irq_init
000171d8 g     O .rodata	00000100 .hidden __clz_tab
00015c94 g     F .text	00000090 asprintf
000176d8 g     O .rwdata	00000004 _impure_ptr
000178c8 g     O .bss	00000004 alt_argc
00012454 g     F .text	0000019c scalbn
00010020 g       .exceptions	00000000 alt_irq_entry
00010524 g     F .text	0000009c filter_fixed
000178a4 g     O .bss	00000001 pwm
000176f8 g     O .rwdata	00000008 alt_fs_list
00016a48 g     F .text	0000001c __vfprintf_internal_unused
0001225c g     F .text	0000000c nan
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016dc4 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011f28 g     F .text	00000288 __ieee754_sqrt
00017704 g       *ABS*	00000000 _edata
000179d0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00015ae8 g     F .text	00000074 .hidden __modsi3
000176dc g     O .rwdata	00000004 __ctype_ptr__
00016ecc g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00015d24 g     F .text	0000000c atoi
000172d8 g     O .rodata	00000101 _ctype_
000103d8 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00016de0 g     F .text	00000020 alt_up_accelerometer_spi_read
00016e00 g     F .text	0000001c alt_up_accelerometer_spi_write
00016a80 g     F .text	0000001c strlen
000143c4 g     F .text	000000dc .hidden __gedf2
000178b0 g     O .bss	00000004 __malloc_sbrk_start
00017010 g     F .text	00000004 alt_icache_flush_all
000176e0 g     O .rwdata	00000004 alt_priority_mask
000178b4 g     O .bss	00000004 __malloc_free_list
00014e00 g     F .text	000008fc .hidden __subdf3
00012634 g     F .text	000004c8 .hidden __addsf3
00016b74 g     F .text	000000e0 alt_load
00015e74 g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	841e3404 	addi	r16,r16,30928

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08017 	ldw	r2,-32256(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6bdb314 	ori	gp,gp,63180
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	109e2814 	ori	r2,r2,30880

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18de7414 	ori	r3,r3,31184

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0016b740 	call	16b74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0016c540 	call	16c54 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07817 	ldw	r2,-32288(gp)
   101cc:	d1607607 	ldb	r5,-32296(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>

    return newCurr;
}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07703 	ldbu	r2,-32292(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07703 	ldbu	r2,-32292(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07703 	ldbu	r2,-32292(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07603 	ldbu	r2,-32296(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207605 	stb	zero,-32296(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07605 	stb	r2,-32296(gp)
   10238:	f800283a 	ret

0001023c <print_text>:
const int precision = 21;

void print_text(char *text, const int length)
{
    char *printMsg;
    asprintf(&printMsg, filter_mode? "filter on \n %c": "filter off \n %c", 0x4); // Print out the strings
   1023c:	d0a07517 	ldw	r2,-32300(gp)
int filter_mode = 0;

const int precision = 21;

void print_text(char *text, const int length)
{
   10240:	defffd04 	addi	sp,sp,-12
   10244:	dc000115 	stw	r16,4(sp)
   10248:	dfc00215 	stw	ra,8(sp)
   1024c:	2021883a 	mov	r16,r4
    char *printMsg;
    asprintf(&printMsg, filter_mode? "filter on \n %c": "filter off \n %c", 0x4); // Print out the strings
   10250:	1000031e 	bne	r2,zero,10260 <print_text+0x24>
   10254:	01400074 	movhi	r5,1
   10258:	295c3404 	addi	r5,r5,28880
   1025c:	00000206 	br	10268 <print_text+0x2c>
   10260:	01400074 	movhi	r5,1
   10264:	295c3004 	addi	r5,r5,28864
   10268:	01800104 	movi	r6,4
   1026c:	d809883a 	mov	r4,sp
   10270:	0015c940 	call	15c94 <asprintf>
    alt_putstr(printMsg);
   10274:	d9000017 	ldw	r4,0(sp)
   10278:	0016c800 	call	16c80 <alt_putstr>
    free(printMsg);
   1027c:	d9000017 	ldw	r4,0(sp)
   10280:	0015e740 	call	15e74 <free>
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   10284:	01808004 	movi	r6,512
   10288:	000b883a 	mov	r5,zero
   1028c:	8009883a 	mov	r4,r16
}
   10290:	dfc00217 	ldw	ra,8(sp)
   10294:	dc000117 	ldw	r16,4(sp)
   10298:	dec00304 	addi	sp,sp,12
{
    char *printMsg;
    asprintf(&printMsg, filter_mode? "filter on \n %c": "filter off \n %c", 0x4); // Print out the strings
    alt_putstr(printMsg);
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   1029c:	0015f101 	jmpi	15f10 <memset>

000102a0 <print_val>:
}

void print_val(alt_32 val, const int length)
{
   102a0:	defffe04 	addi	sp,sp,-8
    char *printMsg;
    asprintf(&printMsg, "%x, ", val); // Print out the strings
   102a4:	01400074 	movhi	r5,1
   102a8:	200d883a 	mov	r6,r4
   102ac:	295c3804 	addi	r5,r5,28896
   102b0:	d809883a 	mov	r4,sp
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

void print_val(alt_32 val, const int length)
{
   102b4:	dfc00115 	stw	ra,4(sp)
    char *printMsg;
    asprintf(&printMsg, "%x, ", val); // Print out the strings
   102b8:	0015c940 	call	15c94 <asprintf>
    alt_putstr(printMsg);
   102bc:	d9000017 	ldw	r4,0(sp)
   102c0:	0016c800 	call	16c80 <alt_putstr>
    free(printMsg);
   102c4:	d9000017 	ldw	r4,0(sp)
   102c8:	0015e740 	call	15e74 <free>
}
   102cc:	dfc00117 	ldw	ra,4(sp)
   102d0:	dec00204 	addi	sp,sp,8
   102d4:	f800283a 	ret

000102d8 <print_end>:
void print_end()
{
   102d8:	defffe04 	addi	sp,sp,-8
    char *printMsg;
    asprintf(&printMsg, "%c", 0x4); // Print out the strings
   102dc:	01400074 	movhi	r5,1
   102e0:	01800104 	movi	r6,4
   102e4:	295c3304 	addi	r5,r5,28876
   102e8:	d809883a 	mov	r4,sp
    asprintf(&printMsg, "%x, ", val); // Print out the strings
    alt_putstr(printMsg);
    free(printMsg);
}
void print_end()
{
   102ec:	dfc00115 	stw	ra,4(sp)
    char *printMsg;
    asprintf(&printMsg, "%c", 0x4); // Print out the strings
   102f0:	0015c940 	call	15c94 <asprintf>
    alt_putstr(printMsg);
   102f4:	d9000017 	ldw	r4,0(sp)
   102f8:	0016c800 	call	16c80 <alt_putstr>
    free(printMsg);
   102fc:	d9000017 	ldw	r4,0(sp)
   10300:	0015e740 	call	15e74 <free>
}
   10304:	dfc00117 	ldw	ra,4(sp)
   10308:	dec00204 	addi	sp,sp,8
   1030c:	f800283a 	ret

00010310 <generate_text>:

char generate_text(char curr, int *length, char *text, int *running)
{
   10310:	2005883a 	mov	r2,r4
    if (curr == '\n')
   10314:	21003fcc 	andi	r4,r4,255
   10318:	2100201c 	xori	r4,r4,128
   1031c:	213fe004 	addi	r4,r4,-128
   10320:	00c00284 	movi	r3,10
   10324:	20c02626 	beq	r4,r3,103c0 <generate_text+0xb0>
    alt_putstr(printMsg);
    free(printMsg);
}

char generate_text(char curr, int *length, char *text, int *running)
{
   10328:	defff804 	addi	sp,sp,-32
   1032c:	dd800615 	stw	r22,24(sp)
   10330:	dd400515 	stw	r21,20(sp)
   10334:	dd000415 	stw	r20,16(sp)
   10338:	dcc00315 	stw	r19,12(sp)
   1033c:	dc800215 	stw	r18,8(sp)
   10340:	dc400115 	stw	r17,4(sp)
   10344:	dc000015 	stw	r16,0(sp)
   10348:	dfc00715 	stw	ra,28(sp)
   1034c:	3829883a 	mov	r20,r7
   10350:	3025883a 	mov	r18,r6
   10354:	2827883a 	mov	r19,r5
    if (curr == '\n')
   10358:	3023883a 	mov	r17,r6
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   1035c:	057fffc4 	movi	r21,-1
   10360:	1821883a 	mov	r16,r3
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   10364:	05801f84 	movi	r22,126
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   10368:	10c03fcc 	andi	r3,r2,255
   1036c:	18c0201c 	xori	r3,r3,128
   10370:	18ffe004 	addi	r3,r3,-128
   10374:	8c89c83a 	sub	r4,r17,r18
   10378:	1d400726 	beq	r3,r21,10398 <generate_text+0x88>
   1037c:	1c000626 	beq	r3,r16,10398 <generate_text+0x88>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   10380:	1d80011e 	bne	r3,r22,10388 <generate_text+0x78>
        {
            *running = 0;
   10384:	a0000015 	stw	zero,0(r20)
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
   10388:	88800005 	stb	r2,0(r17)
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
   1038c:	0016a9c0 	call	16a9c <alt_getchar>
   10390:	8c400044 	addi	r17,r17,1
   10394:	003ff406 	br	10368 <__alt_data_end+0xffff0368>
    }
    *length = idx;
   10398:	99000015 	stw	r4,0(r19)

    return newCurr;
}
   1039c:	dfc00717 	ldw	ra,28(sp)
   103a0:	dd800617 	ldw	r22,24(sp)
   103a4:	dd400517 	ldw	r21,20(sp)
   103a8:	dd000417 	ldw	r20,16(sp)
   103ac:	dcc00317 	ldw	r19,12(sp)
   103b0:	dc800217 	ldw	r18,8(sp)
   103b4:	dc400117 	ldw	r17,4(sp)
   103b8:	dc000017 	ldw	r16,0(sp)
   103bc:	dec00804 	addi	sp,sp,32
   103c0:	f800283a 	ret

000103c4 <led_write>:

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   103c4:	008000b4 	movhi	r2,2
   103c8:	21003fcc 	andi	r4,r4,255
   103cc:	10840804 	addi	r2,r2,4128
   103d0:	11000035 	stwio	r4,0(r2)
   103d4:	f800283a 	ret

000103d8 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
//    alt_printf("raw data: %x\n", acc_read);
    acc_read += OFFSET;
   103d8:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   103dc:	2005d1ba 	srai	r2,r4,6

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   103e0:	2009d07a 	srai	r4,r4,1
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   103e4:	10c001cc 	andi	r3,r2,7
   103e8:	00800204 	movi	r2,8
   103ec:	10cfc83a 	sub	r7,r2,r3
   103f0:	11ce983a 	sll	r7,r2,r7
   103f4:	10c5d83a 	sra	r2,r2,r3

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   103f8:	210007cc 	andi	r4,r4,31
    alt_u8 val = (acc_read >> 6) & 0x07;

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   103fc:	3884b03a 	or	r2,r7,r2
   10400:	30800005 	stb	r2,0(r6)

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   10404:	29000015 	stw	r4,0(r5)
   10408:	f800283a 	ret

0001040c <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   1040c:	defffe04 	addi	sp,sp,-8
   10410:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10414:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10418:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1041c:	84040104 	addi	r16,r16,4100
   10420:	008000c4 	movi	r2,3
   10424:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10428:	00c000b4 	movhi	r3,2
   1042c:	0005883a 	mov	r2,zero
   10430:	18c40004 	addi	r3,r3,4096
   10434:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10438:	00c000b4 	movhi	r3,2
   1043c:	18c40204 	addi	r3,r3,4104
   10440:	01424004 	movi	r5,2304
   10444:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10448:	00c000b4 	movhi	r3,2
   1044c:	18c40304 	addi	r3,r3,4108
   10450:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10454:	200d883a 	mov	r6,r4
   10458:	000b883a 	mov	r5,zero
   1045c:	01000044 	movi	r4,1
   10460:	0016ae00 	call	16ae0 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10464:	008001c4 	movi	r2,7
   10468:	80800035 	stwio	r2,0(r16)

}
   1046c:	dfc00117 	ldw	ra,4(sp)
   10470:	dc000017 	ldw	r16,0(sp)
   10474:	dec00204 	addi	sp,sp,8
   10478:	f800283a 	ret

0001047c <filter>:

alt_32 filter(float* taps, alt_32* prev_vals, int n){
   1047c:	defff904 	addi	sp,sp,-28
   10480:	dd000415 	stw	r20,16(sp)
   10484:	dcc00315 	stw	r19,12(sp)
   10488:	dc800215 	stw	r18,8(sp)
   1048c:	dc400115 	stw	r17,4(sp)
   10490:	dc000015 	stw	r16,0(sp)
   10494:	dfc00615 	stw	ra,24(sp)
   10498:	dd400515 	stw	r21,20(sp)
   1049c:	3029883a 	mov	r20,r6
   104a0:	2025883a 	mov	r18,r4
   104a4:	2827883a 	mov	r19,r5
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   104a8:	0023883a 	mov	r17,zero
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;
   104ac:	0021883a 	mov	r16,zero


    for(int i = 0; i < n; i++){
   104b0:	8d00120e 	bge	r17,r20,104fc <filter+0x80>
        sum += taps[i] * prev_vals[i];
   104b4:	99000017 	ldw	r4,0(r19)

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   104b8:	8c400044 	addi	r17,r17,1
   104bc:	94800104 	addi	r18,r18,4
        sum += taps[i] * prev_vals[i];
   104c0:	0012f9c0 	call	12f9c <__floatsisf>
   104c4:	917fff17 	ldw	r5,-4(r18)
   104c8:	1009883a 	mov	r4,r2
   104cc:	9cc00104 	addi	r19,r19,4
   104d0:	0012afc0 	call	12afc <__mulsf3>
   104d4:	8009883a 	mov	r4,r16
   104d8:	102b883a 	mov	r21,r2
   104dc:	0012f9c0 	call	12f9c <__floatsisf>
   104e0:	100b883a 	mov	r5,r2
   104e4:	a809883a 	mov	r4,r21
   104e8:	00126340 	call	12634 <__addsf3>
   104ec:	1009883a 	mov	r4,r2
   104f0:	0012f2c0 	call	12f2c <__fixsfsi>
   104f4:	1021883a 	mov	r16,r2
   104f8:	003fed06 	br	104b0 <__alt_data_end+0xffff04b0>
    }

    return sum;
}
   104fc:	8005883a 	mov	r2,r16
   10500:	dfc00617 	ldw	ra,24(sp)
   10504:	dd400517 	ldw	r21,20(sp)
   10508:	dd000417 	ldw	r20,16(sp)
   1050c:	dcc00317 	ldw	r19,12(sp)
   10510:	dc800217 	ldw	r18,8(sp)
   10514:	dc400117 	ldw	r17,4(sp)
   10518:	dc000017 	ldw	r16,0(sp)
   1051c:	dec00704 	addi	sp,sp,28
   10520:	f800283a 	ret

00010524 <filter_fixed>:

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
   10524:	defffa04 	addi	sp,sp,-24
   10528:	dd000415 	stw	r20,16(sp)
   1052c:	dcc00315 	stw	r19,12(sp)
   10530:	dc800215 	stw	r18,8(sp)
   10534:	dc400115 	stw	r17,4(sp)
   10538:	dc000015 	stw	r16,0(sp)
   1053c:	dfc00515 	stw	ra,20(sp)
   10540:	3029883a 	mov	r20,r6
   10544:	2025883a 	mov	r18,r4
   10548:	2827883a 	mov	r19,r5
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   1054c:	0023883a 	mov	r17,zero

    return sum;
}

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;
   10550:	0021883a 	mov	r16,zero


    for(int i = 0; i < n; i++){
   10554:	8d00080e 	bge	r17,r20,10578 <filter_fixed+0x54>
        sum += taps_fixed[i] * prev_vals[i];
   10558:	99400017 	ldw	r5,0(r19)
   1055c:	91000017 	ldw	r4,0(r18)

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   10560:	8c400044 	addi	r17,r17,1
   10564:	94800104 	addi	r18,r18,4
        sum += taps_fixed[i] * prev_vals[i];
   10568:	001260c0 	call	1260c <__mulsi3>
   1056c:	80a1883a 	add	r16,r16,r2
   10570:	9cc00104 	addi	r19,r19,4
   10574:	003ff706 	br	10554 <__alt_data_end+0xffff0554>
    }

    sum /= pow(2, precision);
   10578:	8009883a 	mov	r4,r16
   1057c:	001577c0 	call	1577c <__floatsidf>
   10580:	000d883a 	mov	r6,zero
   10584:	01cfa834 	movhi	r7,16032
   10588:	1009883a 	mov	r4,r2
   1058c:	180b883a 	mov	r5,r3
   10590:	00145940 	call	14594 <__muldf3>

    return sum;
   10594:	1009883a 	mov	r4,r2
   10598:	180b883a 	mov	r5,r3
   1059c:	00156fc0 	call	156fc <__fixdfsi>
}
   105a0:	dfc00517 	ldw	ra,20(sp)
   105a4:	dd000417 	ldw	r20,16(sp)
   105a8:	dcc00317 	ldw	r19,12(sp)
   105ac:	dc800217 	ldw	r18,8(sp)
   105b0:	dc400117 	ldw	r17,4(sp)
   105b4:	dc000017 	ldw	r16,0(sp)
   105b8:	dec00604 	addi	sp,sp,24
   105bc:	f800283a 	ret

000105c0 <shift>:

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   105c0:	30bfffc4 	addi	r2,r6,-1
   105c4:	318d883a 	add	r6,r6,r6
   105c8:	318d883a 	add	r6,r6,r6
   105cc:	218d883a 	add	r6,r4,r6
   105d0:	31bfff04 	addi	r6,r6,-4
   105d4:	0080040e 	bge	zero,r2,105e8 <shift+0x28>
        prev_vals[i] = prev_vals[i - 1];
   105d8:	30ffff17 	ldw	r3,-4(r6)

    return sum;
}

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   105dc:	10bfffc4 	addi	r2,r2,-1
        prev_vals[i] = prev_vals[i - 1];
   105e0:	30c00015 	stw	r3,0(r6)
   105e4:	003ffa06 	br	105d0 <__alt_data_end+0xffff05d0>
    }

    prev_vals[0] = x_read;
   105e8:	21400015 	stw	r5,0(r4)
   105ec:	f800283a 	ret

000105f0 <find_next_val>:

    return;
}

int find_next_val(char *text, int i, char* out){
   105f0:	defffc04 	addi	sp,sp,-16
   105f4:	dc400115 	stw	r17,4(sp)
   105f8:	3023883a 	mov	r17,r6
   105fc:	dc800215 	stw	r18,8(sp)
   10600:	dc000015 	stw	r16,0(sp)
    memset(out, 0, 512);
   10604:	01808004 	movi	r6,512
    prev_vals[0] = x_read;

    return;
}

int find_next_val(char *text, int i, char* out){
   10608:	2821883a 	mov	r16,r5
   1060c:	2025883a 	mov	r18,r4
    memset(out, 0, 512);
   10610:	000b883a 	mov	r5,zero
   10614:	8809883a 	mov	r4,r17
    prev_vals[0] = x_read;

    return;
}

int find_next_val(char *text, int i, char* out){
   10618:	dfc00315 	stw	ra,12(sp)
    memset(out, 0, 512);
   1061c:	0015f100 	call	15f10 <memset>

    int j = 0;
    for(; i < 512; i++){
   10620:	8007883a 	mov	r3,r16
   10624:	01807fc4 	movi	r6,511
        if(text[i] == ',' || text[i] == '\0') break;
   10628:	01c00b04 	movi	r7,44
   1062c:	18800044 	addi	r2,r3,1

int find_next_val(char *text, int i, char* out){
    memset(out, 0, 512);

    int j = 0;
    for(; i < 512; i++){
   10630:	30c00c16 	blt	r6,r3,10664 <find_next_val+0x74>
        if(text[i] == ',' || text[i] == '\0') break;
   10634:	90c9883a 	add	r4,r18,r3
   10638:	21000003 	ldbu	r4,0(r4)
   1063c:	21403fcc 	andi	r5,r4,255
   10640:	2940201c 	xori	r5,r5,128
   10644:	297fe004 	addi	r5,r5,-128
   10648:	29c00626 	beq	r5,r7,10664 <find_next_val+0x74>
   1064c:	28000526 	beq	r5,zero,10664 <find_next_val+0x74>
        else {
            out[j] = text[i];
   10650:	1c07c83a 	sub	r3,r3,r16
   10654:	88c7883a 	add	r3,r17,r3
   10658:	19000005 	stb	r4,0(r3)

int find_next_val(char *text, int i, char* out){
    memset(out, 0, 512);

    int j = 0;
    for(; i < 512; i++){
   1065c:	1007883a 	mov	r3,r2
   10660:	003ff206 	br	1062c <__alt_data_end+0xffff062c>
        }
    }

    // returns next value after the space
    return i + 1;
}
   10664:	dfc00317 	ldw	ra,12(sp)
   10668:	dc800217 	ldw	r18,8(sp)
   1066c:	dc400117 	ldw	r17,4(sp)
   10670:	dc000017 	ldw	r16,0(sp)
   10674:	dec00404 	addi	sp,sp,16
   10678:	f800283a 	ret

0001067c <update_coefficients>:

float* update_coefficients(char *text){
   1067c:	deff7604 	addi	sp,sp,-552
// void update_coefficients(char *text){
    // get the number of coeffcients
    int i;
    char tmp[512];

    i = find_next_val(text, 3, tmp);
   10680:	d80d883a 	mov	r6,sp
   10684:	014000c4 	movi	r5,3

    // returns next value after the space
    return i + 1;
}

float* update_coefficients(char *text){
   10688:	dfc08915 	stw	ra,548(sp)
   1068c:	dd808615 	stw	r22,536(sp)
   10690:	dd008415 	stw	r20,528(sp)
   10694:	dcc08315 	stw	r19,524(sp)
   10698:	dc808215 	stw	r18,520(sp)
   1069c:	dc408115 	stw	r17,516(sp)
   106a0:	dc008015 	stw	r16,512(sp)
   106a4:	202d883a 	mov	r22,r4
   106a8:	df008815 	stw	fp,544(sp)
   106ac:	ddc08715 	stw	r23,540(sp)
   106b0:	dd408515 	stw	r21,532(sp)
// void update_coefficients(char *text){
    // get the number of coeffcients
    int i;
    char tmp[512];

    i = find_next_val(text, 3, tmp);
   106b4:	00105f00 	call	105f0 <find_next_val>

    int arr_size = atoi(tmp);
   106b8:	d809883a 	mov	r4,sp
// void update_coefficients(char *text){
    // get the number of coeffcients
    int i;
    char tmp[512];

    i = find_next_val(text, 3, tmp);
   106bc:	1021883a 	mov	r16,r2

    int arr_size = atoi(tmp);
   106c0:	0015d240 	call	15d24 <atoi>

    // freeing goes here

    // free(coefficents);

    float* coefficents = malloc(arr_size * sizeof(float));
   106c4:	1089883a 	add	r4,r2,r2
   106c8:	2109883a 	add	r4,r4,r4
    int i;
    char tmp[512];

    i = find_next_val(text, 3, tmp);

    int arr_size = atoi(tmp);
   106cc:	1023883a 	mov	r17,r2

    // freeing goes here

    // free(coefficents);

    float* coefficents = malloc(arr_size * sizeof(float));
   106d0:	0015e600 	call	15e60 <malloc>
   106d4:	1029883a 	mov	r20,r2
   106d8:	1027883a 	mov	r19,r2
    int old_i;

    for(int j = 0; j < arr_size; j++){
   106dc:	0025883a 	mov	r18,zero
   106e0:	9440210e 	bge	r18,r17,10768 <update_coefficients+0xec>
        old_i = i;
        i = find_next_val(text, i + 2, tmp);
   106e4:	81400084 	addi	r5,r16,2
   106e8:	d80d883a 	mov	r6,sp
   106ec:	b009883a 	mov	r4,r22
   106f0:	00105f00 	call	105f0 <find_next_val>
        coefficents[j] = atoi(tmp)/pow(10, i - old_i - 3);
   106f4:	d809883a 	mov	r4,sp
    float* coefficents = malloc(arr_size * sizeof(float));
    int old_i;

    for(int j = 0; j < arr_size; j++){
        old_i = i;
        i = find_next_val(text, i + 2, tmp);
   106f8:	102b883a 	mov	r21,r2
        coefficents[j] = atoi(tmp)/pow(10, i - old_i - 3);
   106fc:	0015d240 	call	15d24 <atoi>
   10700:	ac09c83a 	sub	r4,r21,r16
   10704:	213fff44 	addi	r4,r4,-3
   10708:	1039883a 	mov	fp,r2
   1070c:	001577c0 	call	1577c <__floatsidf>
   10710:	100d883a 	mov	r6,r2
   10714:	180f883a 	mov	r7,r3
   10718:	01500934 	movhi	r5,16420
   1071c:	0009883a 	mov	r4,zero
   10720:	00109c00 	call	109c0 <pow>
   10724:	e009883a 	mov	r4,fp
   10728:	1821883a 	mov	r16,r3
   1072c:	102f883a 	mov	r23,r2
   10730:	001577c0 	call	1577c <__floatsidf>
   10734:	800f883a 	mov	r7,r16
   10738:	b80d883a 	mov	r6,r23
   1073c:	1009883a 	mov	r4,r2
   10740:	180b883a 	mov	r5,r3
   10744:	001396c0 	call	1396c <__divdf3>
   10748:	1009883a 	mov	r4,r2
   1074c:	180b883a 	mov	r5,r3
   10750:	00158580 	call	15858 <__truncdfsf2>
   10754:	98800015 	stw	r2,0(r19)
    // free(coefficents);

    float* coefficents = malloc(arr_size * sizeof(float));
    int old_i;

    for(int j = 0; j < arr_size; j++){
   10758:	94800044 	addi	r18,r18,1
   1075c:	9cc00104 	addi	r19,r19,4
        old_i = i;
        i = find_next_val(text, i + 2, tmp);
   10760:	a821883a 	mov	r16,r21
   10764:	003fde06 	br	106e0 <__alt_data_end+0xffff06e0>
        coefficents[j] = atoi(tmp)/pow(10, i - old_i - 3);
//        printf("c%d: %f\n", j, coefficents[j]);
    }

    return coefficents;
}
   10768:	a005883a 	mov	r2,r20
   1076c:	dfc08917 	ldw	ra,548(sp)
   10770:	df008817 	ldw	fp,544(sp)
   10774:	ddc08717 	ldw	r23,540(sp)
   10778:	dd808617 	ldw	r22,536(sp)
   1077c:	dd408517 	ldw	r21,532(sp)
   10780:	dd008417 	ldw	r20,528(sp)
   10784:	dcc08317 	ldw	r19,524(sp)
   10788:	dc808217 	ldw	r18,520(sp)
   1078c:	dc408117 	ldw	r17,516(sp)
   10790:	dc008017 	ldw	r16,512(sp)
   10794:	dec08a04 	addi	sp,sp,552
   10798:	f800283a 	ret

0001079c <main>:

int main() {
   1079c:	defe9304 	addi	sp,sp,-1460
    int running = 1;
    int max = 0;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   107a0:	01000074 	movhi	r4,1
    }

    return coefficents;
}

int main() {
   107a4:	dc016515 	stw	r16,1428(sp)
    int running = 1;
    int max = 0;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   107a8:	211c3a04 	addi	r4,r4,28904

int main() {
	char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
    int running = 1;
   107ac:	04000044 	movi	r16,1
    }

    return coefficents;
}

int main() {
   107b0:	dfc16c15 	stw	ra,1456(sp)
   107b4:	dd816b15 	stw	r22,1452(sp)
   107b8:	dd416a15 	stw	r21,1448(sp)
   107bc:	dd016915 	stw	r20,1444(sp)
   107c0:	dcc16815 	stw	r19,1440(sp)
   107c4:	dc816715 	stw	r18,1436(sp)
   107c8:	dc416615 	stw	r17,1432(sp)
	char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
   107cc:	d8016415 	stw	zero,1424(sp)
    int running = 1;
   107d0:	dc016315 	stw	r16,1420(sp)
    int max = 0;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   107d4:	0016dc40 	call	16dc4 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   107d8:	10006e26 	beq	r2,zero,10994 <main+0x1f8>
        return 1;
    }

    const int array_size = 49;

    float *taps = malloc(array_size*sizeof(float));
   107dc:	01003104 	movi	r4,196
   107e0:	102b883a 	mov	r21,r2
   107e4:	0015e600 	call	15e60 <malloc>
	float tmp[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   107e8:	01400074 	movhi	r5,1
   107ec:	01803104 	movi	r6,196
   107f0:	295c4004 	addi	r5,r5,28928
   107f4:	d9013104 	addi	r4,sp,1220
        return 1;
    }

    const int array_size = 49;

    float *taps = malloc(array_size*sizeof(float));
   107f8:	1023883a 	mov	r17,r2
	float tmp[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   107fc:	0015e880 	call	15e88 <memcpy>
   10800:	0005883a 	mov	r2,zero

	for(int i = 0; i < array_size; i++){
   10804:	00c03104 	movi	r3,196
		taps[i] = tmp[i];
   10808:	d9813104 	addi	r6,sp,1220
   1080c:	308b883a 	add	r5,r6,r2
   10810:	29400017 	ldw	r5,0(r5)
   10814:	8889883a 	add	r4,r17,r2
   10818:	10800104 	addi	r2,r2,4
   1081c:	21400015 	stw	r5,0(r4)
    const int array_size = 49;

    float *taps = malloc(array_size*sizeof(float));
	float tmp[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};

	for(int i = 0; i < array_size; i++){
   10820:	10fff91e 	bne	r2,r3,10808 <__alt_data_end+0xffff0808>
		taps[i] = tmp[i];
	}

    alt_32 prev_vals[array_size];
   10824:	0005883a 	mov	r2,zero

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   10828:	00c03104 	movi	r3,196
        prev_vals[i] = 0;
   1082c:	d9410004 	addi	r5,sp,1024
   10830:	2889883a 	add	r4,r5,r2
   10834:	20000015 	stw	zero,0(r4)
   10838:	10800104 	addi	r2,r2,4

    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   1083c:	10fffb1e 	bne	r2,r3,1082c <__alt_data_end+0xffff082c>
        prev_vals[i] = 0;

        fixed_taps[i] = taps[i] * pow(2, precision);
    }

    timer_init(sys_timer_isr);
   10840:	01000074 	movhi	r4,1
   10844:	21006f04 	addi	r4,r4,444
   10848:	001040c0 	call	1040c <timer_init>

    while (1) {
    	 prevLetter = alt_getchar();
    	 prevLetter = generate_text(prevLetter, &length, text, &running);

    	 if(text[0] == '1') filter_mode = 1;
   1084c:	05800044 	movi	r22,1
    timer_init(sys_timer_isr);
    int plotting = 0;
    char tmp1[512];

    while (1) {
    	 prevLetter = alt_getchar();
   10850:	0016a9c0 	call	16a9c <alt_getchar>
    	 prevLetter = generate_text(prevLetter, &length, text, &running);
   10854:	11003fcc 	andi	r4,r2,255
   10858:	2100201c 	xori	r4,r4,128
   1085c:	d9c16304 	addi	r7,sp,1420
   10860:	d9808004 	addi	r6,sp,512
   10864:	d9416404 	addi	r5,sp,1424
   10868:	213fe004 	addi	r4,r4,-128
   1086c:	00103100 	call	10310 <generate_text>

    	 if(text[0] == '1') filter_mode = 1;
   10870:	d8808007 	ldb	r2,512(sp)
   10874:	00c00c44 	movi	r3,49
   10878:	10c0021e 	bne	r2,r3,10884 <main+0xe8>
   1087c:	d5a07515 	stw	r22,-32300(gp)
   10880:	00001b06 	br	108f0 <main+0x154>
//    	 command format: plt,<number of sample to plot>
//    	 plt,500
    	 else if(text[0] == 'p' && text[1] == 'l'){
   10884:	00c01c04 	movi	r3,112
   10888:	10c00d1e 	bne	r2,r3,108c0 <main+0x124>
   1088c:	d8c08047 	ldb	r3,513(sp)
   10890:	00801b04 	movi	r2,108
   10894:	1880151e 	bne	r3,r2,108ec <main+0x150>
    		 find_next_val(text, 4, tmp1);
   10898:	d80d883a 	mov	r6,sp
   1089c:	01400104 	movi	r5,4
   108a0:	d9008004 	addi	r4,sp,512
   108a4:	00105f00 	call	105f0 <find_next_val>
    		 plotting = atoi(tmp1);
   108a8:	d809883a 	mov	r4,sp
   108ac:	0015d240 	call	15d24 <atoi>
   108b0:	1021883a 	mov	r16,r2
    		 free(taps);
    		 taps=update_coefficients(text);
    	 }
    	 else filter_mode = 0;

    	 if(plotting == 0) print_text(text, length);
   108b4:	10000e26 	beq	r2,zero,108f0 <main+0x154>
   108b8:	1025883a 	mov	r18,r2
   108bc:	00001606 	br	10918 <main+0x17c>
    	 else if(text[0] == 'p' && text[1] == 'l'){
    		 find_next_val(text, 4, tmp1);
    		 plotting = atoi(tmp1);
    	}
//    	 command format: uc,<number of coefficients>,<c1>,<c2>,...,<cn>
    	 else if(text[0] == 'u' && text[1] == 'c'){
   108c0:	00c01d44 	movi	r3,117
   108c4:	10c0091e 	bne	r2,r3,108ec <main+0x150>
   108c8:	d8c08047 	ldb	r3,513(sp)
   108cc:	008018c4 	movi	r2,99
   108d0:	1880061e 	bne	r3,r2,108ec <main+0x150>
    		 free(taps);
   108d4:	8809883a 	mov	r4,r17
   108d8:	0015e740 	call	15e74 <free>
    		 taps=update_coefficients(text);
   108dc:	d9008004 	addi	r4,sp,512
   108e0:	001067c0 	call	1067c <update_coefficients>
   108e4:	1023883a 	mov	r17,r2
   108e8:	00000106 	br	108f0 <main+0x154>
    	 }
    	 else filter_mode = 0;
   108ec:	d0207515 	stw	zero,-32300(gp)

    	 if(plotting == 0) print_text(text, length);
   108f0:	d9416417 	ldw	r5,1424(sp)
   108f4:	d9008004 	addi	r4,sp,512
   108f8:	0025883a 	mov	r18,zero
   108fc:	001023c0 	call	1023c <print_text>

    	 if(plotting) max = plotting;
    	 else max = filter_mode? 1000: 100000;
   10900:	d0a07517 	ldw	r2,-32300(gp)
   10904:	1000031e 	bne	r2,zero,10914 <main+0x178>
   10908:	040000b4 	movhi	r16,2
   1090c:	8421a804 	addi	r16,r16,-31072
   10910:	00000106 	br	10918 <main+0x17c>
   10914:	0400fa04 	movi	r16,1000

    	for(int i = 0; i < max; i++){
   10918:	0027883a 	mov	r19,zero
   1091c:	9c001a0e 	bge	r19,r16,10988 <main+0x1ec>
            alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10920:	d9416204 	addi	r5,sp,1416
   10924:	a809883a 	mov	r4,r21
   10928:	0016e1c0 	call	16e1c <alt_up_accelerometer_spi_read_x_axis>
            shift(& prev_vals, x_read, array_size);
   1092c:	d9416217 	ldw	r5,1416(sp)
   10930:	01800c44 	movi	r6,49
   10934:	d9010004 	addi	r4,sp,1024
   10938:	00105c00 	call	105c0 <shift>


            if(filter_mode == 1){
   1093c:	d0a07517 	ldw	r2,-32300(gp)
   10940:	1580061e 	bne	r2,r22,1095c <main+0x1c0>
            	filtered_x = filter(taps, & prev_vals, array_size);
   10944:	01800c44 	movi	r6,49
   10948:	d9410004 	addi	r5,sp,1024
   1094c:	8809883a 	mov	r4,r17
   10950:	001047c0 	call	1047c <filter>
   10954:	1029883a 	mov	r20,r2
   10958:	00000106 	br	10960 <main+0x1c4>
            }
            else{
            	filtered_x = x_read;
   1095c:	dd016217 	ldw	r20,1416(sp)
            }

            if(plotting){
   10960:	90000326 	beq	r18,zero,10970 <main+0x1d4>
            	print_val(filtered_x, length);
   10964:	d9416417 	ldw	r5,1424(sp)
   10968:	a009883a 	mov	r4,r20
   1096c:	00102a00 	call	102a0 <print_val>
            }

            convert_read(filtered_x, & level, & led);
   10970:	d1a07704 	addi	r6,gp,-32292
   10974:	d1607804 	addi	r5,gp,-32288
   10978:	a009883a 	mov	r4,r20
   1097c:	00103d80 	call	103d8 <convert_read>
    	 if(plotting == 0) print_text(text, length);

    	 if(plotting) max = plotting;
    	 else max = filter_mode? 1000: 100000;

    	for(int i = 0; i < max; i++){
   10980:	9cc00044 	addi	r19,r19,1
   10984:	003fe506 	br	1091c <__alt_data_end+0xffff091c>
            }

            convert_read(filtered_x, & level, & led);
    	}

    	if(plotting){
   10988:	903fb126 	beq	r18,zero,10850 <__alt_data_end+0xffff0850>
    		print_end();
   1098c:	00102d80 	call	102d8 <print_end>
   10990:	003faf06 	br	10850 <__alt_data_end+0xffff0850>

   	    plotting = 0;
    }
    return 0;

}
   10994:	8005883a 	mov	r2,r16
   10998:	dfc16c17 	ldw	ra,1456(sp)
   1099c:	dd816b17 	ldw	r22,1452(sp)
   109a0:	dd416a17 	ldw	r21,1448(sp)
   109a4:	dd016917 	ldw	r20,1444(sp)
   109a8:	dcc16817 	ldw	r19,1440(sp)
   109ac:	dc816717 	ldw	r18,1436(sp)
   109b0:	dc416617 	ldw	r17,1432(sp)
   109b4:	dc016517 	ldw	r16,1428(sp)
   109b8:	dec16d04 	addi	sp,sp,1460
   109bc:	f800283a 	ret

000109c0 <pow>:
   109c0:	deffee04 	addi	sp,sp,-72
   109c4:	dc800b15 	stw	r18,44(sp)
   109c8:	04800074 	movhi	r18,1
   109cc:	ddc01015 	stw	r23,64(sp)
   109d0:	dd800f15 	stw	r22,60(sp)
   109d4:	dd400e15 	stw	r21,56(sp)
   109d8:	dd000d15 	stw	r20,52(sp)
   109dc:	dcc00c15 	stw	r19,48(sp)
   109e0:	dc400a15 	stw	r17,40(sp)
   109e4:	dc000915 	stw	r16,36(sp)
   109e8:	dfc01115 	stw	ra,68(sp)
   109ec:	949db404 	addi	r18,r18,30416
   109f0:	202f883a 	mov	r23,r4
   109f4:	282d883a 	mov	r22,r5
   109f8:	302b883a 	mov	r21,r6
   109fc:	3829883a 	mov	r20,r7
   10a00:	0010e840 	call	10e84 <__ieee754_pow>
   10a04:	1023883a 	mov	r17,r2
   10a08:	90800017 	ldw	r2,0(r18)
   10a0c:	04ffffc4 	movi	r19,-1
   10a10:	1821883a 	mov	r16,r3
   10a14:	14c00426 	beq	r2,r19,10a28 <pow+0x68>
   10a18:	a809883a 	mov	r4,r21
   10a1c:	a00b883a 	mov	r5,r20
   10a20:	00121e00 	call	121e0 <__fpclassifyd>
   10a24:	10000d1e 	bne	r2,zero,10a5c <pow+0x9c>
   10a28:	8805883a 	mov	r2,r17
   10a2c:	8007883a 	mov	r3,r16
   10a30:	dfc01117 	ldw	ra,68(sp)
   10a34:	ddc01017 	ldw	r23,64(sp)
   10a38:	dd800f17 	ldw	r22,60(sp)
   10a3c:	dd400e17 	ldw	r21,56(sp)
   10a40:	dd000d17 	ldw	r20,52(sp)
   10a44:	dcc00c17 	ldw	r19,48(sp)
   10a48:	dc800b17 	ldw	r18,44(sp)
   10a4c:	dc400a17 	ldw	r17,40(sp)
   10a50:	dc000917 	ldw	r16,36(sp)
   10a54:	dec01204 	addi	sp,sp,72
   10a58:	f800283a 	ret
   10a5c:	b809883a 	mov	r4,r23
   10a60:	b00b883a 	mov	r5,r22
   10a64:	00121e00 	call	121e0 <__fpclassifyd>
   10a68:	000d883a 	mov	r6,zero
   10a6c:	000f883a 	mov	r7,zero
   10a70:	1000201e 	bne	r2,zero,10af4 <pow+0x134>
   10a74:	a809883a 	mov	r4,r21
   10a78:	a00b883a 	mov	r5,r20
   10a7c:	001433c0 	call	1433c <__eqdf2>
   10a80:	103fe91e 	bne	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10a84:	01000044 	movi	r4,1
   10a88:	d9000015 	stw	r4,0(sp)
   10a8c:	90800017 	ldw	r2,0(r18)
   10a90:	01000074 	movhi	r4,1
   10a94:	00cffc34 	movhi	r3,16368
   10a98:	211c7104 	addi	r4,r4,29124
   10a9c:	d9000115 	stw	r4,4(sp)
   10aa0:	d8000815 	stw	zero,32(sp)
   10aa4:	ddc00215 	stw	r23,8(sp)
   10aa8:	dd800315 	stw	r22,12(sp)
   10aac:	dd400415 	stw	r21,16(sp)
   10ab0:	dd000515 	stw	r20,20(sp)
   10ab4:	d8000615 	stw	zero,24(sp)
   10ab8:	d8c00715 	stw	r3,28(sp)
   10abc:	14c02826 	beq	r2,r19,10b60 <pow+0x1a0>
   10ac0:	01000084 	movi	r4,2
   10ac4:	11002626 	beq	r2,r4,10b60 <pow+0x1a0>
   10ac8:	d809883a 	mov	r4,sp
   10acc:	00122540 	call	12254 <matherr>
   10ad0:	10006b26 	beq	r2,zero,10c80 <pow+0x2c0>
   10ad4:	d8800817 	ldw	r2,32(sp)
   10ad8:	10000326 	beq	r2,zero,10ae8 <pow+0x128>
   10adc:	0015d3c0 	call	15d3c <__errno>
   10ae0:	d8c00817 	ldw	r3,32(sp)
   10ae4:	10c00015 	stw	r3,0(r2)
   10ae8:	d8800617 	ldw	r2,24(sp)
   10aec:	d8c00717 	ldw	r3,28(sp)
   10af0:	003fcf06 	br	10a30 <__alt_data_end+0xffff0a30>
   10af4:	b809883a 	mov	r4,r23
   10af8:	b00b883a 	mov	r5,r22
   10afc:	001433c0 	call	1433c <__eqdf2>
   10b00:	1000191e 	bne	r2,zero,10b68 <pow+0x1a8>
   10b04:	000d883a 	mov	r6,zero
   10b08:	000f883a 	mov	r7,zero
   10b0c:	a809883a 	mov	r4,r21
   10b10:	a00b883a 	mov	r5,r20
   10b14:	001433c0 	call	1433c <__eqdf2>
   10b18:	10003a1e 	bne	r2,zero,10c04 <pow+0x244>
   10b1c:	00c00044 	movi	r3,1
   10b20:	d8c00015 	stw	r3,0(sp)
   10b24:	90800017 	ldw	r2,0(r18)
   10b28:	00c00074 	movhi	r3,1
   10b2c:	18dc7104 	addi	r3,r3,29124
   10b30:	d8c00115 	stw	r3,4(sp)
   10b34:	d8000815 	stw	zero,32(sp)
   10b38:	ddc00215 	stw	r23,8(sp)
   10b3c:	dd800315 	stw	r22,12(sp)
   10b40:	dd400415 	stw	r21,16(sp)
   10b44:	dd000515 	stw	r20,20(sp)
   10b48:	d8000615 	stw	zero,24(sp)
   10b4c:	d8000715 	stw	zero,28(sp)
   10b50:	103fdd26 	beq	r2,zero,10ac8 <__alt_data_end+0xffff0ac8>
   10b54:	0005883a 	mov	r2,zero
   10b58:	00cffc34 	movhi	r3,16368
   10b5c:	003fb406 	br	10a30 <__alt_data_end+0xffff0a30>
   10b60:	0005883a 	mov	r2,zero
   10b64:	003fb206 	br	10a30 <__alt_data_end+0xffff0a30>
   10b68:	8809883a 	mov	r4,r17
   10b6c:	800b883a 	mov	r5,r16
   10b70:	00121c40 	call	121c4 <finite>
   10b74:	10004626 	beq	r2,zero,10c90 <pow+0x2d0>
   10b78:	000d883a 	mov	r6,zero
   10b7c:	000f883a 	mov	r7,zero
   10b80:	8809883a 	mov	r4,r17
   10b84:	800b883a 	mov	r5,r16
   10b88:	001433c0 	call	1433c <__eqdf2>
   10b8c:	103fa61e 	bne	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10b90:	b809883a 	mov	r4,r23
   10b94:	b00b883a 	mov	r5,r22
   10b98:	00121c40 	call	121c4 <finite>
   10b9c:	103fa226 	beq	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10ba0:	a809883a 	mov	r4,r21
   10ba4:	a00b883a 	mov	r5,r20
   10ba8:	00121c40 	call	121c4 <finite>
   10bac:	103f9e26 	beq	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10bb0:	00800104 	movi	r2,4
   10bb4:	d8800015 	stw	r2,0(sp)
   10bb8:	90c00017 	ldw	r3,0(r18)
   10bbc:	00800074 	movhi	r2,1
   10bc0:	109c7104 	addi	r2,r2,29124
   10bc4:	d8800115 	stw	r2,4(sp)
   10bc8:	d8000815 	stw	zero,32(sp)
   10bcc:	ddc00215 	stw	r23,8(sp)
   10bd0:	dd800315 	stw	r22,12(sp)
   10bd4:	dd400415 	stw	r21,16(sp)
   10bd8:	dd000515 	stw	r20,20(sp)
   10bdc:	d8000615 	stw	zero,24(sp)
   10be0:	d8000715 	stw	zero,28(sp)
   10be4:	00800084 	movi	r2,2
   10be8:	18804726 	beq	r3,r2,10d08 <pow+0x348>
   10bec:	d809883a 	mov	r4,sp
   10bf0:	00122540 	call	12254 <matherr>
   10bf4:	10004426 	beq	r2,zero,10d08 <pow+0x348>
   10bf8:	d8800817 	ldw	r2,32(sp)
   10bfc:	103fba26 	beq	r2,zero,10ae8 <__alt_data_end+0xffff0ae8>
   10c00:	003fb606 	br	10adc <__alt_data_end+0xffff0adc>
   10c04:	a809883a 	mov	r4,r21
   10c08:	a00b883a 	mov	r5,r20
   10c0c:	00121c40 	call	121c4 <finite>
   10c10:	103f8526 	beq	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10c14:	000d883a 	mov	r6,zero
   10c18:	000f883a 	mov	r7,zero
   10c1c:	a809883a 	mov	r4,r21
   10c20:	a00b883a 	mov	r5,r20
   10c24:	00144a00 	call	144a0 <__ledf2>
   10c28:	103f7f0e 	bge	r2,zero,10a28 <__alt_data_end+0xffff0a28>
   10c2c:	00c00044 	movi	r3,1
   10c30:	d8c00015 	stw	r3,0(sp)
   10c34:	90800017 	ldw	r2,0(r18)
   10c38:	00c00074 	movhi	r3,1
   10c3c:	18dc7104 	addi	r3,r3,29124
   10c40:	d8c00115 	stw	r3,4(sp)
   10c44:	d8000815 	stw	zero,32(sp)
   10c48:	ddc00215 	stw	r23,8(sp)
   10c4c:	dd800315 	stw	r22,12(sp)
   10c50:	dd400415 	stw	r21,16(sp)
   10c54:	dd000515 	stw	r20,20(sp)
   10c58:	d8000615 	stw	zero,24(sp)
   10c5c:	10002526 	beq	r2,zero,10cf4 <pow+0x334>
   10c60:	00fffc34 	movhi	r3,65520
   10c64:	d8c00715 	stw	r3,28(sp)
   10c68:	00c00084 	movi	r3,2
   10c6c:	10c0221e 	bne	r2,r3,10cf8 <pow+0x338>
   10c70:	0015d3c0 	call	15d3c <__errno>
   10c74:	00c00844 	movi	r3,33
   10c78:	10c00015 	stw	r3,0(r2)
   10c7c:	003fde06 	br	10bf8 <__alt_data_end+0xffff0bf8>
   10c80:	0015d3c0 	call	15d3c <__errno>
   10c84:	00c00844 	movi	r3,33
   10c88:	10c00015 	stw	r3,0(r2)
   10c8c:	003f9106 	br	10ad4 <__alt_data_end+0xffff0ad4>
   10c90:	b809883a 	mov	r4,r23
   10c94:	b00b883a 	mov	r5,r22
   10c98:	00121c40 	call	121c4 <finite>
   10c9c:	103fb626 	beq	r2,zero,10b78 <__alt_data_end+0xffff0b78>
   10ca0:	a809883a 	mov	r4,r21
   10ca4:	a00b883a 	mov	r5,r20
   10ca8:	00121c40 	call	121c4 <finite>
   10cac:	103fb226 	beq	r2,zero,10b78 <__alt_data_end+0xffff0b78>
   10cb0:	8809883a 	mov	r4,r17
   10cb4:	800b883a 	mov	r5,r16
   10cb8:	00121e00 	call	121e0 <__fpclassifyd>
   10cbc:	1000161e 	bne	r2,zero,10d18 <pow+0x358>
   10cc0:	00800044 	movi	r2,1
   10cc4:	d8800015 	stw	r2,0(sp)
   10cc8:	94000017 	ldw	r16,0(r18)
   10ccc:	00800074 	movhi	r2,1
   10cd0:	109c7104 	addi	r2,r2,29124
   10cd4:	d8800115 	stw	r2,4(sp)
   10cd8:	d8000815 	stw	zero,32(sp)
   10cdc:	ddc00215 	stw	r23,8(sp)
   10ce0:	dd800315 	stw	r22,12(sp)
   10ce4:	dd400415 	stw	r21,16(sp)
   10ce8:	dd000515 	stw	r20,20(sp)
   10cec:	8000281e 	bne	r16,zero,10d90 <pow+0x3d0>
   10cf0:	d8000615 	stw	zero,24(sp)
   10cf4:	d8000715 	stw	zero,28(sp)
   10cf8:	d809883a 	mov	r4,sp
   10cfc:	00122540 	call	12254 <matherr>
   10d00:	103fbd1e 	bne	r2,zero,10bf8 <__alt_data_end+0xffff0bf8>
   10d04:	003fda06 	br	10c70 <__alt_data_end+0xffff0c70>
   10d08:	0015d3c0 	call	15d3c <__errno>
   10d0c:	00c00884 	movi	r3,34
   10d10:	10c00015 	stw	r3,0(r2)
   10d14:	003fb806 	br	10bf8 <__alt_data_end+0xffff0bf8>
   10d18:	00c000c4 	movi	r3,3
   10d1c:	d8c00015 	stw	r3,0(sp)
   10d20:	90800017 	ldw	r2,0(r18)
   10d24:	00c00074 	movhi	r3,1
   10d28:	18dc7104 	addi	r3,r3,29124
   10d2c:	d8c00115 	stw	r3,4(sp)
   10d30:	d8000815 	stw	zero,32(sp)
   10d34:	ddc00215 	stw	r23,8(sp)
   10d38:	dd800315 	stw	r22,12(sp)
   10d3c:	dd400415 	stw	r21,16(sp)
   10d40:	dd000515 	stw	r20,20(sp)
   10d44:	000d883a 	mov	r6,zero
   10d48:	000f883a 	mov	r7,zero
   10d4c:	b809883a 	mov	r4,r23
   10d50:	b00b883a 	mov	r5,r22
   10d54:	1000181e 	bne	r2,zero,10db8 <pow+0x3f8>
   10d58:	00b80034 	movhi	r2,57344
   10d5c:	d8800615 	stw	r2,24(sp)
   10d60:	0091fc34 	movhi	r2,18416
   10d64:	10bfffc4 	addi	r2,r2,-1
   10d68:	d8800715 	stw	r2,28(sp)
   10d6c:	00144a00 	call	144a0 <__ledf2>
   10d70:	10001a16 	blt	r2,zero,10ddc <pow+0x41c>
   10d74:	d809883a 	mov	r4,sp
   10d78:	00122540 	call	12254 <matherr>
   10d7c:	103f551e 	bne	r2,zero,10ad4 <__alt_data_end+0xffff0ad4>
   10d80:	0015d3c0 	call	15d3c <__errno>
   10d84:	00c00884 	movi	r3,34
   10d88:	10c00015 	stw	r3,0(r2)
   10d8c:	003f5106 	br	10ad4 <__alt_data_end+0xffff0ad4>
   10d90:	000d883a 	mov	r6,zero
   10d94:	000f883a 	mov	r7,zero
   10d98:	0009883a 	mov	r4,zero
   10d9c:	000b883a 	mov	r5,zero
   10da0:	001396c0 	call	1396c <__divdf3>
   10da4:	d8800615 	stw	r2,24(sp)
   10da8:	d8c00715 	stw	r3,28(sp)
   10dac:	00800084 	movi	r2,2
   10db0:	80bfaf26 	beq	r16,r2,10c70 <__alt_data_end+0xffff0c70>
   10db4:	003fd006 	br	10cf8 <__alt_data_end+0xffff0cf8>
   10db8:	009ffc34 	movhi	r2,32752
   10dbc:	d8000615 	stw	zero,24(sp)
   10dc0:	d8800715 	stw	r2,28(sp)
   10dc4:	00144a00 	call	144a0 <__ledf2>
   10dc8:	10001a16 	blt	r2,zero,10e34 <pow+0x474>
   10dcc:	90c00017 	ldw	r3,0(r18)
   10dd0:	00800084 	movi	r2,2
   10dd4:	18bfe71e 	bne	r3,r2,10d74 <__alt_data_end+0xffff0d74>
   10dd8:	003fe906 	br	10d80 <__alt_data_end+0xffff0d80>
   10ddc:	000d883a 	mov	r6,zero
   10de0:	01cff834 	movhi	r7,16352
   10de4:	a809883a 	mov	r4,r21
   10de8:	a00b883a 	mov	r5,r20
   10dec:	00145940 	call	14594 <__muldf3>
   10df0:	1009883a 	mov	r4,r2
   10df4:	180b883a 	mov	r5,r3
   10df8:	1023883a 	mov	r17,r2
   10dfc:	1821883a 	mov	r16,r3
   10e00:	00122680 	call	12268 <rint>
   10e04:	100d883a 	mov	r6,r2
   10e08:	180f883a 	mov	r7,r3
   10e0c:	8809883a 	mov	r4,r17
   10e10:	800b883a 	mov	r5,r16
   10e14:	001433c0 	call	1433c <__eqdf2>
   10e18:	103fec26 	beq	r2,zero,10dcc <__alt_data_end+0xffff0dcc>
   10e1c:	00b80034 	movhi	r2,57344
   10e20:	d8800615 	stw	r2,24(sp)
   10e24:	00b1fc34 	movhi	r2,51184
   10e28:	10bfffc4 	addi	r2,r2,-1
   10e2c:	d8800715 	stw	r2,28(sp)
   10e30:	003fe606 	br	10dcc <__alt_data_end+0xffff0dcc>
   10e34:	000d883a 	mov	r6,zero
   10e38:	01cff834 	movhi	r7,16352
   10e3c:	a809883a 	mov	r4,r21
   10e40:	a00b883a 	mov	r5,r20
   10e44:	00145940 	call	14594 <__muldf3>
   10e48:	1009883a 	mov	r4,r2
   10e4c:	180b883a 	mov	r5,r3
   10e50:	1023883a 	mov	r17,r2
   10e54:	1821883a 	mov	r16,r3
   10e58:	00122680 	call	12268 <rint>
   10e5c:	100d883a 	mov	r6,r2
   10e60:	180f883a 	mov	r7,r3
   10e64:	8809883a 	mov	r4,r17
   10e68:	800b883a 	mov	r5,r16
   10e6c:	001433c0 	call	1433c <__eqdf2>
   10e70:	103fd626 	beq	r2,zero,10dcc <__alt_data_end+0xffff0dcc>
   10e74:	00bffc34 	movhi	r2,65520
   10e78:	d8000615 	stw	zero,24(sp)
   10e7c:	d8800715 	stw	r2,28(sp)
   10e80:	003fd206 	br	10dcc <__alt_data_end+0xffff0dcc>

00010e84 <__ieee754_pow>:
   10e84:	00a00034 	movhi	r2,32768
   10e88:	deffea04 	addi	sp,sp,-88
   10e8c:	10bfffc4 	addi	r2,r2,-1
   10e90:	dc800e15 	stw	r18,56(sp)
   10e94:	38a4703a 	and	r18,r7,r2
   10e98:	dfc01515 	stw	ra,84(sp)
   10e9c:	df001415 	stw	fp,80(sp)
   10ea0:	ddc01315 	stw	r23,76(sp)
   10ea4:	dd801215 	stw	r22,72(sp)
   10ea8:	dd401115 	stw	r21,68(sp)
   10eac:	dd001015 	stw	r20,64(sp)
   10eb0:	dcc00f15 	stw	r19,60(sp)
   10eb4:	dc400d15 	stw	r17,52(sp)
   10eb8:	dc000c15 	stw	r16,48(sp)
   10ebc:	9186b03a 	or	r3,r18,r6
   10ec0:	18002a26 	beq	r3,zero,10f6c <__ieee754_pow+0xe8>
   10ec4:	28a2703a 	and	r17,r5,r2
   10ec8:	009ffc34 	movhi	r2,32752
   10ecc:	14402316 	blt	r2,r17,10f5c <__ieee754_pow+0xd8>
   10ed0:	88802126 	beq	r17,r2,10f58 <__ieee754_pow+0xd4>
   10ed4:	14802116 	blt	r2,r18,10f5c <__ieee754_pow+0xd8>
   10ed8:	009ffc34 	movhi	r2,32752
   10edc:	90807326 	beq	r18,r2,110ac <__ieee754_pow+0x228>
   10ee0:	2827883a 	mov	r19,r5
   10ee4:	2021883a 	mov	r16,r4
   10ee8:	302d883a 	mov	r22,r6
   10eec:	3839883a 	mov	fp,r7
   10ef0:	28007016 	blt	r5,zero,110b4 <__ieee754_pow+0x230>
   10ef4:	002b883a 	mov	r21,zero
   10ef8:	b0003a1e 	bne	r22,zero,10fe4 <__ieee754_pow+0x160>
   10efc:	009ffc34 	movhi	r2,32752
   10f00:	90807f26 	beq	r18,r2,11100 <__ieee754_pow+0x27c>
   10f04:	008ffc34 	movhi	r2,16368
   10f08:	90805426 	beq	r18,r2,1105c <__ieee754_pow+0x1d8>
   10f0c:	00900034 	movhi	r2,16384
   10f10:	e0833b26 	beq	fp,r2,11c00 <__ieee754_pow+0xd7c>
   10f14:	008ff834 	movhi	r2,16352
   10f18:	e080321e 	bne	fp,r2,10fe4 <__ieee754_pow+0x160>
   10f1c:	98003116 	blt	r19,zero,10fe4 <__ieee754_pow+0x160>
   10f20:	8009883a 	mov	r4,r16
   10f24:	980b883a 	mov	r5,r19
   10f28:	dfc01517 	ldw	ra,84(sp)
   10f2c:	df001417 	ldw	fp,80(sp)
   10f30:	ddc01317 	ldw	r23,76(sp)
   10f34:	dd801217 	ldw	r22,72(sp)
   10f38:	dd401117 	ldw	r21,68(sp)
   10f3c:	dd001017 	ldw	r20,64(sp)
   10f40:	dcc00f17 	ldw	r19,60(sp)
   10f44:	dc800e17 	ldw	r18,56(sp)
   10f48:	dc400d17 	ldw	r17,52(sp)
   10f4c:	dc000c17 	ldw	r16,48(sp)
   10f50:	dec01604 	addi	sp,sp,88
   10f54:	0011f281 	jmpi	11f28 <__ieee754_sqrt>
   10f58:	20001226 	beq	r4,zero,10fa4 <__ieee754_pow+0x120>
   10f5c:	00b00434 	movhi	r2,49168
   10f60:	8885883a 	add	r2,r17,r2
   10f64:	1108b03a 	or	r4,r2,r4
   10f68:	20000f1e 	bne	r4,zero,10fa8 <__ieee754_pow+0x124>
   10f6c:	0005883a 	mov	r2,zero
   10f70:	00cffc34 	movhi	r3,16368
   10f74:	dfc01517 	ldw	ra,84(sp)
   10f78:	df001417 	ldw	fp,80(sp)
   10f7c:	ddc01317 	ldw	r23,76(sp)
   10f80:	dd801217 	ldw	r22,72(sp)
   10f84:	dd401117 	ldw	r21,68(sp)
   10f88:	dd001017 	ldw	r20,64(sp)
   10f8c:	dcc00f17 	ldw	r19,60(sp)
   10f90:	dc800e17 	ldw	r18,56(sp)
   10f94:	dc400d17 	ldw	r17,52(sp)
   10f98:	dc000c17 	ldw	r16,48(sp)
   10f9c:	dec01604 	addi	sp,sp,88
   10fa0:	f800283a 	ret
   10fa4:	8cbfcc0e 	bge	r17,r18,10ed8 <__alt_data_end+0xffff0ed8>
   10fa8:	01000074 	movhi	r4,1
   10fac:	211c3904 	addi	r4,r4,28900
   10fb0:	dfc01517 	ldw	ra,84(sp)
   10fb4:	df001417 	ldw	fp,80(sp)
   10fb8:	ddc01317 	ldw	r23,76(sp)
   10fbc:	dd801217 	ldw	r22,72(sp)
   10fc0:	dd401117 	ldw	r21,68(sp)
   10fc4:	dd001017 	ldw	r20,64(sp)
   10fc8:	dcc00f17 	ldw	r19,60(sp)
   10fcc:	dc800e17 	ldw	r18,56(sp)
   10fd0:	dc400d17 	ldw	r17,52(sp)
   10fd4:	dc000c17 	ldw	r16,48(sp)
   10fd8:	dec01604 	addi	sp,sp,88
   10fdc:	001225c1 	jmpi	1225c <nan>
   10fe0:	002b883a 	mov	r21,zero
   10fe4:	8009883a 	mov	r4,r16
   10fe8:	980b883a 	mov	r5,r19
   10fec:	00121b00 	call	121b0 <fabs>
   10ff0:	102f883a 	mov	r23,r2
   10ff4:	80000f26 	beq	r16,zero,11034 <__ieee754_pow+0x1b0>
   10ff8:	9816d7fa 	srli	r11,r19,31
   10ffc:	5affffc4 	addi	r11,r11,-1
   11000:	aac4b03a 	or	r2,r21,r11
   11004:	10004b26 	beq	r2,zero,11134 <__ieee754_pow+0x2b0>
   11008:	00907834 	movhi	r2,16864
   1100c:	1480540e 	bge	r2,r18,11160 <__ieee754_pow+0x2dc>
   11010:	0090fc34 	movhi	r2,17392
   11014:	14832d0e 	bge	r2,r18,11ccc <__ieee754_pow+0xe48>
   11018:	008ffc34 	movhi	r2,16368
   1101c:	10bfffc4 	addi	r2,r2,-1
   11020:	14401916 	blt	r2,r17,11088 <__ieee754_pow+0x204>
   11024:	e0001916 	blt	fp,zero,1108c <__ieee754_pow+0x208>
   11028:	0005883a 	mov	r2,zero
   1102c:	0007883a 	mov	r3,zero
   11030:	003fd006 	br	10f74 <__alt_data_end+0xffff0f74>
   11034:	88000526 	beq	r17,zero,1104c <__ieee754_pow+0x1c8>
   11038:	00900034 	movhi	r2,16384
   1103c:	10bfffc4 	addi	r2,r2,-1
   11040:	9884703a 	and	r2,r19,r2
   11044:	010ffc34 	movhi	r4,16368
   11048:	113feb1e 	bne	r2,r4,10ff8 <__alt_data_end+0xffff0ff8>
   1104c:	e0000716 	blt	fp,zero,1106c <__ieee754_pow+0x1e8>
   11050:	9802e216 	blt	r19,zero,11bdc <__ieee754_pow+0xd58>
   11054:	b805883a 	mov	r2,r23
   11058:	003fc606 	br	10f74 <__alt_data_end+0xffff0f74>
   1105c:	e0037516 	blt	fp,zero,11e34 <__ieee754_pow+0xfb0>
   11060:	8005883a 	mov	r2,r16
   11064:	9807883a 	mov	r3,r19
   11068:	003fc206 	br	10f74 <__alt_data_end+0xffff0f74>
   1106c:	b80d883a 	mov	r6,r23
   11070:	180f883a 	mov	r7,r3
   11074:	0009883a 	mov	r4,zero
   11078:	014ffc34 	movhi	r5,16368
   1107c:	001396c0 	call	1396c <__divdf3>
   11080:	102f883a 	mov	r23,r2
   11084:	003ff206 	br	11050 <__alt_data_end+0xffff1050>
   11088:	073fe70e 	bge	zero,fp,11028 <__alt_data_end+0xffff1028>
   1108c:	01a20034 	movhi	r6,34816
   11090:	01df8e34 	movhi	r7,32312
   11094:	319d6704 	addi	r6,r6,30108
   11098:	39f90f04 	addi	r7,r7,-7108
   1109c:	3009883a 	mov	r4,r6
   110a0:	380b883a 	mov	r5,r7
   110a4:	00145940 	call	14594 <__muldf3>
   110a8:	003fb206 	br	10f74 <__alt_data_end+0xffff0f74>
   110ac:	303f8c26 	beq	r6,zero,10ee0 <__alt_data_end+0xffff0ee0>
   110b0:	003faa06 	br	10f5c <__alt_data_end+0xffff0f5c>
   110b4:	0090d034 	movhi	r2,17216
   110b8:	10bfffc4 	addi	r2,r2,-1
   110bc:	14801b16 	blt	r2,r18,1112c <__ieee754_pow+0x2a8>
   110c0:	008ffc34 	movhi	r2,16368
   110c4:	10bfffc4 	addi	r2,r2,-1
   110c8:	14bf8a0e 	bge	r2,r18,10ef4 <__alt_data_end+0xffff0ef4>
   110cc:	9005d53a 	srai	r2,r18,20
   110d0:	00c00504 	movi	r3,20
   110d4:	10bf0044 	addi	r2,r2,-1023
   110d8:	18836b0e 	bge	r3,r2,11e88 <__ieee754_pow+0x1004>
   110dc:	00c00d04 	movi	r3,52
   110e0:	1885c83a 	sub	r2,r3,r2
   110e4:	3086d83a 	srl	r3,r6,r2
   110e8:	1884983a 	sll	r2,r3,r2
   110ec:	30bf811e 	bne	r6,r2,10ef4 <__alt_data_end+0xffff0ef4>
   110f0:	18c0004c 	andi	r3,r3,1
   110f4:	02800084 	movi	r10,2
   110f8:	50ebc83a 	sub	r21,r10,r3
   110fc:	003f7e06 	br	10ef8 <__alt_data_end+0xffff0ef8>
   11100:	01300434 	movhi	r4,49168
   11104:	8909883a 	add	r4,r17,r4
   11108:	2408b03a 	or	r4,r4,r16
   1110c:	203f9726 	beq	r4,zero,10f6c <__alt_data_end+0xffff0f6c>
   11110:	008ffc34 	movhi	r2,16368
   11114:	10bfffc4 	addi	r2,r2,-1
   11118:	1442e60e 	bge	r2,r17,11cb4 <__ieee754_pow+0xe30>
   1111c:	e03fc216 	blt	fp,zero,11028 <__alt_data_end+0xffff1028>
   11120:	0005883a 	mov	r2,zero
   11124:	e007883a 	mov	r3,fp
   11128:	003f9206 	br	10f74 <__alt_data_end+0xffff0f74>
   1112c:	05400084 	movi	r21,2
   11130:	003f7106 	br	10ef8 <__alt_data_end+0xffff0ef8>
   11134:	800d883a 	mov	r6,r16
   11138:	980f883a 	mov	r7,r19
   1113c:	3009883a 	mov	r4,r6
   11140:	380b883a 	mov	r5,r7
   11144:	0014e000 	call	14e00 <__subdf3>
   11148:	100d883a 	mov	r6,r2
   1114c:	180f883a 	mov	r7,r3
   11150:	1009883a 	mov	r4,r2
   11154:	180b883a 	mov	r5,r3
   11158:	001396c0 	call	1396c <__divdf3>
   1115c:	003f8506 	br	10f74 <__alt_data_end+0xffff0f74>
   11160:	00800434 	movhi	r2,16
   11164:	10bfffc4 	addi	r2,r2,-1
   11168:	1442d616 	blt	r2,r17,11cc4 <__ieee754_pow+0xe40>
   1116c:	b809883a 	mov	r4,r23
   11170:	000d883a 	mov	r6,zero
   11174:	01d0d034 	movhi	r7,17216
   11178:	180b883a 	mov	r5,r3
   1117c:	dac00b15 	stw	r11,44(sp)
   11180:	00145940 	call	14594 <__muldf3>
   11184:	dac00b17 	ldw	r11,44(sp)
   11188:	102f883a 	mov	r23,r2
   1118c:	1823883a 	mov	r17,r3
   11190:	033ff2c4 	movi	r12,-53
   11194:	8807d53a 	srai	r3,r17,20
   11198:	00800434 	movhi	r2,16
   1119c:	10bfffc4 	addi	r2,r2,-1
   111a0:	18ff0044 	addi	r3,r3,-1023
   111a4:	1b19883a 	add	r12,r3,r12
   111a8:	00c00134 	movhi	r3,4
   111ac:	8884703a 	and	r2,r17,r2
   111b0:	18e62384 	addi	r3,r3,-26482
   111b4:	150ffc34 	orhi	r20,r2,16368
   111b8:	1880060e 	bge	r3,r2,111d4 <__ieee754_pow+0x350>
   111bc:	00c00334 	movhi	r3,12
   111c0:	18ed9e44 	addi	r3,r3,-18823
   111c4:	18833f0e 	bge	r3,r2,11ec4 <__ieee754_pow+0x1040>
   111c8:	00bffc34 	movhi	r2,65520
   111cc:	63000044 	addi	r12,r12,1
   111d0:	a0a9883a 	add	r20,r20,r2
   111d4:	0027883a 	mov	r19,zero
   111d8:	d8000215 	stw	zero,8(sp)
   111dc:	0013883a 	mov	r9,zero
   111e0:	0011883a 	mov	r8,zero
   111e4:	0015883a 	mov	r10,zero
   111e8:	048ffc34 	movhi	r18,16368
   111ec:	900f883a 	mov	r7,r18
   111f0:	b809883a 	mov	r4,r23
   111f4:	a00b883a 	mov	r5,r20
   111f8:	000d883a 	mov	r6,zero
   111fc:	da000a15 	stw	r8,40(sp)
   11200:	da400815 	stw	r9,32(sp)
   11204:	dac00b15 	stw	r11,44(sp)
   11208:	db000915 	stw	r12,36(sp)
   1120c:	da800515 	stw	r10,20(sp)
   11210:	0014e000 	call	14e00 <__subdf3>
   11214:	b809883a 	mov	r4,r23
   11218:	a00b883a 	mov	r5,r20
   1121c:	900f883a 	mov	r7,r18
   11220:	000d883a 	mov	r6,zero
   11224:	d8800015 	stw	r2,0(sp)
   11228:	d8c00115 	stw	r3,4(sp)
   1122c:	00130c00 	call	130c0 <__adddf3>
   11230:	100d883a 	mov	r6,r2
   11234:	180f883a 	mov	r7,r3
   11238:	0009883a 	mov	r4,zero
   1123c:	014ffc34 	movhi	r5,16368
   11240:	001396c0 	call	1396c <__divdf3>
   11244:	d9000017 	ldw	r4,0(sp)
   11248:	d9400117 	ldw	r5,4(sp)
   1124c:	100d883a 	mov	r6,r2
   11250:	180f883a 	mov	r7,r3
   11254:	d8c00715 	stw	r3,28(sp)
   11258:	d8800615 	stw	r2,24(sp)
   1125c:	00145940 	call	14594 <__muldf3>
   11260:	1023883a 	mov	r17,r2
   11264:	a005d07a 	srai	r2,r20,1
   11268:	da800517 	ldw	r10,20(sp)
   1126c:	1821883a 	mov	r16,r3
   11270:	10c80034 	orhi	r3,r2,8192
   11274:	00800234 	movhi	r2,8
   11278:	1885883a 	add	r2,r3,r2
   1127c:	1295883a 	add	r10,r2,r10
   11280:	500f883a 	mov	r7,r10
   11284:	800b883a 	mov	r5,r16
   11288:	000d883a 	mov	r6,zero
   1128c:	0009883a 	mov	r4,zero
   11290:	da800515 	stw	r10,20(sp)
   11294:	00145940 	call	14594 <__muldf3>
   11298:	d9000017 	ldw	r4,0(sp)
   1129c:	d9400117 	ldw	r5,4(sp)
   112a0:	100d883a 	mov	r6,r2
   112a4:	180f883a 	mov	r7,r3
   112a8:	0014e000 	call	14e00 <__subdf3>
   112ac:	da800517 	ldw	r10,20(sp)
   112b0:	900f883a 	mov	r7,r18
   112b4:	000d883a 	mov	r6,zero
   112b8:	500b883a 	mov	r5,r10
   112bc:	0009883a 	mov	r4,zero
   112c0:	d8800015 	stw	r2,0(sp)
   112c4:	d8c00515 	stw	r3,20(sp)
   112c8:	0014e000 	call	14e00 <__subdf3>
   112cc:	b809883a 	mov	r4,r23
   112d0:	a00b883a 	mov	r5,r20
   112d4:	100d883a 	mov	r6,r2
   112d8:	180f883a 	mov	r7,r3
   112dc:	0014e000 	call	14e00 <__subdf3>
   112e0:	800f883a 	mov	r7,r16
   112e4:	000d883a 	mov	r6,zero
   112e8:	1009883a 	mov	r4,r2
   112ec:	180b883a 	mov	r5,r3
   112f0:	00145940 	call	14594 <__muldf3>
   112f4:	db400517 	ldw	r13,20(sp)
   112f8:	d9000017 	ldw	r4,0(sp)
   112fc:	100d883a 	mov	r6,r2
   11300:	680b883a 	mov	r5,r13
   11304:	180f883a 	mov	r7,r3
   11308:	0014e000 	call	14e00 <__subdf3>
   1130c:	dbc00617 	ldw	r15,24(sp)
   11310:	db800717 	ldw	r14,28(sp)
   11314:	1009883a 	mov	r4,r2
   11318:	780d883a 	mov	r6,r15
   1131c:	700f883a 	mov	r7,r14
   11320:	180b883a 	mov	r5,r3
   11324:	00145940 	call	14594 <__muldf3>
   11328:	880d883a 	mov	r6,r17
   1132c:	800f883a 	mov	r7,r16
   11330:	8809883a 	mov	r4,r17
   11334:	800b883a 	mov	r5,r16
   11338:	d8800015 	stw	r2,0(sp)
   1133c:	d8c00115 	stw	r3,4(sp)
   11340:	00145940 	call	14594 <__muldf3>
   11344:	01929174 	movhi	r6,19013
   11348:	01cff2b4 	movhi	r7,16330
   1134c:	3193bbc4 	addi	r6,r6,20207
   11350:	39df8a04 	addi	r7,r7,32296
   11354:	1009883a 	mov	r4,r2
   11358:	180b883a 	mov	r5,r3
   1135c:	102f883a 	mov	r23,r2
   11360:	1829883a 	mov	r20,r3
   11364:	00145940 	call	14594 <__muldf3>
   11368:	01a4f2b4 	movhi	r6,37834
   1136c:	01cff3b4 	movhi	r7,16334
   11370:	31b6d944 	addi	r6,r6,-9371
   11374:	39e19284 	addi	r7,r7,-31158
   11378:	1009883a 	mov	r4,r2
   1137c:	180b883a 	mov	r5,r3
   11380:	00130c00 	call	130c0 <__adddf3>
   11384:	b80d883a 	mov	r6,r23
   11388:	a00f883a 	mov	r7,r20
   1138c:	1009883a 	mov	r4,r2
   11390:	180b883a 	mov	r5,r3
   11394:	00145940 	call	14594 <__muldf3>
   11398:	01aa4774 	movhi	r6,43293
   1139c:	01cff474 	movhi	r7,16337
   113a0:	31904044 	addi	r6,r6,16641
   113a4:	39dd1804 	addi	r7,r7,29792
   113a8:	1009883a 	mov	r4,r2
   113ac:	180b883a 	mov	r5,r3
   113b0:	00130c00 	call	130c0 <__adddf3>
   113b4:	b80d883a 	mov	r6,r23
   113b8:	a00f883a 	mov	r7,r20
   113bc:	1009883a 	mov	r4,r2
   113c0:	180b883a 	mov	r5,r3
   113c4:	00145940 	call	14594 <__muldf3>
   113c8:	019463f4 	movhi	r6,20879
   113cc:	01cff574 	movhi	r7,16341
   113d0:	31899344 	addi	r6,r6,9805
   113d4:	39d55544 	addi	r7,r7,21845
   113d8:	1009883a 	mov	r4,r2
   113dc:	180b883a 	mov	r5,r3
   113e0:	00130c00 	call	130c0 <__adddf3>
   113e4:	b80d883a 	mov	r6,r23
   113e8:	a00f883a 	mov	r7,r20
   113ec:	1009883a 	mov	r4,r2
   113f0:	180b883a 	mov	r5,r3
   113f4:	00145940 	call	14594 <__muldf3>
   113f8:	01b6dc34 	movhi	r6,56176
   113fc:	01cff6f4 	movhi	r7,16347
   11400:	31aaffc4 	addi	r6,r6,-21505
   11404:	39db6d84 	addi	r7,r7,28086
   11408:	1009883a 	mov	r4,r2
   1140c:	180b883a 	mov	r5,r3
   11410:	00130c00 	call	130c0 <__adddf3>
   11414:	b80d883a 	mov	r6,r23
   11418:	a00f883a 	mov	r7,r20
   1141c:	1009883a 	mov	r4,r2
   11420:	180b883a 	mov	r5,r3
   11424:	00145940 	call	14594 <__muldf3>
   11428:	018cccf4 	movhi	r6,13107
   1142c:	01cff8f4 	movhi	r7,16355
   11430:	318cc0c4 	addi	r6,r6,13059
   11434:	39ccccc4 	addi	r7,r7,13107
   11438:	1009883a 	mov	r4,r2
   1143c:	180b883a 	mov	r5,r3
   11440:	00130c00 	call	130c0 <__adddf3>
   11444:	b80d883a 	mov	r6,r23
   11448:	a00f883a 	mov	r7,r20
   1144c:	b809883a 	mov	r4,r23
   11450:	a00b883a 	mov	r5,r20
   11454:	1825883a 	mov	r18,r3
   11458:	d8800515 	stw	r2,20(sp)
   1145c:	00145940 	call	14594 <__muldf3>
   11460:	db400517 	ldw	r13,20(sp)
   11464:	900b883a 	mov	r5,r18
   11468:	100d883a 	mov	r6,r2
   1146c:	6809883a 	mov	r4,r13
   11470:	180f883a 	mov	r7,r3
   11474:	00145940 	call	14594 <__muldf3>
   11478:	800f883a 	mov	r7,r16
   1147c:	8809883a 	mov	r4,r17
   11480:	800b883a 	mov	r5,r16
   11484:	000d883a 	mov	r6,zero
   11488:	102f883a 	mov	r23,r2
   1148c:	1829883a 	mov	r20,r3
   11490:	00130c00 	call	130c0 <__adddf3>
   11494:	d9800017 	ldw	r6,0(sp)
   11498:	d9c00117 	ldw	r7,4(sp)
   1149c:	1009883a 	mov	r4,r2
   114a0:	180b883a 	mov	r5,r3
   114a4:	00145940 	call	14594 <__muldf3>
   114a8:	b80d883a 	mov	r6,r23
   114ac:	a00f883a 	mov	r7,r20
   114b0:	1009883a 	mov	r4,r2
   114b4:	180b883a 	mov	r5,r3
   114b8:	00130c00 	call	130c0 <__adddf3>
   114bc:	800f883a 	mov	r7,r16
   114c0:	800b883a 	mov	r5,r16
   114c4:	000d883a 	mov	r6,zero
   114c8:	0009883a 	mov	r4,zero
   114cc:	1025883a 	mov	r18,r2
   114d0:	182f883a 	mov	r23,r3
   114d4:	00145940 	call	14594 <__muldf3>
   114d8:	000d883a 	mov	r6,zero
   114dc:	01d00234 	movhi	r7,16392
   114e0:	1009883a 	mov	r4,r2
   114e4:	180b883a 	mov	r5,r3
   114e8:	d8c00715 	stw	r3,28(sp)
   114ec:	d8800615 	stw	r2,24(sp)
   114f0:	00130c00 	call	130c0 <__adddf3>
   114f4:	900d883a 	mov	r6,r18
   114f8:	b80f883a 	mov	r7,r23
   114fc:	1009883a 	mov	r4,r2
   11500:	180b883a 	mov	r5,r3
   11504:	00130c00 	call	130c0 <__adddf3>
   11508:	800b883a 	mov	r5,r16
   1150c:	000d883a 	mov	r6,zero
   11510:	180f883a 	mov	r7,r3
   11514:	0009883a 	mov	r4,zero
   11518:	1829883a 	mov	r20,r3
   1151c:	00145940 	call	14594 <__muldf3>
   11520:	a00b883a 	mov	r5,r20
   11524:	000d883a 	mov	r6,zero
   11528:	01d00234 	movhi	r7,16392
   1152c:	0009883a 	mov	r4,zero
   11530:	d8800315 	stw	r2,12(sp)
   11534:	d8c00415 	stw	r3,16(sp)
   11538:	0014e000 	call	14e00 <__subdf3>
   1153c:	dbc00617 	ldw	r15,24(sp)
   11540:	db800717 	ldw	r14,28(sp)
   11544:	1009883a 	mov	r4,r2
   11548:	780d883a 	mov	r6,r15
   1154c:	700f883a 	mov	r7,r14
   11550:	180b883a 	mov	r5,r3
   11554:	0014e000 	call	14e00 <__subdf3>
   11558:	9009883a 	mov	r4,r18
   1155c:	b80b883a 	mov	r5,r23
   11560:	100d883a 	mov	r6,r2
   11564:	180f883a 	mov	r7,r3
   11568:	0014e000 	call	14e00 <__subdf3>
   1156c:	880d883a 	mov	r6,r17
   11570:	800f883a 	mov	r7,r16
   11574:	1009883a 	mov	r4,r2
   11578:	180b883a 	mov	r5,r3
   1157c:	00145940 	call	14594 <__muldf3>
   11580:	d9000017 	ldw	r4,0(sp)
   11584:	d9400117 	ldw	r5,4(sp)
   11588:	a00f883a 	mov	r7,r20
   1158c:	000d883a 	mov	r6,zero
   11590:	1023883a 	mov	r17,r2
   11594:	1821883a 	mov	r16,r3
   11598:	00145940 	call	14594 <__muldf3>
   1159c:	8809883a 	mov	r4,r17
   115a0:	800b883a 	mov	r5,r16
   115a4:	100d883a 	mov	r6,r2
   115a8:	180f883a 	mov	r7,r3
   115ac:	00130c00 	call	130c0 <__adddf3>
   115b0:	d9000317 	ldw	r4,12(sp)
   115b4:	d9400417 	ldw	r5,16(sp)
   115b8:	100d883a 	mov	r6,r2
   115bc:	180f883a 	mov	r7,r3
   115c0:	102f883a 	mov	r23,r2
   115c4:	1823883a 	mov	r17,r3
   115c8:	00130c00 	call	130c0 <__adddf3>
   115cc:	01cffbf4 	movhi	r7,16367
   115d0:	39f1c244 	addi	r7,r7,-14583
   115d4:	0009883a 	mov	r4,zero
   115d8:	180b883a 	mov	r5,r3
   115dc:	01b80034 	movhi	r6,57344
   115e0:	1821883a 	mov	r16,r3
   115e4:	00145940 	call	14594 <__muldf3>
   115e8:	d9800317 	ldw	r6,12(sp)
   115ec:	d9c00417 	ldw	r7,16(sp)
   115f0:	800b883a 	mov	r5,r16
   115f4:	0009883a 	mov	r4,zero
   115f8:	1825883a 	mov	r18,r3
   115fc:	d8800015 	stw	r2,0(sp)
   11600:	0014e000 	call	14e00 <__subdf3>
   11604:	b809883a 	mov	r4,r23
   11608:	880b883a 	mov	r5,r17
   1160c:	100d883a 	mov	r6,r2
   11610:	180f883a 	mov	r7,r3
   11614:	0014e000 	call	14e00 <__subdf3>
   11618:	01b70eb4 	movhi	r6,56378
   1161c:	01cffbf4 	movhi	r7,16367
   11620:	3180ff44 	addi	r6,r6,1021
   11624:	39f1c244 	addi	r7,r7,-14583
   11628:	1009883a 	mov	r4,r2
   1162c:	180b883a 	mov	r5,r3
   11630:	00145940 	call	14594 <__muldf3>
   11634:	018516f4 	movhi	r6,5211
   11638:	01ef8fb4 	movhi	r7,48702
   1163c:	800b883a 	mov	r5,r16
   11640:	31807d44 	addi	r6,r6,501
   11644:	39cbf804 	addi	r7,r7,12256
   11648:	0009883a 	mov	r4,zero
   1164c:	1029883a 	mov	r20,r2
   11650:	1823883a 	mov	r17,r3
   11654:	00145940 	call	14594 <__muldf3>
   11658:	a009883a 	mov	r4,r20
   1165c:	880b883a 	mov	r5,r17
   11660:	100d883a 	mov	r6,r2
   11664:	180f883a 	mov	r7,r3
   11668:	00130c00 	call	130c0 <__adddf3>
   1166c:	da400817 	ldw	r9,32(sp)
   11670:	da000a17 	ldw	r8,40(sp)
   11674:	180b883a 	mov	r5,r3
   11678:	480d883a 	mov	r6,r9
   1167c:	400f883a 	mov	r7,r8
   11680:	1009883a 	mov	r4,r2
   11684:	00130c00 	call	130c0 <__adddf3>
   11688:	db000917 	ldw	r12,36(sp)
   1168c:	1029883a 	mov	r20,r2
   11690:	1823883a 	mov	r17,r3
   11694:	6009883a 	mov	r4,r12
   11698:	001577c0 	call	1577c <__floatsidf>
   1169c:	d9000017 	ldw	r4,0(sp)
   116a0:	a00d883a 	mov	r6,r20
   116a4:	880f883a 	mov	r7,r17
   116a8:	900b883a 	mov	r5,r18
   116ac:	182f883a 	mov	r23,r3
   116b0:	d8800115 	stw	r2,4(sp)
   116b4:	00130c00 	call	130c0 <__adddf3>
   116b8:	d9c00217 	ldw	r7,8(sp)
   116bc:	980d883a 	mov	r6,r19
   116c0:	1009883a 	mov	r4,r2
   116c4:	180b883a 	mov	r5,r3
   116c8:	00130c00 	call	130c0 <__adddf3>
   116cc:	d9800117 	ldw	r6,4(sp)
   116d0:	b80f883a 	mov	r7,r23
   116d4:	1009883a 	mov	r4,r2
   116d8:	180b883a 	mov	r5,r3
   116dc:	00130c00 	call	130c0 <__adddf3>
   116e0:	d9800117 	ldw	r6,4(sp)
   116e4:	b80f883a 	mov	r7,r23
   116e8:	0009883a 	mov	r4,zero
   116ec:	180b883a 	mov	r5,r3
   116f0:	1821883a 	mov	r16,r3
   116f4:	0014e000 	call	14e00 <__subdf3>
   116f8:	d9c00217 	ldw	r7,8(sp)
   116fc:	980d883a 	mov	r6,r19
   11700:	1009883a 	mov	r4,r2
   11704:	180b883a 	mov	r5,r3
   11708:	0014e000 	call	14e00 <__subdf3>
   1170c:	d9800017 	ldw	r6,0(sp)
   11710:	900f883a 	mov	r7,r18
   11714:	1009883a 	mov	r4,r2
   11718:	180b883a 	mov	r5,r3
   1171c:	0014e000 	call	14e00 <__subdf3>
   11720:	880b883a 	mov	r5,r17
   11724:	100d883a 	mov	r6,r2
   11728:	180f883a 	mov	r7,r3
   1172c:	a009883a 	mov	r4,r20
   11730:	0014e000 	call	14e00 <__subdf3>
   11734:	dac00b17 	ldw	r11,44(sp)
   11738:	aabfffc4 	addi	r10,r21,-1
   1173c:	1025883a 	mov	r18,r2
   11740:	52d6b03a 	or	r11,r10,r11
   11744:	1823883a 	mov	r17,r3
   11748:	58015826 	beq	r11,zero,11cac <__ieee754_pow+0xe28>
   1174c:	04cffc34 	movhi	r19,16368
   11750:	b009883a 	mov	r4,r22
   11754:	000d883a 	mov	r6,zero
   11758:	e00f883a 	mov	r7,fp
   1175c:	e00b883a 	mov	r5,fp
   11760:	0014e000 	call	14e00 <__subdf3>
   11764:	800f883a 	mov	r7,r16
   11768:	000d883a 	mov	r6,zero
   1176c:	1009883a 	mov	r4,r2
   11770:	180b883a 	mov	r5,r3
   11774:	00145940 	call	14594 <__muldf3>
   11778:	b00d883a 	mov	r6,r22
   1177c:	9009883a 	mov	r4,r18
   11780:	880b883a 	mov	r5,r17
   11784:	e00f883a 	mov	r7,fp
   11788:	1829883a 	mov	r20,r3
   1178c:	102b883a 	mov	r21,r2
   11790:	00145940 	call	14594 <__muldf3>
   11794:	a00b883a 	mov	r5,r20
   11798:	100d883a 	mov	r6,r2
   1179c:	180f883a 	mov	r7,r3
   117a0:	a809883a 	mov	r4,r21
   117a4:	00130c00 	call	130c0 <__adddf3>
   117a8:	800b883a 	mov	r5,r16
   117ac:	000d883a 	mov	r6,zero
   117b0:	e00f883a 	mov	r7,fp
   117b4:	0009883a 	mov	r4,zero
   117b8:	102d883a 	mov	r22,r2
   117bc:	1829883a 	mov	r20,r3
   117c0:	00145940 	call	14594 <__muldf3>
   117c4:	100d883a 	mov	r6,r2
   117c8:	180f883a 	mov	r7,r3
   117cc:	b009883a 	mov	r4,r22
   117d0:	a00b883a 	mov	r5,r20
   117d4:	1025883a 	mov	r18,r2
   117d8:	1823883a 	mov	r17,r3
   117dc:	00130c00 	call	130c0 <__adddf3>
   117e0:	102f883a 	mov	r23,r2
   117e4:	00902434 	movhi	r2,16528
   117e8:	10bfffc4 	addi	r2,r2,-1
   117ec:	1821883a 	mov	r16,r3
   117f0:	9013883a 	mov	r9,r18
   117f4:	8811883a 	mov	r8,r17
   117f8:	10c1070e 	bge	r2,r3,11c18 <__ieee754_pow+0xd94>
   117fc:	00afdc34 	movhi	r2,49008
   11800:	1885883a 	add	r2,r3,r2
   11804:	15c4b03a 	or	r2,r2,r23
   11808:	1001901e 	bne	r2,zero,11e4c <__ieee754_pow+0xfc8>
   1180c:	01994b34 	movhi	r6,25900
   11810:	01cf25f4 	movhi	r7,15511
   11814:	31a0bf84 	addi	r6,r6,-32002
   11818:	39c551c4 	addi	r7,r7,5447
   1181c:	b009883a 	mov	r4,r22
   11820:	a00b883a 	mov	r5,r20
   11824:	00130c00 	call	130c0 <__adddf3>
   11828:	900d883a 	mov	r6,r18
   1182c:	880f883a 	mov	r7,r17
   11830:	b809883a 	mov	r4,r23
   11834:	800b883a 	mov	r5,r16
   11838:	1039883a 	mov	fp,r2
   1183c:	182b883a 	mov	r21,r3
   11840:	0014e000 	call	14e00 <__subdf3>
   11844:	100d883a 	mov	r6,r2
   11848:	180f883a 	mov	r7,r3
   1184c:	e009883a 	mov	r4,fp
   11850:	a80b883a 	mov	r5,r21
   11854:	00143c40 	call	143c4 <__gedf2>
   11858:	00817c16 	blt	zero,r2,11e4c <__ieee754_pow+0xfc8>
   1185c:	802b883a 	mov	r21,r16
   11860:	a805d53a 	srai	r2,r21,20
   11864:	00c00434 	movhi	r3,16
   11868:	01000434 	movhi	r4,16
   1186c:	10bf0084 	addi	r2,r2,-1022
   11870:	1885d83a 	sra	r2,r3,r2
   11874:	213fffc4 	addi	r4,r4,-1
   11878:	1405883a 	add	r2,r2,r16
   1187c:	1006907a 	slli	r3,r2,1
   11880:	112a703a 	and	r21,r2,r4
   11884:	ad400434 	orhi	r21,r21,16
   11888:	1806d57a 	srli	r3,r3,21
   1188c:	18ff0044 	addi	r3,r3,-1023
   11890:	20cfd83a 	sra	r7,r4,r3
   11894:	01000504 	movi	r4,20
   11898:	20c7c83a 	sub	r3,r4,r3
   1189c:	a8c7d83a 	sra	r3,r21,r3
   118a0:	01ce303a 	nor	r7,zero,r7
   118a4:	388e703a 	and	r7,r7,r2
   118a8:	d8c00015 	stw	r3,0(sp)
   118ac:	80019016 	blt	r16,zero,11ef0 <__ieee754_pow+0x106c>
   118b0:	000d883a 	mov	r6,zero
   118b4:	9009883a 	mov	r4,r18
   118b8:	880b883a 	mov	r5,r17
   118bc:	0014e000 	call	14e00 <__subdf3>
   118c0:	100d883a 	mov	r6,r2
   118c4:	180f883a 	mov	r7,r3
   118c8:	b009883a 	mov	r4,r22
   118cc:	a00b883a 	mov	r5,r20
   118d0:	d8c00a15 	stw	r3,40(sp)
   118d4:	d8800815 	stw	r2,32(sp)
   118d8:	00130c00 	call	130c0 <__adddf3>
   118dc:	d8800017 	ldw	r2,0(sp)
   118e0:	da000a17 	ldw	r8,40(sp)
   118e4:	da400817 	ldw	r9,32(sp)
   118e8:	1004953a 	slli	r2,r2,20
   118ec:	1821883a 	mov	r16,r3
   118f0:	d8800215 	stw	r2,8(sp)
   118f4:	01cff9b4 	movhi	r7,16358
   118f8:	800b883a 	mov	r5,r16
   118fc:	39cb90c4 	addi	r7,r7,11843
   11900:	0009883a 	mov	r4,zero
   11904:	000d883a 	mov	r6,zero
   11908:	da000a15 	stw	r8,40(sp)
   1190c:	da400815 	stw	r9,32(sp)
   11910:	00145940 	call	14594 <__muldf3>
   11914:	da400817 	ldw	r9,32(sp)
   11918:	da000a17 	ldw	r8,40(sp)
   1191c:	800b883a 	mov	r5,r16
   11920:	480d883a 	mov	r6,r9
   11924:	400f883a 	mov	r7,r8
   11928:	0009883a 	mov	r4,zero
   1192c:	1039883a 	mov	fp,r2
   11930:	182f883a 	mov	r23,r3
   11934:	0014e000 	call	14e00 <__subdf3>
   11938:	b009883a 	mov	r4,r22
   1193c:	a00b883a 	mov	r5,r20
   11940:	100d883a 	mov	r6,r2
   11944:	180f883a 	mov	r7,r3
   11948:	0014e000 	call	14e00 <__subdf3>
   1194c:	01bfbeb4 	movhi	r6,65274
   11950:	01cff9b4 	movhi	r7,16358
   11954:	318e7bc4 	addi	r6,r6,14831
   11958:	39cb9084 	addi	r7,r7,11842
   1195c:	1009883a 	mov	r4,r2
   11960:	180b883a 	mov	r5,r3
   11964:	00145940 	call	14594 <__muldf3>
   11968:	01832a34 	movhi	r6,3240
   1196c:	01ef8834 	movhi	r7,48672
   11970:	800b883a 	mov	r5,r16
   11974:	319b0e44 	addi	r6,r6,27705
   11978:	39d71844 	addi	r7,r7,23649
   1197c:	0009883a 	mov	r4,zero
   11980:	1029883a 	mov	r20,r2
   11984:	1823883a 	mov	r17,r3
   11988:	00145940 	call	14594 <__muldf3>
   1198c:	a009883a 	mov	r4,r20
   11990:	880b883a 	mov	r5,r17
   11994:	100d883a 	mov	r6,r2
   11998:	180f883a 	mov	r7,r3
   1199c:	00130c00 	call	130c0 <__adddf3>
   119a0:	e009883a 	mov	r4,fp
   119a4:	b80b883a 	mov	r5,r23
   119a8:	100d883a 	mov	r6,r2
   119ac:	180f883a 	mov	r7,r3
   119b0:	102d883a 	mov	r22,r2
   119b4:	1829883a 	mov	r20,r3
   119b8:	00130c00 	call	130c0 <__adddf3>
   119bc:	e00d883a 	mov	r6,fp
   119c0:	b80f883a 	mov	r7,r23
   119c4:	1009883a 	mov	r4,r2
   119c8:	180b883a 	mov	r5,r3
   119cc:	1023883a 	mov	r17,r2
   119d0:	1821883a 	mov	r16,r3
   119d4:	0014e000 	call	14e00 <__subdf3>
   119d8:	b009883a 	mov	r4,r22
   119dc:	a00b883a 	mov	r5,r20
   119e0:	100d883a 	mov	r6,r2
   119e4:	180f883a 	mov	r7,r3
   119e8:	0014e000 	call	14e00 <__subdf3>
   119ec:	880d883a 	mov	r6,r17
   119f0:	800f883a 	mov	r7,r16
   119f4:	8809883a 	mov	r4,r17
   119f8:	800b883a 	mov	r5,r16
   119fc:	1039883a 	mov	fp,r2
   11a00:	182f883a 	mov	r23,r3
   11a04:	00145940 	call	14594 <__muldf3>
   11a08:	019caff4 	movhi	r6,29375
   11a0c:	01cf99b4 	movhi	r7,15974
   11a10:	31a93404 	addi	r6,r6,-23344
   11a14:	39cdda44 	addi	r7,r7,14185
   11a18:	1009883a 	mov	r4,r2
   11a1c:	180b883a 	mov	r5,r3
   11a20:	102d883a 	mov	r22,r2
   11a24:	1829883a 	mov	r20,r3
   11a28:	00145940 	call	14594 <__muldf3>
   11a2c:	01b174b4 	movhi	r6,50642
   11a30:	01cfaf34 	movhi	r7,16060
   11a34:	319afc44 	addi	r6,r6,27633
   11a38:	39ef5044 	addi	r7,r7,-17087
   11a3c:	1009883a 	mov	r4,r2
   11a40:	180b883a 	mov	r5,r3
   11a44:	0014e000 	call	14e00 <__subdf3>
   11a48:	b00d883a 	mov	r6,r22
   11a4c:	a00f883a 	mov	r7,r20
   11a50:	1009883a 	mov	r4,r2
   11a54:	180b883a 	mov	r5,r3
   11a58:	00145940 	call	14594 <__muldf3>
   11a5c:	01abc9b4 	movhi	r6,44838
   11a60:	01cfc474 	movhi	r7,16145
   11a64:	31b78b04 	addi	r6,r6,-8660
   11a68:	39d59a84 	addi	r7,r7,22122
   11a6c:	1009883a 	mov	r4,r2
   11a70:	180b883a 	mov	r5,r3
   11a74:	00130c00 	call	130c0 <__adddf3>
   11a78:	b00d883a 	mov	r6,r22
   11a7c:	a00f883a 	mov	r7,r20
   11a80:	1009883a 	mov	r4,r2
   11a84:	180b883a 	mov	r5,r3
   11a88:	00145940 	call	14594 <__muldf3>
   11a8c:	0185aff4 	movhi	r6,5823
   11a90:	01cfd9f4 	movhi	r7,16231
   11a94:	31af64c4 	addi	r6,r6,-17005
   11a98:	39f05b04 	addi	r7,r7,-16020
   11a9c:	1009883a 	mov	r4,r2
   11aa0:	180b883a 	mov	r5,r3
   11aa4:	0014e000 	call	14e00 <__subdf3>
   11aa8:	b00d883a 	mov	r6,r22
   11aac:	a00f883a 	mov	r7,r20
   11ab0:	1009883a 	mov	r4,r2
   11ab4:	180b883a 	mov	r5,r3
   11ab8:	00145940 	call	14594 <__muldf3>
   11abc:	01955574 	movhi	r6,21845
   11ac0:	01cff174 	movhi	r7,16325
   11ac4:	31954f84 	addi	r6,r6,21822
   11ac8:	39d55544 	addi	r7,r7,21845
   11acc:	1009883a 	mov	r4,r2
   11ad0:	180b883a 	mov	r5,r3
   11ad4:	00130c00 	call	130c0 <__adddf3>
   11ad8:	b00d883a 	mov	r6,r22
   11adc:	a00f883a 	mov	r7,r20
   11ae0:	1009883a 	mov	r4,r2
   11ae4:	180b883a 	mov	r5,r3
   11ae8:	00145940 	call	14594 <__muldf3>
   11aec:	100d883a 	mov	r6,r2
   11af0:	180f883a 	mov	r7,r3
   11af4:	8809883a 	mov	r4,r17
   11af8:	800b883a 	mov	r5,r16
   11afc:	0014e000 	call	14e00 <__subdf3>
   11b00:	100d883a 	mov	r6,r2
   11b04:	180f883a 	mov	r7,r3
   11b08:	8809883a 	mov	r4,r17
   11b0c:	800b883a 	mov	r5,r16
   11b10:	102d883a 	mov	r22,r2
   11b14:	1829883a 	mov	r20,r3
   11b18:	00145940 	call	14594 <__muldf3>
   11b1c:	b009883a 	mov	r4,r22
   11b20:	a00b883a 	mov	r5,r20
   11b24:	000d883a 	mov	r6,zero
   11b28:	01d00034 	movhi	r7,16384
   11b2c:	1025883a 	mov	r18,r2
   11b30:	182b883a 	mov	r21,r3
   11b34:	0014e000 	call	14e00 <__subdf3>
   11b38:	100d883a 	mov	r6,r2
   11b3c:	180f883a 	mov	r7,r3
   11b40:	9009883a 	mov	r4,r18
   11b44:	a80b883a 	mov	r5,r21
   11b48:	001396c0 	call	1396c <__divdf3>
   11b4c:	e00d883a 	mov	r6,fp
   11b50:	b80f883a 	mov	r7,r23
   11b54:	8809883a 	mov	r4,r17
   11b58:	800b883a 	mov	r5,r16
   11b5c:	102d883a 	mov	r22,r2
   11b60:	1829883a 	mov	r20,r3
   11b64:	00145940 	call	14594 <__muldf3>
   11b68:	e00d883a 	mov	r6,fp
   11b6c:	b80f883a 	mov	r7,r23
   11b70:	1009883a 	mov	r4,r2
   11b74:	180b883a 	mov	r5,r3
   11b78:	00130c00 	call	130c0 <__adddf3>
   11b7c:	100d883a 	mov	r6,r2
   11b80:	180f883a 	mov	r7,r3
   11b84:	b009883a 	mov	r4,r22
   11b88:	a00b883a 	mov	r5,r20
   11b8c:	0014e000 	call	14e00 <__subdf3>
   11b90:	880d883a 	mov	r6,r17
   11b94:	800f883a 	mov	r7,r16
   11b98:	1009883a 	mov	r4,r2
   11b9c:	180b883a 	mov	r5,r3
   11ba0:	0014e000 	call	14e00 <__subdf3>
   11ba4:	0009883a 	mov	r4,zero
   11ba8:	014ffc34 	movhi	r5,16368
   11bac:	100d883a 	mov	r6,r2
   11bb0:	180f883a 	mov	r7,r3
   11bb4:	0014e000 	call	14e00 <__subdf3>
   11bb8:	d9000217 	ldw	r4,8(sp)
   11bbc:	190b883a 	add	r5,r3,r4
   11bc0:	2809d53a 	srai	r4,r5,20
   11bc4:	0100cd0e 	bge	zero,r4,11efc <__ieee754_pow+0x1078>
   11bc8:	1009883a 	mov	r4,r2
   11bcc:	000d883a 	mov	r6,zero
   11bd0:	980f883a 	mov	r7,r19
   11bd4:	00145940 	call	14594 <__muldf3>
   11bd8:	003ce606 	br	10f74 <__alt_data_end+0xffff0f74>
   11bdc:	00b00434 	movhi	r2,49168
   11be0:	8885883a 	add	r2,r17,r2
   11be4:	1544b03a 	or	r2,r2,r21
   11be8:	1000b326 	beq	r2,zero,11eb8 <__ieee754_pow+0x1034>
   11bec:	00800044 	movi	r2,1
   11bf0:	a8bd181e 	bne	r21,r2,11054 <__alt_data_end+0xffff1054>
   11bf4:	18e0003c 	xorhi	r3,r3,32768
   11bf8:	b805883a 	mov	r2,r23
   11bfc:	003cdd06 	br	10f74 <__alt_data_end+0xffff0f74>
   11c00:	800d883a 	mov	r6,r16
   11c04:	980f883a 	mov	r7,r19
   11c08:	8009883a 	mov	r4,r16
   11c0c:	980b883a 	mov	r5,r19
   11c10:	00145940 	call	14594 <__muldf3>
   11c14:	003cd706 	br	10f74 <__alt_data_end+0xffff0f74>
   11c18:	05600034 	movhi	r21,32768
   11c1c:	ad7fffc4 	addi	r21,r21,-1
   11c20:	00902474 	movhi	r2,16529
   11c24:	1d6a703a 	and	r21,r3,r21
   11c28:	10b2ffc4 	addi	r2,r2,-13313
   11c2c:	15409d0e 	bge	r2,r21,11ea4 <__ieee754_pow+0x1020>
   11c30:	008fdbf4 	movhi	r2,16239
   11c34:	108d0004 	addi	r2,r2,13312
   11c38:	1885883a 	add	r2,r3,r2
   11c3c:	15c4b03a 	or	r2,r2,r23
   11c40:	10000b1e 	bne	r2,zero,11c70 <__ieee754_pow+0xdec>
   11c44:	900d883a 	mov	r6,r18
   11c48:	880f883a 	mov	r7,r17
   11c4c:	b809883a 	mov	r4,r23
   11c50:	180b883a 	mov	r5,r3
   11c54:	0014e000 	call	14e00 <__subdf3>
   11c58:	100d883a 	mov	r6,r2
   11c5c:	180f883a 	mov	r7,r3
   11c60:	b009883a 	mov	r4,r22
   11c64:	a00b883a 	mov	r5,r20
   11c68:	00144a00 	call	144a0 <__ledf2>
   11c6c:	00befc16 	blt	zero,r2,11860 <__alt_data_end+0xffff1860>
   11c70:	01b0be74 	movhi	r6,49913
   11c74:	01c06974 	movhi	r7,421
   11c78:	980b883a 	mov	r5,r19
   11c7c:	31bcd644 	addi	r6,r6,-3239
   11c80:	39db87c4 	addi	r7,r7,28191
   11c84:	0009883a 	mov	r4,zero
   11c88:	00145940 	call	14594 <__muldf3>
   11c8c:	01b0be74 	movhi	r6,49913
   11c90:	01c06974 	movhi	r7,421
   11c94:	31bcd644 	addi	r6,r6,-3239
   11c98:	39db87c4 	addi	r7,r7,28191
   11c9c:	1009883a 	mov	r4,r2
   11ca0:	180b883a 	mov	r5,r3
   11ca4:	00145940 	call	14594 <__muldf3>
   11ca8:	003cb206 	br	10f74 <__alt_data_end+0xffff0f74>
   11cac:	04effc34 	movhi	r19,49136
   11cb0:	003ea706 	br	11750 <__alt_data_end+0xffff1750>
   11cb4:	e03cdc0e 	bge	fp,zero,11028 <__alt_data_end+0xffff1028>
   11cb8:	0005883a 	mov	r2,zero
   11cbc:	e0e0003c 	xorhi	r3,fp,32768
   11cc0:	003cac06 	br	10f74 <__alt_data_end+0xffff0f74>
   11cc4:	0019883a 	mov	r12,zero
   11cc8:	003d3206 	br	11194 <__alt_data_end+0xffff1194>
   11ccc:	008ffc34 	movhi	r2,16368
   11cd0:	10bfff84 	addi	r2,r2,-2
   11cd4:	147cd30e 	bge	r2,r17,11024 <__alt_data_end+0xffff1024>
   11cd8:	01cffc34 	movhi	r7,16368
   11cdc:	3c7cea16 	blt	r7,r17,11088 <__alt_data_end+0xffff1088>
   11ce0:	b809883a 	mov	r4,r23
   11ce4:	000d883a 	mov	r6,zero
   11ce8:	180b883a 	mov	r5,r3
   11cec:	dac00b15 	stw	r11,44(sp)
   11cf0:	0014e000 	call	14e00 <__subdf3>
   11cf4:	01cffdf4 	movhi	r7,16375
   11cf8:	39c551c4 	addi	r7,r7,5447
   11cfc:	01980034 	movhi	r6,24576
   11d00:	1009883a 	mov	r4,r2
   11d04:	180b883a 	mov	r5,r3
   11d08:	1023883a 	mov	r17,r2
   11d0c:	1821883a 	mov	r16,r3
   11d10:	00145940 	call	14594 <__muldf3>
   11d14:	01be17b4 	movhi	r6,63582
   11d18:	01cf9574 	movhi	r7,15957
   11d1c:	8809883a 	mov	r4,r17
   11d20:	800b883a 	mov	r5,r16
   11d24:	31b7d104 	addi	r6,r6,-8380
   11d28:	39eb82c4 	addi	r7,r7,-20981
   11d2c:	1027883a 	mov	r19,r2
   11d30:	1825883a 	mov	r18,r3
   11d34:	00145940 	call	14594 <__muldf3>
   11d38:	8809883a 	mov	r4,r17
   11d3c:	800b883a 	mov	r5,r16
   11d40:	000d883a 	mov	r6,zero
   11d44:	01cff434 	movhi	r7,16336
   11d48:	1829883a 	mov	r20,r3
   11d4c:	d8800a15 	stw	r2,40(sp)
   11d50:	00145940 	call	14594 <__muldf3>
   11d54:	01155574 	movhi	r4,21845
   11d58:	014ff574 	movhi	r5,16341
   11d5c:	100d883a 	mov	r6,r2
   11d60:	180f883a 	mov	r7,r3
   11d64:	21155544 	addi	r4,r4,21845
   11d68:	29555544 	addi	r5,r5,21845
   11d6c:	0014e000 	call	14e00 <__subdf3>
   11d70:	880d883a 	mov	r6,r17
   11d74:	800f883a 	mov	r7,r16
   11d78:	1009883a 	mov	r4,r2
   11d7c:	180b883a 	mov	r5,r3
   11d80:	00145940 	call	14594 <__muldf3>
   11d84:	100d883a 	mov	r6,r2
   11d88:	180f883a 	mov	r7,r3
   11d8c:	0009883a 	mov	r4,zero
   11d90:	014ff834 	movhi	r5,16352
   11d94:	0014e000 	call	14e00 <__subdf3>
   11d98:	880d883a 	mov	r6,r17
   11d9c:	800f883a 	mov	r7,r16
   11da0:	8809883a 	mov	r4,r17
   11da4:	800b883a 	mov	r5,r16
   11da8:	102f883a 	mov	r23,r2
   11dac:	d8c00815 	stw	r3,32(sp)
   11db0:	00145940 	call	14594 <__muldf3>
   11db4:	da400817 	ldw	r9,32(sp)
   11db8:	100d883a 	mov	r6,r2
   11dbc:	180f883a 	mov	r7,r3
   11dc0:	480b883a 	mov	r5,r9
   11dc4:	b809883a 	mov	r4,r23
   11dc8:	00145940 	call	14594 <__muldf3>
   11dcc:	01994b34 	movhi	r6,25900
   11dd0:	01cffdf4 	movhi	r7,16375
   11dd4:	31a0bf84 	addi	r6,r6,-32002
   11dd8:	39c551c4 	addi	r7,r7,5447
   11ddc:	1009883a 	mov	r4,r2
   11de0:	180b883a 	mov	r5,r3
   11de4:	00145940 	call	14594 <__muldf3>
   11de8:	da000a17 	ldw	r8,40(sp)
   11dec:	a00b883a 	mov	r5,r20
   11df0:	100d883a 	mov	r6,r2
   11df4:	4009883a 	mov	r4,r8
   11df8:	180f883a 	mov	r7,r3
   11dfc:	0014e000 	call	14e00 <__subdf3>
   11e00:	100d883a 	mov	r6,r2
   11e04:	180f883a 	mov	r7,r3
   11e08:	9809883a 	mov	r4,r19
   11e0c:	900b883a 	mov	r5,r18
   11e10:	1029883a 	mov	r20,r2
   11e14:	1823883a 	mov	r17,r3
   11e18:	00130c00 	call	130c0 <__adddf3>
   11e1c:	1821883a 	mov	r16,r3
   11e20:	980d883a 	mov	r6,r19
   11e24:	900f883a 	mov	r7,r18
   11e28:	0009883a 	mov	r4,zero
   11e2c:	180b883a 	mov	r5,r3
   11e30:	003e3a06 	br	1171c <__alt_data_end+0xffff171c>
   11e34:	800d883a 	mov	r6,r16
   11e38:	980f883a 	mov	r7,r19
   11e3c:	0009883a 	mov	r4,zero
   11e40:	900b883a 	mov	r5,r18
   11e44:	001396c0 	call	1396c <__divdf3>
   11e48:	003c4a06 	br	10f74 <__alt_data_end+0xffff0f74>
   11e4c:	01a20034 	movhi	r6,34816
   11e50:	01df8e34 	movhi	r7,32312
   11e54:	980b883a 	mov	r5,r19
   11e58:	319d6704 	addi	r6,r6,30108
   11e5c:	39f90f04 	addi	r7,r7,-7108
   11e60:	0009883a 	mov	r4,zero
   11e64:	00145940 	call	14594 <__muldf3>
   11e68:	01a20034 	movhi	r6,34816
   11e6c:	01df8e34 	movhi	r7,32312
   11e70:	319d6704 	addi	r6,r6,30108
   11e74:	39f90f04 	addi	r7,r7,-7108
   11e78:	1009883a 	mov	r4,r2
   11e7c:	180b883a 	mov	r5,r3
   11e80:	00145940 	call	14594 <__muldf3>
   11e84:	003c3b06 	br	10f74 <__alt_data_end+0xffff0f74>
   11e88:	303c551e 	bne	r6,zero,10fe0 <__alt_data_end+0xffff0fe0>
   11e8c:	1885c83a 	sub	r2,r3,r2
   11e90:	9087d83a 	sra	r3,r18,r2
   11e94:	1884983a 	sll	r2,r3,r2
   11e98:	90801f26 	beq	r18,r2,11f18 <__ieee754_pow+0x1094>
   11e9c:	002b883a 	mov	r21,zero
   11ea0:	003c1806 	br	10f04 <__alt_data_end+0xffff0f04>
   11ea4:	008ff834 	movhi	r2,16352
   11ea8:	157e6d16 	blt	r2,r21,11860 <__alt_data_end+0xffff1860>
   11eac:	d8000215 	stw	zero,8(sp)
   11eb0:	d8000015 	stw	zero,0(sp)
   11eb4:	003e8f06 	br	118f4 <__alt_data_end+0xffff18f4>
   11eb8:	b80d883a 	mov	r6,r23
   11ebc:	180f883a 	mov	r7,r3
   11ec0:	003c9e06 	br	1113c <__alt_data_end+0xffff113c>
   11ec4:	008ff8f4 	movhi	r2,16355
   11ec8:	10ae00c4 	addi	r2,r2,-18429
   11ecc:	0250f434 	movhi	r9,17360
   11ed0:	020f9374 	movhi	r8,15949
   11ed4:	d8800215 	stw	r2,8(sp)
   11ed8:	4a740184 	addi	r9,r9,-12282
   11edc:	423f7ac4 	addi	r8,r8,-533
   11ee0:	04d00034 	movhi	r19,16384
   11ee4:	02800134 	movhi	r10,4
   11ee8:	048ffe34 	movhi	r18,16376
   11eec:	003cbf06 	br	111ec <__alt_data_end+0xffff11ec>
   11ef0:	00c9c83a 	sub	r4,zero,r3
   11ef4:	d9000015 	stw	r4,0(sp)
   11ef8:	003e6d06 	br	118b0 <__alt_data_end+0xffff18b0>
   11efc:	d9800017 	ldw	r6,0(sp)
   11f00:	1009883a 	mov	r4,r2
   11f04:	180b883a 	mov	r5,r3
   11f08:	00124540 	call	12454 <scalbn>
   11f0c:	1009883a 	mov	r4,r2
   11f10:	180b883a 	mov	r5,r3
   11f14:	003f2d06 	br	11bcc <__alt_data_end+0xffff1bcc>
   11f18:	18c0004c 	andi	r3,r3,1
   11f1c:	02800084 	movi	r10,2
   11f20:	50ebc83a 	sub	r21,r10,r3
   11f24:	003bf706 	br	10f04 <__alt_data_end+0xffff0f04>

00011f28 <__ieee754_sqrt>:
   11f28:	defffd04 	addi	sp,sp,-12
   11f2c:	dc400115 	stw	r17,4(sp)
   11f30:	dc000015 	stw	r16,0(sp)
   11f34:	dfc00215 	stw	ra,8(sp)
   11f38:	28dffc2c 	andhi	r3,r5,32752
   11f3c:	009ffc34 	movhi	r2,32752
   11f40:	2821883a 	mov	r16,r5
   11f44:	2023883a 	mov	r17,r4
   11f48:	200d883a 	mov	r6,r4
   11f4c:	18807b26 	beq	r3,r2,1213c <__ieee754_sqrt+0x214>
   11f50:	01405f0e 	bge	zero,r5,120d0 <__ieee754_sqrt+0x1a8>
   11f54:	2815d53a 	srai	r10,r5,20
   11f58:	50006a26 	beq	r10,zero,12104 <__ieee754_sqrt+0x1dc>
   11f5c:	00c00434 	movhi	r3,16
   11f60:	52bf0044 	addi	r10,r10,-1023
   11f64:	18ffffc4 	addi	r3,r3,-1
   11f68:	80c6703a 	and	r3,r16,r3
   11f6c:	5080004c 	andi	r2,r10,1
   11f70:	18c00434 	orhi	r3,r3,16
   11f74:	1000511e 	bne	r2,zero,120bc <__ieee754_sqrt+0x194>
   11f78:	3004d7fa 	srli	r2,r6,31
   11f7c:	5015d07a 	srai	r10,r10,1
   11f80:	18c7883a 	add	r3,r3,r3
   11f84:	10c5883a 	add	r2,r2,r3
   11f88:	01400584 	movi	r5,22
   11f8c:	3187883a 	add	r3,r6,r6
   11f90:	0013883a 	mov	r9,zero
   11f94:	000f883a 	mov	r7,zero
   11f98:	01000834 	movhi	r4,32
   11f9c:	390d883a 	add	r6,r7,r4
   11fa0:	1810d7fa 	srli	r8,r3,31
   11fa4:	297fffc4 	addi	r5,r5,-1
   11fa8:	11800316 	blt	r2,r6,11fb8 <__ieee754_sqrt+0x90>
   11fac:	1185c83a 	sub	r2,r2,r6
   11fb0:	310f883a 	add	r7,r6,r4
   11fb4:	4913883a 	add	r9,r9,r4
   11fb8:	1085883a 	add	r2,r2,r2
   11fbc:	4085883a 	add	r2,r8,r2
   11fc0:	18c7883a 	add	r3,r3,r3
   11fc4:	2008d07a 	srli	r4,r4,1
   11fc8:	283ff41e 	bne	r5,zero,11f9c <__alt_data_end+0xffff1f9c>
   11fcc:	01200034 	movhi	r4,32768
   11fd0:	01800804 	movi	r6,32
   11fd4:	0011883a 	mov	r8,zero
   11fd8:	0019883a 	mov	r12,zero
   11fdc:	201b883a 	mov	r13,r4
   11fe0:	00000806 	br	12004 <__ieee754_sqrt+0xdc>
   11fe4:	38801726 	beq	r7,r2,12044 <__ieee754_sqrt+0x11c>
   11fe8:	180ad7fa 	srli	r5,r3,31
   11fec:	1085883a 	add	r2,r2,r2
   11ff0:	31bfffc4 	addi	r6,r6,-1
   11ff4:	2885883a 	add	r2,r5,r2
   11ff8:	18c7883a 	add	r3,r3,r3
   11ffc:	2008d07a 	srli	r4,r4,1
   12000:	30001726 	beq	r6,zero,12060 <__ieee754_sqrt+0x138>
   12004:	230b883a 	add	r5,r4,r12
   12008:	38bff60e 	bge	r7,r2,11fe4 <__alt_data_end+0xffff1fe4>
   1200c:	2ae0002c 	andhi	r11,r5,32768
   12010:	2919883a 	add	r12,r5,r4
   12014:	5b400826 	beq	r11,r13,12038 <__ieee754_sqrt+0x110>
   12018:	3817883a 	mov	r11,r7
   1201c:	11c5c83a 	sub	r2,r2,r7
   12020:	1940012e 	bgeu	r3,r5,12028 <__ieee754_sqrt+0x100>
   12024:	10bfffc4 	addi	r2,r2,-1
   12028:	1947c83a 	sub	r3,r3,r5
   1202c:	4111883a 	add	r8,r8,r4
   12030:	580f883a 	mov	r7,r11
   12034:	003fec06 	br	11fe8 <__alt_data_end+0xffff1fe8>
   12038:	603ff716 	blt	r12,zero,12018 <__alt_data_end+0xffff2018>
   1203c:	3ac00044 	addi	r11,r7,1
   12040:	003ff606 	br	1201c <__alt_data_end+0xffff201c>
   12044:	19401936 	bltu	r3,r5,120ac <__ieee754_sqrt+0x184>
   12048:	2ae0002c 	andhi	r11,r5,32768
   1204c:	2919883a 	add	r12,r5,r4
   12050:	5b404526 	beq	r11,r13,12168 <__ieee754_sqrt+0x240>
   12054:	1017883a 	mov	r11,r2
   12058:	0005883a 	mov	r2,zero
   1205c:	003ff206 	br	12028 <__alt_data_end+0xffff2028>
   12060:	10c4b03a 	or	r2,r2,r3
   12064:	10000426 	beq	r2,zero,12078 <__ieee754_sqrt+0x150>
   12068:	00bfffc4 	movi	r2,-1
   1206c:	40804026 	beq	r8,r2,12170 <__ieee754_sqrt+0x248>
   12070:	4080004c 	andi	r2,r8,1
   12074:	4091883a 	add	r8,r8,r2
   12078:	4004d07a 	srli	r2,r8,1
   1207c:	4807d07a 	srai	r3,r9,1
   12080:	010ff834 	movhi	r4,16352
   12084:	4a40004c 	andi	r9,r9,1
   12088:	1909883a 	add	r4,r3,r4
   1208c:	4800091e 	bne	r9,zero,120b4 <__ieee754_sqrt+0x18c>
   12090:	5006953a 	slli	r3,r10,20
   12094:	1907883a 	add	r3,r3,r4
   12098:	dfc00217 	ldw	ra,8(sp)
   1209c:	dc400117 	ldw	r17,4(sp)
   120a0:	dc000017 	ldw	r16,0(sp)
   120a4:	dec00304 	addi	sp,sp,12
   120a8:	f800283a 	ret
   120ac:	3805883a 	mov	r2,r7
   120b0:	003fcd06 	br	11fe8 <__alt_data_end+0xffff1fe8>
   120b4:	10a00034 	orhi	r2,r2,32768
   120b8:	003ff506 	br	12090 <__alt_data_end+0xffff2090>
   120bc:	3004d7fa 	srli	r2,r6,31
   120c0:	18c7883a 	add	r3,r3,r3
   120c4:	318d883a 	add	r6,r6,r6
   120c8:	10c7883a 	add	r3,r2,r3
   120cc:	003faa06 	br	11f78 <__alt_data_end+0xffff1f78>
   120d0:	00a00034 	movhi	r2,32768
   120d4:	10bfffc4 	addi	r2,r2,-1
   120d8:	2884703a 	and	r2,r5,r2
   120dc:	1104b03a 	or	r2,r2,r4
   120e0:	10001e26 	beq	r2,zero,1215c <__ieee754_sqrt+0x234>
   120e4:	2800291e 	bne	r5,zero,1218c <__ieee754_sqrt+0x264>
   120e8:	0015883a 	mov	r10,zero
   120ec:	3020d2fa 	srli	r16,r6,11
   120f0:	52bffac4 	addi	r10,r10,-21
   120f4:	300c957a 	slli	r6,r6,21
   120f8:	803ffc26 	beq	r16,zero,120ec <__alt_data_end+0xffff20ec>
   120fc:	8080042c 	andhi	r2,r16,16
   12100:	10001e1e 	bne	r2,zero,1217c <__ieee754_sqrt+0x254>
   12104:	0005883a 	mov	r2,zero
   12108:	00000106 	br	12110 <__ieee754_sqrt+0x1e8>
   1210c:	1805883a 	mov	r2,r3
   12110:	8421883a 	add	r16,r16,r16
   12114:	8100042c 	andhi	r4,r16,16
   12118:	10c00044 	addi	r3,r2,1
   1211c:	203ffb26 	beq	r4,zero,1210c <__alt_data_end+0xffff210c>
   12120:	01000804 	movi	r4,32
   12124:	20c9c83a 	sub	r4,r4,r3
   12128:	3108d83a 	srl	r4,r6,r4
   1212c:	5095c83a 	sub	r10,r10,r2
   12130:	30cc983a 	sll	r6,r6,r3
   12134:	2420b03a 	or	r16,r4,r16
   12138:	003f8806 	br	11f5c <__alt_data_end+0xffff1f5c>
   1213c:	280f883a 	mov	r7,r5
   12140:	00145940 	call	14594 <__muldf3>
   12144:	880d883a 	mov	r6,r17
   12148:	800f883a 	mov	r7,r16
   1214c:	1009883a 	mov	r4,r2
   12150:	180b883a 	mov	r5,r3
   12154:	00130c00 	call	130c0 <__adddf3>
   12158:	003fcf06 	br	12098 <__alt_data_end+0xffff2098>
   1215c:	2005883a 	mov	r2,r4
   12160:	2807883a 	mov	r3,r5
   12164:	003fcc06 	br	12098 <__alt_data_end+0xffff2098>
   12168:	603fba16 	blt	r12,zero,12054 <__alt_data_end+0xffff2054>
   1216c:	003fb306 	br	1203c <__alt_data_end+0xffff203c>
   12170:	4a400044 	addi	r9,r9,1
   12174:	0005883a 	mov	r2,zero
   12178:	003fc006 	br	1207c <__alt_data_end+0xffff207c>
   1217c:	01000804 	movi	r4,32
   12180:	00bfffc4 	movi	r2,-1
   12184:	0007883a 	mov	r3,zero
   12188:	003fe706 	br	12128 <__alt_data_end+0xffff2128>
   1218c:	200d883a 	mov	r6,r4
   12190:	280f883a 	mov	r7,r5
   12194:	0014e000 	call	14e00 <__subdf3>
   12198:	100d883a 	mov	r6,r2
   1219c:	180f883a 	mov	r7,r3
   121a0:	1009883a 	mov	r4,r2
   121a4:	180b883a 	mov	r5,r3
   121a8:	001396c0 	call	1396c <__divdf3>
   121ac:	003fba06 	br	12098 <__alt_data_end+0xffff2098>

000121b0 <fabs>:
   121b0:	00e00034 	movhi	r3,32768
   121b4:	18ffffc4 	addi	r3,r3,-1
   121b8:	2005883a 	mov	r2,r4
   121bc:	28c6703a 	and	r3,r5,r3
   121c0:	f800283a 	ret

000121c4 <finite>:
   121c4:	00a00034 	movhi	r2,32768
   121c8:	10bfffc4 	addi	r2,r2,-1
   121cc:	288a703a 	and	r5,r5,r2
   121d0:	00e00434 	movhi	r3,32784
   121d4:	28c5883a 	add	r2,r5,r3
   121d8:	1004d7fa 	srli	r2,r2,31
   121dc:	f800283a 	ret

000121e0 <__fpclassifyd>:
   121e0:	00a00034 	movhi	r2,32768
   121e4:	10bfffc4 	addi	r2,r2,-1
   121e8:	2884703a 	and	r2,r5,r2
   121ec:	10000726 	beq	r2,zero,1220c <__fpclassifyd+0x2c>
   121f0:	00fffc34 	movhi	r3,65520
   121f4:	019ff834 	movhi	r6,32736
   121f8:	28c7883a 	add	r3,r5,r3
   121fc:	31bfffc4 	addi	r6,r6,-1
   12200:	30c00536 	bltu	r6,r3,12218 <__fpclassifyd+0x38>
   12204:	00800104 	movi	r2,4
   12208:	f800283a 	ret
   1220c:	2000021e 	bne	r4,zero,12218 <__fpclassifyd+0x38>
   12210:	00800084 	movi	r2,2
   12214:	f800283a 	ret
   12218:	00dffc34 	movhi	r3,32752
   1221c:	019ff834 	movhi	r6,32736
   12220:	28cb883a 	add	r5,r5,r3
   12224:	31bfffc4 	addi	r6,r6,-1
   12228:	317ff62e 	bgeu	r6,r5,12204 <__alt_data_end+0xffff2204>
   1222c:	01400434 	movhi	r5,16
   12230:	297fffc4 	addi	r5,r5,-1
   12234:	28800236 	bltu	r5,r2,12240 <__fpclassifyd+0x60>
   12238:	008000c4 	movi	r2,3
   1223c:	f800283a 	ret
   12240:	10c00226 	beq	r2,r3,1224c <__fpclassifyd+0x6c>
   12244:	0005883a 	mov	r2,zero
   12248:	f800283a 	ret
   1224c:	2005003a 	cmpeq	r2,r4,zero
   12250:	f800283a 	ret

00012254 <matherr>:
   12254:	0005883a 	mov	r2,zero
   12258:	f800283a 	ret

0001225c <nan>:
   1225c:	0005883a 	mov	r2,zero
   12260:	00dffe34 	movhi	r3,32760
   12264:	f800283a 	ret

00012268 <rint>:
   12268:	2813d53a 	srai	r9,r5,20
   1226c:	defff904 	addi	sp,sp,-28
   12270:	dc000215 	stw	r16,8(sp)
   12274:	4a41ffcc 	andi	r9,r9,2047
   12278:	dfc00615 	stw	ra,24(sp)
   1227c:	dcc00515 	stw	r19,20(sp)
   12280:	dc800415 	stw	r18,16(sp)
   12284:	dc400315 	stw	r17,12(sp)
   12288:	01c004c4 	movi	r7,19
   1228c:	49bf0044 	addi	r6,r9,-1023
   12290:	2811883a 	mov	r8,r5
   12294:	2005883a 	mov	r2,r4
   12298:	2807883a 	mov	r3,r5
   1229c:	2015883a 	mov	r10,r4
   122a0:	2820d7fa 	srli	r16,r5,31
   122a4:	39801316 	blt	r7,r6,122f4 <rint+0x8c>
   122a8:	30003d16 	blt	r6,zero,123a0 <rint+0x138>
   122ac:	01000434 	movhi	r4,16
   122b0:	213fffc4 	addi	r4,r4,-1
   122b4:	2189d83a 	sra	r4,r4,r6
   122b8:	290a703a 	and	r5,r5,r4
   122bc:	288ab03a 	or	r5,r5,r2
   122c0:	28001026 	beq	r5,zero,12304 <rint+0x9c>
   122c4:	2008d07a 	srli	r4,r4,1
   122c8:	4104703a 	and	r2,r8,r4
   122cc:	1294b03a 	or	r10,r2,r10
   122d0:	50005626 	beq	r10,zero,1242c <rint+0x1c4>
   122d4:	31c05d26 	beq	r6,r7,1244c <rint+0x1e4>
   122d8:	0015883a 	mov	r10,zero
   122dc:	00c00134 	movhi	r3,4
   122e0:	1987d83a 	sra	r3,r3,r6
   122e4:	0108303a 	nor	r4,zero,r4
   122e8:	2210703a 	and	r8,r4,r8
   122ec:	40c6b03a 	or	r3,r8,r3
   122f0:	00001806 	br	12354 <rint+0xec>
   122f4:	01c00cc4 	movi	r7,51
   122f8:	3980090e 	bge	r7,r6,12320 <rint+0xb8>
   122fc:	01c10004 	movi	r7,1024
   12300:	31c04e26 	beq	r6,r7,1243c <rint+0x1d4>
   12304:	dfc00617 	ldw	ra,24(sp)
   12308:	dcc00517 	ldw	r19,20(sp)
   1230c:	dc800417 	ldw	r18,16(sp)
   12310:	dc400317 	ldw	r17,12(sp)
   12314:	dc000217 	ldw	r16,8(sp)
   12318:	dec00704 	addi	sp,sp,28
   1231c:	f800283a 	ret
   12320:	4a7efb44 	addi	r9,r9,-1043
   12324:	013fffc4 	movi	r4,-1
   12328:	2248d83a 	srl	r4,r4,r9
   1232c:	110a703a 	and	r5,r2,r4
   12330:	28004026 	beq	r5,zero,12434 <rint+0x1cc>
   12334:	2008d07a 	srli	r4,r4,1
   12338:	1104703a 	and	r2,r2,r4
   1233c:	10000526 	beq	r2,zero,12354 <rint+0xec>
   12340:	00900034 	movhi	r2,16384
   12344:	1253d83a 	sra	r9,r2,r9
   12348:	0108303a 	nor	r4,zero,r4
   1234c:	2294703a 	and	r10,r4,r10
   12350:	4a94b03a 	or	r10,r9,r10
   12354:	802090fa 	slli	r16,r16,3
   12358:	180b883a 	mov	r5,r3
   1235c:	00c00074 	movhi	r3,1
   12360:	18dc7204 	addi	r3,r3,29128
   12364:	1c21883a 	add	r16,r3,r16
   12368:	84400017 	ldw	r17,0(r16)
   1236c:	84000117 	ldw	r16,4(r16)
   12370:	5009883a 	mov	r4,r10
   12374:	880d883a 	mov	r6,r17
   12378:	800f883a 	mov	r7,r16
   1237c:	00130c00 	call	130c0 <__adddf3>
   12380:	d8800015 	stw	r2,0(sp)
   12384:	d8c00115 	stw	r3,4(sp)
   12388:	d9000017 	ldw	r4,0(sp)
   1238c:	d9400117 	ldw	r5,4(sp)
   12390:	880d883a 	mov	r6,r17
   12394:	800f883a 	mov	r7,r16
   12398:	0014e000 	call	14e00 <__subdf3>
   1239c:	003fd906 	br	12304 <__alt_data_end+0xffff2304>
   123a0:	04600034 	movhi	r17,32768
   123a4:	8c7fffc4 	addi	r17,r17,-1
   123a8:	2c46703a 	and	r3,r5,r17
   123ac:	1906b03a 	or	r3,r3,r4
   123b0:	18002026 	beq	r3,zero,12434 <rint+0x1cc>
   123b4:	01800434 	movhi	r6,16
   123b8:	31bfffc4 	addi	r6,r6,-1
   123bc:	298c703a 	and	r6,r5,r6
   123c0:	3104b03a 	or	r2,r6,r4
   123c4:	008bc83a 	sub	r5,zero,r2
   123c8:	800690fa 	slli	r3,r16,3
   123cc:	2884b03a 	or	r2,r5,r2
   123d0:	01400074 	movhi	r5,1
   123d4:	295c7204 	addi	r5,r5,29128
   123d8:	28c7883a 	add	r3,r5,r3
   123dc:	1004d33a 	srli	r2,r2,12
   123e0:	1cc00017 	ldw	r19,0(r3)
   123e4:	1c800117 	ldw	r18,4(r3)
   123e8:	417fffac 	andhi	r5,r8,65534
   123ec:	1080022c 	andhi	r2,r2,8
   123f0:	980d883a 	mov	r6,r19
   123f4:	900f883a 	mov	r7,r18
   123f8:	114ab03a 	or	r5,r2,r5
   123fc:	00130c00 	call	130c0 <__adddf3>
   12400:	d8800015 	stw	r2,0(sp)
   12404:	d8c00115 	stw	r3,4(sp)
   12408:	d9000017 	ldw	r4,0(sp)
   1240c:	d9400117 	ldw	r5,4(sp)
   12410:	980d883a 	mov	r6,r19
   12414:	900f883a 	mov	r7,r18
   12418:	0014e000 	call	14e00 <__subdf3>
   1241c:	800897fa 	slli	r4,r16,31
   12420:	1c46703a 	and	r3,r3,r17
   12424:	1906b03a 	or	r3,r3,r4
   12428:	003fb606 	br	12304 <__alt_data_end+0xffff2304>
   1242c:	0015883a 	mov	r10,zero
   12430:	003fc806 	br	12354 <__alt_data_end+0xffff2354>
   12434:	4007883a 	mov	r3,r8
   12438:	003fb206 	br	12304 <__alt_data_end+0xffff2304>
   1243c:	200d883a 	mov	r6,r4
   12440:	280f883a 	mov	r7,r5
   12444:	00130c00 	call	130c0 <__adddf3>
   12448:	003fae06 	br	12304 <__alt_data_end+0xffff2304>
   1244c:	02a00034 	movhi	r10,32768
   12450:	003fa206 	br	122dc <__alt_data_end+0xffff22dc>

00012454 <scalbn>:
   12454:	2a1ffc2c 	andhi	r8,r5,32752
   12458:	4011d53a 	srai	r8,r8,20
   1245c:	defffe04 	addi	sp,sp,-8
   12460:	dc000015 	stw	r16,0(sp)
   12464:	dfc00115 	stw	ra,4(sp)
   12468:	280f883a 	mov	r7,r5
   1246c:	2015883a 	mov	r10,r4
   12470:	3021883a 	mov	r16,r6
   12474:	40001e1e 	bne	r8,zero,124f0 <scalbn+0x9c>
   12478:	00a00034 	movhi	r2,32768
   1247c:	10bfffc4 	addi	r2,r2,-1
   12480:	2884703a 	and	r2,r5,r2
   12484:	1104b03a 	or	r2,r2,r4
   12488:	10002226 	beq	r2,zero,12514 <scalbn+0xc0>
   1248c:	01d0d434 	movhi	r7,17232
   12490:	000d883a 	mov	r6,zero
   12494:	00145940 	call	14594 <__muldf3>
   12498:	013ffff4 	movhi	r4,65535
   1249c:	210f2c04 	addi	r4,r4,15536
   124a0:	1015883a 	mov	r10,r2
   124a4:	180f883a 	mov	r7,r3
   124a8:	81002a16 	blt	r16,r4,12554 <scalbn+0x100>
   124ac:	191ffc2c 	andhi	r4,r3,32752
   124b0:	2009d53a 	srai	r4,r4,20
   124b4:	223ff284 	addi	r8,r4,-54
   124b8:	8211883a 	add	r8,r16,r8
   124bc:	0081ff84 	movi	r2,2046
   124c0:	12002f16 	blt	r2,r8,12580 <scalbn+0x12c>
   124c4:	0200190e 	bge	zero,r8,1252c <scalbn+0xd8>
   124c8:	4010953a 	slli	r8,r8,20
   124cc:	01600434 	movhi	r5,32784
   124d0:	297fffc4 	addi	r5,r5,-1
   124d4:	194e703a 	and	r7,r3,r5
   124d8:	5005883a 	mov	r2,r10
   124dc:	3a06b03a 	or	r3,r7,r8
   124e0:	dfc00117 	ldw	ra,4(sp)
   124e4:	dc000017 	ldw	r16,0(sp)
   124e8:	dec00204 	addi	sp,sp,8
   124ec:	f800283a 	ret
   124f0:	0081ffc4 	movi	r2,2047
   124f4:	2807883a 	mov	r3,r5
   124f8:	40bfef1e 	bne	r8,r2,124b8 <__alt_data_end+0xffff24b8>
   124fc:	200d883a 	mov	r6,r4
   12500:	00130c00 	call	130c0 <__adddf3>
   12504:	dfc00117 	ldw	ra,4(sp)
   12508:	dc000017 	ldw	r16,0(sp)
   1250c:	dec00204 	addi	sp,sp,8
   12510:	f800283a 	ret
   12514:	2005883a 	mov	r2,r4
   12518:	2807883a 	mov	r3,r5
   1251c:	dfc00117 	ldw	ra,4(sp)
   12520:	dc000017 	ldw	r16,0(sp)
   12524:	dec00204 	addi	sp,sp,8
   12528:	f800283a 	ret
   1252c:	00bff2c4 	movi	r2,-53
   12530:	4080240e 	bge	r8,r2,125c4 <scalbn+0x170>
   12534:	00b0d414 	movui	r2,50000
   12538:	14001116 	blt	r2,r16,12580 <scalbn+0x12c>
   1253c:	0130be74 	movhi	r4,49913
   12540:	01406974 	movhi	r5,421
   12544:	213cd644 	addi	r4,r4,-3239
   12548:	295b87c4 	addi	r5,r5,28191
   1254c:	500d883a 	mov	r6,r10
   12550:	00125f00 	call	125f0 <copysign>
   12554:	01b0be74 	movhi	r6,49913
   12558:	01c06974 	movhi	r7,421
   1255c:	31bcd644 	addi	r6,r6,-3239
   12560:	39db87c4 	addi	r7,r7,28191
   12564:	1009883a 	mov	r4,r2
   12568:	180b883a 	mov	r5,r3
   1256c:	00145940 	call	14594 <__muldf3>
   12570:	dfc00117 	ldw	ra,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00204 	addi	sp,sp,8
   1257c:	f800283a 	ret
   12580:	01220034 	movhi	r4,34816
   12584:	015f8e34 	movhi	r5,32312
   12588:	500d883a 	mov	r6,r10
   1258c:	211d6704 	addi	r4,r4,30108
   12590:	29790f04 	addi	r5,r5,-7108
   12594:	00125f00 	call	125f0 <copysign>
   12598:	01a20034 	movhi	r6,34816
   1259c:	01df8e34 	movhi	r7,32312
   125a0:	319d6704 	addi	r6,r6,30108
   125a4:	39f90f04 	addi	r7,r7,-7108
   125a8:	1009883a 	mov	r4,r2
   125ac:	180b883a 	mov	r5,r3
   125b0:	00145940 	call	14594 <__muldf3>
   125b4:	dfc00117 	ldw	ra,4(sp)
   125b8:	dc000017 	ldw	r16,0(sp)
   125bc:	dec00204 	addi	sp,sp,8
   125c0:	f800283a 	ret
   125c4:	42000d84 	addi	r8,r8,54
   125c8:	4012953a 	slli	r9,r8,20
   125cc:	01e00434 	movhi	r7,32784
   125d0:	39ffffc4 	addi	r7,r7,-1
   125d4:	19ca703a 	and	r5,r3,r7
   125d8:	000d883a 	mov	r6,zero
   125dc:	01cf2434 	movhi	r7,15504
   125e0:	5009883a 	mov	r4,r10
   125e4:	494ab03a 	or	r5,r9,r5
   125e8:	00145940 	call	14594 <__muldf3>
   125ec:	003fbc06 	br	124e0 <__alt_data_end+0xffff24e0>

000125f0 <copysign>:
   125f0:	2005883a 	mov	r2,r4
   125f4:	01200034 	movhi	r4,32768
   125f8:	213fffc4 	addi	r4,r4,-1
   125fc:	38e0002c 	andhi	r3,r7,32768
   12600:	290a703a 	and	r5,r5,r4
   12604:	28c6b03a 	or	r3,r5,r3
   12608:	f800283a 	ret

0001260c <__mulsi3>:
   1260c:	0005883a 	mov	r2,zero
   12610:	20000726 	beq	r4,zero,12630 <__mulsi3+0x24>
   12614:	20c0004c 	andi	r3,r4,1
   12618:	2008d07a 	srli	r4,r4,1
   1261c:	18000126 	beq	r3,zero,12624 <__mulsi3+0x18>
   12620:	1145883a 	add	r2,r2,r5
   12624:	294b883a 	add	r5,r5,r5
   12628:	203ffa1e 	bne	r4,zero,12614 <__alt_data_end+0xffff2614>
   1262c:	f800283a 	ret
   12630:	f800283a 	ret

00012634 <__addsf3>:
   12634:	defffc04 	addi	sp,sp,-16
   12638:	2004d7fa 	srli	r2,r4,31
   1263c:	280cd5fa 	srli	r6,r5,23
   12640:	dc000015 	stw	r16,0(sp)
   12644:	00c02034 	movhi	r3,128
   12648:	2020d5fa 	srli	r16,r4,23
   1264c:	280ed7fa 	srli	r7,r5,31
   12650:	18ffffc4 	addi	r3,r3,-1
   12654:	dc400115 	stw	r17,4(sp)
   12658:	1908703a 	and	r4,r3,r4
   1265c:	194a703a 	and	r5,r3,r5
   12660:	dfc00315 	stw	ra,12(sp)
   12664:	dc800215 	stw	r18,8(sp)
   12668:	14403fcc 	andi	r17,r2,255
   1266c:	84003fcc 	andi	r16,r16,255
   12670:	200890fa 	slli	r4,r4,3
   12674:	31803fcc 	andi	r6,r6,255
   12678:	280a90fa 	slli	r5,r5,3
   1267c:	89c05026 	beq	r17,r7,127c0 <__addsf3+0x18c>
   12680:	8185c83a 	sub	r2,r16,r6
   12684:	00807a0e 	bge	zero,r2,12870 <__addsf3+0x23c>
   12688:	30001e1e 	bne	r6,zero,12704 <__addsf3+0xd0>
   1268c:	28006d1e 	bne	r5,zero,12844 <__addsf3+0x210>
   12690:	208001cc 	andi	r2,r4,7
   12694:	10000426 	beq	r2,zero,126a8 <__addsf3+0x74>
   12698:	208003cc 	andi	r2,r4,15
   1269c:	00c00104 	movi	r3,4
   126a0:	10c00126 	beq	r2,r3,126a8 <__addsf3+0x74>
   126a4:	20c9883a 	add	r4,r4,r3
   126a8:	2081002c 	andhi	r2,r4,1024
   126ac:	10003926 	beq	r2,zero,12794 <__addsf3+0x160>
   126b0:	84000044 	addi	r16,r16,1
   126b4:	00803fc4 	movi	r2,255
   126b8:	80807826 	beq	r16,r2,1289c <__addsf3+0x268>
   126bc:	200891ba 	slli	r4,r4,6
   126c0:	8805883a 	mov	r2,r17
   126c4:	2008d27a 	srli	r4,r4,9
   126c8:	84003fcc 	andi	r16,r16,255
   126cc:	800695fa 	slli	r3,r16,23
   126d0:	10803fcc 	andi	r2,r2,255
   126d4:	04002034 	movhi	r16,128
   126d8:	843fffc4 	addi	r16,r16,-1
   126dc:	100497fa 	slli	r2,r2,31
   126e0:	2408703a 	and	r4,r4,r16
   126e4:	20e0b03a 	or	r16,r4,r3
   126e8:	8084b03a 	or	r2,r16,r2
   126ec:	dfc00317 	ldw	ra,12(sp)
   126f0:	dc800217 	ldw	r18,8(sp)
   126f4:	dc400117 	ldw	r17,4(sp)
   126f8:	dc000017 	ldw	r16,0(sp)
   126fc:	dec00404 	addi	sp,sp,16
   12700:	f800283a 	ret
   12704:	00c03fc4 	movi	r3,255
   12708:	80ffe126 	beq	r16,r3,12690 <__alt_data_end+0xffff2690>
   1270c:	29410034 	orhi	r5,r5,1024
   12710:	00c006c4 	movi	r3,27
   12714:	18807516 	blt	r3,r2,128ec <__addsf3+0x2b8>
   12718:	00c00804 	movi	r3,32
   1271c:	1887c83a 	sub	r3,r3,r2
   12720:	28c6983a 	sll	r3,r5,r3
   12724:	288ad83a 	srl	r5,r5,r2
   12728:	1804c03a 	cmpne	r2,r3,zero
   1272c:	288ab03a 	or	r5,r5,r2
   12730:	2149c83a 	sub	r4,r4,r5
   12734:	2081002c 	andhi	r2,r4,1024
   12738:	10001426 	beq	r2,zero,1278c <__addsf3+0x158>
   1273c:	04810034 	movhi	r18,1024
   12740:	94bfffc4 	addi	r18,r18,-1
   12744:	24a4703a 	and	r18,r4,r18
   12748:	9009883a 	mov	r4,r18
   1274c:	0015a000 	call	15a00 <__clzsi2>
   12750:	10bffec4 	addi	r2,r2,-5
   12754:	90a4983a 	sll	r18,r18,r2
   12758:	14005416 	blt	r2,r16,128ac <__addsf3+0x278>
   1275c:	1405c83a 	sub	r2,r2,r16
   12760:	11000044 	addi	r4,r2,1
   12764:	00800804 	movi	r2,32
   12768:	1105c83a 	sub	r2,r2,r4
   1276c:	9084983a 	sll	r2,r18,r2
   12770:	9124d83a 	srl	r18,r18,r4
   12774:	0021883a 	mov	r16,zero
   12778:	1008c03a 	cmpne	r4,r2,zero
   1277c:	9108b03a 	or	r4,r18,r4
   12780:	003fc306 	br	12690 <__alt_data_end+0xffff2690>
   12784:	1000db26 	beq	r2,zero,12af4 <__addsf3+0x4c0>
   12788:	1009883a 	mov	r4,r2
   1278c:	208001cc 	andi	r2,r4,7
   12790:	103fc11e 	bne	r2,zero,12698 <__alt_data_end+0xffff2698>
   12794:	2006d0fa 	srli	r3,r4,3
   12798:	01003fc4 	movi	r4,255
   1279c:	8805883a 	mov	r2,r17
   127a0:	8100241e 	bne	r16,r4,12834 <__addsf3+0x200>
   127a4:	18006e26 	beq	r3,zero,12960 <__addsf3+0x32c>
   127a8:	19001034 	orhi	r4,r3,64
   127ac:	00c02034 	movhi	r3,128
   127b0:	18ffffc4 	addi	r3,r3,-1
   127b4:	043fffc4 	movi	r16,-1
   127b8:	20c8703a 	and	r4,r4,r3
   127bc:	003fc206 	br	126c8 <__alt_data_end+0xffff26c8>
   127c0:	8187c83a 	sub	r3,r16,r6
   127c4:	00c03e0e 	bge	zero,r3,128c0 <__addsf3+0x28c>
   127c8:	30002326 	beq	r6,zero,12858 <__addsf3+0x224>
   127cc:	01803fc4 	movi	r6,255
   127d0:	81bfaf26 	beq	r16,r6,12690 <__alt_data_end+0xffff2690>
   127d4:	29410034 	orhi	r5,r5,1024
   127d8:	018006c4 	movi	r6,27
   127dc:	30c07416 	blt	r6,r3,129b0 <__addsf3+0x37c>
   127e0:	01800804 	movi	r6,32
   127e4:	30cdc83a 	sub	r6,r6,r3
   127e8:	298c983a 	sll	r6,r5,r6
   127ec:	28cad83a 	srl	r5,r5,r3
   127f0:	3006c03a 	cmpne	r3,r6,zero
   127f4:	28cab03a 	or	r5,r5,r3
   127f8:	2149883a 	add	r4,r4,r5
   127fc:	20c1002c 	andhi	r3,r4,1024
   12800:	183fe226 	beq	r3,zero,1278c <__alt_data_end+0xffff278c>
   12804:	84000044 	addi	r16,r16,1
   12808:	00c03fc4 	movi	r3,255
   1280c:	80c05426 	beq	r16,r3,12960 <__addsf3+0x32c>
   12810:	00bf0034 	movhi	r2,64512
   12814:	10bfffc4 	addi	r2,r2,-1
   12818:	20c0004c 	andi	r3,r4,1
   1281c:	2088703a 	and	r4,r4,r2
   12820:	2008d07a 	srli	r4,r4,1
   12824:	20c8b03a 	or	r4,r4,r3
   12828:	003f9906 	br	12690 <__alt_data_end+0xffff2690>
   1282c:	0007883a 	mov	r3,zero
   12830:	0005883a 	mov	r2,zero
   12834:	01002034 	movhi	r4,128
   12838:	213fffc4 	addi	r4,r4,-1
   1283c:	1908703a 	and	r4,r3,r4
   12840:	003fa106 	br	126c8 <__alt_data_end+0xffff26c8>
   12844:	10bfffc4 	addi	r2,r2,-1
   12848:	103fb926 	beq	r2,zero,12730 <__alt_data_end+0xffff2730>
   1284c:	00c03fc4 	movi	r3,255
   12850:	80ffaf1e 	bne	r16,r3,12710 <__alt_data_end+0xffff2710>
   12854:	003f8e06 	br	12690 <__alt_data_end+0xffff2690>
   12858:	283f8d26 	beq	r5,zero,12690 <__alt_data_end+0xffff2690>
   1285c:	18ffffc4 	addi	r3,r3,-1
   12860:	183fe526 	beq	r3,zero,127f8 <__alt_data_end+0xffff27f8>
   12864:	01803fc4 	movi	r6,255
   12868:	81bfdb1e 	bne	r16,r6,127d8 <__alt_data_end+0xffff27d8>
   1286c:	003f8806 	br	12690 <__alt_data_end+0xffff2690>
   12870:	1000201e 	bne	r2,zero,128f4 <__addsf3+0x2c0>
   12874:	80800044 	addi	r2,r16,1
   12878:	10803fcc 	andi	r2,r2,255
   1287c:	01800044 	movi	r6,1
   12880:	3080450e 	bge	r6,r2,12998 <__addsf3+0x364>
   12884:	2165c83a 	sub	r18,r4,r5
   12888:	90c1002c 	andhi	r3,r18,1024
   1288c:	18002b26 	beq	r3,zero,1293c <__addsf3+0x308>
   12890:	2925c83a 	sub	r18,r5,r4
   12894:	3823883a 	mov	r17,r7
   12898:	003fab06 	br	12748 <__alt_data_end+0xffff2748>
   1289c:	8805883a 	mov	r2,r17
   128a0:	043fffc4 	movi	r16,-1
   128a4:	0009883a 	mov	r4,zero
   128a8:	003f8706 	br	126c8 <__alt_data_end+0xffff26c8>
   128ac:	013f0034 	movhi	r4,64512
   128b0:	213fffc4 	addi	r4,r4,-1
   128b4:	80a1c83a 	sub	r16,r16,r2
   128b8:	9108703a 	and	r4,r18,r4
   128bc:	003f7406 	br	12690 <__alt_data_end+0xffff2690>
   128c0:	1800411e 	bne	r3,zero,129c8 <__addsf3+0x394>
   128c4:	80c00044 	addi	r3,r16,1
   128c8:	19c03fcc 	andi	r7,r3,255
   128cc:	01800044 	movi	r6,1
   128d0:	31c0260e 	bge	r6,r7,1296c <__addsf3+0x338>
   128d4:	01803fc4 	movi	r6,255
   128d8:	19802126 	beq	r3,r6,12960 <__addsf3+0x32c>
   128dc:	2149883a 	add	r4,r4,r5
   128e0:	2008d07a 	srli	r4,r4,1
   128e4:	1821883a 	mov	r16,r3
   128e8:	003f6906 	br	12690 <__alt_data_end+0xffff2690>
   128ec:	01400044 	movi	r5,1
   128f0:	003f8f06 	br	12730 <__alt_data_end+0xffff2730>
   128f4:	8000151e 	bne	r16,zero,1294c <__addsf3+0x318>
   128f8:	20002f26 	beq	r4,zero,129b8 <__addsf3+0x384>
   128fc:	0084303a 	nor	r2,zero,r2
   12900:	10000a26 	beq	r2,zero,1292c <__addsf3+0x2f8>
   12904:	00c03fc4 	movi	r3,255
   12908:	30c02b26 	beq	r6,r3,129b8 <__addsf3+0x384>
   1290c:	00c006c4 	movi	r3,27
   12910:	18806d16 	blt	r3,r2,12ac8 <__addsf3+0x494>
   12914:	00c00804 	movi	r3,32
   12918:	1887c83a 	sub	r3,r3,r2
   1291c:	20c6983a 	sll	r3,r4,r3
   12920:	2084d83a 	srl	r2,r4,r2
   12924:	1808c03a 	cmpne	r4,r3,zero
   12928:	1108b03a 	or	r4,r2,r4
   1292c:	2909c83a 	sub	r4,r5,r4
   12930:	3021883a 	mov	r16,r6
   12934:	3823883a 	mov	r17,r7
   12938:	003f7e06 	br	12734 <__alt_data_end+0xffff2734>
   1293c:	903f821e 	bne	r18,zero,12748 <__alt_data_end+0xffff2748>
   12940:	0005883a 	mov	r2,zero
   12944:	0021883a 	mov	r16,zero
   12948:	003fba06 	br	12834 <__alt_data_end+0xffff2834>
   1294c:	00c03fc4 	movi	r3,255
   12950:	30c01926 	beq	r6,r3,129b8 <__addsf3+0x384>
   12954:	0085c83a 	sub	r2,zero,r2
   12958:	21010034 	orhi	r4,r4,1024
   1295c:	003feb06 	br	1290c <__alt_data_end+0xffff290c>
   12960:	043fffc4 	movi	r16,-1
   12964:	0009883a 	mov	r4,zero
   12968:	003f5706 	br	126c8 <__alt_data_end+0xffff26c8>
   1296c:	80004a1e 	bne	r16,zero,12a98 <__addsf3+0x464>
   12970:	20005926 	beq	r4,zero,12ad8 <__addsf3+0x4a4>
   12974:	283f4626 	beq	r5,zero,12690 <__alt_data_end+0xffff2690>
   12978:	2149883a 	add	r4,r4,r5
   1297c:	2081002c 	andhi	r2,r4,1024
   12980:	103f8226 	beq	r2,zero,1278c <__alt_data_end+0xffff278c>
   12984:	00bf0034 	movhi	r2,64512
   12988:	10bfffc4 	addi	r2,r2,-1
   1298c:	3021883a 	mov	r16,r6
   12990:	2088703a 	and	r4,r4,r2
   12994:	003f3e06 	br	12690 <__alt_data_end+0xffff2690>
   12998:	8000121e 	bne	r16,zero,129e4 <__addsf3+0x3b0>
   1299c:	2000261e 	bne	r4,zero,12a38 <__addsf3+0x404>
   129a0:	283fa226 	beq	r5,zero,1282c <__alt_data_end+0xffff282c>
   129a4:	2809883a 	mov	r4,r5
   129a8:	3823883a 	mov	r17,r7
   129ac:	003f3806 	br	12690 <__alt_data_end+0xffff2690>
   129b0:	01400044 	movi	r5,1
   129b4:	003f9006 	br	127f8 <__alt_data_end+0xffff27f8>
   129b8:	2809883a 	mov	r4,r5
   129bc:	3021883a 	mov	r16,r6
   129c0:	3823883a 	mov	r17,r7
   129c4:	003f3206 	br	12690 <__alt_data_end+0xffff2690>
   129c8:	80000c1e 	bne	r16,zero,129fc <__addsf3+0x3c8>
   129cc:	20002f26 	beq	r4,zero,12a8c <__addsf3+0x458>
   129d0:	00c6303a 	nor	r3,zero,r3
   129d4:	18002b1e 	bne	r3,zero,12a84 <__addsf3+0x450>
   129d8:	2149883a 	add	r4,r4,r5
   129dc:	3021883a 	mov	r16,r6
   129e0:	003f8606 	br	127fc <__alt_data_end+0xffff27fc>
   129e4:	20001b1e 	bne	r4,zero,12a54 <__addsf3+0x420>
   129e8:	28003926 	beq	r5,zero,12ad0 <__addsf3+0x49c>
   129ec:	2809883a 	mov	r4,r5
   129f0:	3823883a 	mov	r17,r7
   129f4:	04003fc4 	movi	r16,255
   129f8:	003f2506 	br	12690 <__alt_data_end+0xffff2690>
   129fc:	01c03fc4 	movi	r7,255
   12a00:	31c02226 	beq	r6,r7,12a8c <__addsf3+0x458>
   12a04:	00c7c83a 	sub	r3,zero,r3
   12a08:	21010034 	orhi	r4,r4,1024
   12a0c:	01c006c4 	movi	r7,27
   12a10:	38c03616 	blt	r7,r3,12aec <__addsf3+0x4b8>
   12a14:	01c00804 	movi	r7,32
   12a18:	38cfc83a 	sub	r7,r7,r3
   12a1c:	21ce983a 	sll	r7,r4,r7
   12a20:	20c6d83a 	srl	r3,r4,r3
   12a24:	3808c03a 	cmpne	r4,r7,zero
   12a28:	1906b03a 	or	r3,r3,r4
   12a2c:	1949883a 	add	r4,r3,r5
   12a30:	3021883a 	mov	r16,r6
   12a34:	003f7106 	br	127fc <__alt_data_end+0xffff27fc>
   12a38:	283f1526 	beq	r5,zero,12690 <__alt_data_end+0xffff2690>
   12a3c:	2145c83a 	sub	r2,r4,r5
   12a40:	10c1002c 	andhi	r3,r2,1024
   12a44:	183f4f26 	beq	r3,zero,12784 <__alt_data_end+0xffff2784>
   12a48:	2909c83a 	sub	r4,r5,r4
   12a4c:	3823883a 	mov	r17,r7
   12a50:	003f0f06 	br	12690 <__alt_data_end+0xffff2690>
   12a54:	28001a26 	beq	r5,zero,12ac0 <__addsf3+0x48c>
   12a58:	2008d0fa 	srli	r4,r4,3
   12a5c:	2080102c 	andhi	r2,r4,64
   12a60:	10000526 	beq	r2,zero,12a78 <__addsf3+0x444>
   12a64:	280ad0fa 	srli	r5,r5,3
   12a68:	2880102c 	andhi	r2,r5,64
   12a6c:	1000021e 	bne	r2,zero,12a78 <__addsf3+0x444>
   12a70:	2809883a 	mov	r4,r5
   12a74:	3823883a 	mov	r17,r7
   12a78:	200890fa 	slli	r4,r4,3
   12a7c:	04003fc4 	movi	r16,255
   12a80:	003f0306 	br	12690 <__alt_data_end+0xffff2690>
   12a84:	01c03fc4 	movi	r7,255
   12a88:	31ffe01e 	bne	r6,r7,12a0c <__alt_data_end+0xffff2a0c>
   12a8c:	2809883a 	mov	r4,r5
   12a90:	3021883a 	mov	r16,r6
   12a94:	003efe06 	br	12690 <__alt_data_end+0xffff2690>
   12a98:	20001126 	beq	r4,zero,12ae0 <__addsf3+0x4ac>
   12a9c:	28000826 	beq	r5,zero,12ac0 <__addsf3+0x48c>
   12aa0:	2008d0fa 	srli	r4,r4,3
   12aa4:	2080102c 	andhi	r2,r4,64
   12aa8:	103ff326 	beq	r2,zero,12a78 <__alt_data_end+0xffff2a78>
   12aac:	280ad0fa 	srli	r5,r5,3
   12ab0:	2880102c 	andhi	r2,r5,64
   12ab4:	103ff01e 	bne	r2,zero,12a78 <__alt_data_end+0xffff2a78>
   12ab8:	2809883a 	mov	r4,r5
   12abc:	003fee06 	br	12a78 <__alt_data_end+0xffff2a78>
   12ac0:	04003fc4 	movi	r16,255
   12ac4:	003ef206 	br	12690 <__alt_data_end+0xffff2690>
   12ac8:	01000044 	movi	r4,1
   12acc:	003f9706 	br	1292c <__alt_data_end+0xffff292c>
   12ad0:	0005883a 	mov	r2,zero
   12ad4:	003f3406 	br	127a8 <__alt_data_end+0xffff27a8>
   12ad8:	2809883a 	mov	r4,r5
   12adc:	003eec06 	br	12690 <__alt_data_end+0xffff2690>
   12ae0:	2809883a 	mov	r4,r5
   12ae4:	04003fc4 	movi	r16,255
   12ae8:	003ee906 	br	12690 <__alt_data_end+0xffff2690>
   12aec:	00c00044 	movi	r3,1
   12af0:	003fce06 	br	12a2c <__alt_data_end+0xffff2a2c>
   12af4:	0005883a 	mov	r2,zero
   12af8:	003f4e06 	br	12834 <__alt_data_end+0xffff2834>

00012afc <__mulsf3>:
   12afc:	defff504 	addi	sp,sp,-44
   12b00:	dc000115 	stw	r16,4(sp)
   12b04:	2020d5fa 	srli	r16,r4,23
   12b08:	dd400615 	stw	r21,24(sp)
   12b0c:	202ad7fa 	srli	r21,r4,31
   12b10:	dc800315 	stw	r18,12(sp)
   12b14:	04802034 	movhi	r18,128
   12b18:	df000915 	stw	fp,36(sp)
   12b1c:	dd000515 	stw	r20,20(sp)
   12b20:	94bfffc4 	addi	r18,r18,-1
   12b24:	dfc00a15 	stw	ra,40(sp)
   12b28:	ddc00815 	stw	r23,32(sp)
   12b2c:	dd800715 	stw	r22,28(sp)
   12b30:	dcc00415 	stw	r19,16(sp)
   12b34:	dc400215 	stw	r17,8(sp)
   12b38:	84003fcc 	andi	r16,r16,255
   12b3c:	9124703a 	and	r18,r18,r4
   12b40:	a829883a 	mov	r20,r21
   12b44:	af003fcc 	andi	fp,r21,255
   12b48:	80005426 	beq	r16,zero,12c9c <__mulsf3+0x1a0>
   12b4c:	00803fc4 	movi	r2,255
   12b50:	80802f26 	beq	r16,r2,12c10 <__mulsf3+0x114>
   12b54:	91002034 	orhi	r4,r18,128
   12b58:	202490fa 	slli	r18,r4,3
   12b5c:	843fe044 	addi	r16,r16,-127
   12b60:	0023883a 	mov	r17,zero
   12b64:	002f883a 	mov	r23,zero
   12b68:	2804d5fa 	srli	r2,r5,23
   12b6c:	282cd7fa 	srli	r22,r5,31
   12b70:	01002034 	movhi	r4,128
   12b74:	213fffc4 	addi	r4,r4,-1
   12b78:	10803fcc 	andi	r2,r2,255
   12b7c:	2166703a 	and	r19,r4,r5
   12b80:	b1803fcc 	andi	r6,r22,255
   12b84:	10004c26 	beq	r2,zero,12cb8 <__mulsf3+0x1bc>
   12b88:	00c03fc4 	movi	r3,255
   12b8c:	10c04726 	beq	r2,r3,12cac <__mulsf3+0x1b0>
   12b90:	99002034 	orhi	r4,r19,128
   12b94:	202690fa 	slli	r19,r4,3
   12b98:	10bfe044 	addi	r2,r2,-127
   12b9c:	0007883a 	mov	r3,zero
   12ba0:	80a1883a 	add	r16,r16,r2
   12ba4:	010003c4 	movi	r4,15
   12ba8:	1c44b03a 	or	r2,r3,r17
   12bac:	b56af03a 	xor	r21,r22,r21
   12bb0:	81c00044 	addi	r7,r16,1
   12bb4:	20806b36 	bltu	r4,r2,12d64 <__mulsf3+0x268>
   12bb8:	100490ba 	slli	r2,r2,2
   12bbc:	01000074 	movhi	r4,1
   12bc0:	210af404 	addi	r4,r4,11216
   12bc4:	1105883a 	add	r2,r2,r4
   12bc8:	10800017 	ldw	r2,0(r2)
   12bcc:	1000683a 	jmp	r2
   12bd0:	00012d64 	muli	zero,zero,1205
   12bd4:	00012c24 	muli	zero,zero,1200
   12bd8:	00012c24 	muli	zero,zero,1200
   12bdc:	00012c20 	cmpeqi	zero,zero,1200
   12be0:	00012d48 	cmpgei	zero,zero,1205
   12be4:	00012d48 	cmpgei	zero,zero,1205
   12be8:	00012d34 	movhi	zero,1204
   12bec:	00012c20 	cmpeqi	zero,zero,1200
   12bf0:	00012d48 	cmpgei	zero,zero,1205
   12bf4:	00012d34 	movhi	zero,1204
   12bf8:	00012d48 	cmpgei	zero,zero,1205
   12bfc:	00012c20 	cmpeqi	zero,zero,1200
   12c00:	00012d54 	movui	zero,1205
   12c04:	00012d54 	movui	zero,1205
   12c08:	00012d54 	movui	zero,1205
   12c0c:	00012e64 	muli	zero,zero,1209
   12c10:	90003b1e 	bne	r18,zero,12d00 <__mulsf3+0x204>
   12c14:	04400204 	movi	r17,8
   12c18:	05c00084 	movi	r23,2
   12c1c:	003fd206 	br	12b68 <__alt_data_end+0xffff2b68>
   12c20:	302b883a 	mov	r21,r6
   12c24:	00800084 	movi	r2,2
   12c28:	18802626 	beq	r3,r2,12cc4 <__mulsf3+0x1c8>
   12c2c:	008000c4 	movi	r2,3
   12c30:	1880b826 	beq	r3,r2,12f14 <__mulsf3+0x418>
   12c34:	00800044 	movi	r2,1
   12c38:	1880af1e 	bne	r3,r2,12ef8 <__mulsf3+0x3fc>
   12c3c:	a829883a 	mov	r20,r21
   12c40:	0007883a 	mov	r3,zero
   12c44:	0009883a 	mov	r4,zero
   12c48:	18803fcc 	andi	r2,r3,255
   12c4c:	100695fa 	slli	r3,r2,23
   12c50:	a0803fcc 	andi	r2,r20,255
   12c54:	100a97fa 	slli	r5,r2,31
   12c58:	00802034 	movhi	r2,128
   12c5c:	10bfffc4 	addi	r2,r2,-1
   12c60:	2084703a 	and	r2,r4,r2
   12c64:	10c4b03a 	or	r2,r2,r3
   12c68:	1144b03a 	or	r2,r2,r5
   12c6c:	dfc00a17 	ldw	ra,40(sp)
   12c70:	df000917 	ldw	fp,36(sp)
   12c74:	ddc00817 	ldw	r23,32(sp)
   12c78:	dd800717 	ldw	r22,28(sp)
   12c7c:	dd400617 	ldw	r21,24(sp)
   12c80:	dd000517 	ldw	r20,20(sp)
   12c84:	dcc00417 	ldw	r19,16(sp)
   12c88:	dc800317 	ldw	r18,12(sp)
   12c8c:	dc400217 	ldw	r17,8(sp)
   12c90:	dc000117 	ldw	r16,4(sp)
   12c94:	dec00b04 	addi	sp,sp,44
   12c98:	f800283a 	ret
   12c9c:	90000d1e 	bne	r18,zero,12cd4 <__mulsf3+0x1d8>
   12ca0:	04400104 	movi	r17,4
   12ca4:	05c00044 	movi	r23,1
   12ca8:	003faf06 	br	12b68 <__alt_data_end+0xffff2b68>
   12cac:	9806c03a 	cmpne	r3,r19,zero
   12cb0:	18c00084 	addi	r3,r3,2
   12cb4:	003fba06 	br	12ba0 <__alt_data_end+0xffff2ba0>
   12cb8:	9800141e 	bne	r19,zero,12d0c <__mulsf3+0x210>
   12cbc:	00c00044 	movi	r3,1
   12cc0:	003fb706 	br	12ba0 <__alt_data_end+0xffff2ba0>
   12cc4:	a829883a 	mov	r20,r21
   12cc8:	00ffffc4 	movi	r3,-1
   12ccc:	0009883a 	mov	r4,zero
   12cd0:	003fdd06 	br	12c48 <__alt_data_end+0xffff2c48>
   12cd4:	9009883a 	mov	r4,r18
   12cd8:	d9400015 	stw	r5,0(sp)
   12cdc:	0015a000 	call	15a00 <__clzsi2>
   12ce0:	10fffec4 	addi	r3,r2,-5
   12ce4:	10801d84 	addi	r2,r2,118
   12ce8:	90e4983a 	sll	r18,r18,r3
   12cec:	00a1c83a 	sub	r16,zero,r2
   12cf0:	0023883a 	mov	r17,zero
   12cf4:	002f883a 	mov	r23,zero
   12cf8:	d9400017 	ldw	r5,0(sp)
   12cfc:	003f9a06 	br	12b68 <__alt_data_end+0xffff2b68>
   12d00:	04400304 	movi	r17,12
   12d04:	05c000c4 	movi	r23,3
   12d08:	003f9706 	br	12b68 <__alt_data_end+0xffff2b68>
   12d0c:	9809883a 	mov	r4,r19
   12d10:	d9800015 	stw	r6,0(sp)
   12d14:	0015a000 	call	15a00 <__clzsi2>
   12d18:	10fffec4 	addi	r3,r2,-5
   12d1c:	10801d84 	addi	r2,r2,118
   12d20:	98e6983a 	sll	r19,r19,r3
   12d24:	0085c83a 	sub	r2,zero,r2
   12d28:	0007883a 	mov	r3,zero
   12d2c:	d9800017 	ldw	r6,0(sp)
   12d30:	003f9b06 	br	12ba0 <__alt_data_end+0xffff2ba0>
   12d34:	01002034 	movhi	r4,128
   12d38:	0029883a 	mov	r20,zero
   12d3c:	213fffc4 	addi	r4,r4,-1
   12d40:	00ffffc4 	movi	r3,-1
   12d44:	003fc006 	br	12c48 <__alt_data_end+0xffff2c48>
   12d48:	9027883a 	mov	r19,r18
   12d4c:	b807883a 	mov	r3,r23
   12d50:	003fb406 	br	12c24 <__alt_data_end+0xffff2c24>
   12d54:	9027883a 	mov	r19,r18
   12d58:	e02b883a 	mov	r21,fp
   12d5c:	b807883a 	mov	r3,r23
   12d60:	003fb006 	br	12c24 <__alt_data_end+0xffff2c24>
   12d64:	9028d43a 	srli	r20,r18,16
   12d68:	982cd43a 	srli	r22,r19,16
   12d6c:	94bfffcc 	andi	r18,r18,65535
   12d70:	9cffffcc 	andi	r19,r19,65535
   12d74:	980b883a 	mov	r5,r19
   12d78:	9009883a 	mov	r4,r18
   12d7c:	d9c00015 	stw	r7,0(sp)
   12d80:	001260c0 	call	1260c <__mulsi3>
   12d84:	a00b883a 	mov	r5,r20
   12d88:	9809883a 	mov	r4,r19
   12d8c:	1023883a 	mov	r17,r2
   12d90:	001260c0 	call	1260c <__mulsi3>
   12d94:	a009883a 	mov	r4,r20
   12d98:	b00b883a 	mov	r5,r22
   12d9c:	1027883a 	mov	r19,r2
   12da0:	001260c0 	call	1260c <__mulsi3>
   12da4:	b00b883a 	mov	r5,r22
   12da8:	9009883a 	mov	r4,r18
   12dac:	1029883a 	mov	r20,r2
   12db0:	001260c0 	call	1260c <__mulsi3>
   12db4:	8806d43a 	srli	r3,r17,16
   12db8:	14c5883a 	add	r2,r2,r19
   12dbc:	d9c00017 	ldw	r7,0(sp)
   12dc0:	1885883a 	add	r2,r3,r2
   12dc4:	14c0022e 	bgeu	r2,r19,12dd0 <__mulsf3+0x2d4>
   12dc8:	00c00074 	movhi	r3,1
   12dcc:	a0e9883a 	add	r20,r20,r3
   12dd0:	1026943a 	slli	r19,r2,16
   12dd4:	8c7fffcc 	andi	r17,r17,65535
   12dd8:	1004d43a 	srli	r2,r2,16
   12ddc:	9c63883a 	add	r17,r19,r17
   12de0:	882691ba 	slli	r19,r17,6
   12de4:	1505883a 	add	r2,r2,r20
   12de8:	8822d6ba 	srli	r17,r17,26
   12dec:	100891ba 	slli	r4,r2,6
   12df0:	9826c03a 	cmpne	r19,r19,zero
   12df4:	9c62b03a 	or	r17,r19,r17
   12df8:	8926b03a 	or	r19,r17,r4
   12dfc:	9882002c 	andhi	r2,r19,2048
   12e00:	10000426 	beq	r2,zero,12e14 <__mulsf3+0x318>
   12e04:	9804d07a 	srli	r2,r19,1
   12e08:	9900004c 	andi	r4,r19,1
   12e0c:	3821883a 	mov	r16,r7
   12e10:	1126b03a 	or	r19,r2,r4
   12e14:	80c01fc4 	addi	r3,r16,127
   12e18:	00c0210e 	bge	zero,r3,12ea0 <__mulsf3+0x3a4>
   12e1c:	988001cc 	andi	r2,r19,7
   12e20:	10000426 	beq	r2,zero,12e34 <__mulsf3+0x338>
   12e24:	988003cc 	andi	r2,r19,15
   12e28:	01000104 	movi	r4,4
   12e2c:	11000126 	beq	r2,r4,12e34 <__mulsf3+0x338>
   12e30:	9927883a 	add	r19,r19,r4
   12e34:	9882002c 	andhi	r2,r19,2048
   12e38:	10000426 	beq	r2,zero,12e4c <__mulsf3+0x350>
   12e3c:	00be0034 	movhi	r2,63488
   12e40:	10bfffc4 	addi	r2,r2,-1
   12e44:	80c02004 	addi	r3,r16,128
   12e48:	98a6703a 	and	r19,r19,r2
   12e4c:	00803f84 	movi	r2,254
   12e50:	10ff9c16 	blt	r2,r3,12cc4 <__alt_data_end+0xffff2cc4>
   12e54:	980891ba 	slli	r4,r19,6
   12e58:	a829883a 	mov	r20,r21
   12e5c:	2008d27a 	srli	r4,r4,9
   12e60:	003f7906 	br	12c48 <__alt_data_end+0xffff2c48>
   12e64:	9080102c 	andhi	r2,r18,64
   12e68:	10000826 	beq	r2,zero,12e8c <__mulsf3+0x390>
   12e6c:	9880102c 	andhi	r2,r19,64
   12e70:	1000061e 	bne	r2,zero,12e8c <__mulsf3+0x390>
   12e74:	00802034 	movhi	r2,128
   12e78:	99001034 	orhi	r4,r19,64
   12e7c:	10bfffc4 	addi	r2,r2,-1
   12e80:	b029883a 	mov	r20,r22
   12e84:	2088703a 	and	r4,r4,r2
   12e88:	003fad06 	br	12d40 <__alt_data_end+0xffff2d40>
   12e8c:	00802034 	movhi	r2,128
   12e90:	91001034 	orhi	r4,r18,64
   12e94:	10bfffc4 	addi	r2,r2,-1
   12e98:	2088703a 	and	r4,r4,r2
   12e9c:	003fa806 	br	12d40 <__alt_data_end+0xffff2d40>
   12ea0:	00800044 	movi	r2,1
   12ea4:	10c7c83a 	sub	r3,r2,r3
   12ea8:	008006c4 	movi	r2,27
   12eac:	10ff6316 	blt	r2,r3,12c3c <__alt_data_end+0xffff2c3c>
   12eb0:	00800804 	movi	r2,32
   12eb4:	10c5c83a 	sub	r2,r2,r3
   12eb8:	9884983a 	sll	r2,r19,r2
   12ebc:	98c6d83a 	srl	r3,r19,r3
   12ec0:	1004c03a 	cmpne	r2,r2,zero
   12ec4:	1884b03a 	or	r2,r3,r2
   12ec8:	10c001cc 	andi	r3,r2,7
   12ecc:	18000426 	beq	r3,zero,12ee0 <__mulsf3+0x3e4>
   12ed0:	10c003cc 	andi	r3,r2,15
   12ed4:	01000104 	movi	r4,4
   12ed8:	19000126 	beq	r3,r4,12ee0 <__mulsf3+0x3e4>
   12edc:	1105883a 	add	r2,r2,r4
   12ee0:	10c1002c 	andhi	r3,r2,1024
   12ee4:	18000626 	beq	r3,zero,12f00 <__mulsf3+0x404>
   12ee8:	a829883a 	mov	r20,r21
   12eec:	00c00044 	movi	r3,1
   12ef0:	0009883a 	mov	r4,zero
   12ef4:	003f5406 	br	12c48 <__alt_data_end+0xffff2c48>
   12ef8:	3821883a 	mov	r16,r7
   12efc:	003fc506 	br	12e14 <__alt_data_end+0xffff2e14>
   12f00:	100491ba 	slli	r2,r2,6
   12f04:	a829883a 	mov	r20,r21
   12f08:	0007883a 	mov	r3,zero
   12f0c:	1008d27a 	srli	r4,r2,9
   12f10:	003f4d06 	br	12c48 <__alt_data_end+0xffff2c48>
   12f14:	00802034 	movhi	r2,128
   12f18:	99001034 	orhi	r4,r19,64
   12f1c:	10bfffc4 	addi	r2,r2,-1
   12f20:	a829883a 	mov	r20,r21
   12f24:	2088703a 	and	r4,r4,r2
   12f28:	003f8506 	br	12d40 <__alt_data_end+0xffff2d40>

00012f2c <__fixsfsi>:
   12f2c:	200ad5fa 	srli	r5,r4,23
   12f30:	00c02034 	movhi	r3,128
   12f34:	18ffffc4 	addi	r3,r3,-1
   12f38:	29403fcc 	andi	r5,r5,255
   12f3c:	00801f84 	movi	r2,126
   12f40:	1906703a 	and	r3,r3,r4
   12f44:	2008d7fa 	srli	r4,r4,31
   12f48:	11400e0e 	bge	r2,r5,12f84 <__fixsfsi+0x58>
   12f4c:	00802744 	movi	r2,157
   12f50:	11400816 	blt	r2,r5,12f74 <__fixsfsi+0x48>
   12f54:	00802544 	movi	r2,149
   12f58:	18c02034 	orhi	r3,r3,128
   12f5c:	11400b0e 	bge	r2,r5,12f8c <__fixsfsi+0x60>
   12f60:	28bfda84 	addi	r2,r5,-150
   12f64:	1884983a 	sll	r2,r3,r2
   12f68:	20000726 	beq	r4,zero,12f88 <__fixsfsi+0x5c>
   12f6c:	0085c83a 	sub	r2,zero,r2
   12f70:	f800283a 	ret
   12f74:	00a00034 	movhi	r2,32768
   12f78:	10bfffc4 	addi	r2,r2,-1
   12f7c:	2085883a 	add	r2,r4,r2
   12f80:	f800283a 	ret
   12f84:	0005883a 	mov	r2,zero
   12f88:	f800283a 	ret
   12f8c:	00802584 	movi	r2,150
   12f90:	1145c83a 	sub	r2,r2,r5
   12f94:	1884d83a 	srl	r2,r3,r2
   12f98:	003ff306 	br	12f68 <__alt_data_end+0xffff2f68>

00012f9c <__floatsisf>:
   12f9c:	defffd04 	addi	sp,sp,-12
   12fa0:	dfc00215 	stw	ra,8(sp)
   12fa4:	dc400115 	stw	r17,4(sp)
   12fa8:	dc000015 	stw	r16,0(sp)
   12fac:	20003526 	beq	r4,zero,13084 <__floatsisf+0xe8>
   12fb0:	2021883a 	mov	r16,r4
   12fb4:	2022d7fa 	srli	r17,r4,31
   12fb8:	20003616 	blt	r4,zero,13094 <__floatsisf+0xf8>
   12fbc:	8009883a 	mov	r4,r16
   12fc0:	0015a000 	call	15a00 <__clzsi2>
   12fc4:	00c02784 	movi	r3,158
   12fc8:	1887c83a 	sub	r3,r3,r2
   12fcc:	01002584 	movi	r4,150
   12fd0:	20c01416 	blt	r4,r3,13024 <__floatsisf+0x88>
   12fd4:	20c9c83a 	sub	r4,r4,r3
   12fd8:	8120983a 	sll	r16,r16,r4
   12fdc:	00802034 	movhi	r2,128
   12fe0:	10bfffc4 	addi	r2,r2,-1
   12fe4:	8809883a 	mov	r4,r17
   12fe8:	80a0703a 	and	r16,r16,r2
   12fec:	18803fcc 	andi	r2,r3,255
   12ff0:	100695fa 	slli	r3,r2,23
   12ff4:	20803fcc 	andi	r2,r4,255
   12ff8:	100897fa 	slli	r4,r2,31
   12ffc:	00802034 	movhi	r2,128
   13000:	10bfffc4 	addi	r2,r2,-1
   13004:	8084703a 	and	r2,r16,r2
   13008:	10c4b03a 	or	r2,r2,r3
   1300c:	1104b03a 	or	r2,r2,r4
   13010:	dfc00217 	ldw	ra,8(sp)
   13014:	dc400117 	ldw	r17,4(sp)
   13018:	dc000017 	ldw	r16,0(sp)
   1301c:	dec00304 	addi	sp,sp,12
   13020:	f800283a 	ret
   13024:	01002644 	movi	r4,153
   13028:	20c01c16 	blt	r4,r3,1309c <__floatsisf+0x100>
   1302c:	20c9c83a 	sub	r4,r4,r3
   13030:	8120983a 	sll	r16,r16,r4
   13034:	013f0034 	movhi	r4,64512
   13038:	213fffc4 	addi	r4,r4,-1
   1303c:	814001cc 	andi	r5,r16,7
   13040:	8108703a 	and	r4,r16,r4
   13044:	28000426 	beq	r5,zero,13058 <__floatsisf+0xbc>
   13048:	840003cc 	andi	r16,r16,15
   1304c:	01400104 	movi	r5,4
   13050:	81400126 	beq	r16,r5,13058 <__floatsisf+0xbc>
   13054:	2149883a 	add	r4,r4,r5
   13058:	2141002c 	andhi	r5,r4,1024
   1305c:	28000526 	beq	r5,zero,13074 <__floatsisf+0xd8>
   13060:	00c027c4 	movi	r3,159
   13064:	1887c83a 	sub	r3,r3,r2
   13068:	00bf0034 	movhi	r2,64512
   1306c:	10bfffc4 	addi	r2,r2,-1
   13070:	2088703a 	and	r4,r4,r2
   13074:	202091ba 	slli	r16,r4,6
   13078:	8809883a 	mov	r4,r17
   1307c:	8020d27a 	srli	r16,r16,9
   13080:	003fda06 	br	12fec <__alt_data_end+0xffff2fec>
   13084:	0009883a 	mov	r4,zero
   13088:	0007883a 	mov	r3,zero
   1308c:	0021883a 	mov	r16,zero
   13090:	003fd606 	br	12fec <__alt_data_end+0xffff2fec>
   13094:	0121c83a 	sub	r16,zero,r4
   13098:	003fc806 	br	12fbc <__alt_data_end+0xffff2fbc>
   1309c:	01002e44 	movi	r4,185
   130a0:	20c9c83a 	sub	r4,r4,r3
   130a4:	01400144 	movi	r5,5
   130a8:	8108983a 	sll	r4,r16,r4
   130ac:	288bc83a 	sub	r5,r5,r2
   130b0:	8160d83a 	srl	r16,r16,r5
   130b4:	2008c03a 	cmpne	r4,r4,zero
   130b8:	8120b03a 	or	r16,r16,r4
   130bc:	003fdd06 	br	13034 <__alt_data_end+0xffff3034>

000130c0 <__adddf3>:
   130c0:	02c00434 	movhi	r11,16
   130c4:	5affffc4 	addi	r11,r11,-1
   130c8:	2806d7fa 	srli	r3,r5,31
   130cc:	2ad4703a 	and	r10,r5,r11
   130d0:	3ad2703a 	and	r9,r7,r11
   130d4:	3804d53a 	srli	r2,r7,20
   130d8:	3018d77a 	srli	r12,r6,29
   130dc:	280ad53a 	srli	r5,r5,20
   130e0:	501490fa 	slli	r10,r10,3
   130e4:	2010d77a 	srli	r8,r4,29
   130e8:	481290fa 	slli	r9,r9,3
   130ec:	380ed7fa 	srli	r7,r7,31
   130f0:	defffb04 	addi	sp,sp,-20
   130f4:	dc800215 	stw	r18,8(sp)
   130f8:	dc400115 	stw	r17,4(sp)
   130fc:	dc000015 	stw	r16,0(sp)
   13100:	dfc00415 	stw	ra,16(sp)
   13104:	dcc00315 	stw	r19,12(sp)
   13108:	1c803fcc 	andi	r18,r3,255
   1310c:	2c01ffcc 	andi	r16,r5,2047
   13110:	5210b03a 	or	r8,r10,r8
   13114:	202290fa 	slli	r17,r4,3
   13118:	1081ffcc 	andi	r2,r2,2047
   1311c:	4b12b03a 	or	r9,r9,r12
   13120:	300c90fa 	slli	r6,r6,3
   13124:	91c07526 	beq	r18,r7,132fc <__adddf3+0x23c>
   13128:	8087c83a 	sub	r3,r16,r2
   1312c:	00c0ab0e 	bge	zero,r3,133dc <__adddf3+0x31c>
   13130:	10002a1e 	bne	r2,zero,131dc <__adddf3+0x11c>
   13134:	4984b03a 	or	r2,r9,r6
   13138:	1000961e 	bne	r2,zero,13394 <__adddf3+0x2d4>
   1313c:	888001cc 	andi	r2,r17,7
   13140:	10000726 	beq	r2,zero,13160 <__adddf3+0xa0>
   13144:	888003cc 	andi	r2,r17,15
   13148:	00c00104 	movi	r3,4
   1314c:	10c00426 	beq	r2,r3,13160 <__adddf3+0xa0>
   13150:	88c7883a 	add	r3,r17,r3
   13154:	1c63803a 	cmpltu	r17,r3,r17
   13158:	4451883a 	add	r8,r8,r17
   1315c:	1823883a 	mov	r17,r3
   13160:	4080202c 	andhi	r2,r8,128
   13164:	10005926 	beq	r2,zero,132cc <__adddf3+0x20c>
   13168:	84000044 	addi	r16,r16,1
   1316c:	0081ffc4 	movi	r2,2047
   13170:	8080ba26 	beq	r16,r2,1345c <__adddf3+0x39c>
   13174:	00bfe034 	movhi	r2,65408
   13178:	10bfffc4 	addi	r2,r2,-1
   1317c:	4090703a 	and	r8,r8,r2
   13180:	4004977a 	slli	r2,r8,29
   13184:	4010927a 	slli	r8,r8,9
   13188:	8822d0fa 	srli	r17,r17,3
   1318c:	8401ffcc 	andi	r16,r16,2047
   13190:	4010d33a 	srli	r8,r8,12
   13194:	9007883a 	mov	r3,r18
   13198:	1444b03a 	or	r2,r2,r17
   1319c:	8401ffcc 	andi	r16,r16,2047
   131a0:	8020953a 	slli	r16,r16,20
   131a4:	18c03fcc 	andi	r3,r3,255
   131a8:	01000434 	movhi	r4,16
   131ac:	213fffc4 	addi	r4,r4,-1
   131b0:	180697fa 	slli	r3,r3,31
   131b4:	4110703a 	and	r8,r8,r4
   131b8:	4410b03a 	or	r8,r8,r16
   131bc:	40c6b03a 	or	r3,r8,r3
   131c0:	dfc00417 	ldw	ra,16(sp)
   131c4:	dcc00317 	ldw	r19,12(sp)
   131c8:	dc800217 	ldw	r18,8(sp)
   131cc:	dc400117 	ldw	r17,4(sp)
   131d0:	dc000017 	ldw	r16,0(sp)
   131d4:	dec00504 	addi	sp,sp,20
   131d8:	f800283a 	ret
   131dc:	0081ffc4 	movi	r2,2047
   131e0:	80bfd626 	beq	r16,r2,1313c <__alt_data_end+0xffff313c>
   131e4:	4a402034 	orhi	r9,r9,128
   131e8:	00800e04 	movi	r2,56
   131ec:	10c09f16 	blt	r2,r3,1346c <__adddf3+0x3ac>
   131f0:	008007c4 	movi	r2,31
   131f4:	10c0c216 	blt	r2,r3,13500 <__adddf3+0x440>
   131f8:	00800804 	movi	r2,32
   131fc:	10c5c83a 	sub	r2,r2,r3
   13200:	488a983a 	sll	r5,r9,r2
   13204:	30c8d83a 	srl	r4,r6,r3
   13208:	3084983a 	sll	r2,r6,r2
   1320c:	48c6d83a 	srl	r3,r9,r3
   13210:	290cb03a 	or	r6,r5,r4
   13214:	1004c03a 	cmpne	r2,r2,zero
   13218:	308cb03a 	or	r6,r6,r2
   1321c:	898dc83a 	sub	r6,r17,r6
   13220:	89a3803a 	cmpltu	r17,r17,r6
   13224:	40d1c83a 	sub	r8,r8,r3
   13228:	4451c83a 	sub	r8,r8,r17
   1322c:	3023883a 	mov	r17,r6
   13230:	4080202c 	andhi	r2,r8,128
   13234:	10002326 	beq	r2,zero,132c4 <__adddf3+0x204>
   13238:	04c02034 	movhi	r19,128
   1323c:	9cffffc4 	addi	r19,r19,-1
   13240:	44e6703a 	and	r19,r8,r19
   13244:	98007626 	beq	r19,zero,13420 <__adddf3+0x360>
   13248:	9809883a 	mov	r4,r19
   1324c:	0015a000 	call	15a00 <__clzsi2>
   13250:	10fffe04 	addi	r3,r2,-8
   13254:	010007c4 	movi	r4,31
   13258:	20c07716 	blt	r4,r3,13438 <__adddf3+0x378>
   1325c:	00800804 	movi	r2,32
   13260:	10c5c83a 	sub	r2,r2,r3
   13264:	8884d83a 	srl	r2,r17,r2
   13268:	98d0983a 	sll	r8,r19,r3
   1326c:	88e2983a 	sll	r17,r17,r3
   13270:	1204b03a 	or	r2,r2,r8
   13274:	1c007416 	blt	r3,r16,13448 <__adddf3+0x388>
   13278:	1c21c83a 	sub	r16,r3,r16
   1327c:	82000044 	addi	r8,r16,1
   13280:	00c007c4 	movi	r3,31
   13284:	1a009116 	blt	r3,r8,134cc <__adddf3+0x40c>
   13288:	00c00804 	movi	r3,32
   1328c:	1a07c83a 	sub	r3,r3,r8
   13290:	8a08d83a 	srl	r4,r17,r8
   13294:	88e2983a 	sll	r17,r17,r3
   13298:	10c6983a 	sll	r3,r2,r3
   1329c:	1210d83a 	srl	r8,r2,r8
   132a0:	8804c03a 	cmpne	r2,r17,zero
   132a4:	1906b03a 	or	r3,r3,r4
   132a8:	18a2b03a 	or	r17,r3,r2
   132ac:	0021883a 	mov	r16,zero
   132b0:	003fa206 	br	1313c <__alt_data_end+0xffff313c>
   132b4:	1890b03a 	or	r8,r3,r2
   132b8:	40017d26 	beq	r8,zero,138b0 <__adddf3+0x7f0>
   132bc:	1011883a 	mov	r8,r2
   132c0:	1823883a 	mov	r17,r3
   132c4:	888001cc 	andi	r2,r17,7
   132c8:	103f9e1e 	bne	r2,zero,13144 <__alt_data_end+0xffff3144>
   132cc:	4004977a 	slli	r2,r8,29
   132d0:	8822d0fa 	srli	r17,r17,3
   132d4:	4010d0fa 	srli	r8,r8,3
   132d8:	9007883a 	mov	r3,r18
   132dc:	1444b03a 	or	r2,r2,r17
   132e0:	0101ffc4 	movi	r4,2047
   132e4:	81002426 	beq	r16,r4,13378 <__adddf3+0x2b8>
   132e8:	8120703a 	and	r16,r16,r4
   132ec:	01000434 	movhi	r4,16
   132f0:	213fffc4 	addi	r4,r4,-1
   132f4:	4110703a 	and	r8,r8,r4
   132f8:	003fa806 	br	1319c <__alt_data_end+0xffff319c>
   132fc:	8089c83a 	sub	r4,r16,r2
   13300:	01005e0e 	bge	zero,r4,1347c <__adddf3+0x3bc>
   13304:	10002b26 	beq	r2,zero,133b4 <__adddf3+0x2f4>
   13308:	0081ffc4 	movi	r2,2047
   1330c:	80bf8b26 	beq	r16,r2,1313c <__alt_data_end+0xffff313c>
   13310:	4a402034 	orhi	r9,r9,128
   13314:	00800e04 	movi	r2,56
   13318:	1100a40e 	bge	r2,r4,135ac <__adddf3+0x4ec>
   1331c:	498cb03a 	or	r6,r9,r6
   13320:	300ac03a 	cmpne	r5,r6,zero
   13324:	0013883a 	mov	r9,zero
   13328:	2c4b883a 	add	r5,r5,r17
   1332c:	2c63803a 	cmpltu	r17,r5,r17
   13330:	4a11883a 	add	r8,r9,r8
   13334:	8a11883a 	add	r8,r17,r8
   13338:	2823883a 	mov	r17,r5
   1333c:	4080202c 	andhi	r2,r8,128
   13340:	103fe026 	beq	r2,zero,132c4 <__alt_data_end+0xffff32c4>
   13344:	84000044 	addi	r16,r16,1
   13348:	0081ffc4 	movi	r2,2047
   1334c:	8080d226 	beq	r16,r2,13698 <__adddf3+0x5d8>
   13350:	00bfe034 	movhi	r2,65408
   13354:	10bfffc4 	addi	r2,r2,-1
   13358:	4090703a 	and	r8,r8,r2
   1335c:	880ad07a 	srli	r5,r17,1
   13360:	400897fa 	slli	r4,r8,31
   13364:	88c0004c 	andi	r3,r17,1
   13368:	28e2b03a 	or	r17,r5,r3
   1336c:	4010d07a 	srli	r8,r8,1
   13370:	2462b03a 	or	r17,r4,r17
   13374:	003f7106 	br	1313c <__alt_data_end+0xffff313c>
   13378:	4088b03a 	or	r4,r8,r2
   1337c:	20014526 	beq	r4,zero,13894 <__adddf3+0x7d4>
   13380:	01000434 	movhi	r4,16
   13384:	42000234 	orhi	r8,r8,8
   13388:	213fffc4 	addi	r4,r4,-1
   1338c:	4110703a 	and	r8,r8,r4
   13390:	003f8206 	br	1319c <__alt_data_end+0xffff319c>
   13394:	18ffffc4 	addi	r3,r3,-1
   13398:	1800491e 	bne	r3,zero,134c0 <__adddf3+0x400>
   1339c:	898bc83a 	sub	r5,r17,r6
   133a0:	8963803a 	cmpltu	r17,r17,r5
   133a4:	4251c83a 	sub	r8,r8,r9
   133a8:	4451c83a 	sub	r8,r8,r17
   133ac:	2823883a 	mov	r17,r5
   133b0:	003f9f06 	br	13230 <__alt_data_end+0xffff3230>
   133b4:	4984b03a 	or	r2,r9,r6
   133b8:	103f6026 	beq	r2,zero,1313c <__alt_data_end+0xffff313c>
   133bc:	213fffc4 	addi	r4,r4,-1
   133c0:	2000931e 	bne	r4,zero,13610 <__adddf3+0x550>
   133c4:	898d883a 	add	r6,r17,r6
   133c8:	3463803a 	cmpltu	r17,r6,r17
   133cc:	4251883a 	add	r8,r8,r9
   133d0:	8a11883a 	add	r8,r17,r8
   133d4:	3023883a 	mov	r17,r6
   133d8:	003fd806 	br	1333c <__alt_data_end+0xffff333c>
   133dc:	1800541e 	bne	r3,zero,13530 <__adddf3+0x470>
   133e0:	80800044 	addi	r2,r16,1
   133e4:	1081ffcc 	andi	r2,r2,2047
   133e8:	00c00044 	movi	r3,1
   133ec:	1880a00e 	bge	r3,r2,13670 <__adddf3+0x5b0>
   133f0:	8989c83a 	sub	r4,r17,r6
   133f4:	8905803a 	cmpltu	r2,r17,r4
   133f8:	4267c83a 	sub	r19,r8,r9
   133fc:	98a7c83a 	sub	r19,r19,r2
   13400:	9880202c 	andhi	r2,r19,128
   13404:	10006326 	beq	r2,zero,13594 <__adddf3+0x4d4>
   13408:	3463c83a 	sub	r17,r6,r17
   1340c:	4a07c83a 	sub	r3,r9,r8
   13410:	344d803a 	cmpltu	r6,r6,r17
   13414:	19a7c83a 	sub	r19,r3,r6
   13418:	3825883a 	mov	r18,r7
   1341c:	983f8a1e 	bne	r19,zero,13248 <__alt_data_end+0xffff3248>
   13420:	8809883a 	mov	r4,r17
   13424:	0015a000 	call	15a00 <__clzsi2>
   13428:	10800804 	addi	r2,r2,32
   1342c:	10fffe04 	addi	r3,r2,-8
   13430:	010007c4 	movi	r4,31
   13434:	20ff890e 	bge	r4,r3,1325c <__alt_data_end+0xffff325c>
   13438:	10bff604 	addi	r2,r2,-40
   1343c:	8884983a 	sll	r2,r17,r2
   13440:	0023883a 	mov	r17,zero
   13444:	1c3f8c0e 	bge	r3,r16,13278 <__alt_data_end+0xffff3278>
   13448:	023fe034 	movhi	r8,65408
   1344c:	423fffc4 	addi	r8,r8,-1
   13450:	80e1c83a 	sub	r16,r16,r3
   13454:	1210703a 	and	r8,r2,r8
   13458:	003f3806 	br	1313c <__alt_data_end+0xffff313c>
   1345c:	9007883a 	mov	r3,r18
   13460:	0011883a 	mov	r8,zero
   13464:	0005883a 	mov	r2,zero
   13468:	003f4c06 	br	1319c <__alt_data_end+0xffff319c>
   1346c:	498cb03a 	or	r6,r9,r6
   13470:	300cc03a 	cmpne	r6,r6,zero
   13474:	0007883a 	mov	r3,zero
   13478:	003f6806 	br	1321c <__alt_data_end+0xffff321c>
   1347c:	20009c1e 	bne	r4,zero,136f0 <__adddf3+0x630>
   13480:	80800044 	addi	r2,r16,1
   13484:	1141ffcc 	andi	r5,r2,2047
   13488:	01000044 	movi	r4,1
   1348c:	2140670e 	bge	r4,r5,1362c <__adddf3+0x56c>
   13490:	0101ffc4 	movi	r4,2047
   13494:	11007f26 	beq	r2,r4,13694 <__adddf3+0x5d4>
   13498:	898d883a 	add	r6,r17,r6
   1349c:	4247883a 	add	r3,r8,r9
   134a0:	3451803a 	cmpltu	r8,r6,r17
   134a4:	40d1883a 	add	r8,r8,r3
   134a8:	402297fa 	slli	r17,r8,31
   134ac:	300cd07a 	srli	r6,r6,1
   134b0:	4010d07a 	srli	r8,r8,1
   134b4:	1021883a 	mov	r16,r2
   134b8:	89a2b03a 	or	r17,r17,r6
   134bc:	003f1f06 	br	1313c <__alt_data_end+0xffff313c>
   134c0:	0081ffc4 	movi	r2,2047
   134c4:	80bf481e 	bne	r16,r2,131e8 <__alt_data_end+0xffff31e8>
   134c8:	003f1c06 	br	1313c <__alt_data_end+0xffff313c>
   134cc:	843ff844 	addi	r16,r16,-31
   134d0:	01000804 	movi	r4,32
   134d4:	1406d83a 	srl	r3,r2,r16
   134d8:	41005026 	beq	r8,r4,1361c <__adddf3+0x55c>
   134dc:	01001004 	movi	r4,64
   134e0:	2211c83a 	sub	r8,r4,r8
   134e4:	1204983a 	sll	r2,r2,r8
   134e8:	88a2b03a 	or	r17,r17,r2
   134ec:	8822c03a 	cmpne	r17,r17,zero
   134f0:	1c62b03a 	or	r17,r3,r17
   134f4:	0011883a 	mov	r8,zero
   134f8:	0021883a 	mov	r16,zero
   134fc:	003f7106 	br	132c4 <__alt_data_end+0xffff32c4>
   13500:	193ff804 	addi	r4,r3,-32
   13504:	00800804 	movi	r2,32
   13508:	4908d83a 	srl	r4,r9,r4
   1350c:	18804526 	beq	r3,r2,13624 <__adddf3+0x564>
   13510:	00801004 	movi	r2,64
   13514:	10c5c83a 	sub	r2,r2,r3
   13518:	4886983a 	sll	r3,r9,r2
   1351c:	198cb03a 	or	r6,r3,r6
   13520:	300cc03a 	cmpne	r6,r6,zero
   13524:	218cb03a 	or	r6,r4,r6
   13528:	0007883a 	mov	r3,zero
   1352c:	003f3b06 	br	1321c <__alt_data_end+0xffff321c>
   13530:	80002a26 	beq	r16,zero,135dc <__adddf3+0x51c>
   13534:	0101ffc4 	movi	r4,2047
   13538:	11006826 	beq	r2,r4,136dc <__adddf3+0x61c>
   1353c:	00c7c83a 	sub	r3,zero,r3
   13540:	42002034 	orhi	r8,r8,128
   13544:	01000e04 	movi	r4,56
   13548:	20c07c16 	blt	r4,r3,1373c <__adddf3+0x67c>
   1354c:	010007c4 	movi	r4,31
   13550:	20c0da16 	blt	r4,r3,138bc <__adddf3+0x7fc>
   13554:	01000804 	movi	r4,32
   13558:	20c9c83a 	sub	r4,r4,r3
   1355c:	4114983a 	sll	r10,r8,r4
   13560:	88cad83a 	srl	r5,r17,r3
   13564:	8908983a 	sll	r4,r17,r4
   13568:	40c6d83a 	srl	r3,r8,r3
   1356c:	5162b03a 	or	r17,r10,r5
   13570:	2008c03a 	cmpne	r4,r4,zero
   13574:	8922b03a 	or	r17,r17,r4
   13578:	3463c83a 	sub	r17,r6,r17
   1357c:	48c7c83a 	sub	r3,r9,r3
   13580:	344d803a 	cmpltu	r6,r6,r17
   13584:	1991c83a 	sub	r8,r3,r6
   13588:	1021883a 	mov	r16,r2
   1358c:	3825883a 	mov	r18,r7
   13590:	003f2706 	br	13230 <__alt_data_end+0xffff3230>
   13594:	24d0b03a 	or	r8,r4,r19
   13598:	40001b1e 	bne	r8,zero,13608 <__adddf3+0x548>
   1359c:	0005883a 	mov	r2,zero
   135a0:	0007883a 	mov	r3,zero
   135a4:	0021883a 	mov	r16,zero
   135a8:	003f4d06 	br	132e0 <__alt_data_end+0xffff32e0>
   135ac:	008007c4 	movi	r2,31
   135b0:	11003c16 	blt	r2,r4,136a4 <__adddf3+0x5e4>
   135b4:	00800804 	movi	r2,32
   135b8:	1105c83a 	sub	r2,r2,r4
   135bc:	488e983a 	sll	r7,r9,r2
   135c0:	310ad83a 	srl	r5,r6,r4
   135c4:	3084983a 	sll	r2,r6,r2
   135c8:	4912d83a 	srl	r9,r9,r4
   135cc:	394ab03a 	or	r5,r7,r5
   135d0:	1004c03a 	cmpne	r2,r2,zero
   135d4:	288ab03a 	or	r5,r5,r2
   135d8:	003f5306 	br	13328 <__alt_data_end+0xffff3328>
   135dc:	4448b03a 	or	r4,r8,r17
   135e0:	20003e26 	beq	r4,zero,136dc <__adddf3+0x61c>
   135e4:	00c6303a 	nor	r3,zero,r3
   135e8:	18003a1e 	bne	r3,zero,136d4 <__adddf3+0x614>
   135ec:	3463c83a 	sub	r17,r6,r17
   135f0:	4a07c83a 	sub	r3,r9,r8
   135f4:	344d803a 	cmpltu	r6,r6,r17
   135f8:	1991c83a 	sub	r8,r3,r6
   135fc:	1021883a 	mov	r16,r2
   13600:	3825883a 	mov	r18,r7
   13604:	003f0a06 	br	13230 <__alt_data_end+0xffff3230>
   13608:	2023883a 	mov	r17,r4
   1360c:	003f0d06 	br	13244 <__alt_data_end+0xffff3244>
   13610:	0081ffc4 	movi	r2,2047
   13614:	80bf3f1e 	bne	r16,r2,13314 <__alt_data_end+0xffff3314>
   13618:	003ec806 	br	1313c <__alt_data_end+0xffff313c>
   1361c:	0005883a 	mov	r2,zero
   13620:	003fb106 	br	134e8 <__alt_data_end+0xffff34e8>
   13624:	0007883a 	mov	r3,zero
   13628:	003fbc06 	br	1351c <__alt_data_end+0xffff351c>
   1362c:	4444b03a 	or	r2,r8,r17
   13630:	8000871e 	bne	r16,zero,13850 <__adddf3+0x790>
   13634:	1000ba26 	beq	r2,zero,13920 <__adddf3+0x860>
   13638:	4984b03a 	or	r2,r9,r6
   1363c:	103ebf26 	beq	r2,zero,1313c <__alt_data_end+0xffff313c>
   13640:	8985883a 	add	r2,r17,r6
   13644:	4247883a 	add	r3,r8,r9
   13648:	1451803a 	cmpltu	r8,r2,r17
   1364c:	40d1883a 	add	r8,r8,r3
   13650:	40c0202c 	andhi	r3,r8,128
   13654:	1023883a 	mov	r17,r2
   13658:	183f1a26 	beq	r3,zero,132c4 <__alt_data_end+0xffff32c4>
   1365c:	00bfe034 	movhi	r2,65408
   13660:	10bfffc4 	addi	r2,r2,-1
   13664:	2021883a 	mov	r16,r4
   13668:	4090703a 	and	r8,r8,r2
   1366c:	003eb306 	br	1313c <__alt_data_end+0xffff313c>
   13670:	4444b03a 	or	r2,r8,r17
   13674:	8000291e 	bne	r16,zero,1371c <__adddf3+0x65c>
   13678:	10004b1e 	bne	r2,zero,137a8 <__adddf3+0x6e8>
   1367c:	4990b03a 	or	r8,r9,r6
   13680:	40008b26 	beq	r8,zero,138b0 <__adddf3+0x7f0>
   13684:	4811883a 	mov	r8,r9
   13688:	3023883a 	mov	r17,r6
   1368c:	3825883a 	mov	r18,r7
   13690:	003eaa06 	br	1313c <__alt_data_end+0xffff313c>
   13694:	1021883a 	mov	r16,r2
   13698:	0011883a 	mov	r8,zero
   1369c:	0005883a 	mov	r2,zero
   136a0:	003f0f06 	br	132e0 <__alt_data_end+0xffff32e0>
   136a4:	217ff804 	addi	r5,r4,-32
   136a8:	00800804 	movi	r2,32
   136ac:	494ad83a 	srl	r5,r9,r5
   136b0:	20807d26 	beq	r4,r2,138a8 <__adddf3+0x7e8>
   136b4:	00801004 	movi	r2,64
   136b8:	1109c83a 	sub	r4,r2,r4
   136bc:	4912983a 	sll	r9,r9,r4
   136c0:	498cb03a 	or	r6,r9,r6
   136c4:	300cc03a 	cmpne	r6,r6,zero
   136c8:	298ab03a 	or	r5,r5,r6
   136cc:	0013883a 	mov	r9,zero
   136d0:	003f1506 	br	13328 <__alt_data_end+0xffff3328>
   136d4:	0101ffc4 	movi	r4,2047
   136d8:	113f9a1e 	bne	r2,r4,13544 <__alt_data_end+0xffff3544>
   136dc:	4811883a 	mov	r8,r9
   136e0:	3023883a 	mov	r17,r6
   136e4:	1021883a 	mov	r16,r2
   136e8:	3825883a 	mov	r18,r7
   136ec:	003e9306 	br	1313c <__alt_data_end+0xffff313c>
   136f0:	8000161e 	bne	r16,zero,1374c <__adddf3+0x68c>
   136f4:	444ab03a 	or	r5,r8,r17
   136f8:	28005126 	beq	r5,zero,13840 <__adddf3+0x780>
   136fc:	0108303a 	nor	r4,zero,r4
   13700:	20004d1e 	bne	r4,zero,13838 <__adddf3+0x778>
   13704:	89a3883a 	add	r17,r17,r6
   13708:	4253883a 	add	r9,r8,r9
   1370c:	898d803a 	cmpltu	r6,r17,r6
   13710:	3251883a 	add	r8,r6,r9
   13714:	1021883a 	mov	r16,r2
   13718:	003f0806 	br	1333c <__alt_data_end+0xffff333c>
   1371c:	1000301e 	bne	r2,zero,137e0 <__adddf3+0x720>
   13720:	4984b03a 	or	r2,r9,r6
   13724:	10007126 	beq	r2,zero,138ec <__adddf3+0x82c>
   13728:	4811883a 	mov	r8,r9
   1372c:	3023883a 	mov	r17,r6
   13730:	3825883a 	mov	r18,r7
   13734:	0401ffc4 	movi	r16,2047
   13738:	003e8006 	br	1313c <__alt_data_end+0xffff313c>
   1373c:	4462b03a 	or	r17,r8,r17
   13740:	8822c03a 	cmpne	r17,r17,zero
   13744:	0007883a 	mov	r3,zero
   13748:	003f8b06 	br	13578 <__alt_data_end+0xffff3578>
   1374c:	0141ffc4 	movi	r5,2047
   13750:	11403b26 	beq	r2,r5,13840 <__adddf3+0x780>
   13754:	0109c83a 	sub	r4,zero,r4
   13758:	42002034 	orhi	r8,r8,128
   1375c:	01400e04 	movi	r5,56
   13760:	29006716 	blt	r5,r4,13900 <__adddf3+0x840>
   13764:	014007c4 	movi	r5,31
   13768:	29007016 	blt	r5,r4,1392c <__adddf3+0x86c>
   1376c:	01400804 	movi	r5,32
   13770:	290bc83a 	sub	r5,r5,r4
   13774:	4154983a 	sll	r10,r8,r5
   13778:	890ed83a 	srl	r7,r17,r4
   1377c:	894a983a 	sll	r5,r17,r5
   13780:	4108d83a 	srl	r4,r8,r4
   13784:	51e2b03a 	or	r17,r10,r7
   13788:	280ac03a 	cmpne	r5,r5,zero
   1378c:	8962b03a 	or	r17,r17,r5
   13790:	89a3883a 	add	r17,r17,r6
   13794:	2253883a 	add	r9,r4,r9
   13798:	898d803a 	cmpltu	r6,r17,r6
   1379c:	3251883a 	add	r8,r6,r9
   137a0:	1021883a 	mov	r16,r2
   137a4:	003ee506 	br	1333c <__alt_data_end+0xffff333c>
   137a8:	4984b03a 	or	r2,r9,r6
   137ac:	103e6326 	beq	r2,zero,1313c <__alt_data_end+0xffff313c>
   137b0:	8987c83a 	sub	r3,r17,r6
   137b4:	88c9803a 	cmpltu	r4,r17,r3
   137b8:	4245c83a 	sub	r2,r8,r9
   137bc:	1105c83a 	sub	r2,r2,r4
   137c0:	1100202c 	andhi	r4,r2,128
   137c4:	203ebb26 	beq	r4,zero,132b4 <__alt_data_end+0xffff32b4>
   137c8:	3463c83a 	sub	r17,r6,r17
   137cc:	4a07c83a 	sub	r3,r9,r8
   137d0:	344d803a 	cmpltu	r6,r6,r17
   137d4:	1991c83a 	sub	r8,r3,r6
   137d8:	3825883a 	mov	r18,r7
   137dc:	003e5706 	br	1313c <__alt_data_end+0xffff313c>
   137e0:	4984b03a 	or	r2,r9,r6
   137e4:	10002e26 	beq	r2,zero,138a0 <__adddf3+0x7e0>
   137e8:	4004d0fa 	srli	r2,r8,3
   137ec:	8822d0fa 	srli	r17,r17,3
   137f0:	4010977a 	slli	r8,r8,29
   137f4:	10c0022c 	andhi	r3,r2,8
   137f8:	4462b03a 	or	r17,r8,r17
   137fc:	18000826 	beq	r3,zero,13820 <__adddf3+0x760>
   13800:	4808d0fa 	srli	r4,r9,3
   13804:	20c0022c 	andhi	r3,r4,8
   13808:	1800051e 	bne	r3,zero,13820 <__adddf3+0x760>
   1380c:	300cd0fa 	srli	r6,r6,3
   13810:	4806977a 	slli	r3,r9,29
   13814:	2005883a 	mov	r2,r4
   13818:	3825883a 	mov	r18,r7
   1381c:	19a2b03a 	or	r17,r3,r6
   13820:	8810d77a 	srli	r8,r17,29
   13824:	100490fa 	slli	r2,r2,3
   13828:	882290fa 	slli	r17,r17,3
   1382c:	0401ffc4 	movi	r16,2047
   13830:	4090b03a 	or	r8,r8,r2
   13834:	003e4106 	br	1313c <__alt_data_end+0xffff313c>
   13838:	0141ffc4 	movi	r5,2047
   1383c:	117fc71e 	bne	r2,r5,1375c <__alt_data_end+0xffff375c>
   13840:	4811883a 	mov	r8,r9
   13844:	3023883a 	mov	r17,r6
   13848:	1021883a 	mov	r16,r2
   1384c:	003e3b06 	br	1313c <__alt_data_end+0xffff313c>
   13850:	10002f26 	beq	r2,zero,13910 <__adddf3+0x850>
   13854:	4984b03a 	or	r2,r9,r6
   13858:	10001126 	beq	r2,zero,138a0 <__adddf3+0x7e0>
   1385c:	4004d0fa 	srli	r2,r8,3
   13860:	8822d0fa 	srli	r17,r17,3
   13864:	4010977a 	slli	r8,r8,29
   13868:	10c0022c 	andhi	r3,r2,8
   1386c:	4462b03a 	or	r17,r8,r17
   13870:	183feb26 	beq	r3,zero,13820 <__alt_data_end+0xffff3820>
   13874:	4808d0fa 	srli	r4,r9,3
   13878:	20c0022c 	andhi	r3,r4,8
   1387c:	183fe81e 	bne	r3,zero,13820 <__alt_data_end+0xffff3820>
   13880:	300cd0fa 	srli	r6,r6,3
   13884:	4806977a 	slli	r3,r9,29
   13888:	2005883a 	mov	r2,r4
   1388c:	19a2b03a 	or	r17,r3,r6
   13890:	003fe306 	br	13820 <__alt_data_end+0xffff3820>
   13894:	0011883a 	mov	r8,zero
   13898:	0005883a 	mov	r2,zero
   1389c:	003e3f06 	br	1319c <__alt_data_end+0xffff319c>
   138a0:	0401ffc4 	movi	r16,2047
   138a4:	003e2506 	br	1313c <__alt_data_end+0xffff313c>
   138a8:	0013883a 	mov	r9,zero
   138ac:	003f8406 	br	136c0 <__alt_data_end+0xffff36c0>
   138b0:	0005883a 	mov	r2,zero
   138b4:	0007883a 	mov	r3,zero
   138b8:	003e8906 	br	132e0 <__alt_data_end+0xffff32e0>
   138bc:	197ff804 	addi	r5,r3,-32
   138c0:	01000804 	movi	r4,32
   138c4:	414ad83a 	srl	r5,r8,r5
   138c8:	19002426 	beq	r3,r4,1395c <__adddf3+0x89c>
   138cc:	01001004 	movi	r4,64
   138d0:	20c7c83a 	sub	r3,r4,r3
   138d4:	40c6983a 	sll	r3,r8,r3
   138d8:	1c46b03a 	or	r3,r3,r17
   138dc:	1806c03a 	cmpne	r3,r3,zero
   138e0:	28e2b03a 	or	r17,r5,r3
   138e4:	0007883a 	mov	r3,zero
   138e8:	003f2306 	br	13578 <__alt_data_end+0xffff3578>
   138ec:	0007883a 	mov	r3,zero
   138f0:	5811883a 	mov	r8,r11
   138f4:	00bfffc4 	movi	r2,-1
   138f8:	0401ffc4 	movi	r16,2047
   138fc:	003e7806 	br	132e0 <__alt_data_end+0xffff32e0>
   13900:	4462b03a 	or	r17,r8,r17
   13904:	8822c03a 	cmpne	r17,r17,zero
   13908:	0009883a 	mov	r4,zero
   1390c:	003fa006 	br	13790 <__alt_data_end+0xffff3790>
   13910:	4811883a 	mov	r8,r9
   13914:	3023883a 	mov	r17,r6
   13918:	0401ffc4 	movi	r16,2047
   1391c:	003e0706 	br	1313c <__alt_data_end+0xffff313c>
   13920:	4811883a 	mov	r8,r9
   13924:	3023883a 	mov	r17,r6
   13928:	003e0406 	br	1313c <__alt_data_end+0xffff313c>
   1392c:	21fff804 	addi	r7,r4,-32
   13930:	01400804 	movi	r5,32
   13934:	41ced83a 	srl	r7,r8,r7
   13938:	21400a26 	beq	r4,r5,13964 <__adddf3+0x8a4>
   1393c:	01401004 	movi	r5,64
   13940:	2909c83a 	sub	r4,r5,r4
   13944:	4108983a 	sll	r4,r8,r4
   13948:	2448b03a 	or	r4,r4,r17
   1394c:	2008c03a 	cmpne	r4,r4,zero
   13950:	3922b03a 	or	r17,r7,r4
   13954:	0009883a 	mov	r4,zero
   13958:	003f8d06 	br	13790 <__alt_data_end+0xffff3790>
   1395c:	0007883a 	mov	r3,zero
   13960:	003fdd06 	br	138d8 <__alt_data_end+0xffff38d8>
   13964:	0009883a 	mov	r4,zero
   13968:	003ff706 	br	13948 <__alt_data_end+0xffff3948>

0001396c <__divdf3>:
   1396c:	defff004 	addi	sp,sp,-64
   13970:	dc800815 	stw	r18,32(sp)
   13974:	2824d53a 	srli	r18,r5,20
   13978:	dd800c15 	stw	r22,48(sp)
   1397c:	282cd7fa 	srli	r22,r5,31
   13980:	dc000615 	stw	r16,24(sp)
   13984:	04000434 	movhi	r16,16
   13988:	843fffc4 	addi	r16,r16,-1
   1398c:	dfc00f15 	stw	ra,60(sp)
   13990:	df000e15 	stw	fp,56(sp)
   13994:	ddc00d15 	stw	r23,52(sp)
   13998:	dd400b15 	stw	r21,44(sp)
   1399c:	dd000a15 	stw	r20,40(sp)
   139a0:	dcc00915 	stw	r19,36(sp)
   139a4:	dc400715 	stw	r17,28(sp)
   139a8:	9481ffcc 	andi	r18,r18,2047
   139ac:	2c20703a 	and	r16,r5,r16
   139b0:	b2003fcc 	andi	r8,r22,255
   139b4:	90006126 	beq	r18,zero,13b3c <__divdf3+0x1d0>
   139b8:	0081ffc4 	movi	r2,2047
   139bc:	202b883a 	mov	r21,r4
   139c0:	90803726 	beq	r18,r2,13aa0 <__divdf3+0x134>
   139c4:	80800434 	orhi	r2,r16,16
   139c8:	100490fa 	slli	r2,r2,3
   139cc:	2020d77a 	srli	r16,r4,29
   139d0:	202a90fa 	slli	r21,r4,3
   139d4:	94bf0044 	addi	r18,r18,-1023
   139d8:	80a0b03a 	or	r16,r16,r2
   139dc:	0013883a 	mov	r9,zero
   139e0:	000b883a 	mov	r5,zero
   139e4:	3806d53a 	srli	r3,r7,20
   139e8:	382ed7fa 	srli	r23,r7,31
   139ec:	04400434 	movhi	r17,16
   139f0:	8c7fffc4 	addi	r17,r17,-1
   139f4:	18c1ffcc 	andi	r3,r3,2047
   139f8:	3029883a 	mov	r20,r6
   139fc:	3c62703a 	and	r17,r7,r17
   13a00:	bf003fcc 	andi	fp,r23,255
   13a04:	18006e26 	beq	r3,zero,13bc0 <__divdf3+0x254>
   13a08:	0081ffc4 	movi	r2,2047
   13a0c:	18806626 	beq	r3,r2,13ba8 <__divdf3+0x23c>
   13a10:	88800434 	orhi	r2,r17,16
   13a14:	100490fa 	slli	r2,r2,3
   13a18:	3022d77a 	srli	r17,r6,29
   13a1c:	302890fa 	slli	r20,r6,3
   13a20:	18ff0044 	addi	r3,r3,-1023
   13a24:	88a2b03a 	or	r17,r17,r2
   13a28:	000f883a 	mov	r7,zero
   13a2c:	b5e6f03a 	xor	r19,r22,r23
   13a30:	3a4cb03a 	or	r6,r7,r9
   13a34:	008003c4 	movi	r2,15
   13a38:	9809883a 	mov	r4,r19
   13a3c:	90c7c83a 	sub	r3,r18,r3
   13a40:	9cc03fcc 	andi	r19,r19,255
   13a44:	11809636 	bltu	r2,r6,13ca0 <__divdf3+0x334>
   13a48:	300c90ba 	slli	r6,r6,2
   13a4c:	00800074 	movhi	r2,1
   13a50:	108e9804 	addi	r2,r2,14944
   13a54:	308d883a 	add	r6,r6,r2
   13a58:	30800017 	ldw	r2,0(r6)
   13a5c:	1000683a 	jmp	r2
   13a60:	00013ca0 	cmpeqi	zero,zero,1266
   13a64:	00013ad8 	cmpnei	zero,zero,1259
   13a68:	00013c90 	cmplti	zero,zero,1266
   13a6c:	00013acc 	andi	zero,zero,1259
   13a70:	00013c90 	cmplti	zero,zero,1266
   13a74:	00013c64 	muli	zero,zero,1265
   13a78:	00013c90 	cmplti	zero,zero,1266
   13a7c:	00013acc 	andi	zero,zero,1259
   13a80:	00013ad8 	cmpnei	zero,zero,1259
   13a84:	00013ad8 	cmpnei	zero,zero,1259
   13a88:	00013c64 	muli	zero,zero,1265
   13a8c:	00013acc 	andi	zero,zero,1259
   13a90:	00013abc 	xorhi	zero,zero,1258
   13a94:	00013abc 	xorhi	zero,zero,1258
   13a98:	00013abc 	xorhi	zero,zero,1258
   13a9c:	00014028 	cmpgeui	zero,zero,1280
   13aa0:	2404b03a 	or	r2,r4,r16
   13aa4:	10006c1e 	bne	r2,zero,13c58 <__divdf3+0x2ec>
   13aa8:	02400204 	movi	r9,8
   13aac:	0021883a 	mov	r16,zero
   13ab0:	002b883a 	mov	r21,zero
   13ab4:	01400084 	movi	r5,2
   13ab8:	003fca06 	br	139e4 <__alt_data_end+0xffff39e4>
   13abc:	8023883a 	mov	r17,r16
   13ac0:	a829883a 	mov	r20,r21
   13ac4:	4039883a 	mov	fp,r8
   13ac8:	280f883a 	mov	r7,r5
   13acc:	00800084 	movi	r2,2
   13ad0:	3881601e 	bne	r7,r2,14054 <__divdf3+0x6e8>
   13ad4:	e027883a 	mov	r19,fp
   13ad8:	9900004c 	andi	r4,r19,1
   13adc:	0081ffc4 	movi	r2,2047
   13ae0:	0021883a 	mov	r16,zero
   13ae4:	002b883a 	mov	r21,zero
   13ae8:	1004953a 	slli	r2,r2,20
   13aec:	20c03fcc 	andi	r3,r4,255
   13af0:	01400434 	movhi	r5,16
   13af4:	297fffc4 	addi	r5,r5,-1
   13af8:	180697fa 	slli	r3,r3,31
   13afc:	8160703a 	and	r16,r16,r5
   13b00:	80a0b03a 	or	r16,r16,r2
   13b04:	80c6b03a 	or	r3,r16,r3
   13b08:	a805883a 	mov	r2,r21
   13b0c:	dfc00f17 	ldw	ra,60(sp)
   13b10:	df000e17 	ldw	fp,56(sp)
   13b14:	ddc00d17 	ldw	r23,52(sp)
   13b18:	dd800c17 	ldw	r22,48(sp)
   13b1c:	dd400b17 	ldw	r21,44(sp)
   13b20:	dd000a17 	ldw	r20,40(sp)
   13b24:	dcc00917 	ldw	r19,36(sp)
   13b28:	dc800817 	ldw	r18,32(sp)
   13b2c:	dc400717 	ldw	r17,28(sp)
   13b30:	dc000617 	ldw	r16,24(sp)
   13b34:	dec01004 	addi	sp,sp,64
   13b38:	f800283a 	ret
   13b3c:	2404b03a 	or	r2,r4,r16
   13b40:	2023883a 	mov	r17,r4
   13b44:	10003f26 	beq	r2,zero,13c44 <__divdf3+0x2d8>
   13b48:	80015e26 	beq	r16,zero,140c4 <__divdf3+0x758>
   13b4c:	8009883a 	mov	r4,r16
   13b50:	d9800215 	stw	r6,8(sp)
   13b54:	d9c00515 	stw	r7,20(sp)
   13b58:	da000415 	stw	r8,16(sp)
   13b5c:	0015a000 	call	15a00 <__clzsi2>
   13b60:	d9800217 	ldw	r6,8(sp)
   13b64:	d9c00517 	ldw	r7,20(sp)
   13b68:	da000417 	ldw	r8,16(sp)
   13b6c:	113ffd44 	addi	r4,r2,-11
   13b70:	00c00704 	movi	r3,28
   13b74:	19014f16 	blt	r3,r4,140b4 <__divdf3+0x748>
   13b78:	00c00744 	movi	r3,29
   13b7c:	157ffe04 	addi	r21,r2,-8
   13b80:	1907c83a 	sub	r3,r3,r4
   13b84:	8560983a 	sll	r16,r16,r21
   13b88:	88c6d83a 	srl	r3,r17,r3
   13b8c:	8d6a983a 	sll	r21,r17,r21
   13b90:	1c20b03a 	or	r16,r3,r16
   13b94:	1080fcc4 	addi	r2,r2,1011
   13b98:	00a5c83a 	sub	r18,zero,r2
   13b9c:	0013883a 	mov	r9,zero
   13ba0:	000b883a 	mov	r5,zero
   13ba4:	003f8f06 	br	139e4 <__alt_data_end+0xffff39e4>
   13ba8:	3444b03a 	or	r2,r6,r17
   13bac:	1000231e 	bne	r2,zero,13c3c <__divdf3+0x2d0>
   13bb0:	0023883a 	mov	r17,zero
   13bb4:	0029883a 	mov	r20,zero
   13bb8:	01c00084 	movi	r7,2
   13bbc:	003f9b06 	br	13a2c <__alt_data_end+0xffff3a2c>
   13bc0:	3444b03a 	or	r2,r6,r17
   13bc4:	10001926 	beq	r2,zero,13c2c <__divdf3+0x2c0>
   13bc8:	88014b26 	beq	r17,zero,140f8 <__divdf3+0x78c>
   13bcc:	8809883a 	mov	r4,r17
   13bd0:	d9400115 	stw	r5,4(sp)
   13bd4:	d9800215 	stw	r6,8(sp)
   13bd8:	da000415 	stw	r8,16(sp)
   13bdc:	da400315 	stw	r9,12(sp)
   13be0:	0015a000 	call	15a00 <__clzsi2>
   13be4:	d9400117 	ldw	r5,4(sp)
   13be8:	d9800217 	ldw	r6,8(sp)
   13bec:	da000417 	ldw	r8,16(sp)
   13bf0:	da400317 	ldw	r9,12(sp)
   13bf4:	113ffd44 	addi	r4,r2,-11
   13bf8:	00c00704 	movi	r3,28
   13bfc:	19013a16 	blt	r3,r4,140e8 <__divdf3+0x77c>
   13c00:	00c00744 	movi	r3,29
   13c04:	153ffe04 	addi	r20,r2,-8
   13c08:	1907c83a 	sub	r3,r3,r4
   13c0c:	8d22983a 	sll	r17,r17,r20
   13c10:	30c6d83a 	srl	r3,r6,r3
   13c14:	3528983a 	sll	r20,r6,r20
   13c18:	1c62b03a 	or	r17,r3,r17
   13c1c:	1080fcc4 	addi	r2,r2,1011
   13c20:	0087c83a 	sub	r3,zero,r2
   13c24:	000f883a 	mov	r7,zero
   13c28:	003f8006 	br	13a2c <__alt_data_end+0xffff3a2c>
   13c2c:	0023883a 	mov	r17,zero
   13c30:	0029883a 	mov	r20,zero
   13c34:	01c00044 	movi	r7,1
   13c38:	003f7c06 	br	13a2c <__alt_data_end+0xffff3a2c>
   13c3c:	01c000c4 	movi	r7,3
   13c40:	003f7a06 	br	13a2c <__alt_data_end+0xffff3a2c>
   13c44:	02400104 	movi	r9,4
   13c48:	0021883a 	mov	r16,zero
   13c4c:	002b883a 	mov	r21,zero
   13c50:	01400044 	movi	r5,1
   13c54:	003f6306 	br	139e4 <__alt_data_end+0xffff39e4>
   13c58:	02400304 	movi	r9,12
   13c5c:	014000c4 	movi	r5,3
   13c60:	003f6006 	br	139e4 <__alt_data_end+0xffff39e4>
   13c64:	04000434 	movhi	r16,16
   13c68:	0009883a 	mov	r4,zero
   13c6c:	843fffc4 	addi	r16,r16,-1
   13c70:	057fffc4 	movi	r21,-1
   13c74:	0081ffc4 	movi	r2,2047
   13c78:	003f9b06 	br	13ae8 <__alt_data_end+0xffff3ae8>
   13c7c:	00c00044 	movi	r3,1
   13c80:	1887c83a 	sub	r3,r3,r2
   13c84:	01000e04 	movi	r4,56
   13c88:	20c1530e 	bge	r4,r3,141d8 <__divdf3+0x86c>
   13c8c:	9900004c 	andi	r4,r19,1
   13c90:	0005883a 	mov	r2,zero
   13c94:	0021883a 	mov	r16,zero
   13c98:	002b883a 	mov	r21,zero
   13c9c:	003f9206 	br	13ae8 <__alt_data_end+0xffff3ae8>
   13ca0:	8c012e36 	bltu	r17,r16,1415c <__divdf3+0x7f0>
   13ca4:	84412c26 	beq	r16,r17,14158 <__divdf3+0x7ec>
   13ca8:	a82f883a 	mov	r23,r21
   13cac:	18ffffc4 	addi	r3,r3,-1
   13cb0:	002b883a 	mov	r21,zero
   13cb4:	a004d63a 	srli	r2,r20,24
   13cb8:	8822923a 	slli	r17,r17,8
   13cbc:	a028923a 	slli	r20,r20,8
   13cc0:	8009883a 	mov	r4,r16
   13cc4:	88acb03a 	or	r22,r17,r2
   13cc8:	dd000015 	stw	r20,0(sp)
   13ccc:	b028d43a 	srli	r20,r22,16
   13cd0:	d8c00215 	stw	r3,8(sp)
   13cd4:	b4bfffcc 	andi	r18,r22,65535
   13cd8:	a00b883a 	mov	r5,r20
   13cdc:	0015b5c0 	call	15b5c <__udivsi3>
   13ce0:	100b883a 	mov	r5,r2
   13ce4:	9009883a 	mov	r4,r18
   13ce8:	1023883a 	mov	r17,r2
   13cec:	001260c0 	call	1260c <__mulsi3>
   13cf0:	8009883a 	mov	r4,r16
   13cf4:	a00b883a 	mov	r5,r20
   13cf8:	1039883a 	mov	fp,r2
   13cfc:	0015bc00 	call	15bc0 <__umodsi3>
   13d00:	1004943a 	slli	r2,r2,16
   13d04:	b808d43a 	srli	r4,r23,16
   13d08:	d8c00217 	ldw	r3,8(sp)
   13d0c:	2084b03a 	or	r2,r4,r2
   13d10:	1700062e 	bgeu	r2,fp,13d2c <__divdf3+0x3c0>
   13d14:	1585883a 	add	r2,r2,r22
   13d18:	893fffc4 	addi	r4,r17,-1
   13d1c:	15811d36 	bltu	r2,r22,14194 <__divdf3+0x828>
   13d20:	17011c2e 	bgeu	r2,fp,14194 <__divdf3+0x828>
   13d24:	8c7fff84 	addi	r17,r17,-2
   13d28:	1585883a 	add	r2,r2,r22
   13d2c:	1739c83a 	sub	fp,r2,fp
   13d30:	a00b883a 	mov	r5,r20
   13d34:	e009883a 	mov	r4,fp
   13d38:	d8c00215 	stw	r3,8(sp)
   13d3c:	0015b5c0 	call	15b5c <__udivsi3>
   13d40:	100b883a 	mov	r5,r2
   13d44:	9009883a 	mov	r4,r18
   13d48:	1021883a 	mov	r16,r2
   13d4c:	001260c0 	call	1260c <__mulsi3>
   13d50:	a00b883a 	mov	r5,r20
   13d54:	e009883a 	mov	r4,fp
   13d58:	d8800415 	stw	r2,16(sp)
   13d5c:	0015bc00 	call	15bc0 <__umodsi3>
   13d60:	1004943a 	slli	r2,r2,16
   13d64:	da000417 	ldw	r8,16(sp)
   13d68:	bdffffcc 	andi	r23,r23,65535
   13d6c:	b884b03a 	or	r2,r23,r2
   13d70:	d8c00217 	ldw	r3,8(sp)
   13d74:	1200062e 	bgeu	r2,r8,13d90 <__divdf3+0x424>
   13d78:	1585883a 	add	r2,r2,r22
   13d7c:	813fffc4 	addi	r4,r16,-1
   13d80:	15810236 	bltu	r2,r22,1418c <__divdf3+0x820>
   13d84:	1201012e 	bgeu	r2,r8,1418c <__divdf3+0x820>
   13d88:	843fff84 	addi	r16,r16,-2
   13d8c:	1585883a 	add	r2,r2,r22
   13d90:	8822943a 	slli	r17,r17,16
   13d94:	d9800017 	ldw	r6,0(sp)
   13d98:	1211c83a 	sub	r8,r2,r8
   13d9c:	8c22b03a 	or	r17,r17,r16
   13da0:	373fffcc 	andi	fp,r6,65535
   13da4:	8abfffcc 	andi	r10,r17,65535
   13da8:	8820d43a 	srli	r16,r17,16
   13dac:	5009883a 	mov	r4,r10
   13db0:	e00b883a 	mov	r5,fp
   13db4:	302ed43a 	srli	r23,r6,16
   13db8:	d8c00215 	stw	r3,8(sp)
   13dbc:	da000415 	stw	r8,16(sp)
   13dc0:	da800115 	stw	r10,4(sp)
   13dc4:	001260c0 	call	1260c <__mulsi3>
   13dc8:	800b883a 	mov	r5,r16
   13dcc:	e009883a 	mov	r4,fp
   13dd0:	d8800515 	stw	r2,20(sp)
   13dd4:	001260c0 	call	1260c <__mulsi3>
   13dd8:	8009883a 	mov	r4,r16
   13ddc:	b80b883a 	mov	r5,r23
   13de0:	d8800315 	stw	r2,12(sp)
   13de4:	001260c0 	call	1260c <__mulsi3>
   13de8:	da800117 	ldw	r10,4(sp)
   13dec:	b80b883a 	mov	r5,r23
   13df0:	1021883a 	mov	r16,r2
   13df4:	5009883a 	mov	r4,r10
   13df8:	001260c0 	call	1260c <__mulsi3>
   13dfc:	d9c00517 	ldw	r7,20(sp)
   13e00:	da400317 	ldw	r9,12(sp)
   13e04:	d8c00217 	ldw	r3,8(sp)
   13e08:	3808d43a 	srli	r4,r7,16
   13e0c:	1245883a 	add	r2,r2,r9
   13e10:	da000417 	ldw	r8,16(sp)
   13e14:	2085883a 	add	r2,r4,r2
   13e18:	1240022e 	bgeu	r2,r9,13e24 <__divdf3+0x4b8>
   13e1c:	01000074 	movhi	r4,1
   13e20:	8121883a 	add	r16,r16,r4
   13e24:	1008d43a 	srli	r4,r2,16
   13e28:	1004943a 	slli	r2,r2,16
   13e2c:	39ffffcc 	andi	r7,r7,65535
   13e30:	2409883a 	add	r4,r4,r16
   13e34:	11c5883a 	add	r2,r2,r7
   13e38:	4100bb36 	bltu	r8,r4,14128 <__divdf3+0x7bc>
   13e3c:	4100d726 	beq	r8,r4,1419c <__divdf3+0x830>
   13e40:	4109c83a 	sub	r4,r8,r4
   13e44:	a8a1c83a 	sub	r16,r21,r2
   13e48:	ac2b803a 	cmpltu	r21,r21,r16
   13e4c:	256bc83a 	sub	r21,r4,r21
   13e50:	b540d926 	beq	r22,r21,141b8 <__divdf3+0x84c>
   13e54:	a00b883a 	mov	r5,r20
   13e58:	a809883a 	mov	r4,r21
   13e5c:	d8c00215 	stw	r3,8(sp)
   13e60:	0015b5c0 	call	15b5c <__udivsi3>
   13e64:	100b883a 	mov	r5,r2
   13e68:	9009883a 	mov	r4,r18
   13e6c:	d8800515 	stw	r2,20(sp)
   13e70:	001260c0 	call	1260c <__mulsi3>
   13e74:	a809883a 	mov	r4,r21
   13e78:	a00b883a 	mov	r5,r20
   13e7c:	d8800415 	stw	r2,16(sp)
   13e80:	0015bc00 	call	15bc0 <__umodsi3>
   13e84:	1004943a 	slli	r2,r2,16
   13e88:	8008d43a 	srli	r4,r16,16
   13e8c:	da000417 	ldw	r8,16(sp)
   13e90:	d8c00217 	ldw	r3,8(sp)
   13e94:	2084b03a 	or	r2,r4,r2
   13e98:	d9c00517 	ldw	r7,20(sp)
   13e9c:	1200062e 	bgeu	r2,r8,13eb8 <__divdf3+0x54c>
   13ea0:	1585883a 	add	r2,r2,r22
   13ea4:	393fffc4 	addi	r4,r7,-1
   13ea8:	1580c536 	bltu	r2,r22,141c0 <__divdf3+0x854>
   13eac:	1200c42e 	bgeu	r2,r8,141c0 <__divdf3+0x854>
   13eb0:	39ffff84 	addi	r7,r7,-2
   13eb4:	1585883a 	add	r2,r2,r22
   13eb8:	122bc83a 	sub	r21,r2,r8
   13ebc:	a00b883a 	mov	r5,r20
   13ec0:	a809883a 	mov	r4,r21
   13ec4:	d8c00215 	stw	r3,8(sp)
   13ec8:	d9c00515 	stw	r7,20(sp)
   13ecc:	0015b5c0 	call	15b5c <__udivsi3>
   13ed0:	9009883a 	mov	r4,r18
   13ed4:	100b883a 	mov	r5,r2
   13ed8:	d8800415 	stw	r2,16(sp)
   13edc:	001260c0 	call	1260c <__mulsi3>
   13ee0:	a809883a 	mov	r4,r21
   13ee4:	a00b883a 	mov	r5,r20
   13ee8:	1025883a 	mov	r18,r2
   13eec:	0015bc00 	call	15bc0 <__umodsi3>
   13ef0:	1004943a 	slli	r2,r2,16
   13ef4:	813fffcc 	andi	r4,r16,65535
   13ef8:	d8c00217 	ldw	r3,8(sp)
   13efc:	20a0b03a 	or	r16,r4,r2
   13f00:	d9c00517 	ldw	r7,20(sp)
   13f04:	da000417 	ldw	r8,16(sp)
   13f08:	8480062e 	bgeu	r16,r18,13f24 <__divdf3+0x5b8>
   13f0c:	85a1883a 	add	r16,r16,r22
   13f10:	40bfffc4 	addi	r2,r8,-1
   13f14:	8580ac36 	bltu	r16,r22,141c8 <__divdf3+0x85c>
   13f18:	8480ab2e 	bgeu	r16,r18,141c8 <__divdf3+0x85c>
   13f1c:	423fff84 	addi	r8,r8,-2
   13f20:	85a1883a 	add	r16,r16,r22
   13f24:	3804943a 	slli	r2,r7,16
   13f28:	84a1c83a 	sub	r16,r16,r18
   13f2c:	e009883a 	mov	r4,fp
   13f30:	1228b03a 	or	r20,r2,r8
   13f34:	a1ffffcc 	andi	r7,r20,65535
   13f38:	a024d43a 	srli	r18,r20,16
   13f3c:	380b883a 	mov	r5,r7
   13f40:	d8c00215 	stw	r3,8(sp)
   13f44:	d9c00515 	stw	r7,20(sp)
   13f48:	001260c0 	call	1260c <__mulsi3>
   13f4c:	900b883a 	mov	r5,r18
   13f50:	e009883a 	mov	r4,fp
   13f54:	102b883a 	mov	r21,r2
   13f58:	001260c0 	call	1260c <__mulsi3>
   13f5c:	900b883a 	mov	r5,r18
   13f60:	b809883a 	mov	r4,r23
   13f64:	1039883a 	mov	fp,r2
   13f68:	001260c0 	call	1260c <__mulsi3>
   13f6c:	d9c00517 	ldw	r7,20(sp)
   13f70:	b80b883a 	mov	r5,r23
   13f74:	1025883a 	mov	r18,r2
   13f78:	3809883a 	mov	r4,r7
   13f7c:	001260c0 	call	1260c <__mulsi3>
   13f80:	a808d43a 	srli	r4,r21,16
   13f84:	1705883a 	add	r2,r2,fp
   13f88:	d8c00217 	ldw	r3,8(sp)
   13f8c:	2085883a 	add	r2,r4,r2
   13f90:	1700022e 	bgeu	r2,fp,13f9c <__divdf3+0x630>
   13f94:	01000074 	movhi	r4,1
   13f98:	9125883a 	add	r18,r18,r4
   13f9c:	1008d43a 	srli	r4,r2,16
   13fa0:	1004943a 	slli	r2,r2,16
   13fa4:	ad7fffcc 	andi	r21,r21,65535
   13fa8:	2489883a 	add	r4,r4,r18
   13fac:	1545883a 	add	r2,r2,r21
   13fb0:	81003836 	bltu	r16,r4,14094 <__divdf3+0x728>
   13fb4:	81003626 	beq	r16,r4,14090 <__divdf3+0x724>
   13fb8:	a5000054 	ori	r20,r20,1
   13fbc:	1880ffc4 	addi	r2,r3,1023
   13fc0:	00bf2e0e 	bge	zero,r2,13c7c <__alt_data_end+0xffff3c7c>
   13fc4:	a10001cc 	andi	r4,r20,7
   13fc8:	20000726 	beq	r4,zero,13fe8 <__divdf3+0x67c>
   13fcc:	a10003cc 	andi	r4,r20,15
   13fd0:	01400104 	movi	r5,4
   13fd4:	21400426 	beq	r4,r5,13fe8 <__divdf3+0x67c>
   13fd8:	a149883a 	add	r4,r20,r5
   13fdc:	2529803a 	cmpltu	r20,r4,r20
   13fe0:	8d23883a 	add	r17,r17,r20
   13fe4:	2029883a 	mov	r20,r4
   13fe8:	8900402c 	andhi	r4,r17,256
   13fec:	20000426 	beq	r4,zero,14000 <__divdf3+0x694>
   13ff0:	18810004 	addi	r2,r3,1024
   13ff4:	00ffc034 	movhi	r3,65280
   13ff8:	18ffffc4 	addi	r3,r3,-1
   13ffc:	88e2703a 	and	r17,r17,r3
   14000:	00c1ff84 	movi	r3,2046
   14004:	18beb416 	blt	r3,r2,13ad8 <__alt_data_end+0xffff3ad8>
   14008:	a028d0fa 	srli	r20,r20,3
   1400c:	882a977a 	slli	r21,r17,29
   14010:	8820927a 	slli	r16,r17,9
   14014:	1081ffcc 	andi	r2,r2,2047
   14018:	ad2ab03a 	or	r21,r21,r20
   1401c:	8020d33a 	srli	r16,r16,12
   14020:	9900004c 	andi	r4,r19,1
   14024:	003eb006 	br	13ae8 <__alt_data_end+0xffff3ae8>
   14028:	8080022c 	andhi	r2,r16,8
   1402c:	10001226 	beq	r2,zero,14078 <__divdf3+0x70c>
   14030:	8880022c 	andhi	r2,r17,8
   14034:	1000101e 	bne	r2,zero,14078 <__divdf3+0x70c>
   14038:	00800434 	movhi	r2,16
   1403c:	8c000234 	orhi	r16,r17,8
   14040:	10bfffc4 	addi	r2,r2,-1
   14044:	b809883a 	mov	r4,r23
   14048:	80a0703a 	and	r16,r16,r2
   1404c:	a02b883a 	mov	r21,r20
   14050:	003f0806 	br	13c74 <__alt_data_end+0xffff3c74>
   14054:	008000c4 	movi	r2,3
   14058:	3880b126 	beq	r7,r2,14320 <__divdf3+0x9b4>
   1405c:	00800044 	movi	r2,1
   14060:	38805b1e 	bne	r7,r2,141d0 <__divdf3+0x864>
   14064:	e009883a 	mov	r4,fp
   14068:	0005883a 	mov	r2,zero
   1406c:	0021883a 	mov	r16,zero
   14070:	002b883a 	mov	r21,zero
   14074:	003e9c06 	br	13ae8 <__alt_data_end+0xffff3ae8>
   14078:	00800434 	movhi	r2,16
   1407c:	84000234 	orhi	r16,r16,8
   14080:	10bfffc4 	addi	r2,r2,-1
   14084:	b009883a 	mov	r4,r22
   14088:	80a0703a 	and	r16,r16,r2
   1408c:	003ef906 	br	13c74 <__alt_data_end+0xffff3c74>
   14090:	103fca26 	beq	r2,zero,13fbc <__alt_data_end+0xffff3fbc>
   14094:	b421883a 	add	r16,r22,r16
   14098:	a17fffc4 	addi	r5,r20,-1
   1409c:	8580422e 	bgeu	r16,r22,141a8 <__divdf3+0x83c>
   140a0:	2829883a 	mov	r20,r5
   140a4:	813fc41e 	bne	r16,r4,13fb8 <__alt_data_end+0xffff3fb8>
   140a8:	d9800017 	ldw	r6,0(sp)
   140ac:	30bfc21e 	bne	r6,r2,13fb8 <__alt_data_end+0xffff3fb8>
   140b0:	003fc206 	br	13fbc <__alt_data_end+0xffff3fbc>
   140b4:	143ff604 	addi	r16,r2,-40
   140b8:	8c20983a 	sll	r16,r17,r16
   140bc:	002b883a 	mov	r21,zero
   140c0:	003eb406 	br	13b94 <__alt_data_end+0xffff3b94>
   140c4:	d9800215 	stw	r6,8(sp)
   140c8:	d9c00515 	stw	r7,20(sp)
   140cc:	da000415 	stw	r8,16(sp)
   140d0:	0015a000 	call	15a00 <__clzsi2>
   140d4:	10800804 	addi	r2,r2,32
   140d8:	da000417 	ldw	r8,16(sp)
   140dc:	d9c00517 	ldw	r7,20(sp)
   140e0:	d9800217 	ldw	r6,8(sp)
   140e4:	003ea106 	br	13b6c <__alt_data_end+0xffff3b6c>
   140e8:	147ff604 	addi	r17,r2,-40
   140ec:	3462983a 	sll	r17,r6,r17
   140f0:	0029883a 	mov	r20,zero
   140f4:	003ec906 	br	13c1c <__alt_data_end+0xffff3c1c>
   140f8:	3009883a 	mov	r4,r6
   140fc:	d9400115 	stw	r5,4(sp)
   14100:	d9800215 	stw	r6,8(sp)
   14104:	da000415 	stw	r8,16(sp)
   14108:	da400315 	stw	r9,12(sp)
   1410c:	0015a000 	call	15a00 <__clzsi2>
   14110:	10800804 	addi	r2,r2,32
   14114:	da400317 	ldw	r9,12(sp)
   14118:	da000417 	ldw	r8,16(sp)
   1411c:	d9800217 	ldw	r6,8(sp)
   14120:	d9400117 	ldw	r5,4(sp)
   14124:	003eb306 	br	13bf4 <__alt_data_end+0xffff3bf4>
   14128:	d9800017 	ldw	r6,0(sp)
   1412c:	a9ab883a 	add	r21,r21,r6
   14130:	a98b803a 	cmpltu	r5,r21,r6
   14134:	2d8b883a 	add	r5,r5,r22
   14138:	2a11883a 	add	r8,r5,r8
   1413c:	897fffc4 	addi	r5,r17,-1
   14140:	b2000c2e 	bgeu	r22,r8,14174 <__divdf3+0x808>
   14144:	41003f36 	bltu	r8,r4,14244 <__divdf3+0x8d8>
   14148:	22006c26 	beq	r4,r8,142fc <__divdf3+0x990>
   1414c:	4109c83a 	sub	r4,r8,r4
   14150:	2823883a 	mov	r17,r5
   14154:	003f3b06 	br	13e44 <__alt_data_end+0xffff3e44>
   14158:	ad3ed336 	bltu	r21,r20,13ca8 <__alt_data_end+0xffff3ca8>
   1415c:	a804d07a 	srli	r2,r21,1
   14160:	802e97fa 	slli	r23,r16,31
   14164:	a82a97fa 	slli	r21,r21,31
   14168:	8020d07a 	srli	r16,r16,1
   1416c:	b8aeb03a 	or	r23,r23,r2
   14170:	003ed006 	br	13cb4 <__alt_data_end+0xffff3cb4>
   14174:	b23ff51e 	bne	r22,r8,1414c <__alt_data_end+0xffff414c>
   14178:	d9800017 	ldw	r6,0(sp)
   1417c:	a9bff12e 	bgeu	r21,r6,14144 <__alt_data_end+0xffff4144>
   14180:	b109c83a 	sub	r4,r22,r4
   14184:	2823883a 	mov	r17,r5
   14188:	003f2e06 	br	13e44 <__alt_data_end+0xffff3e44>
   1418c:	2021883a 	mov	r16,r4
   14190:	003eff06 	br	13d90 <__alt_data_end+0xffff3d90>
   14194:	2023883a 	mov	r17,r4
   14198:	003ee406 	br	13d2c <__alt_data_end+0xffff3d2c>
   1419c:	a8bfe236 	bltu	r21,r2,14128 <__alt_data_end+0xffff4128>
   141a0:	0009883a 	mov	r4,zero
   141a4:	003f2706 	br	13e44 <__alt_data_end+0xffff3e44>
   141a8:	81002d36 	bltu	r16,r4,14260 <__divdf3+0x8f4>
   141ac:	24005626 	beq	r4,r16,14308 <__divdf3+0x99c>
   141b0:	2829883a 	mov	r20,r5
   141b4:	003f8006 	br	13fb8 <__alt_data_end+0xffff3fb8>
   141b8:	053fffc4 	movi	r20,-1
   141bc:	003f7f06 	br	13fbc <__alt_data_end+0xffff3fbc>
   141c0:	200f883a 	mov	r7,r4
   141c4:	003f3c06 	br	13eb8 <__alt_data_end+0xffff3eb8>
   141c8:	1011883a 	mov	r8,r2
   141cc:	003f5506 	br	13f24 <__alt_data_end+0xffff3f24>
   141d0:	e027883a 	mov	r19,fp
   141d4:	003f7906 	br	13fbc <__alt_data_end+0xffff3fbc>
   141d8:	010007c4 	movi	r4,31
   141dc:	20c02816 	blt	r4,r3,14280 <__divdf3+0x914>
   141e0:	00800804 	movi	r2,32
   141e4:	10c5c83a 	sub	r2,r2,r3
   141e8:	888a983a 	sll	r5,r17,r2
   141ec:	a0c8d83a 	srl	r4,r20,r3
   141f0:	a084983a 	sll	r2,r20,r2
   141f4:	88e2d83a 	srl	r17,r17,r3
   141f8:	2906b03a 	or	r3,r5,r4
   141fc:	1004c03a 	cmpne	r2,r2,zero
   14200:	1886b03a 	or	r3,r3,r2
   14204:	188001cc 	andi	r2,r3,7
   14208:	10000726 	beq	r2,zero,14228 <__divdf3+0x8bc>
   1420c:	188003cc 	andi	r2,r3,15
   14210:	01000104 	movi	r4,4
   14214:	11000426 	beq	r2,r4,14228 <__divdf3+0x8bc>
   14218:	1805883a 	mov	r2,r3
   1421c:	10c00104 	addi	r3,r2,4
   14220:	1885803a 	cmpltu	r2,r3,r2
   14224:	88a3883a 	add	r17,r17,r2
   14228:	8880202c 	andhi	r2,r17,128
   1422c:	10002926 	beq	r2,zero,142d4 <__divdf3+0x968>
   14230:	9900004c 	andi	r4,r19,1
   14234:	00800044 	movi	r2,1
   14238:	0021883a 	mov	r16,zero
   1423c:	002b883a 	mov	r21,zero
   14240:	003e2906 	br	13ae8 <__alt_data_end+0xffff3ae8>
   14244:	d9800017 	ldw	r6,0(sp)
   14248:	8c7fff84 	addi	r17,r17,-2
   1424c:	a9ab883a 	add	r21,r21,r6
   14250:	a98b803a 	cmpltu	r5,r21,r6
   14254:	2d8b883a 	add	r5,r5,r22
   14258:	2a11883a 	add	r8,r5,r8
   1425c:	003ef806 	br	13e40 <__alt_data_end+0xffff3e40>
   14260:	d9800017 	ldw	r6,0(sp)
   14264:	318f883a 	add	r7,r6,r6
   14268:	398b803a 	cmpltu	r5,r7,r6
   1426c:	2d8d883a 	add	r6,r5,r22
   14270:	81a1883a 	add	r16,r16,r6
   14274:	a17fff84 	addi	r5,r20,-2
   14278:	d9c00015 	stw	r7,0(sp)
   1427c:	003f8806 	br	140a0 <__alt_data_end+0xffff40a0>
   14280:	013ff844 	movi	r4,-31
   14284:	2085c83a 	sub	r2,r4,r2
   14288:	8888d83a 	srl	r4,r17,r2
   1428c:	00800804 	movi	r2,32
   14290:	18802126 	beq	r3,r2,14318 <__divdf3+0x9ac>
   14294:	04001004 	movi	r16,64
   14298:	80c7c83a 	sub	r3,r16,r3
   1429c:	88e0983a 	sll	r16,r17,r3
   142a0:	8504b03a 	or	r2,r16,r20
   142a4:	1004c03a 	cmpne	r2,r2,zero
   142a8:	2084b03a 	or	r2,r4,r2
   142ac:	144001cc 	andi	r17,r2,7
   142b0:	88000d1e 	bne	r17,zero,142e8 <__divdf3+0x97c>
   142b4:	0021883a 	mov	r16,zero
   142b8:	102ad0fa 	srli	r21,r2,3
   142bc:	9900004c 	andi	r4,r19,1
   142c0:	0005883a 	mov	r2,zero
   142c4:	ac6ab03a 	or	r21,r21,r17
   142c8:	003e0706 	br	13ae8 <__alt_data_end+0xffff3ae8>
   142cc:	1007883a 	mov	r3,r2
   142d0:	0023883a 	mov	r17,zero
   142d4:	8820927a 	slli	r16,r17,9
   142d8:	1805883a 	mov	r2,r3
   142dc:	8822977a 	slli	r17,r17,29
   142e0:	8020d33a 	srli	r16,r16,12
   142e4:	003ff406 	br	142b8 <__alt_data_end+0xffff42b8>
   142e8:	10c003cc 	andi	r3,r2,15
   142ec:	01000104 	movi	r4,4
   142f0:	193ff626 	beq	r3,r4,142cc <__alt_data_end+0xffff42cc>
   142f4:	0023883a 	mov	r17,zero
   142f8:	003fc806 	br	1421c <__alt_data_end+0xffff421c>
   142fc:	a8bfd136 	bltu	r21,r2,14244 <__alt_data_end+0xffff4244>
   14300:	2823883a 	mov	r17,r5
   14304:	003fa606 	br	141a0 <__alt_data_end+0xffff41a0>
   14308:	d9800017 	ldw	r6,0(sp)
   1430c:	30bfd436 	bltu	r6,r2,14260 <__alt_data_end+0xffff4260>
   14310:	2829883a 	mov	r20,r5
   14314:	003f6406 	br	140a8 <__alt_data_end+0xffff40a8>
   14318:	0021883a 	mov	r16,zero
   1431c:	003fe006 	br	142a0 <__alt_data_end+0xffff42a0>
   14320:	00800434 	movhi	r2,16
   14324:	8c000234 	orhi	r16,r17,8
   14328:	10bfffc4 	addi	r2,r2,-1
   1432c:	e009883a 	mov	r4,fp
   14330:	80a0703a 	and	r16,r16,r2
   14334:	a02b883a 	mov	r21,r20
   14338:	003e4e06 	br	13c74 <__alt_data_end+0xffff3c74>

0001433c <__eqdf2>:
   1433c:	2804d53a 	srli	r2,r5,20
   14340:	3806d53a 	srli	r3,r7,20
   14344:	02000434 	movhi	r8,16
   14348:	423fffc4 	addi	r8,r8,-1
   1434c:	1081ffcc 	andi	r2,r2,2047
   14350:	0281ffc4 	movi	r10,2047
   14354:	2a12703a 	and	r9,r5,r8
   14358:	18c1ffcc 	andi	r3,r3,2047
   1435c:	3a10703a 	and	r8,r7,r8
   14360:	280ad7fa 	srli	r5,r5,31
   14364:	380ed7fa 	srli	r7,r7,31
   14368:	12801026 	beq	r2,r10,143ac <__eqdf2+0x70>
   1436c:	0281ffc4 	movi	r10,2047
   14370:	1a800a26 	beq	r3,r10,1439c <__eqdf2+0x60>
   14374:	10c00226 	beq	r2,r3,14380 <__eqdf2+0x44>
   14378:	00800044 	movi	r2,1
   1437c:	f800283a 	ret
   14380:	4a3ffd1e 	bne	r9,r8,14378 <__alt_data_end+0xffff4378>
   14384:	21bffc1e 	bne	r4,r6,14378 <__alt_data_end+0xffff4378>
   14388:	29c00c26 	beq	r5,r7,143bc <__eqdf2+0x80>
   1438c:	103ffa1e 	bne	r2,zero,14378 <__alt_data_end+0xffff4378>
   14390:	2244b03a 	or	r2,r4,r9
   14394:	1004c03a 	cmpne	r2,r2,zero
   14398:	f800283a 	ret
   1439c:	3214b03a 	or	r10,r6,r8
   143a0:	503ff426 	beq	r10,zero,14374 <__alt_data_end+0xffff4374>
   143a4:	00800044 	movi	r2,1
   143a8:	f800283a 	ret
   143ac:	2254b03a 	or	r10,r4,r9
   143b0:	503fee26 	beq	r10,zero,1436c <__alt_data_end+0xffff436c>
   143b4:	00800044 	movi	r2,1
   143b8:	f800283a 	ret
   143bc:	0005883a 	mov	r2,zero
   143c0:	f800283a 	ret

000143c4 <__gedf2>:
   143c4:	2804d53a 	srli	r2,r5,20
   143c8:	3806d53a 	srli	r3,r7,20
   143cc:	02000434 	movhi	r8,16
   143d0:	423fffc4 	addi	r8,r8,-1
   143d4:	1081ffcc 	andi	r2,r2,2047
   143d8:	0241ffc4 	movi	r9,2047
   143dc:	2a14703a 	and	r10,r5,r8
   143e0:	18c1ffcc 	andi	r3,r3,2047
   143e4:	3a10703a 	and	r8,r7,r8
   143e8:	280ad7fa 	srli	r5,r5,31
   143ec:	380ed7fa 	srli	r7,r7,31
   143f0:	12401d26 	beq	r2,r9,14468 <__gedf2+0xa4>
   143f4:	0241ffc4 	movi	r9,2047
   143f8:	1a401226 	beq	r3,r9,14444 <__gedf2+0x80>
   143fc:	1000081e 	bne	r2,zero,14420 <__gedf2+0x5c>
   14400:	2296b03a 	or	r11,r4,r10
   14404:	5813003a 	cmpeq	r9,r11,zero
   14408:	1800091e 	bne	r3,zero,14430 <__gedf2+0x6c>
   1440c:	3218b03a 	or	r12,r6,r8
   14410:	6000071e 	bne	r12,zero,14430 <__gedf2+0x6c>
   14414:	0005883a 	mov	r2,zero
   14418:	5800101e 	bne	r11,zero,1445c <__gedf2+0x98>
   1441c:	f800283a 	ret
   14420:	18000c1e 	bne	r3,zero,14454 <__gedf2+0x90>
   14424:	3212b03a 	or	r9,r6,r8
   14428:	48000c26 	beq	r9,zero,1445c <__gedf2+0x98>
   1442c:	0013883a 	mov	r9,zero
   14430:	39c03fcc 	andi	r7,r7,255
   14434:	48000826 	beq	r9,zero,14458 <__gedf2+0x94>
   14438:	38000926 	beq	r7,zero,14460 <__gedf2+0x9c>
   1443c:	00800044 	movi	r2,1
   14440:	f800283a 	ret
   14444:	3212b03a 	or	r9,r6,r8
   14448:	483fec26 	beq	r9,zero,143fc <__alt_data_end+0xffff43fc>
   1444c:	00bfff84 	movi	r2,-2
   14450:	f800283a 	ret
   14454:	39c03fcc 	andi	r7,r7,255
   14458:	29c00626 	beq	r5,r7,14474 <__gedf2+0xb0>
   1445c:	283ff726 	beq	r5,zero,1443c <__alt_data_end+0xffff443c>
   14460:	00bfffc4 	movi	r2,-1
   14464:	f800283a 	ret
   14468:	2292b03a 	or	r9,r4,r10
   1446c:	483fe126 	beq	r9,zero,143f4 <__alt_data_end+0xffff43f4>
   14470:	003ff606 	br	1444c <__alt_data_end+0xffff444c>
   14474:	18bff916 	blt	r3,r2,1445c <__alt_data_end+0xffff445c>
   14478:	10c00316 	blt	r2,r3,14488 <__gedf2+0xc4>
   1447c:	42bff736 	bltu	r8,r10,1445c <__alt_data_end+0xffff445c>
   14480:	52000326 	beq	r10,r8,14490 <__gedf2+0xcc>
   14484:	5200042e 	bgeu	r10,r8,14498 <__gedf2+0xd4>
   14488:	283fec1e 	bne	r5,zero,1443c <__alt_data_end+0xffff443c>
   1448c:	003ff406 	br	14460 <__alt_data_end+0xffff4460>
   14490:	313ff236 	bltu	r6,r4,1445c <__alt_data_end+0xffff445c>
   14494:	21bffc36 	bltu	r4,r6,14488 <__alt_data_end+0xffff4488>
   14498:	0005883a 	mov	r2,zero
   1449c:	f800283a 	ret

000144a0 <__ledf2>:
   144a0:	2804d53a 	srli	r2,r5,20
   144a4:	3810d53a 	srli	r8,r7,20
   144a8:	00c00434 	movhi	r3,16
   144ac:	18ffffc4 	addi	r3,r3,-1
   144b0:	1081ffcc 	andi	r2,r2,2047
   144b4:	0241ffc4 	movi	r9,2047
   144b8:	28d4703a 	and	r10,r5,r3
   144bc:	4201ffcc 	andi	r8,r8,2047
   144c0:	38c6703a 	and	r3,r7,r3
   144c4:	280ad7fa 	srli	r5,r5,31
   144c8:	380ed7fa 	srli	r7,r7,31
   144cc:	12401f26 	beq	r2,r9,1454c <__ledf2+0xac>
   144d0:	0241ffc4 	movi	r9,2047
   144d4:	42401426 	beq	r8,r9,14528 <__ledf2+0x88>
   144d8:	1000091e 	bne	r2,zero,14500 <__ledf2+0x60>
   144dc:	2296b03a 	or	r11,r4,r10
   144e0:	5813003a 	cmpeq	r9,r11,zero
   144e4:	29403fcc 	andi	r5,r5,255
   144e8:	40000a1e 	bne	r8,zero,14514 <__ledf2+0x74>
   144ec:	30d8b03a 	or	r12,r6,r3
   144f0:	6000081e 	bne	r12,zero,14514 <__ledf2+0x74>
   144f4:	0005883a 	mov	r2,zero
   144f8:	5800111e 	bne	r11,zero,14540 <__ledf2+0xa0>
   144fc:	f800283a 	ret
   14500:	29403fcc 	andi	r5,r5,255
   14504:	40000c1e 	bne	r8,zero,14538 <__ledf2+0x98>
   14508:	30d2b03a 	or	r9,r6,r3
   1450c:	48000c26 	beq	r9,zero,14540 <__ledf2+0xa0>
   14510:	0013883a 	mov	r9,zero
   14514:	39c03fcc 	andi	r7,r7,255
   14518:	48000826 	beq	r9,zero,1453c <__ledf2+0x9c>
   1451c:	38001126 	beq	r7,zero,14564 <__ledf2+0xc4>
   14520:	00800044 	movi	r2,1
   14524:	f800283a 	ret
   14528:	30d2b03a 	or	r9,r6,r3
   1452c:	483fea26 	beq	r9,zero,144d8 <__alt_data_end+0xffff44d8>
   14530:	00800084 	movi	r2,2
   14534:	f800283a 	ret
   14538:	39c03fcc 	andi	r7,r7,255
   1453c:	39400726 	beq	r7,r5,1455c <__ledf2+0xbc>
   14540:	2800081e 	bne	r5,zero,14564 <__ledf2+0xc4>
   14544:	00800044 	movi	r2,1
   14548:	f800283a 	ret
   1454c:	2292b03a 	or	r9,r4,r10
   14550:	483fdf26 	beq	r9,zero,144d0 <__alt_data_end+0xffff44d0>
   14554:	00800084 	movi	r2,2
   14558:	f800283a 	ret
   1455c:	4080030e 	bge	r8,r2,1456c <__ledf2+0xcc>
   14560:	383fef26 	beq	r7,zero,14520 <__alt_data_end+0xffff4520>
   14564:	00bfffc4 	movi	r2,-1
   14568:	f800283a 	ret
   1456c:	123feb16 	blt	r2,r8,1451c <__alt_data_end+0xffff451c>
   14570:	1abff336 	bltu	r3,r10,14540 <__alt_data_end+0xffff4540>
   14574:	50c00326 	beq	r10,r3,14584 <__ledf2+0xe4>
   14578:	50c0042e 	bgeu	r10,r3,1458c <__ledf2+0xec>
   1457c:	283fe81e 	bne	r5,zero,14520 <__alt_data_end+0xffff4520>
   14580:	003ff806 	br	14564 <__alt_data_end+0xffff4564>
   14584:	313fee36 	bltu	r6,r4,14540 <__alt_data_end+0xffff4540>
   14588:	21bffc36 	bltu	r4,r6,1457c <__alt_data_end+0xffff457c>
   1458c:	0005883a 	mov	r2,zero
   14590:	f800283a 	ret

00014594 <__muldf3>:
   14594:	deffee04 	addi	sp,sp,-72
   14598:	dd000c15 	stw	r20,48(sp)
   1459c:	2828d53a 	srli	r20,r5,20
   145a0:	ddc00f15 	stw	r23,60(sp)
   145a4:	282ed7fa 	srli	r23,r5,31
   145a8:	dc000815 	stw	r16,32(sp)
   145ac:	04000434 	movhi	r16,16
   145b0:	dcc00b15 	stw	r19,44(sp)
   145b4:	843fffc4 	addi	r16,r16,-1
   145b8:	dfc01115 	stw	ra,68(sp)
   145bc:	df001015 	stw	fp,64(sp)
   145c0:	dd800e15 	stw	r22,56(sp)
   145c4:	dd400d15 	stw	r21,52(sp)
   145c8:	dc800a15 	stw	r18,40(sp)
   145cc:	dc400915 	stw	r17,36(sp)
   145d0:	a501ffcc 	andi	r20,r20,2047
   145d4:	2c20703a 	and	r16,r5,r16
   145d8:	b827883a 	mov	r19,r23
   145dc:	ba403fcc 	andi	r9,r23,255
   145e0:	a0006026 	beq	r20,zero,14764 <__muldf3+0x1d0>
   145e4:	0081ffc4 	movi	r2,2047
   145e8:	202d883a 	mov	r22,r4
   145ec:	a0803626 	beq	r20,r2,146c8 <__muldf3+0x134>
   145f0:	84000434 	orhi	r16,r16,16
   145f4:	200ad77a 	srli	r5,r4,29
   145f8:	800490fa 	slli	r2,r16,3
   145fc:	202c90fa 	slli	r22,r4,3
   14600:	a53f0044 	addi	r20,r20,-1023
   14604:	28a0b03a 	or	r16,r5,r2
   14608:	002b883a 	mov	r21,zero
   1460c:	000b883a 	mov	r5,zero
   14610:	3804d53a 	srli	r2,r7,20
   14614:	3838d7fa 	srli	fp,r7,31
   14618:	04400434 	movhi	r17,16
   1461c:	8c7fffc4 	addi	r17,r17,-1
   14620:	1081ffcc 	andi	r2,r2,2047
   14624:	3025883a 	mov	r18,r6
   14628:	3c62703a 	and	r17,r7,r17
   1462c:	e2803fcc 	andi	r10,fp,255
   14630:	10006d26 	beq	r2,zero,147e8 <__muldf3+0x254>
   14634:	00c1ffc4 	movi	r3,2047
   14638:	10c06526 	beq	r2,r3,147d0 <__muldf3+0x23c>
   1463c:	8c400434 	orhi	r17,r17,16
   14640:	300ed77a 	srli	r7,r6,29
   14644:	880690fa 	slli	r3,r17,3
   14648:	302490fa 	slli	r18,r6,3
   1464c:	10bf0044 	addi	r2,r2,-1023
   14650:	38e2b03a 	or	r17,r7,r3
   14654:	000f883a 	mov	r7,zero
   14658:	a087883a 	add	r3,r20,r2
   1465c:	010003c4 	movi	r4,15
   14660:	3d44b03a 	or	r2,r7,r21
   14664:	e5ccf03a 	xor	r6,fp,r23
   14668:	1a000044 	addi	r8,r3,1
   1466c:	20809b36 	bltu	r4,r2,148dc <__muldf3+0x348>
   14670:	100490ba 	slli	r2,r2,2
   14674:	01000074 	movhi	r4,1
   14678:	2111a204 	addi	r4,r4,18056
   1467c:	1105883a 	add	r2,r2,r4
   14680:	10800017 	ldw	r2,0(r2)
   14684:	1000683a 	jmp	r2
   14688:	000148dc 	xori	zero,zero,1315
   1468c:	000146e8 	cmpgeui	zero,zero,1307
   14690:	000146e8 	cmpgeui	zero,zero,1307
   14694:	000146e4 	muli	zero,zero,1307
   14698:	000148b8 	rdprs	zero,zero,1314
   1469c:	000148b8 	rdprs	zero,zero,1314
   146a0:	000148a0 	cmpeqi	zero,zero,1314
   146a4:	000146e4 	muli	zero,zero,1307
   146a8:	000148b8 	rdprs	zero,zero,1314
   146ac:	000148a0 	cmpeqi	zero,zero,1314
   146b0:	000148b8 	rdprs	zero,zero,1314
   146b4:	000146e4 	muli	zero,zero,1307
   146b8:	000148c8 	cmpgei	zero,zero,1315
   146bc:	000148c8 	cmpgei	zero,zero,1315
   146c0:	000148c8 	cmpgei	zero,zero,1315
   146c4:	00014c28 	cmpgeui	zero,zero,1328
   146c8:	2404b03a 	or	r2,r4,r16
   146cc:	1000711e 	bne	r2,zero,14894 <__muldf3+0x300>
   146d0:	05400204 	movi	r21,8
   146d4:	0021883a 	mov	r16,zero
   146d8:	002d883a 	mov	r22,zero
   146dc:	01400084 	movi	r5,2
   146e0:	003fcb06 	br	14610 <__alt_data_end+0xffff4610>
   146e4:	500d883a 	mov	r6,r10
   146e8:	00800084 	movi	r2,2
   146ec:	38805926 	beq	r7,r2,14854 <__muldf3+0x2c0>
   146f0:	008000c4 	movi	r2,3
   146f4:	3881bb26 	beq	r7,r2,14de4 <__muldf3+0x850>
   146f8:	00800044 	movi	r2,1
   146fc:	3881961e 	bne	r7,r2,14d58 <__muldf3+0x7c4>
   14700:	3027883a 	mov	r19,r6
   14704:	0005883a 	mov	r2,zero
   14708:	0021883a 	mov	r16,zero
   1470c:	002d883a 	mov	r22,zero
   14710:	1004953a 	slli	r2,r2,20
   14714:	98c03fcc 	andi	r3,r19,255
   14718:	04400434 	movhi	r17,16
   1471c:	8c7fffc4 	addi	r17,r17,-1
   14720:	180697fa 	slli	r3,r3,31
   14724:	8460703a 	and	r16,r16,r17
   14728:	80a0b03a 	or	r16,r16,r2
   1472c:	80c6b03a 	or	r3,r16,r3
   14730:	b005883a 	mov	r2,r22
   14734:	dfc01117 	ldw	ra,68(sp)
   14738:	df001017 	ldw	fp,64(sp)
   1473c:	ddc00f17 	ldw	r23,60(sp)
   14740:	dd800e17 	ldw	r22,56(sp)
   14744:	dd400d17 	ldw	r21,52(sp)
   14748:	dd000c17 	ldw	r20,48(sp)
   1474c:	dcc00b17 	ldw	r19,44(sp)
   14750:	dc800a17 	ldw	r18,40(sp)
   14754:	dc400917 	ldw	r17,36(sp)
   14758:	dc000817 	ldw	r16,32(sp)
   1475c:	dec01204 	addi	sp,sp,72
   14760:	f800283a 	ret
   14764:	2404b03a 	or	r2,r4,r16
   14768:	202b883a 	mov	r21,r4
   1476c:	10004426 	beq	r2,zero,14880 <__muldf3+0x2ec>
   14770:	80015126 	beq	r16,zero,14cb8 <__muldf3+0x724>
   14774:	8009883a 	mov	r4,r16
   14778:	d9800715 	stw	r6,28(sp)
   1477c:	d9c00215 	stw	r7,8(sp)
   14780:	da400415 	stw	r9,16(sp)
   14784:	0015a000 	call	15a00 <__clzsi2>
   14788:	d9800717 	ldw	r6,28(sp)
   1478c:	d9c00217 	ldw	r7,8(sp)
   14790:	da400417 	ldw	r9,16(sp)
   14794:	113ffd44 	addi	r4,r2,-11
   14798:	00c00704 	movi	r3,28
   1479c:	19014216 	blt	r3,r4,14ca8 <__muldf3+0x714>
   147a0:	00c00744 	movi	r3,29
   147a4:	15bffe04 	addi	r22,r2,-8
   147a8:	1907c83a 	sub	r3,r3,r4
   147ac:	85a0983a 	sll	r16,r16,r22
   147b0:	a8c6d83a 	srl	r3,r21,r3
   147b4:	adac983a 	sll	r22,r21,r22
   147b8:	1c20b03a 	or	r16,r3,r16
   147bc:	1080fcc4 	addi	r2,r2,1011
   147c0:	00a9c83a 	sub	r20,zero,r2
   147c4:	002b883a 	mov	r21,zero
   147c8:	000b883a 	mov	r5,zero
   147cc:	003f9006 	br	14610 <__alt_data_end+0xffff4610>
   147d0:	3446b03a 	or	r3,r6,r17
   147d4:	1800281e 	bne	r3,zero,14878 <__muldf3+0x2e4>
   147d8:	0023883a 	mov	r17,zero
   147dc:	0025883a 	mov	r18,zero
   147e0:	01c00084 	movi	r7,2
   147e4:	003f9c06 	br	14658 <__alt_data_end+0xffff4658>
   147e8:	3446b03a 	or	r3,r6,r17
   147ec:	18001e26 	beq	r3,zero,14868 <__muldf3+0x2d4>
   147f0:	88012126 	beq	r17,zero,14c78 <__muldf3+0x6e4>
   147f4:	8809883a 	mov	r4,r17
   147f8:	d9400215 	stw	r5,8(sp)
   147fc:	d9800715 	stw	r6,28(sp)
   14800:	da400415 	stw	r9,16(sp)
   14804:	da800315 	stw	r10,12(sp)
   14808:	0015a000 	call	15a00 <__clzsi2>
   1480c:	d9400217 	ldw	r5,8(sp)
   14810:	d9800717 	ldw	r6,28(sp)
   14814:	da400417 	ldw	r9,16(sp)
   14818:	da800317 	ldw	r10,12(sp)
   1481c:	113ffd44 	addi	r4,r2,-11
   14820:	00c00704 	movi	r3,28
   14824:	19011016 	blt	r3,r4,14c68 <__muldf3+0x6d4>
   14828:	00c00744 	movi	r3,29
   1482c:	14bffe04 	addi	r18,r2,-8
   14830:	1907c83a 	sub	r3,r3,r4
   14834:	8ca2983a 	sll	r17,r17,r18
   14838:	30c6d83a 	srl	r3,r6,r3
   1483c:	34a4983a 	sll	r18,r6,r18
   14840:	1c62b03a 	or	r17,r3,r17
   14844:	1080fcc4 	addi	r2,r2,1011
   14848:	0085c83a 	sub	r2,zero,r2
   1484c:	000f883a 	mov	r7,zero
   14850:	003f8106 	br	14658 <__alt_data_end+0xffff4658>
   14854:	3027883a 	mov	r19,r6
   14858:	0081ffc4 	movi	r2,2047
   1485c:	0021883a 	mov	r16,zero
   14860:	002d883a 	mov	r22,zero
   14864:	003faa06 	br	14710 <__alt_data_end+0xffff4710>
   14868:	0023883a 	mov	r17,zero
   1486c:	0025883a 	mov	r18,zero
   14870:	01c00044 	movi	r7,1
   14874:	003f7806 	br	14658 <__alt_data_end+0xffff4658>
   14878:	01c000c4 	movi	r7,3
   1487c:	003f7606 	br	14658 <__alt_data_end+0xffff4658>
   14880:	05400104 	movi	r21,4
   14884:	0021883a 	mov	r16,zero
   14888:	002d883a 	mov	r22,zero
   1488c:	01400044 	movi	r5,1
   14890:	003f5f06 	br	14610 <__alt_data_end+0xffff4610>
   14894:	05400304 	movi	r21,12
   14898:	014000c4 	movi	r5,3
   1489c:	003f5c06 	br	14610 <__alt_data_end+0xffff4610>
   148a0:	04000434 	movhi	r16,16
   148a4:	0027883a 	mov	r19,zero
   148a8:	843fffc4 	addi	r16,r16,-1
   148ac:	05bfffc4 	movi	r22,-1
   148b0:	0081ffc4 	movi	r2,2047
   148b4:	003f9606 	br	14710 <__alt_data_end+0xffff4710>
   148b8:	8023883a 	mov	r17,r16
   148bc:	b025883a 	mov	r18,r22
   148c0:	280f883a 	mov	r7,r5
   148c4:	003f8806 	br	146e8 <__alt_data_end+0xffff46e8>
   148c8:	8023883a 	mov	r17,r16
   148cc:	b025883a 	mov	r18,r22
   148d0:	480d883a 	mov	r6,r9
   148d4:	280f883a 	mov	r7,r5
   148d8:	003f8306 	br	146e8 <__alt_data_end+0xffff46e8>
   148dc:	b026d43a 	srli	r19,r22,16
   148e0:	902ed43a 	srli	r23,r18,16
   148e4:	b5bfffcc 	andi	r22,r22,65535
   148e8:	94bfffcc 	andi	r18,r18,65535
   148ec:	b00b883a 	mov	r5,r22
   148f0:	9009883a 	mov	r4,r18
   148f4:	d8c00515 	stw	r3,20(sp)
   148f8:	d9800715 	stw	r6,28(sp)
   148fc:	da000615 	stw	r8,24(sp)
   14900:	001260c0 	call	1260c <__mulsi3>
   14904:	980b883a 	mov	r5,r19
   14908:	9009883a 	mov	r4,r18
   1490c:	1029883a 	mov	r20,r2
   14910:	001260c0 	call	1260c <__mulsi3>
   14914:	b80b883a 	mov	r5,r23
   14918:	9809883a 	mov	r4,r19
   1491c:	102b883a 	mov	r21,r2
   14920:	001260c0 	call	1260c <__mulsi3>
   14924:	b809883a 	mov	r4,r23
   14928:	b00b883a 	mov	r5,r22
   1492c:	1039883a 	mov	fp,r2
   14930:	001260c0 	call	1260c <__mulsi3>
   14934:	a008d43a 	srli	r4,r20,16
   14938:	1545883a 	add	r2,r2,r21
   1493c:	d8c00517 	ldw	r3,20(sp)
   14940:	2085883a 	add	r2,r4,r2
   14944:	d9800717 	ldw	r6,28(sp)
   14948:	da000617 	ldw	r8,24(sp)
   1494c:	1540022e 	bgeu	r2,r21,14958 <__muldf3+0x3c4>
   14950:	01000074 	movhi	r4,1
   14954:	e139883a 	add	fp,fp,r4
   14958:	100e943a 	slli	r7,r2,16
   1495c:	1004d43a 	srli	r2,r2,16
   14960:	882ad43a 	srli	r21,r17,16
   14964:	a53fffcc 	andi	r20,r20,65535
   14968:	8c7fffcc 	andi	r17,r17,65535
   1496c:	3d29883a 	add	r20,r7,r20
   14970:	b00b883a 	mov	r5,r22
   14974:	8809883a 	mov	r4,r17
   14978:	d8c00515 	stw	r3,20(sp)
   1497c:	d9800715 	stw	r6,28(sp)
   14980:	da000615 	stw	r8,24(sp)
   14984:	dd000115 	stw	r20,4(sp)
   14988:	d8800015 	stw	r2,0(sp)
   1498c:	001260c0 	call	1260c <__mulsi3>
   14990:	980b883a 	mov	r5,r19
   14994:	8809883a 	mov	r4,r17
   14998:	d8800215 	stw	r2,8(sp)
   1499c:	001260c0 	call	1260c <__mulsi3>
   149a0:	9809883a 	mov	r4,r19
   149a4:	a80b883a 	mov	r5,r21
   149a8:	1029883a 	mov	r20,r2
   149ac:	001260c0 	call	1260c <__mulsi3>
   149b0:	b00b883a 	mov	r5,r22
   149b4:	a809883a 	mov	r4,r21
   149b8:	d8800415 	stw	r2,16(sp)
   149bc:	001260c0 	call	1260c <__mulsi3>
   149c0:	d9c00217 	ldw	r7,8(sp)
   149c4:	1505883a 	add	r2,r2,r20
   149c8:	d8c00517 	ldw	r3,20(sp)
   149cc:	3826d43a 	srli	r19,r7,16
   149d0:	d9800717 	ldw	r6,28(sp)
   149d4:	da000617 	ldw	r8,24(sp)
   149d8:	9885883a 	add	r2,r19,r2
   149dc:	da400417 	ldw	r9,16(sp)
   149e0:	1500022e 	bgeu	r2,r20,149ec <__muldf3+0x458>
   149e4:	01000074 	movhi	r4,1
   149e8:	4913883a 	add	r9,r9,r4
   149ec:	1028d43a 	srli	r20,r2,16
   149f0:	1004943a 	slli	r2,r2,16
   149f4:	802cd43a 	srli	r22,r16,16
   149f8:	843fffcc 	andi	r16,r16,65535
   149fc:	3cffffcc 	andi	r19,r7,65535
   14a00:	9009883a 	mov	r4,r18
   14a04:	800b883a 	mov	r5,r16
   14a08:	a269883a 	add	r20,r20,r9
   14a0c:	d8c00515 	stw	r3,20(sp)
   14a10:	d9800715 	stw	r6,28(sp)
   14a14:	da000615 	stw	r8,24(sp)
   14a18:	14e7883a 	add	r19,r2,r19
   14a1c:	001260c0 	call	1260c <__mulsi3>
   14a20:	9009883a 	mov	r4,r18
   14a24:	b00b883a 	mov	r5,r22
   14a28:	d8800315 	stw	r2,12(sp)
   14a2c:	001260c0 	call	1260c <__mulsi3>
   14a30:	b809883a 	mov	r4,r23
   14a34:	b00b883a 	mov	r5,r22
   14a38:	d8800215 	stw	r2,8(sp)
   14a3c:	001260c0 	call	1260c <__mulsi3>
   14a40:	b80b883a 	mov	r5,r23
   14a44:	8009883a 	mov	r4,r16
   14a48:	d8800415 	stw	r2,16(sp)
   14a4c:	001260c0 	call	1260c <__mulsi3>
   14a50:	da800317 	ldw	r10,12(sp)
   14a54:	d9c00217 	ldw	r7,8(sp)
   14a58:	d9000017 	ldw	r4,0(sp)
   14a5c:	502ed43a 	srli	r23,r10,16
   14a60:	11c5883a 	add	r2,r2,r7
   14a64:	24e5883a 	add	r18,r4,r19
   14a68:	b885883a 	add	r2,r23,r2
   14a6c:	d8c00517 	ldw	r3,20(sp)
   14a70:	d9800717 	ldw	r6,28(sp)
   14a74:	da000617 	ldw	r8,24(sp)
   14a78:	da400417 	ldw	r9,16(sp)
   14a7c:	11c0022e 	bgeu	r2,r7,14a88 <__muldf3+0x4f4>
   14a80:	01000074 	movhi	r4,1
   14a84:	4913883a 	add	r9,r9,r4
   14a88:	100ed43a 	srli	r7,r2,16
   14a8c:	1004943a 	slli	r2,r2,16
   14a90:	55ffffcc 	andi	r23,r10,65535
   14a94:	3a53883a 	add	r9,r7,r9
   14a98:	8809883a 	mov	r4,r17
   14a9c:	800b883a 	mov	r5,r16
   14aa0:	d8c00515 	stw	r3,20(sp)
   14aa4:	d9800715 	stw	r6,28(sp)
   14aa8:	da000615 	stw	r8,24(sp)
   14aac:	da400415 	stw	r9,16(sp)
   14ab0:	15ef883a 	add	r23,r2,r23
   14ab4:	001260c0 	call	1260c <__mulsi3>
   14ab8:	8809883a 	mov	r4,r17
   14abc:	b00b883a 	mov	r5,r22
   14ac0:	d8800215 	stw	r2,8(sp)
   14ac4:	001260c0 	call	1260c <__mulsi3>
   14ac8:	b00b883a 	mov	r5,r22
   14acc:	a809883a 	mov	r4,r21
   14ad0:	d8800315 	stw	r2,12(sp)
   14ad4:	001260c0 	call	1260c <__mulsi3>
   14ad8:	8009883a 	mov	r4,r16
   14adc:	a80b883a 	mov	r5,r21
   14ae0:	1023883a 	mov	r17,r2
   14ae4:	001260c0 	call	1260c <__mulsi3>
   14ae8:	d9c00217 	ldw	r7,8(sp)
   14aec:	da800317 	ldw	r10,12(sp)
   14af0:	d8c00517 	ldw	r3,20(sp)
   14af4:	3808d43a 	srli	r4,r7,16
   14af8:	1285883a 	add	r2,r2,r10
   14afc:	d9800717 	ldw	r6,28(sp)
   14b00:	2085883a 	add	r2,r4,r2
   14b04:	da000617 	ldw	r8,24(sp)
   14b08:	da400417 	ldw	r9,16(sp)
   14b0c:	1280022e 	bgeu	r2,r10,14b18 <__muldf3+0x584>
   14b10:	01000074 	movhi	r4,1
   14b14:	8923883a 	add	r17,r17,r4
   14b18:	1008943a 	slli	r4,r2,16
   14b1c:	39ffffcc 	andi	r7,r7,65535
   14b20:	e4b9883a 	add	fp,fp,r18
   14b24:	21cf883a 	add	r7,r4,r7
   14b28:	e4e7803a 	cmpltu	r19,fp,r19
   14b2c:	3d0f883a 	add	r7,r7,r20
   14b30:	bf39883a 	add	fp,r23,fp
   14b34:	99c9883a 	add	r4,r19,r7
   14b38:	e5ef803a 	cmpltu	r23,fp,r23
   14b3c:	490b883a 	add	r5,r9,r4
   14b40:	1004d43a 	srli	r2,r2,16
   14b44:	b965883a 	add	r18,r23,r5
   14b48:	24c9803a 	cmpltu	r4,r4,r19
   14b4c:	3d29803a 	cmpltu	r20,r7,r20
   14b50:	a128b03a 	or	r20,r20,r4
   14b54:	95ef803a 	cmpltu	r23,r18,r23
   14b58:	2a53803a 	cmpltu	r9,r5,r9
   14b5c:	a0a9883a 	add	r20,r20,r2
   14b60:	4deeb03a 	or	r23,r9,r23
   14b64:	a5ef883a 	add	r23,r20,r23
   14b68:	bc63883a 	add	r17,r23,r17
   14b6c:	e004927a 	slli	r2,fp,9
   14b70:	d9000117 	ldw	r4,4(sp)
   14b74:	882e927a 	slli	r23,r17,9
   14b78:	9022d5fa 	srli	r17,r18,23
   14b7c:	e038d5fa 	srli	fp,fp,23
   14b80:	1104b03a 	or	r2,r2,r4
   14b84:	9024927a 	slli	r18,r18,9
   14b88:	1004c03a 	cmpne	r2,r2,zero
   14b8c:	bc62b03a 	or	r17,r23,r17
   14b90:	1738b03a 	or	fp,r2,fp
   14b94:	8880402c 	andhi	r2,r17,256
   14b98:	e4a4b03a 	or	r18,fp,r18
   14b9c:	10000726 	beq	r2,zero,14bbc <__muldf3+0x628>
   14ba0:	9006d07a 	srli	r3,r18,1
   14ba4:	880497fa 	slli	r2,r17,31
   14ba8:	9480004c 	andi	r18,r18,1
   14bac:	8822d07a 	srli	r17,r17,1
   14bb0:	1ca4b03a 	or	r18,r3,r18
   14bb4:	14a4b03a 	or	r18,r2,r18
   14bb8:	4007883a 	mov	r3,r8
   14bbc:	1880ffc4 	addi	r2,r3,1023
   14bc0:	0080460e 	bge	zero,r2,14cdc <__muldf3+0x748>
   14bc4:	910001cc 	andi	r4,r18,7
   14bc8:	20000726 	beq	r4,zero,14be8 <__muldf3+0x654>
   14bcc:	910003cc 	andi	r4,r18,15
   14bd0:	01400104 	movi	r5,4
   14bd4:	21400426 	beq	r4,r5,14be8 <__muldf3+0x654>
   14bd8:	9149883a 	add	r4,r18,r5
   14bdc:	24a5803a 	cmpltu	r18,r4,r18
   14be0:	8ca3883a 	add	r17,r17,r18
   14be4:	2025883a 	mov	r18,r4
   14be8:	8900402c 	andhi	r4,r17,256
   14bec:	20000426 	beq	r4,zero,14c00 <__muldf3+0x66c>
   14bf0:	18810004 	addi	r2,r3,1024
   14bf4:	00ffc034 	movhi	r3,65280
   14bf8:	18ffffc4 	addi	r3,r3,-1
   14bfc:	88e2703a 	and	r17,r17,r3
   14c00:	00c1ff84 	movi	r3,2046
   14c04:	18bf1316 	blt	r3,r2,14854 <__alt_data_end+0xffff4854>
   14c08:	882c977a 	slli	r22,r17,29
   14c0c:	9024d0fa 	srli	r18,r18,3
   14c10:	8822927a 	slli	r17,r17,9
   14c14:	1081ffcc 	andi	r2,r2,2047
   14c18:	b4acb03a 	or	r22,r22,r18
   14c1c:	8820d33a 	srli	r16,r17,12
   14c20:	3027883a 	mov	r19,r6
   14c24:	003eba06 	br	14710 <__alt_data_end+0xffff4710>
   14c28:	8080022c 	andhi	r2,r16,8
   14c2c:	10000926 	beq	r2,zero,14c54 <__muldf3+0x6c0>
   14c30:	8880022c 	andhi	r2,r17,8
   14c34:	1000071e 	bne	r2,zero,14c54 <__muldf3+0x6c0>
   14c38:	00800434 	movhi	r2,16
   14c3c:	8c000234 	orhi	r16,r17,8
   14c40:	10bfffc4 	addi	r2,r2,-1
   14c44:	e027883a 	mov	r19,fp
   14c48:	80a0703a 	and	r16,r16,r2
   14c4c:	902d883a 	mov	r22,r18
   14c50:	003f1706 	br	148b0 <__alt_data_end+0xffff48b0>
   14c54:	00800434 	movhi	r2,16
   14c58:	84000234 	orhi	r16,r16,8
   14c5c:	10bfffc4 	addi	r2,r2,-1
   14c60:	80a0703a 	and	r16,r16,r2
   14c64:	003f1206 	br	148b0 <__alt_data_end+0xffff48b0>
   14c68:	147ff604 	addi	r17,r2,-40
   14c6c:	3462983a 	sll	r17,r6,r17
   14c70:	0025883a 	mov	r18,zero
   14c74:	003ef306 	br	14844 <__alt_data_end+0xffff4844>
   14c78:	3009883a 	mov	r4,r6
   14c7c:	d9400215 	stw	r5,8(sp)
   14c80:	d9800715 	stw	r6,28(sp)
   14c84:	da400415 	stw	r9,16(sp)
   14c88:	da800315 	stw	r10,12(sp)
   14c8c:	0015a000 	call	15a00 <__clzsi2>
   14c90:	10800804 	addi	r2,r2,32
   14c94:	da800317 	ldw	r10,12(sp)
   14c98:	da400417 	ldw	r9,16(sp)
   14c9c:	d9800717 	ldw	r6,28(sp)
   14ca0:	d9400217 	ldw	r5,8(sp)
   14ca4:	003edd06 	br	1481c <__alt_data_end+0xffff481c>
   14ca8:	143ff604 	addi	r16,r2,-40
   14cac:	ac20983a 	sll	r16,r21,r16
   14cb0:	002d883a 	mov	r22,zero
   14cb4:	003ec106 	br	147bc <__alt_data_end+0xffff47bc>
   14cb8:	d9800715 	stw	r6,28(sp)
   14cbc:	d9c00215 	stw	r7,8(sp)
   14cc0:	da400415 	stw	r9,16(sp)
   14cc4:	0015a000 	call	15a00 <__clzsi2>
   14cc8:	10800804 	addi	r2,r2,32
   14ccc:	da400417 	ldw	r9,16(sp)
   14cd0:	d9c00217 	ldw	r7,8(sp)
   14cd4:	d9800717 	ldw	r6,28(sp)
   14cd8:	003eae06 	br	14794 <__alt_data_end+0xffff4794>
   14cdc:	00c00044 	movi	r3,1
   14ce0:	1887c83a 	sub	r3,r3,r2
   14ce4:	01000e04 	movi	r4,56
   14ce8:	20fe8516 	blt	r4,r3,14700 <__alt_data_end+0xffff4700>
   14cec:	010007c4 	movi	r4,31
   14cf0:	20c01b16 	blt	r4,r3,14d60 <__muldf3+0x7cc>
   14cf4:	00800804 	movi	r2,32
   14cf8:	10c5c83a 	sub	r2,r2,r3
   14cfc:	888a983a 	sll	r5,r17,r2
   14d00:	90c8d83a 	srl	r4,r18,r3
   14d04:	9084983a 	sll	r2,r18,r2
   14d08:	88e2d83a 	srl	r17,r17,r3
   14d0c:	2906b03a 	or	r3,r5,r4
   14d10:	1004c03a 	cmpne	r2,r2,zero
   14d14:	1886b03a 	or	r3,r3,r2
   14d18:	188001cc 	andi	r2,r3,7
   14d1c:	10000726 	beq	r2,zero,14d3c <__muldf3+0x7a8>
   14d20:	188003cc 	andi	r2,r3,15
   14d24:	01000104 	movi	r4,4
   14d28:	11000426 	beq	r2,r4,14d3c <__muldf3+0x7a8>
   14d2c:	1805883a 	mov	r2,r3
   14d30:	10c00104 	addi	r3,r2,4
   14d34:	1885803a 	cmpltu	r2,r3,r2
   14d38:	88a3883a 	add	r17,r17,r2
   14d3c:	8880202c 	andhi	r2,r17,128
   14d40:	10001c26 	beq	r2,zero,14db4 <__muldf3+0x820>
   14d44:	3027883a 	mov	r19,r6
   14d48:	00800044 	movi	r2,1
   14d4c:	0021883a 	mov	r16,zero
   14d50:	002d883a 	mov	r22,zero
   14d54:	003e6e06 	br	14710 <__alt_data_end+0xffff4710>
   14d58:	4007883a 	mov	r3,r8
   14d5c:	003f9706 	br	14bbc <__alt_data_end+0xffff4bbc>
   14d60:	017ff844 	movi	r5,-31
   14d64:	2885c83a 	sub	r2,r5,r2
   14d68:	888ad83a 	srl	r5,r17,r2
   14d6c:	00800804 	movi	r2,32
   14d70:	18801a26 	beq	r3,r2,14ddc <__muldf3+0x848>
   14d74:	01001004 	movi	r4,64
   14d78:	20c7c83a 	sub	r3,r4,r3
   14d7c:	88e2983a 	sll	r17,r17,r3
   14d80:	8ca4b03a 	or	r18,r17,r18
   14d84:	9004c03a 	cmpne	r2,r18,zero
   14d88:	2884b03a 	or	r2,r5,r2
   14d8c:	144001cc 	andi	r17,r2,7
   14d90:	88000d1e 	bne	r17,zero,14dc8 <__muldf3+0x834>
   14d94:	0021883a 	mov	r16,zero
   14d98:	102cd0fa 	srli	r22,r2,3
   14d9c:	3027883a 	mov	r19,r6
   14da0:	0005883a 	mov	r2,zero
   14da4:	b46cb03a 	or	r22,r22,r17
   14da8:	003e5906 	br	14710 <__alt_data_end+0xffff4710>
   14dac:	1007883a 	mov	r3,r2
   14db0:	0023883a 	mov	r17,zero
   14db4:	8820927a 	slli	r16,r17,9
   14db8:	1805883a 	mov	r2,r3
   14dbc:	8822977a 	slli	r17,r17,29
   14dc0:	8020d33a 	srli	r16,r16,12
   14dc4:	003ff406 	br	14d98 <__alt_data_end+0xffff4d98>
   14dc8:	10c003cc 	andi	r3,r2,15
   14dcc:	01000104 	movi	r4,4
   14dd0:	193ff626 	beq	r3,r4,14dac <__alt_data_end+0xffff4dac>
   14dd4:	0023883a 	mov	r17,zero
   14dd8:	003fd506 	br	14d30 <__alt_data_end+0xffff4d30>
   14ddc:	0023883a 	mov	r17,zero
   14de0:	003fe706 	br	14d80 <__alt_data_end+0xffff4d80>
   14de4:	00800434 	movhi	r2,16
   14de8:	8c000234 	orhi	r16,r17,8
   14dec:	10bfffc4 	addi	r2,r2,-1
   14df0:	3027883a 	mov	r19,r6
   14df4:	80a0703a 	and	r16,r16,r2
   14df8:	902d883a 	mov	r22,r18
   14dfc:	003eac06 	br	148b0 <__alt_data_end+0xffff48b0>

00014e00 <__subdf3>:
   14e00:	02000434 	movhi	r8,16
   14e04:	423fffc4 	addi	r8,r8,-1
   14e08:	defffb04 	addi	sp,sp,-20
   14e0c:	2a14703a 	and	r10,r5,r8
   14e10:	3812d53a 	srli	r9,r7,20
   14e14:	3a10703a 	and	r8,r7,r8
   14e18:	2006d77a 	srli	r3,r4,29
   14e1c:	3004d77a 	srli	r2,r6,29
   14e20:	dc000015 	stw	r16,0(sp)
   14e24:	501490fa 	slli	r10,r10,3
   14e28:	2820d53a 	srli	r16,r5,20
   14e2c:	401090fa 	slli	r8,r8,3
   14e30:	dc800215 	stw	r18,8(sp)
   14e34:	dc400115 	stw	r17,4(sp)
   14e38:	dfc00415 	stw	ra,16(sp)
   14e3c:	202290fa 	slli	r17,r4,3
   14e40:	dcc00315 	stw	r19,12(sp)
   14e44:	4a41ffcc 	andi	r9,r9,2047
   14e48:	0101ffc4 	movi	r4,2047
   14e4c:	2824d7fa 	srli	r18,r5,31
   14e50:	8401ffcc 	andi	r16,r16,2047
   14e54:	50c6b03a 	or	r3,r10,r3
   14e58:	380ed7fa 	srli	r7,r7,31
   14e5c:	408ab03a 	or	r5,r8,r2
   14e60:	300c90fa 	slli	r6,r6,3
   14e64:	49009626 	beq	r9,r4,150c0 <__subdf3+0x2c0>
   14e68:	39c0005c 	xori	r7,r7,1
   14e6c:	8245c83a 	sub	r2,r16,r9
   14e70:	3c807426 	beq	r7,r18,15044 <__subdf3+0x244>
   14e74:	0080af0e 	bge	zero,r2,15134 <__subdf3+0x334>
   14e78:	48002a1e 	bne	r9,zero,14f24 <__subdf3+0x124>
   14e7c:	2988b03a 	or	r4,r5,r6
   14e80:	20009a1e 	bne	r4,zero,150ec <__subdf3+0x2ec>
   14e84:	888001cc 	andi	r2,r17,7
   14e88:	10000726 	beq	r2,zero,14ea8 <__subdf3+0xa8>
   14e8c:	888003cc 	andi	r2,r17,15
   14e90:	01000104 	movi	r4,4
   14e94:	11000426 	beq	r2,r4,14ea8 <__subdf3+0xa8>
   14e98:	890b883a 	add	r5,r17,r4
   14e9c:	2c63803a 	cmpltu	r17,r5,r17
   14ea0:	1c47883a 	add	r3,r3,r17
   14ea4:	2823883a 	mov	r17,r5
   14ea8:	1880202c 	andhi	r2,r3,128
   14eac:	10005926 	beq	r2,zero,15014 <__subdf3+0x214>
   14eb0:	84000044 	addi	r16,r16,1
   14eb4:	0081ffc4 	movi	r2,2047
   14eb8:	8080be26 	beq	r16,r2,151b4 <__subdf3+0x3b4>
   14ebc:	017fe034 	movhi	r5,65408
   14ec0:	297fffc4 	addi	r5,r5,-1
   14ec4:	1946703a 	and	r3,r3,r5
   14ec8:	1804977a 	slli	r2,r3,29
   14ecc:	1806927a 	slli	r3,r3,9
   14ed0:	8822d0fa 	srli	r17,r17,3
   14ed4:	8401ffcc 	andi	r16,r16,2047
   14ed8:	180ad33a 	srli	r5,r3,12
   14edc:	9100004c 	andi	r4,r18,1
   14ee0:	1444b03a 	or	r2,r2,r17
   14ee4:	80c1ffcc 	andi	r3,r16,2047
   14ee8:	1820953a 	slli	r16,r3,20
   14eec:	20c03fcc 	andi	r3,r4,255
   14ef0:	180897fa 	slli	r4,r3,31
   14ef4:	00c00434 	movhi	r3,16
   14ef8:	18ffffc4 	addi	r3,r3,-1
   14efc:	28c6703a 	and	r3,r5,r3
   14f00:	1c06b03a 	or	r3,r3,r16
   14f04:	1906b03a 	or	r3,r3,r4
   14f08:	dfc00417 	ldw	ra,16(sp)
   14f0c:	dcc00317 	ldw	r19,12(sp)
   14f10:	dc800217 	ldw	r18,8(sp)
   14f14:	dc400117 	ldw	r17,4(sp)
   14f18:	dc000017 	ldw	r16,0(sp)
   14f1c:	dec00504 	addi	sp,sp,20
   14f20:	f800283a 	ret
   14f24:	0101ffc4 	movi	r4,2047
   14f28:	813fd626 	beq	r16,r4,14e84 <__alt_data_end+0xffff4e84>
   14f2c:	29402034 	orhi	r5,r5,128
   14f30:	01000e04 	movi	r4,56
   14f34:	2080a316 	blt	r4,r2,151c4 <__subdf3+0x3c4>
   14f38:	010007c4 	movi	r4,31
   14f3c:	2080c616 	blt	r4,r2,15258 <__subdf3+0x458>
   14f40:	01000804 	movi	r4,32
   14f44:	2089c83a 	sub	r4,r4,r2
   14f48:	2910983a 	sll	r8,r5,r4
   14f4c:	308ed83a 	srl	r7,r6,r2
   14f50:	3108983a 	sll	r4,r6,r4
   14f54:	2884d83a 	srl	r2,r5,r2
   14f58:	41ccb03a 	or	r6,r8,r7
   14f5c:	2008c03a 	cmpne	r4,r4,zero
   14f60:	310cb03a 	or	r6,r6,r4
   14f64:	898dc83a 	sub	r6,r17,r6
   14f68:	89a3803a 	cmpltu	r17,r17,r6
   14f6c:	1887c83a 	sub	r3,r3,r2
   14f70:	1c47c83a 	sub	r3,r3,r17
   14f74:	3023883a 	mov	r17,r6
   14f78:	1880202c 	andhi	r2,r3,128
   14f7c:	10002326 	beq	r2,zero,1500c <__subdf3+0x20c>
   14f80:	04c02034 	movhi	r19,128
   14f84:	9cffffc4 	addi	r19,r19,-1
   14f88:	1ce6703a 	and	r19,r3,r19
   14f8c:	98007a26 	beq	r19,zero,15178 <__subdf3+0x378>
   14f90:	9809883a 	mov	r4,r19
   14f94:	0015a000 	call	15a00 <__clzsi2>
   14f98:	113ffe04 	addi	r4,r2,-8
   14f9c:	00c007c4 	movi	r3,31
   14fa0:	19007b16 	blt	r3,r4,15190 <__subdf3+0x390>
   14fa4:	00800804 	movi	r2,32
   14fa8:	1105c83a 	sub	r2,r2,r4
   14fac:	8884d83a 	srl	r2,r17,r2
   14fb0:	9906983a 	sll	r3,r19,r4
   14fb4:	8922983a 	sll	r17,r17,r4
   14fb8:	10c4b03a 	or	r2,r2,r3
   14fbc:	24007816 	blt	r4,r16,151a0 <__subdf3+0x3a0>
   14fc0:	2421c83a 	sub	r16,r4,r16
   14fc4:	80c00044 	addi	r3,r16,1
   14fc8:	010007c4 	movi	r4,31
   14fcc:	20c09516 	blt	r4,r3,15224 <__subdf3+0x424>
   14fd0:	01400804 	movi	r5,32
   14fd4:	28cbc83a 	sub	r5,r5,r3
   14fd8:	88c8d83a 	srl	r4,r17,r3
   14fdc:	8962983a 	sll	r17,r17,r5
   14fe0:	114a983a 	sll	r5,r2,r5
   14fe4:	10c6d83a 	srl	r3,r2,r3
   14fe8:	8804c03a 	cmpne	r2,r17,zero
   14fec:	290ab03a 	or	r5,r5,r4
   14ff0:	28a2b03a 	or	r17,r5,r2
   14ff4:	0021883a 	mov	r16,zero
   14ff8:	003fa206 	br	14e84 <__alt_data_end+0xffff4e84>
   14ffc:	2090b03a 	or	r8,r4,r2
   15000:	40018e26 	beq	r8,zero,1563c <__subdf3+0x83c>
   15004:	1007883a 	mov	r3,r2
   15008:	2023883a 	mov	r17,r4
   1500c:	888001cc 	andi	r2,r17,7
   15010:	103f9e1e 	bne	r2,zero,14e8c <__alt_data_end+0xffff4e8c>
   15014:	1804977a 	slli	r2,r3,29
   15018:	8822d0fa 	srli	r17,r17,3
   1501c:	1810d0fa 	srli	r8,r3,3
   15020:	9100004c 	andi	r4,r18,1
   15024:	1444b03a 	or	r2,r2,r17
   15028:	00c1ffc4 	movi	r3,2047
   1502c:	80c02826 	beq	r16,r3,150d0 <__subdf3+0x2d0>
   15030:	01400434 	movhi	r5,16
   15034:	297fffc4 	addi	r5,r5,-1
   15038:	80e0703a 	and	r16,r16,r3
   1503c:	414a703a 	and	r5,r8,r5
   15040:	003fa806 	br	14ee4 <__alt_data_end+0xffff4ee4>
   15044:	0080630e 	bge	zero,r2,151d4 <__subdf3+0x3d4>
   15048:	48003026 	beq	r9,zero,1510c <__subdf3+0x30c>
   1504c:	0101ffc4 	movi	r4,2047
   15050:	813f8c26 	beq	r16,r4,14e84 <__alt_data_end+0xffff4e84>
   15054:	29402034 	orhi	r5,r5,128
   15058:	01000e04 	movi	r4,56
   1505c:	2080a90e 	bge	r4,r2,15304 <__subdf3+0x504>
   15060:	298cb03a 	or	r6,r5,r6
   15064:	3012c03a 	cmpne	r9,r6,zero
   15068:	0005883a 	mov	r2,zero
   1506c:	4c53883a 	add	r9,r9,r17
   15070:	4c63803a 	cmpltu	r17,r9,r17
   15074:	10c7883a 	add	r3,r2,r3
   15078:	88c7883a 	add	r3,r17,r3
   1507c:	4823883a 	mov	r17,r9
   15080:	1880202c 	andhi	r2,r3,128
   15084:	1000d026 	beq	r2,zero,153c8 <__subdf3+0x5c8>
   15088:	84000044 	addi	r16,r16,1
   1508c:	0081ffc4 	movi	r2,2047
   15090:	8080fe26 	beq	r16,r2,1548c <__subdf3+0x68c>
   15094:	00bfe034 	movhi	r2,65408
   15098:	10bfffc4 	addi	r2,r2,-1
   1509c:	1886703a 	and	r3,r3,r2
   150a0:	880ad07a 	srli	r5,r17,1
   150a4:	180497fa 	slli	r2,r3,31
   150a8:	8900004c 	andi	r4,r17,1
   150ac:	2922b03a 	or	r17,r5,r4
   150b0:	1806d07a 	srli	r3,r3,1
   150b4:	1462b03a 	or	r17,r2,r17
   150b8:	3825883a 	mov	r18,r7
   150bc:	003f7106 	br	14e84 <__alt_data_end+0xffff4e84>
   150c0:	2984b03a 	or	r2,r5,r6
   150c4:	103f6826 	beq	r2,zero,14e68 <__alt_data_end+0xffff4e68>
   150c8:	39c03fcc 	andi	r7,r7,255
   150cc:	003f6706 	br	14e6c <__alt_data_end+0xffff4e6c>
   150d0:	4086b03a 	or	r3,r8,r2
   150d4:	18015226 	beq	r3,zero,15620 <__subdf3+0x820>
   150d8:	00c00434 	movhi	r3,16
   150dc:	41400234 	orhi	r5,r8,8
   150e0:	18ffffc4 	addi	r3,r3,-1
   150e4:	28ca703a 	and	r5,r5,r3
   150e8:	003f7e06 	br	14ee4 <__alt_data_end+0xffff4ee4>
   150ec:	10bfffc4 	addi	r2,r2,-1
   150f0:	1000491e 	bne	r2,zero,15218 <__subdf3+0x418>
   150f4:	898fc83a 	sub	r7,r17,r6
   150f8:	89e3803a 	cmpltu	r17,r17,r7
   150fc:	1947c83a 	sub	r3,r3,r5
   15100:	1c47c83a 	sub	r3,r3,r17
   15104:	3823883a 	mov	r17,r7
   15108:	003f9b06 	br	14f78 <__alt_data_end+0xffff4f78>
   1510c:	2988b03a 	or	r4,r5,r6
   15110:	203f5c26 	beq	r4,zero,14e84 <__alt_data_end+0xffff4e84>
   15114:	10bfffc4 	addi	r2,r2,-1
   15118:	1000931e 	bne	r2,zero,15368 <__subdf3+0x568>
   1511c:	898d883a 	add	r6,r17,r6
   15120:	3463803a 	cmpltu	r17,r6,r17
   15124:	1947883a 	add	r3,r3,r5
   15128:	88c7883a 	add	r3,r17,r3
   1512c:	3023883a 	mov	r17,r6
   15130:	003fd306 	br	15080 <__alt_data_end+0xffff5080>
   15134:	1000541e 	bne	r2,zero,15288 <__subdf3+0x488>
   15138:	80800044 	addi	r2,r16,1
   1513c:	1081ffcc 	andi	r2,r2,2047
   15140:	01000044 	movi	r4,1
   15144:	2080a20e 	bge	r4,r2,153d0 <__subdf3+0x5d0>
   15148:	8989c83a 	sub	r4,r17,r6
   1514c:	8905803a 	cmpltu	r2,r17,r4
   15150:	1967c83a 	sub	r19,r3,r5
   15154:	98a7c83a 	sub	r19,r19,r2
   15158:	9880202c 	andhi	r2,r19,128
   1515c:	10006326 	beq	r2,zero,152ec <__subdf3+0x4ec>
   15160:	3463c83a 	sub	r17,r6,r17
   15164:	28c7c83a 	sub	r3,r5,r3
   15168:	344d803a 	cmpltu	r6,r6,r17
   1516c:	19a7c83a 	sub	r19,r3,r6
   15170:	3825883a 	mov	r18,r7
   15174:	983f861e 	bne	r19,zero,14f90 <__alt_data_end+0xffff4f90>
   15178:	8809883a 	mov	r4,r17
   1517c:	0015a000 	call	15a00 <__clzsi2>
   15180:	10800804 	addi	r2,r2,32
   15184:	113ffe04 	addi	r4,r2,-8
   15188:	00c007c4 	movi	r3,31
   1518c:	193f850e 	bge	r3,r4,14fa4 <__alt_data_end+0xffff4fa4>
   15190:	10bff604 	addi	r2,r2,-40
   15194:	8884983a 	sll	r2,r17,r2
   15198:	0023883a 	mov	r17,zero
   1519c:	243f880e 	bge	r4,r16,14fc0 <__alt_data_end+0xffff4fc0>
   151a0:	00ffe034 	movhi	r3,65408
   151a4:	18ffffc4 	addi	r3,r3,-1
   151a8:	8121c83a 	sub	r16,r16,r4
   151ac:	10c6703a 	and	r3,r2,r3
   151b0:	003f3406 	br	14e84 <__alt_data_end+0xffff4e84>
   151b4:	9100004c 	andi	r4,r18,1
   151b8:	000b883a 	mov	r5,zero
   151bc:	0005883a 	mov	r2,zero
   151c0:	003f4806 	br	14ee4 <__alt_data_end+0xffff4ee4>
   151c4:	298cb03a 	or	r6,r5,r6
   151c8:	300cc03a 	cmpne	r6,r6,zero
   151cc:	0005883a 	mov	r2,zero
   151d0:	003f6406 	br	14f64 <__alt_data_end+0xffff4f64>
   151d4:	10009a1e 	bne	r2,zero,15440 <__subdf3+0x640>
   151d8:	82400044 	addi	r9,r16,1
   151dc:	4881ffcc 	andi	r2,r9,2047
   151e0:	02800044 	movi	r10,1
   151e4:	5080670e 	bge	r10,r2,15384 <__subdf3+0x584>
   151e8:	0081ffc4 	movi	r2,2047
   151ec:	4880af26 	beq	r9,r2,154ac <__subdf3+0x6ac>
   151f0:	898d883a 	add	r6,r17,r6
   151f4:	1945883a 	add	r2,r3,r5
   151f8:	3447803a 	cmpltu	r3,r6,r17
   151fc:	1887883a 	add	r3,r3,r2
   15200:	182297fa 	slli	r17,r3,31
   15204:	300cd07a 	srli	r6,r6,1
   15208:	1806d07a 	srli	r3,r3,1
   1520c:	4821883a 	mov	r16,r9
   15210:	89a2b03a 	or	r17,r17,r6
   15214:	003f1b06 	br	14e84 <__alt_data_end+0xffff4e84>
   15218:	0101ffc4 	movi	r4,2047
   1521c:	813f441e 	bne	r16,r4,14f30 <__alt_data_end+0xffff4f30>
   15220:	003f1806 	br	14e84 <__alt_data_end+0xffff4e84>
   15224:	843ff844 	addi	r16,r16,-31
   15228:	01400804 	movi	r5,32
   1522c:	1408d83a 	srl	r4,r2,r16
   15230:	19405026 	beq	r3,r5,15374 <__subdf3+0x574>
   15234:	01401004 	movi	r5,64
   15238:	28c7c83a 	sub	r3,r5,r3
   1523c:	10c4983a 	sll	r2,r2,r3
   15240:	88a2b03a 	or	r17,r17,r2
   15244:	8822c03a 	cmpne	r17,r17,zero
   15248:	2462b03a 	or	r17,r4,r17
   1524c:	0007883a 	mov	r3,zero
   15250:	0021883a 	mov	r16,zero
   15254:	003f6d06 	br	1500c <__alt_data_end+0xffff500c>
   15258:	11fff804 	addi	r7,r2,-32
   1525c:	01000804 	movi	r4,32
   15260:	29ced83a 	srl	r7,r5,r7
   15264:	11004526 	beq	r2,r4,1537c <__subdf3+0x57c>
   15268:	01001004 	movi	r4,64
   1526c:	2089c83a 	sub	r4,r4,r2
   15270:	2904983a 	sll	r2,r5,r4
   15274:	118cb03a 	or	r6,r2,r6
   15278:	300cc03a 	cmpne	r6,r6,zero
   1527c:	398cb03a 	or	r6,r7,r6
   15280:	0005883a 	mov	r2,zero
   15284:	003f3706 	br	14f64 <__alt_data_end+0xffff4f64>
   15288:	80002a26 	beq	r16,zero,15334 <__subdf3+0x534>
   1528c:	0101ffc4 	movi	r4,2047
   15290:	49006626 	beq	r9,r4,1542c <__subdf3+0x62c>
   15294:	0085c83a 	sub	r2,zero,r2
   15298:	18c02034 	orhi	r3,r3,128
   1529c:	01000e04 	movi	r4,56
   152a0:	20807e16 	blt	r4,r2,1549c <__subdf3+0x69c>
   152a4:	010007c4 	movi	r4,31
   152a8:	2080e716 	blt	r4,r2,15648 <__subdf3+0x848>
   152ac:	01000804 	movi	r4,32
   152b0:	2089c83a 	sub	r4,r4,r2
   152b4:	1914983a 	sll	r10,r3,r4
   152b8:	8890d83a 	srl	r8,r17,r2
   152bc:	8908983a 	sll	r4,r17,r4
   152c0:	1884d83a 	srl	r2,r3,r2
   152c4:	5222b03a 	or	r17,r10,r8
   152c8:	2006c03a 	cmpne	r3,r4,zero
   152cc:	88e2b03a 	or	r17,r17,r3
   152d0:	3463c83a 	sub	r17,r6,r17
   152d4:	2885c83a 	sub	r2,r5,r2
   152d8:	344d803a 	cmpltu	r6,r6,r17
   152dc:	1187c83a 	sub	r3,r2,r6
   152e0:	4821883a 	mov	r16,r9
   152e4:	3825883a 	mov	r18,r7
   152e8:	003f2306 	br	14f78 <__alt_data_end+0xffff4f78>
   152ec:	24d0b03a 	or	r8,r4,r19
   152f0:	40001b1e 	bne	r8,zero,15360 <__subdf3+0x560>
   152f4:	0005883a 	mov	r2,zero
   152f8:	0009883a 	mov	r4,zero
   152fc:	0021883a 	mov	r16,zero
   15300:	003f4906 	br	15028 <__alt_data_end+0xffff5028>
   15304:	010007c4 	movi	r4,31
   15308:	20803a16 	blt	r4,r2,153f4 <__subdf3+0x5f4>
   1530c:	01000804 	movi	r4,32
   15310:	2089c83a 	sub	r4,r4,r2
   15314:	2912983a 	sll	r9,r5,r4
   15318:	3090d83a 	srl	r8,r6,r2
   1531c:	3108983a 	sll	r4,r6,r4
   15320:	2884d83a 	srl	r2,r5,r2
   15324:	4a12b03a 	or	r9,r9,r8
   15328:	2008c03a 	cmpne	r4,r4,zero
   1532c:	4912b03a 	or	r9,r9,r4
   15330:	003f4e06 	br	1506c <__alt_data_end+0xffff506c>
   15334:	1c48b03a 	or	r4,r3,r17
   15338:	20003c26 	beq	r4,zero,1542c <__subdf3+0x62c>
   1533c:	0084303a 	nor	r2,zero,r2
   15340:	1000381e 	bne	r2,zero,15424 <__subdf3+0x624>
   15344:	3463c83a 	sub	r17,r6,r17
   15348:	28c5c83a 	sub	r2,r5,r3
   1534c:	344d803a 	cmpltu	r6,r6,r17
   15350:	1187c83a 	sub	r3,r2,r6
   15354:	4821883a 	mov	r16,r9
   15358:	3825883a 	mov	r18,r7
   1535c:	003f0606 	br	14f78 <__alt_data_end+0xffff4f78>
   15360:	2023883a 	mov	r17,r4
   15364:	003f0906 	br	14f8c <__alt_data_end+0xffff4f8c>
   15368:	0101ffc4 	movi	r4,2047
   1536c:	813f3a1e 	bne	r16,r4,15058 <__alt_data_end+0xffff5058>
   15370:	003ec406 	br	14e84 <__alt_data_end+0xffff4e84>
   15374:	0005883a 	mov	r2,zero
   15378:	003fb106 	br	15240 <__alt_data_end+0xffff5240>
   1537c:	0005883a 	mov	r2,zero
   15380:	003fbc06 	br	15274 <__alt_data_end+0xffff5274>
   15384:	1c44b03a 	or	r2,r3,r17
   15388:	80008e1e 	bne	r16,zero,155c4 <__subdf3+0x7c4>
   1538c:	1000c826 	beq	r2,zero,156b0 <__subdf3+0x8b0>
   15390:	2984b03a 	or	r2,r5,r6
   15394:	103ebb26 	beq	r2,zero,14e84 <__alt_data_end+0xffff4e84>
   15398:	8989883a 	add	r4,r17,r6
   1539c:	1945883a 	add	r2,r3,r5
   153a0:	2447803a 	cmpltu	r3,r4,r17
   153a4:	1887883a 	add	r3,r3,r2
   153a8:	1880202c 	andhi	r2,r3,128
   153ac:	2023883a 	mov	r17,r4
   153b0:	103f1626 	beq	r2,zero,1500c <__alt_data_end+0xffff500c>
   153b4:	00bfe034 	movhi	r2,65408
   153b8:	10bfffc4 	addi	r2,r2,-1
   153bc:	5021883a 	mov	r16,r10
   153c0:	1886703a 	and	r3,r3,r2
   153c4:	003eaf06 	br	14e84 <__alt_data_end+0xffff4e84>
   153c8:	3825883a 	mov	r18,r7
   153cc:	003f0f06 	br	1500c <__alt_data_end+0xffff500c>
   153d0:	1c44b03a 	or	r2,r3,r17
   153d4:	8000251e 	bne	r16,zero,1546c <__subdf3+0x66c>
   153d8:	1000661e 	bne	r2,zero,15574 <__subdf3+0x774>
   153dc:	2990b03a 	or	r8,r5,r6
   153e0:	40009626 	beq	r8,zero,1563c <__subdf3+0x83c>
   153e4:	2807883a 	mov	r3,r5
   153e8:	3023883a 	mov	r17,r6
   153ec:	3825883a 	mov	r18,r7
   153f0:	003ea406 	br	14e84 <__alt_data_end+0xffff4e84>
   153f4:	127ff804 	addi	r9,r2,-32
   153f8:	01000804 	movi	r4,32
   153fc:	2a52d83a 	srl	r9,r5,r9
   15400:	11008c26 	beq	r2,r4,15634 <__subdf3+0x834>
   15404:	01001004 	movi	r4,64
   15408:	2085c83a 	sub	r2,r4,r2
   1540c:	2884983a 	sll	r2,r5,r2
   15410:	118cb03a 	or	r6,r2,r6
   15414:	300cc03a 	cmpne	r6,r6,zero
   15418:	4992b03a 	or	r9,r9,r6
   1541c:	0005883a 	mov	r2,zero
   15420:	003f1206 	br	1506c <__alt_data_end+0xffff506c>
   15424:	0101ffc4 	movi	r4,2047
   15428:	493f9c1e 	bne	r9,r4,1529c <__alt_data_end+0xffff529c>
   1542c:	2807883a 	mov	r3,r5
   15430:	3023883a 	mov	r17,r6
   15434:	4821883a 	mov	r16,r9
   15438:	3825883a 	mov	r18,r7
   1543c:	003e9106 	br	14e84 <__alt_data_end+0xffff4e84>
   15440:	80001f1e 	bne	r16,zero,154c0 <__subdf3+0x6c0>
   15444:	1c48b03a 	or	r4,r3,r17
   15448:	20005a26 	beq	r4,zero,155b4 <__subdf3+0x7b4>
   1544c:	0084303a 	nor	r2,zero,r2
   15450:	1000561e 	bne	r2,zero,155ac <__subdf3+0x7ac>
   15454:	89a3883a 	add	r17,r17,r6
   15458:	1945883a 	add	r2,r3,r5
   1545c:	898d803a 	cmpltu	r6,r17,r6
   15460:	3087883a 	add	r3,r6,r2
   15464:	4821883a 	mov	r16,r9
   15468:	003f0506 	br	15080 <__alt_data_end+0xffff5080>
   1546c:	10002b1e 	bne	r2,zero,1551c <__subdf3+0x71c>
   15470:	2984b03a 	or	r2,r5,r6
   15474:	10008026 	beq	r2,zero,15678 <__subdf3+0x878>
   15478:	2807883a 	mov	r3,r5
   1547c:	3023883a 	mov	r17,r6
   15480:	3825883a 	mov	r18,r7
   15484:	0401ffc4 	movi	r16,2047
   15488:	003e7e06 	br	14e84 <__alt_data_end+0xffff4e84>
   1548c:	3809883a 	mov	r4,r7
   15490:	0011883a 	mov	r8,zero
   15494:	0005883a 	mov	r2,zero
   15498:	003ee306 	br	15028 <__alt_data_end+0xffff5028>
   1549c:	1c62b03a 	or	r17,r3,r17
   154a0:	8822c03a 	cmpne	r17,r17,zero
   154a4:	0005883a 	mov	r2,zero
   154a8:	003f8906 	br	152d0 <__alt_data_end+0xffff52d0>
   154ac:	3809883a 	mov	r4,r7
   154b0:	4821883a 	mov	r16,r9
   154b4:	0011883a 	mov	r8,zero
   154b8:	0005883a 	mov	r2,zero
   154bc:	003eda06 	br	15028 <__alt_data_end+0xffff5028>
   154c0:	0101ffc4 	movi	r4,2047
   154c4:	49003b26 	beq	r9,r4,155b4 <__subdf3+0x7b4>
   154c8:	0085c83a 	sub	r2,zero,r2
   154cc:	18c02034 	orhi	r3,r3,128
   154d0:	01000e04 	movi	r4,56
   154d4:	20806e16 	blt	r4,r2,15690 <__subdf3+0x890>
   154d8:	010007c4 	movi	r4,31
   154dc:	20807716 	blt	r4,r2,156bc <__subdf3+0x8bc>
   154e0:	01000804 	movi	r4,32
   154e4:	2089c83a 	sub	r4,r4,r2
   154e8:	1914983a 	sll	r10,r3,r4
   154ec:	8890d83a 	srl	r8,r17,r2
   154f0:	8908983a 	sll	r4,r17,r4
   154f4:	1884d83a 	srl	r2,r3,r2
   154f8:	5222b03a 	or	r17,r10,r8
   154fc:	2006c03a 	cmpne	r3,r4,zero
   15500:	88e2b03a 	or	r17,r17,r3
   15504:	89a3883a 	add	r17,r17,r6
   15508:	1145883a 	add	r2,r2,r5
   1550c:	898d803a 	cmpltu	r6,r17,r6
   15510:	3087883a 	add	r3,r6,r2
   15514:	4821883a 	mov	r16,r9
   15518:	003ed906 	br	15080 <__alt_data_end+0xffff5080>
   1551c:	2984b03a 	or	r2,r5,r6
   15520:	10004226 	beq	r2,zero,1562c <__subdf3+0x82c>
   15524:	1808d0fa 	srli	r4,r3,3
   15528:	8822d0fa 	srli	r17,r17,3
   1552c:	1806977a 	slli	r3,r3,29
   15530:	2080022c 	andhi	r2,r4,8
   15534:	1c62b03a 	or	r17,r3,r17
   15538:	10000826 	beq	r2,zero,1555c <__subdf3+0x75c>
   1553c:	2812d0fa 	srli	r9,r5,3
   15540:	4880022c 	andhi	r2,r9,8
   15544:	1000051e 	bne	r2,zero,1555c <__subdf3+0x75c>
   15548:	300cd0fa 	srli	r6,r6,3
   1554c:	2804977a 	slli	r2,r5,29
   15550:	4809883a 	mov	r4,r9
   15554:	3825883a 	mov	r18,r7
   15558:	11a2b03a 	or	r17,r2,r6
   1555c:	8806d77a 	srli	r3,r17,29
   15560:	200890fa 	slli	r4,r4,3
   15564:	882290fa 	slli	r17,r17,3
   15568:	0401ffc4 	movi	r16,2047
   1556c:	1906b03a 	or	r3,r3,r4
   15570:	003e4406 	br	14e84 <__alt_data_end+0xffff4e84>
   15574:	2984b03a 	or	r2,r5,r6
   15578:	103e4226 	beq	r2,zero,14e84 <__alt_data_end+0xffff4e84>
   1557c:	8989c83a 	sub	r4,r17,r6
   15580:	8911803a 	cmpltu	r8,r17,r4
   15584:	1945c83a 	sub	r2,r3,r5
   15588:	1205c83a 	sub	r2,r2,r8
   1558c:	1200202c 	andhi	r8,r2,128
   15590:	403e9a26 	beq	r8,zero,14ffc <__alt_data_end+0xffff4ffc>
   15594:	3463c83a 	sub	r17,r6,r17
   15598:	28c5c83a 	sub	r2,r5,r3
   1559c:	344d803a 	cmpltu	r6,r6,r17
   155a0:	1187c83a 	sub	r3,r2,r6
   155a4:	3825883a 	mov	r18,r7
   155a8:	003e3606 	br	14e84 <__alt_data_end+0xffff4e84>
   155ac:	0101ffc4 	movi	r4,2047
   155b0:	493fc71e 	bne	r9,r4,154d0 <__alt_data_end+0xffff54d0>
   155b4:	2807883a 	mov	r3,r5
   155b8:	3023883a 	mov	r17,r6
   155bc:	4821883a 	mov	r16,r9
   155c0:	003e3006 	br	14e84 <__alt_data_end+0xffff4e84>
   155c4:	10003626 	beq	r2,zero,156a0 <__subdf3+0x8a0>
   155c8:	2984b03a 	or	r2,r5,r6
   155cc:	10001726 	beq	r2,zero,1562c <__subdf3+0x82c>
   155d0:	1808d0fa 	srli	r4,r3,3
   155d4:	8822d0fa 	srli	r17,r17,3
   155d8:	1806977a 	slli	r3,r3,29
   155dc:	2080022c 	andhi	r2,r4,8
   155e0:	1c62b03a 	or	r17,r3,r17
   155e4:	10000726 	beq	r2,zero,15604 <__subdf3+0x804>
   155e8:	2812d0fa 	srli	r9,r5,3
   155ec:	4880022c 	andhi	r2,r9,8
   155f0:	1000041e 	bne	r2,zero,15604 <__subdf3+0x804>
   155f4:	300cd0fa 	srli	r6,r6,3
   155f8:	2804977a 	slli	r2,r5,29
   155fc:	4809883a 	mov	r4,r9
   15600:	11a2b03a 	or	r17,r2,r6
   15604:	8806d77a 	srli	r3,r17,29
   15608:	200890fa 	slli	r4,r4,3
   1560c:	882290fa 	slli	r17,r17,3
   15610:	3825883a 	mov	r18,r7
   15614:	1906b03a 	or	r3,r3,r4
   15618:	0401ffc4 	movi	r16,2047
   1561c:	003e1906 	br	14e84 <__alt_data_end+0xffff4e84>
   15620:	000b883a 	mov	r5,zero
   15624:	0005883a 	mov	r2,zero
   15628:	003e2e06 	br	14ee4 <__alt_data_end+0xffff4ee4>
   1562c:	0401ffc4 	movi	r16,2047
   15630:	003e1406 	br	14e84 <__alt_data_end+0xffff4e84>
   15634:	0005883a 	mov	r2,zero
   15638:	003f7506 	br	15410 <__alt_data_end+0xffff5410>
   1563c:	0005883a 	mov	r2,zero
   15640:	0009883a 	mov	r4,zero
   15644:	003e7806 	br	15028 <__alt_data_end+0xffff5028>
   15648:	123ff804 	addi	r8,r2,-32
   1564c:	01000804 	movi	r4,32
   15650:	1a10d83a 	srl	r8,r3,r8
   15654:	11002526 	beq	r2,r4,156ec <__subdf3+0x8ec>
   15658:	01001004 	movi	r4,64
   1565c:	2085c83a 	sub	r2,r4,r2
   15660:	1884983a 	sll	r2,r3,r2
   15664:	1444b03a 	or	r2,r2,r17
   15668:	1004c03a 	cmpne	r2,r2,zero
   1566c:	40a2b03a 	or	r17,r8,r2
   15670:	0005883a 	mov	r2,zero
   15674:	003f1606 	br	152d0 <__alt_data_end+0xffff52d0>
   15678:	02000434 	movhi	r8,16
   1567c:	0009883a 	mov	r4,zero
   15680:	423fffc4 	addi	r8,r8,-1
   15684:	00bfffc4 	movi	r2,-1
   15688:	0401ffc4 	movi	r16,2047
   1568c:	003e6606 	br	15028 <__alt_data_end+0xffff5028>
   15690:	1c62b03a 	or	r17,r3,r17
   15694:	8822c03a 	cmpne	r17,r17,zero
   15698:	0005883a 	mov	r2,zero
   1569c:	003f9906 	br	15504 <__alt_data_end+0xffff5504>
   156a0:	2807883a 	mov	r3,r5
   156a4:	3023883a 	mov	r17,r6
   156a8:	0401ffc4 	movi	r16,2047
   156ac:	003df506 	br	14e84 <__alt_data_end+0xffff4e84>
   156b0:	2807883a 	mov	r3,r5
   156b4:	3023883a 	mov	r17,r6
   156b8:	003df206 	br	14e84 <__alt_data_end+0xffff4e84>
   156bc:	123ff804 	addi	r8,r2,-32
   156c0:	01000804 	movi	r4,32
   156c4:	1a10d83a 	srl	r8,r3,r8
   156c8:	11000a26 	beq	r2,r4,156f4 <__subdf3+0x8f4>
   156cc:	01001004 	movi	r4,64
   156d0:	2085c83a 	sub	r2,r4,r2
   156d4:	1884983a 	sll	r2,r3,r2
   156d8:	1444b03a 	or	r2,r2,r17
   156dc:	1004c03a 	cmpne	r2,r2,zero
   156e0:	40a2b03a 	or	r17,r8,r2
   156e4:	0005883a 	mov	r2,zero
   156e8:	003f8606 	br	15504 <__alt_data_end+0xffff5504>
   156ec:	0005883a 	mov	r2,zero
   156f0:	003fdc06 	br	15664 <__alt_data_end+0xffff5664>
   156f4:	0005883a 	mov	r2,zero
   156f8:	003ff706 	br	156d8 <__alt_data_end+0xffff56d8>

000156fc <__fixdfsi>:
   156fc:	280cd53a 	srli	r6,r5,20
   15700:	00c00434 	movhi	r3,16
   15704:	18ffffc4 	addi	r3,r3,-1
   15708:	3181ffcc 	andi	r6,r6,2047
   1570c:	01c0ff84 	movi	r7,1022
   15710:	28c6703a 	and	r3,r5,r3
   15714:	280ad7fa 	srli	r5,r5,31
   15718:	3980120e 	bge	r7,r6,15764 <__fixdfsi+0x68>
   1571c:	00810744 	movi	r2,1053
   15720:	11800c16 	blt	r2,r6,15754 <__fixdfsi+0x58>
   15724:	00810cc4 	movi	r2,1075
   15728:	1185c83a 	sub	r2,r2,r6
   1572c:	01c007c4 	movi	r7,31
   15730:	18c00434 	orhi	r3,r3,16
   15734:	38800d16 	blt	r7,r2,1576c <__fixdfsi+0x70>
   15738:	31befb44 	addi	r6,r6,-1043
   1573c:	2084d83a 	srl	r2,r4,r2
   15740:	1986983a 	sll	r3,r3,r6
   15744:	1884b03a 	or	r2,r3,r2
   15748:	28000726 	beq	r5,zero,15768 <__fixdfsi+0x6c>
   1574c:	0085c83a 	sub	r2,zero,r2
   15750:	f800283a 	ret
   15754:	00a00034 	movhi	r2,32768
   15758:	10bfffc4 	addi	r2,r2,-1
   1575c:	2885883a 	add	r2,r5,r2
   15760:	f800283a 	ret
   15764:	0005883a 	mov	r2,zero
   15768:	f800283a 	ret
   1576c:	008104c4 	movi	r2,1043
   15770:	1185c83a 	sub	r2,r2,r6
   15774:	1884d83a 	srl	r2,r3,r2
   15778:	003ff306 	br	15748 <__alt_data_end+0xffff5748>

0001577c <__floatsidf>:
   1577c:	defffd04 	addi	sp,sp,-12
   15780:	dfc00215 	stw	ra,8(sp)
   15784:	dc400115 	stw	r17,4(sp)
   15788:	dc000015 	stw	r16,0(sp)
   1578c:	20002b26 	beq	r4,zero,1583c <__floatsidf+0xc0>
   15790:	2023883a 	mov	r17,r4
   15794:	2020d7fa 	srli	r16,r4,31
   15798:	20002d16 	blt	r4,zero,15850 <__floatsidf+0xd4>
   1579c:	8809883a 	mov	r4,r17
   157a0:	0015a000 	call	15a00 <__clzsi2>
   157a4:	01410784 	movi	r5,1054
   157a8:	288bc83a 	sub	r5,r5,r2
   157ac:	01010cc4 	movi	r4,1075
   157b0:	2149c83a 	sub	r4,r4,r5
   157b4:	00c007c4 	movi	r3,31
   157b8:	1900160e 	bge	r3,r4,15814 <__floatsidf+0x98>
   157bc:	00c104c4 	movi	r3,1043
   157c0:	1947c83a 	sub	r3,r3,r5
   157c4:	88c6983a 	sll	r3,r17,r3
   157c8:	00800434 	movhi	r2,16
   157cc:	10bfffc4 	addi	r2,r2,-1
   157d0:	1886703a 	and	r3,r3,r2
   157d4:	2941ffcc 	andi	r5,r5,2047
   157d8:	800d883a 	mov	r6,r16
   157dc:	0005883a 	mov	r2,zero
   157e0:	280a953a 	slli	r5,r5,20
   157e4:	31803fcc 	andi	r6,r6,255
   157e8:	01000434 	movhi	r4,16
   157ec:	300c97fa 	slli	r6,r6,31
   157f0:	213fffc4 	addi	r4,r4,-1
   157f4:	1906703a 	and	r3,r3,r4
   157f8:	1946b03a 	or	r3,r3,r5
   157fc:	1986b03a 	or	r3,r3,r6
   15800:	dfc00217 	ldw	ra,8(sp)
   15804:	dc400117 	ldw	r17,4(sp)
   15808:	dc000017 	ldw	r16,0(sp)
   1580c:	dec00304 	addi	sp,sp,12
   15810:	f800283a 	ret
   15814:	00c002c4 	movi	r3,11
   15818:	1887c83a 	sub	r3,r3,r2
   1581c:	88c6d83a 	srl	r3,r17,r3
   15820:	8904983a 	sll	r2,r17,r4
   15824:	01000434 	movhi	r4,16
   15828:	213fffc4 	addi	r4,r4,-1
   1582c:	2941ffcc 	andi	r5,r5,2047
   15830:	1906703a 	and	r3,r3,r4
   15834:	800d883a 	mov	r6,r16
   15838:	003fe906 	br	157e0 <__alt_data_end+0xffff57e0>
   1583c:	000d883a 	mov	r6,zero
   15840:	000b883a 	mov	r5,zero
   15844:	0007883a 	mov	r3,zero
   15848:	0005883a 	mov	r2,zero
   1584c:	003fe406 	br	157e0 <__alt_data_end+0xffff57e0>
   15850:	0123c83a 	sub	r17,zero,r4
   15854:	003fd106 	br	1579c <__alt_data_end+0xffff579c>

00015858 <__truncdfsf2>:
   15858:	2810d53a 	srli	r8,r5,20
   1585c:	01c00434 	movhi	r7,16
   15860:	39ffffc4 	addi	r7,r7,-1
   15864:	29ce703a 	and	r7,r5,r7
   15868:	4201ffcc 	andi	r8,r8,2047
   1586c:	380e90fa 	slli	r7,r7,3
   15870:	200cd77a 	srli	r6,r4,29
   15874:	42400044 	addi	r9,r8,1
   15878:	4a41ffcc 	andi	r9,r9,2047
   1587c:	00c00044 	movi	r3,1
   15880:	280ad7fa 	srli	r5,r5,31
   15884:	31ceb03a 	or	r7,r6,r7
   15888:	200490fa 	slli	r2,r4,3
   1588c:	1a40230e 	bge	r3,r9,1591c <__truncdfsf2+0xc4>
   15890:	40ff2004 	addi	r3,r8,-896
   15894:	01803f84 	movi	r6,254
   15898:	30c01516 	blt	r6,r3,158f0 <__truncdfsf2+0x98>
   1589c:	00c0380e 	bge	zero,r3,15980 <__truncdfsf2+0x128>
   158a0:	200c91ba 	slli	r6,r4,6
   158a4:	380e90fa 	slli	r7,r7,3
   158a8:	1004d77a 	srli	r2,r2,29
   158ac:	300cc03a 	cmpne	r6,r6,zero
   158b0:	31ccb03a 	or	r6,r6,r7
   158b4:	308cb03a 	or	r6,r6,r2
   158b8:	308001cc 	andi	r2,r6,7
   158bc:	10000426 	beq	r2,zero,158d0 <__truncdfsf2+0x78>
   158c0:	308003cc 	andi	r2,r6,15
   158c4:	01000104 	movi	r4,4
   158c8:	11000126 	beq	r2,r4,158d0 <__truncdfsf2+0x78>
   158cc:	31800104 	addi	r6,r6,4
   158d0:	3081002c 	andhi	r2,r6,1024
   158d4:	10001626 	beq	r2,zero,15930 <__truncdfsf2+0xd8>
   158d8:	18c00044 	addi	r3,r3,1
   158dc:	00803fc4 	movi	r2,255
   158e0:	18800326 	beq	r3,r2,158f0 <__truncdfsf2+0x98>
   158e4:	300c91ba 	slli	r6,r6,6
   158e8:	300cd27a 	srli	r6,r6,9
   158ec:	00000206 	br	158f8 <__truncdfsf2+0xa0>
   158f0:	00ffffc4 	movi	r3,-1
   158f4:	000d883a 	mov	r6,zero
   158f8:	18c03fcc 	andi	r3,r3,255
   158fc:	180895fa 	slli	r4,r3,23
   15900:	00c02034 	movhi	r3,128
   15904:	280a97fa 	slli	r5,r5,31
   15908:	18ffffc4 	addi	r3,r3,-1
   1590c:	30c6703a 	and	r3,r6,r3
   15910:	1906b03a 	or	r3,r3,r4
   15914:	1944b03a 	or	r2,r3,r5
   15918:	f800283a 	ret
   1591c:	40000b1e 	bne	r8,zero,1594c <__truncdfsf2+0xf4>
   15920:	388cb03a 	or	r6,r7,r2
   15924:	0007883a 	mov	r3,zero
   15928:	30000426 	beq	r6,zero,1593c <__truncdfsf2+0xe4>
   1592c:	01800144 	movi	r6,5
   15930:	00803fc4 	movi	r2,255
   15934:	300cd0fa 	srli	r6,r6,3
   15938:	18800a26 	beq	r3,r2,15964 <__truncdfsf2+0x10c>
   1593c:	00802034 	movhi	r2,128
   15940:	10bfffc4 	addi	r2,r2,-1
   15944:	308c703a 	and	r6,r6,r2
   15948:	003feb06 	br	158f8 <__alt_data_end+0xffff58f8>
   1594c:	3888b03a 	or	r4,r7,r2
   15950:	203fe726 	beq	r4,zero,158f0 <__alt_data_end+0xffff58f0>
   15954:	380c90fa 	slli	r6,r7,3
   15958:	00c03fc4 	movi	r3,255
   1595c:	31808034 	orhi	r6,r6,512
   15960:	003fd506 	br	158b8 <__alt_data_end+0xffff58b8>
   15964:	303fe226 	beq	r6,zero,158f0 <__alt_data_end+0xffff58f0>
   15968:	00802034 	movhi	r2,128
   1596c:	31801034 	orhi	r6,r6,64
   15970:	10bfffc4 	addi	r2,r2,-1
   15974:	00ffffc4 	movi	r3,-1
   15978:	308c703a 	and	r6,r6,r2
   1597c:	003fde06 	br	158f8 <__alt_data_end+0xffff58f8>
   15980:	013ffa44 	movi	r4,-23
   15984:	19000e16 	blt	r3,r4,159c0 <__truncdfsf2+0x168>
   15988:	01000784 	movi	r4,30
   1598c:	20c9c83a 	sub	r4,r4,r3
   15990:	018007c4 	movi	r6,31
   15994:	39c02034 	orhi	r7,r7,128
   15998:	31000b16 	blt	r6,r4,159c8 <__truncdfsf2+0x170>
   1599c:	423f2084 	addi	r8,r8,-894
   159a0:	120c983a 	sll	r6,r2,r8
   159a4:	3a0e983a 	sll	r7,r7,r8
   159a8:	1104d83a 	srl	r2,r2,r4
   159ac:	300cc03a 	cmpne	r6,r6,zero
   159b0:	31ceb03a 	or	r7,r6,r7
   159b4:	388cb03a 	or	r6,r7,r2
   159b8:	0007883a 	mov	r3,zero
   159bc:	003fbe06 	br	158b8 <__alt_data_end+0xffff58b8>
   159c0:	0007883a 	mov	r3,zero
   159c4:	003fd906 	br	1592c <__alt_data_end+0xffff592c>
   159c8:	01bfff84 	movi	r6,-2
   159cc:	30cdc83a 	sub	r6,r6,r3
   159d0:	00c00804 	movi	r3,32
   159d4:	398cd83a 	srl	r6,r7,r6
   159d8:	20c00726 	beq	r4,r3,159f8 <__truncdfsf2+0x1a0>
   159dc:	423f2884 	addi	r8,r8,-862
   159e0:	3a0e983a 	sll	r7,r7,r8
   159e4:	3884b03a 	or	r2,r7,r2
   159e8:	1004c03a 	cmpne	r2,r2,zero
   159ec:	118cb03a 	or	r6,r2,r6
   159f0:	0007883a 	mov	r3,zero
   159f4:	003fb006 	br	158b8 <__alt_data_end+0xffff58b8>
   159f8:	000f883a 	mov	r7,zero
   159fc:	003ff906 	br	159e4 <__alt_data_end+0xffff59e4>

00015a00 <__clzsi2>:
   15a00:	00bfffd4 	movui	r2,65535
   15a04:	11000536 	bltu	r2,r4,15a1c <__clzsi2+0x1c>
   15a08:	00803fc4 	movi	r2,255
   15a0c:	11000f36 	bltu	r2,r4,15a4c <__clzsi2+0x4c>
   15a10:	00800804 	movi	r2,32
   15a14:	0007883a 	mov	r3,zero
   15a18:	00000506 	br	15a30 <__clzsi2+0x30>
   15a1c:	00804034 	movhi	r2,256
   15a20:	10bfffc4 	addi	r2,r2,-1
   15a24:	11000c2e 	bgeu	r2,r4,15a58 <__clzsi2+0x58>
   15a28:	00800204 	movi	r2,8
   15a2c:	00c00604 	movi	r3,24
   15a30:	20c8d83a 	srl	r4,r4,r3
   15a34:	00c00074 	movhi	r3,1
   15a38:	18dc7604 	addi	r3,r3,29144
   15a3c:	1909883a 	add	r4,r3,r4
   15a40:	20c00003 	ldbu	r3,0(r4)
   15a44:	10c5c83a 	sub	r2,r2,r3
   15a48:	f800283a 	ret
   15a4c:	00800604 	movi	r2,24
   15a50:	00c00204 	movi	r3,8
   15a54:	003ff606 	br	15a30 <__alt_data_end+0xffff5a30>
   15a58:	00800404 	movi	r2,16
   15a5c:	1007883a 	mov	r3,r2
   15a60:	003ff306 	br	15a30 <__alt_data_end+0xffff5a30>

00015a64 <__divsi3>:
   15a64:	20001b16 	blt	r4,zero,15ad4 <__divsi3+0x70>
   15a68:	000f883a 	mov	r7,zero
   15a6c:	28001616 	blt	r5,zero,15ac8 <__divsi3+0x64>
   15a70:	200d883a 	mov	r6,r4
   15a74:	29001a2e 	bgeu	r5,r4,15ae0 <__divsi3+0x7c>
   15a78:	00800804 	movi	r2,32
   15a7c:	00c00044 	movi	r3,1
   15a80:	00000106 	br	15a88 <__divsi3+0x24>
   15a84:	10000d26 	beq	r2,zero,15abc <__divsi3+0x58>
   15a88:	294b883a 	add	r5,r5,r5
   15a8c:	10bfffc4 	addi	r2,r2,-1
   15a90:	18c7883a 	add	r3,r3,r3
   15a94:	293ffb36 	bltu	r5,r4,15a84 <__alt_data_end+0xffff5a84>
   15a98:	0005883a 	mov	r2,zero
   15a9c:	18000726 	beq	r3,zero,15abc <__divsi3+0x58>
   15aa0:	0005883a 	mov	r2,zero
   15aa4:	31400236 	bltu	r6,r5,15ab0 <__divsi3+0x4c>
   15aa8:	314dc83a 	sub	r6,r6,r5
   15aac:	10c4b03a 	or	r2,r2,r3
   15ab0:	1806d07a 	srli	r3,r3,1
   15ab4:	280ad07a 	srli	r5,r5,1
   15ab8:	183ffa1e 	bne	r3,zero,15aa4 <__alt_data_end+0xffff5aa4>
   15abc:	38000126 	beq	r7,zero,15ac4 <__divsi3+0x60>
   15ac0:	0085c83a 	sub	r2,zero,r2
   15ac4:	f800283a 	ret
   15ac8:	014bc83a 	sub	r5,zero,r5
   15acc:	39c0005c 	xori	r7,r7,1
   15ad0:	003fe706 	br	15a70 <__alt_data_end+0xffff5a70>
   15ad4:	0109c83a 	sub	r4,zero,r4
   15ad8:	01c00044 	movi	r7,1
   15adc:	003fe306 	br	15a6c <__alt_data_end+0xffff5a6c>
   15ae0:	00c00044 	movi	r3,1
   15ae4:	003fee06 	br	15aa0 <__alt_data_end+0xffff5aa0>

00015ae8 <__modsi3>:
   15ae8:	20001716 	blt	r4,zero,15b48 <__modsi3+0x60>
   15aec:	000f883a 	mov	r7,zero
   15af0:	2005883a 	mov	r2,r4
   15af4:	28001216 	blt	r5,zero,15b40 <__modsi3+0x58>
   15af8:	2900162e 	bgeu	r5,r4,15b54 <__modsi3+0x6c>
   15afc:	01800804 	movi	r6,32
   15b00:	00c00044 	movi	r3,1
   15b04:	00000106 	br	15b0c <__modsi3+0x24>
   15b08:	30000a26 	beq	r6,zero,15b34 <__modsi3+0x4c>
   15b0c:	294b883a 	add	r5,r5,r5
   15b10:	31bfffc4 	addi	r6,r6,-1
   15b14:	18c7883a 	add	r3,r3,r3
   15b18:	293ffb36 	bltu	r5,r4,15b08 <__alt_data_end+0xffff5b08>
   15b1c:	18000526 	beq	r3,zero,15b34 <__modsi3+0x4c>
   15b20:	1806d07a 	srli	r3,r3,1
   15b24:	11400136 	bltu	r2,r5,15b2c <__modsi3+0x44>
   15b28:	1145c83a 	sub	r2,r2,r5
   15b2c:	280ad07a 	srli	r5,r5,1
   15b30:	183ffb1e 	bne	r3,zero,15b20 <__alt_data_end+0xffff5b20>
   15b34:	38000126 	beq	r7,zero,15b3c <__modsi3+0x54>
   15b38:	0085c83a 	sub	r2,zero,r2
   15b3c:	f800283a 	ret
   15b40:	014bc83a 	sub	r5,zero,r5
   15b44:	003fec06 	br	15af8 <__alt_data_end+0xffff5af8>
   15b48:	0109c83a 	sub	r4,zero,r4
   15b4c:	01c00044 	movi	r7,1
   15b50:	003fe706 	br	15af0 <__alt_data_end+0xffff5af0>
   15b54:	00c00044 	movi	r3,1
   15b58:	003ff106 	br	15b20 <__alt_data_end+0xffff5b20>

00015b5c <__udivsi3>:
   15b5c:	200d883a 	mov	r6,r4
   15b60:	2900152e 	bgeu	r5,r4,15bb8 <__udivsi3+0x5c>
   15b64:	28001416 	blt	r5,zero,15bb8 <__udivsi3+0x5c>
   15b68:	00800804 	movi	r2,32
   15b6c:	00c00044 	movi	r3,1
   15b70:	00000206 	br	15b7c <__udivsi3+0x20>
   15b74:	10000e26 	beq	r2,zero,15bb0 <__udivsi3+0x54>
   15b78:	28000516 	blt	r5,zero,15b90 <__udivsi3+0x34>
   15b7c:	294b883a 	add	r5,r5,r5
   15b80:	10bfffc4 	addi	r2,r2,-1
   15b84:	18c7883a 	add	r3,r3,r3
   15b88:	293ffa36 	bltu	r5,r4,15b74 <__alt_data_end+0xffff5b74>
   15b8c:	18000826 	beq	r3,zero,15bb0 <__udivsi3+0x54>
   15b90:	0005883a 	mov	r2,zero
   15b94:	31400236 	bltu	r6,r5,15ba0 <__udivsi3+0x44>
   15b98:	314dc83a 	sub	r6,r6,r5
   15b9c:	10c4b03a 	or	r2,r2,r3
   15ba0:	1806d07a 	srli	r3,r3,1
   15ba4:	280ad07a 	srli	r5,r5,1
   15ba8:	183ffa1e 	bne	r3,zero,15b94 <__alt_data_end+0xffff5b94>
   15bac:	f800283a 	ret
   15bb0:	0005883a 	mov	r2,zero
   15bb4:	f800283a 	ret
   15bb8:	00c00044 	movi	r3,1
   15bbc:	003ff406 	br	15b90 <__alt_data_end+0xffff5b90>

00015bc0 <__umodsi3>:
   15bc0:	2005883a 	mov	r2,r4
   15bc4:	2900122e 	bgeu	r5,r4,15c10 <__umodsi3+0x50>
   15bc8:	28001116 	blt	r5,zero,15c10 <__umodsi3+0x50>
   15bcc:	01800804 	movi	r6,32
   15bd0:	00c00044 	movi	r3,1
   15bd4:	00000206 	br	15be0 <__umodsi3+0x20>
   15bd8:	30000c26 	beq	r6,zero,15c0c <__umodsi3+0x4c>
   15bdc:	28000516 	blt	r5,zero,15bf4 <__umodsi3+0x34>
   15be0:	294b883a 	add	r5,r5,r5
   15be4:	31bfffc4 	addi	r6,r6,-1
   15be8:	18c7883a 	add	r3,r3,r3
   15bec:	293ffa36 	bltu	r5,r4,15bd8 <__alt_data_end+0xffff5bd8>
   15bf0:	18000626 	beq	r3,zero,15c0c <__umodsi3+0x4c>
   15bf4:	1806d07a 	srli	r3,r3,1
   15bf8:	11400136 	bltu	r2,r5,15c00 <__umodsi3+0x40>
   15bfc:	1145c83a 	sub	r2,r2,r5
   15c00:	280ad07a 	srli	r5,r5,1
   15c04:	183ffb1e 	bne	r3,zero,15bf4 <__alt_data_end+0xffff5bf4>
   15c08:	f800283a 	ret
   15c0c:	f800283a 	ret
   15c10:	00c00044 	movi	r3,1
   15c14:	003ff706 	br	15bf4 <__alt_data_end+0xffff5bf4>

00015c18 <_asprintf_r>:
   15c18:	defff604 	addi	sp,sp,-40
   15c1c:	dc000715 	stw	r16,28(sp)
   15c20:	2821883a 	mov	r16,r5
   15c24:	dfc00815 	stw	ra,32(sp)
   15c28:	d9c00915 	stw	r7,36(sp)
   15c2c:	0080a204 	movi	r2,648
   15c30:	d880000d 	sth	r2,0(sp)
   15c34:	00bfffc4 	movi	r2,-1
   15c38:	d880008d 	sth	r2,2(sp)
   15c3c:	00800074 	movhi	r2,1
   15c40:	10975304 	addi	r2,r2,23884
   15c44:	d8800115 	stw	r2,4(sp)
   15c48:	00800074 	movhi	r2,1
   15c4c:	10985b04 	addi	r2,r2,24940
   15c50:	d9c00904 	addi	r7,sp,36
   15c54:	d80b883a 	mov	r5,sp
   15c58:	d8000415 	stw	zero,16(sp)
   15c5c:	d8000215 	stw	zero,8(sp)
   15c60:	d8000515 	stw	zero,20(sp)
   15c64:	d8000315 	stw	zero,12(sp)
   15c68:	d8800615 	stw	r2,24(sp)
   15c6c:	001651c0 	call	1651c <___svfprintf_internal_r>
   15c70:	10000416 	blt	r2,zero,15c84 <_asprintf_r+0x6c>
   15c74:	d8c00417 	ldw	r3,16(sp)
   15c78:	18000005 	stb	zero,0(r3)
   15c7c:	d8c00217 	ldw	r3,8(sp)
   15c80:	80c00015 	stw	r3,0(r16)
   15c84:	dfc00817 	ldw	ra,32(sp)
   15c88:	dc000717 	ldw	r16,28(sp)
   15c8c:	dec00a04 	addi	sp,sp,40
   15c90:	f800283a 	ret

00015c94 <asprintf>:
   15c94:	defff504 	addi	sp,sp,-44
   15c98:	dc000715 	stw	r16,28(sp)
   15c9c:	2021883a 	mov	r16,r4
   15ca0:	dfc00815 	stw	ra,32(sp)
   15ca4:	d9800915 	stw	r6,36(sp)
   15ca8:	d9c00a15 	stw	r7,40(sp)
   15cac:	0080a204 	movi	r2,648
   15cb0:	d880000d 	sth	r2,0(sp)
   15cb4:	00bfffc4 	movi	r2,-1
   15cb8:	d880008d 	sth	r2,2(sp)
   15cbc:	00800074 	movhi	r2,1
   15cc0:	10975304 	addi	r2,r2,23884
   15cc4:	d8800115 	stw	r2,4(sp)
   15cc8:	00800074 	movhi	r2,1
   15ccc:	10985b04 	addi	r2,r2,24940
   15cd0:	d8800615 	stw	r2,24(sp)
   15cd4:	00800074 	movhi	r2,1
   15cd8:	109db604 	addi	r2,r2,30424
   15cdc:	11000017 	ldw	r4,0(r2)
   15ce0:	280d883a 	mov	r6,r5
   15ce4:	d9c00904 	addi	r7,sp,36
   15ce8:	d80b883a 	mov	r5,sp
   15cec:	d8000415 	stw	zero,16(sp)
   15cf0:	d8000215 	stw	zero,8(sp)
   15cf4:	d8000515 	stw	zero,20(sp)
   15cf8:	d8000315 	stw	zero,12(sp)
   15cfc:	001651c0 	call	1651c <___svfprintf_internal_r>
   15d00:	10000416 	blt	r2,zero,15d14 <asprintf+0x80>
   15d04:	d8c00417 	ldw	r3,16(sp)
   15d08:	18000005 	stb	zero,0(r3)
   15d0c:	d8c00217 	ldw	r3,8(sp)
   15d10:	80c00015 	stw	r3,0(r16)
   15d14:	dfc00817 	ldw	ra,32(sp)
   15d18:	dc000717 	ldw	r16,28(sp)
   15d1c:	dec00b04 	addi	sp,sp,44
   15d20:	f800283a 	ret

00015d24 <atoi>:
   15d24:	01800284 	movi	r6,10
   15d28:	000b883a 	mov	r5,zero
   15d2c:	00164941 	jmpi	16494 <strtol>

00015d30 <_atoi_r>:
   15d30:	01c00284 	movi	r7,10
   15d34:	000d883a 	mov	r6,zero
   15d38:	00162601 	jmpi	16260 <_strtol_r>

00015d3c <__errno>:
   15d3c:	00800074 	movhi	r2,1
   15d40:	109db604 	addi	r2,r2,30424
   15d44:	10800017 	ldw	r2,0(r2)
   15d48:	f800283a 	ret

00015d4c <__sfvwrite_small_str_mbf>:
   15d4c:	2880000b 	ldhu	r2,0(r5)
   15d50:	10c0020c 	andi	r3,r2,8
   15d54:	18003826 	beq	r3,zero,15e38 <__sfvwrite_small_str_mbf+0xec>
   15d58:	28c0008f 	ldh	r3,2(r5)
   15d5c:	defffa04 	addi	sp,sp,-24
   15d60:	dc000015 	stw	r16,0(sp)
   15d64:	dfc00515 	stw	ra,20(sp)
   15d68:	dd000415 	stw	r20,16(sp)
   15d6c:	dcc00315 	stw	r19,12(sp)
   15d70:	dc800215 	stw	r18,8(sp)
   15d74:	dc400115 	stw	r17,4(sp)
   15d78:	2821883a 	mov	r16,r5
   15d7c:	1800290e 	bge	r3,zero,15e24 <__sfvwrite_small_str_mbf+0xd8>
   15d80:	10c0800c 	andi	r3,r2,512
   15d84:	18002726 	beq	r3,zero,15e24 <__sfvwrite_small_str_mbf+0xd8>
   15d88:	28c00517 	ldw	r3,20(r5)
   15d8c:	3029883a 	mov	r20,r6
   15d90:	3823883a 	mov	r17,r7
   15d94:	19c0150e 	bge	r3,r7,15dec <__sfvwrite_small_str_mbf+0xa0>
   15d98:	1080200c 	andi	r2,r2,128
   15d9c:	10001426 	beq	r2,zero,15df0 <__sfvwrite_small_str_mbf+0xa4>
   15da0:	29400217 	ldw	r5,8(r5)
   15da4:	84800417 	ldw	r18,16(r16)
   15da8:	80800617 	ldw	r2,24(r16)
   15dac:	9165c83a 	sub	r18,r18,r5
   15db0:	10001c26 	beq	r2,zero,15e24 <__sfvwrite_small_str_mbf+0xd8>
   15db4:	00c00074 	movhi	r3,1
   15db8:	18ddb604 	addi	r3,r3,30424
   15dbc:	19000017 	ldw	r4,0(r3)
   15dc0:	3ca7883a 	add	r19,r7,r18
   15dc4:	980d883a 	mov	r6,r19
   15dc8:	103ee83a 	callr	r2
   15dcc:	10001526 	beq	r2,zero,15e24 <__sfvwrite_small_str_mbf+0xd8>
   15dd0:	14a5883a 	add	r18,r2,r18
   15dd4:	80800215 	stw	r2,8(r16)
   15dd8:	84800415 	stw	r18,16(r16)
   15ddc:	84c00315 	stw	r19,12(r16)
   15de0:	84400515 	stw	r17,20(r16)
   15de4:	8807883a 	mov	r3,r17
   15de8:	00000106 	br	15df0 <__sfvwrite_small_str_mbf+0xa4>
   15dec:	38c00116 	blt	r7,r3,15df4 <__sfvwrite_small_str_mbf+0xa8>
   15df0:	1823883a 	mov	r17,r3
   15df4:	81000417 	ldw	r4,16(r16)
   15df8:	880d883a 	mov	r6,r17
   15dfc:	a00b883a 	mov	r5,r20
   15e00:	0015eb00 	call	15eb0 <memmove>
   15e04:	80800517 	ldw	r2,20(r16)
   15e08:	81c00417 	ldw	r7,16(r16)
   15e0c:	1445c83a 	sub	r2,r2,r17
   15e10:	3c63883a 	add	r17,r7,r17
   15e14:	80800515 	stw	r2,20(r16)
   15e18:	84400415 	stw	r17,16(r16)
   15e1c:	0005883a 	mov	r2,zero
   15e20:	00000706 	br	15e40 <__sfvwrite_small_str_mbf+0xf4>
   15e24:	8080000b 	ldhu	r2,0(r16)
   15e28:	10801014 	ori	r2,r2,64
   15e2c:	8080000d 	sth	r2,0(r16)
   15e30:	00bfffc4 	movi	r2,-1
   15e34:	00000206 	br	15e40 <__sfvwrite_small_str_mbf+0xf4>
   15e38:	00bfffc4 	movi	r2,-1
   15e3c:	f800283a 	ret
   15e40:	dfc00517 	ldw	ra,20(sp)
   15e44:	dd000417 	ldw	r20,16(sp)
   15e48:	dcc00317 	ldw	r19,12(sp)
   15e4c:	dc800217 	ldw	r18,8(sp)
   15e50:	dc400117 	ldw	r17,4(sp)
   15e54:	dc000017 	ldw	r16,0(sp)
   15e58:	dec00604 	addi	sp,sp,24
   15e5c:	f800283a 	ret

00015e60 <malloc>:
   15e60:	00800074 	movhi	r2,1
   15e64:	109db604 	addi	r2,r2,30424
   15e68:	200b883a 	mov	r5,r4
   15e6c:	11000017 	ldw	r4,0(r2)
   15e70:	00160141 	jmpi	16014 <_malloc_r>

00015e74 <free>:
   15e74:	00800074 	movhi	r2,1
   15e78:	109db604 	addi	r2,r2,30424
   15e7c:	200b883a 	mov	r5,r4
   15e80:	11000017 	ldw	r4,0(r2)
   15e84:	0015f301 	jmpi	15f30 <_free_r>

00015e88 <memcpy>:
   15e88:	2005883a 	mov	r2,r4
   15e8c:	2007883a 	mov	r3,r4
   15e90:	218d883a 	add	r6,r4,r6
   15e94:	19800526 	beq	r3,r6,15eac <memcpy+0x24>
   15e98:	29000003 	ldbu	r4,0(r5)
   15e9c:	18c00044 	addi	r3,r3,1
   15ea0:	29400044 	addi	r5,r5,1
   15ea4:	193fffc5 	stb	r4,-1(r3)
   15ea8:	003ffa06 	br	15e94 <__alt_data_end+0xffff5e94>
   15eac:	f800283a 	ret

00015eb0 <memmove>:
   15eb0:	2005883a 	mov	r2,r4
   15eb4:	218f883a 	add	r7,r4,r6
   15eb8:	29000236 	bltu	r5,r4,15ec4 <memmove+0x14>
   15ebc:	1007883a 	mov	r3,r2
   15ec0:	00000c06 	br	15ef4 <memmove+0x44>
   15ec4:	2987883a 	add	r3,r5,r6
   15ec8:	20fffc2e 	bgeu	r4,r3,15ebc <__alt_data_end+0xffff5ebc>
   15ecc:	380b883a 	mov	r5,r7
   15ed0:	30cdc83a 	sub	r6,r6,r3
   15ed4:	1989883a 	add	r4,r3,r6
   15ed8:	20000526 	beq	r4,zero,15ef0 <memmove+0x40>
   15edc:	18ffffc4 	addi	r3,r3,-1
   15ee0:	19000003 	ldbu	r4,0(r3)
   15ee4:	297fffc4 	addi	r5,r5,-1
   15ee8:	29000005 	stb	r4,0(r5)
   15eec:	003ff906 	br	15ed4 <__alt_data_end+0xffff5ed4>
   15ef0:	f800283a 	ret
   15ef4:	19c00526 	beq	r3,r7,15f0c <memmove+0x5c>
   15ef8:	29000003 	ldbu	r4,0(r5)
   15efc:	18c00044 	addi	r3,r3,1
   15f00:	29400044 	addi	r5,r5,1
   15f04:	193fffc5 	stb	r4,-1(r3)
   15f08:	003ffa06 	br	15ef4 <__alt_data_end+0xffff5ef4>
   15f0c:	f800283a 	ret

00015f10 <memset>:
   15f10:	2005883a 	mov	r2,r4
   15f14:	2007883a 	mov	r3,r4
   15f18:	218d883a 	add	r6,r4,r6
   15f1c:	19800326 	beq	r3,r6,15f2c <memset+0x1c>
   15f20:	19400005 	stb	r5,0(r3)
   15f24:	18c00044 	addi	r3,r3,1
   15f28:	003ffc06 	br	15f1c <__alt_data_end+0xffff5f1c>
   15f2c:	f800283a 	ret

00015f30 <_free_r>:
   15f30:	28003726 	beq	r5,zero,16010 <_free_r+0xe0>
   15f34:	28ffff17 	ldw	r3,-4(r5)
   15f38:	28bfff04 	addi	r2,r5,-4
   15f3c:	1800010e 	bge	r3,zero,15f44 <_free_r+0x14>
   15f40:	10c5883a 	add	r2,r2,r3
   15f44:	01400074 	movhi	r5,1
   15f48:	295e2d04 	addi	r5,r5,30900
   15f4c:	28c00017 	ldw	r3,0(r5)
   15f50:	280d883a 	mov	r6,r5
   15f54:	1800031e 	bne	r3,zero,15f64 <_free_r+0x34>
   15f58:	10000115 	stw	zero,4(r2)
   15f5c:	28800015 	stw	r2,0(r5)
   15f60:	f800283a 	ret
   15f64:	10c00c2e 	bgeu	r2,r3,15f98 <_free_r+0x68>
   15f68:	11000017 	ldw	r4,0(r2)
   15f6c:	110b883a 	add	r5,r2,r4
   15f70:	1940041e 	bne	r3,r5,15f84 <_free_r+0x54>
   15f74:	19400017 	ldw	r5,0(r3)
   15f78:	18c00117 	ldw	r3,4(r3)
   15f7c:	2909883a 	add	r4,r5,r4
   15f80:	11000015 	stw	r4,0(r2)
   15f84:	10c00115 	stw	r3,4(r2)
   15f88:	30800015 	stw	r2,0(r6)
   15f8c:	f800283a 	ret
   15f90:	11400336 	bltu	r2,r5,15fa0 <_free_r+0x70>
   15f94:	2807883a 	mov	r3,r5
   15f98:	19400117 	ldw	r5,4(r3)
   15f9c:	283ffc1e 	bne	r5,zero,15f90 <__alt_data_end+0xffff5f90>
   15fa0:	19c00017 	ldw	r7,0(r3)
   15fa4:	19cd883a 	add	r6,r3,r7
   15fa8:	30800a1e 	bne	r6,r2,15fd4 <_free_r+0xa4>
   15fac:	10800017 	ldw	r2,0(r2)
   15fb0:	3885883a 	add	r2,r7,r2
   15fb4:	18800015 	stw	r2,0(r3)
   15fb8:	1889883a 	add	r4,r3,r2
   15fbc:	2900141e 	bne	r5,r4,16010 <_free_r+0xe0>
   15fc0:	29000017 	ldw	r4,0(r5)
   15fc4:	2085883a 	add	r2,r4,r2
   15fc8:	18800015 	stw	r2,0(r3)
   15fcc:	28800117 	ldw	r2,4(r5)
   15fd0:	00000e06 	br	1600c <_free_r+0xdc>
   15fd4:	1180032e 	bgeu	r2,r6,15fe4 <_free_r+0xb4>
   15fd8:	00800304 	movi	r2,12
   15fdc:	20800015 	stw	r2,0(r4)
   15fe0:	f800283a 	ret
   15fe4:	11000017 	ldw	r4,0(r2)
   15fe8:	110d883a 	add	r6,r2,r4
   15fec:	2980061e 	bne	r5,r6,16008 <_free_r+0xd8>
   15ff0:	29800017 	ldw	r6,0(r5)
   15ff4:	3109883a 	add	r4,r6,r4
   15ff8:	11000015 	stw	r4,0(r2)
   15ffc:	29000117 	ldw	r4,4(r5)
   16000:	11000115 	stw	r4,4(r2)
   16004:	00000106 	br	1600c <_free_r+0xdc>
   16008:	11400115 	stw	r5,4(r2)
   1600c:	18800115 	stw	r2,4(r3)
   16010:	f800283a 	ret

00016014 <_malloc_r>:
   16014:	defffb04 	addi	sp,sp,-20
   16018:	00bfff04 	movi	r2,-4
   1601c:	dc400115 	stw	r17,4(sp)
   16020:	2c4000c4 	addi	r17,r5,3
   16024:	88a2703a 	and	r17,r17,r2
   16028:	dc800215 	stw	r18,8(sp)
   1602c:	dfc00415 	stw	ra,16(sp)
   16030:	dcc00315 	stw	r19,12(sp)
   16034:	dc000015 	stw	r16,0(sp)
   16038:	8c400204 	addi	r17,r17,8
   1603c:	00800304 	movi	r2,12
   16040:	2025883a 	mov	r18,r4
   16044:	8880022e 	bgeu	r17,r2,16050 <_malloc_r+0x3c>
   16048:	1023883a 	mov	r17,r2
   1604c:	00000506 	br	16064 <_malloc_r+0x50>
   16050:	8800040e 	bge	r17,zero,16064 <_malloc_r+0x50>
   16054:	00800304 	movi	r2,12
   16058:	90800015 	stw	r2,0(r18)
   1605c:	0005883a 	mov	r2,zero
   16060:	00003b06 	br	16150 <_malloc_r+0x13c>
   16064:	897ffb36 	bltu	r17,r5,16054 <__alt_data_end+0xffff6054>
   16068:	00800074 	movhi	r2,1
   1606c:	109e2d04 	addi	r2,r2,30900
   16070:	10c00017 	ldw	r3,0(r2)
   16074:	1009883a 	mov	r4,r2
   16078:	1821883a 	mov	r16,r3
   1607c:	80000926 	beq	r16,zero,160a4 <_malloc_r+0x90>
   16080:	80800017 	ldw	r2,0(r16)
   16084:	1445c83a 	sub	r2,r2,r17
   16088:	10001516 	blt	r2,zero,160e0 <_malloc_r+0xcc>
   1608c:	014002c4 	movi	r5,11
   16090:	28800d2e 	bgeu	r5,r2,160c8 <_malloc_r+0xb4>
   16094:	80800015 	stw	r2,0(r16)
   16098:	80a1883a 	add	r16,r16,r2
   1609c:	84400015 	stw	r17,0(r16)
   160a0:	8000221e 	bne	r16,zero,1612c <_malloc_r+0x118>
   160a4:	04000074 	movhi	r16,1
   160a8:	841e2c04 	addi	r16,r16,30896
   160ac:	80800017 	ldw	r2,0(r16)
   160b0:	10000e1e 	bne	r2,zero,160ec <_malloc_r+0xd8>
   160b4:	000b883a 	mov	r5,zero
   160b8:	9009883a 	mov	r4,r18
   160bc:	00162100 	call	16210 <_sbrk_r>
   160c0:	80800015 	stw	r2,0(r16)
   160c4:	00000906 	br	160ec <_malloc_r+0xd8>
   160c8:	80800117 	ldw	r2,4(r16)
   160cc:	1c00021e 	bne	r3,r16,160d8 <_malloc_r+0xc4>
   160d0:	20800015 	stw	r2,0(r4)
   160d4:	00001506 	br	1612c <_malloc_r+0x118>
   160d8:	18800115 	stw	r2,4(r3)
   160dc:	00001306 	br	1612c <_malloc_r+0x118>
   160e0:	8007883a 	mov	r3,r16
   160e4:	84000117 	ldw	r16,4(r16)
   160e8:	003fe406 	br	1607c <__alt_data_end+0xffff607c>
   160ec:	880b883a 	mov	r5,r17
   160f0:	9009883a 	mov	r4,r18
   160f4:	00162100 	call	16210 <_sbrk_r>
   160f8:	04ffffc4 	movi	r19,-1
   160fc:	14ffd526 	beq	r2,r19,16054 <__alt_data_end+0xffff6054>
   16100:	140000c4 	addi	r16,r2,3
   16104:	00ffff04 	movi	r3,-4
   16108:	80e0703a 	and	r16,r16,r3
   1610c:	1400021e 	bne	r2,r16,16118 <_malloc_r+0x104>
   16110:	84400015 	stw	r17,0(r16)
   16114:	00000506 	br	1612c <_malloc_r+0x118>
   16118:	808bc83a 	sub	r5,r16,r2
   1611c:	9009883a 	mov	r4,r18
   16120:	00162100 	call	16210 <_sbrk_r>
   16124:	14fffa1e 	bne	r2,r19,16110 <__alt_data_end+0xffff6110>
   16128:	003fca06 	br	16054 <__alt_data_end+0xffff6054>
   1612c:	810002c4 	addi	r4,r16,11
   16130:	00bffe04 	movi	r2,-8
   16134:	80c00104 	addi	r3,r16,4
   16138:	2084703a 	and	r2,r4,r2
   1613c:	10c7c83a 	sub	r3,r2,r3
   16140:	18000326 	beq	r3,zero,16150 <_malloc_r+0x13c>
   16144:	80e1883a 	add	r16,r16,r3
   16148:	00c7c83a 	sub	r3,zero,r3
   1614c:	80c00015 	stw	r3,0(r16)
   16150:	dfc00417 	ldw	ra,16(sp)
   16154:	dcc00317 	ldw	r19,12(sp)
   16158:	dc800217 	ldw	r18,8(sp)
   1615c:	dc400117 	ldw	r17,4(sp)
   16160:	dc000017 	ldw	r16,0(sp)
   16164:	dec00504 	addi	sp,sp,20
   16168:	f800283a 	ret

0001616c <_realloc_r>:
   1616c:	2800021e 	bne	r5,zero,16178 <_realloc_r+0xc>
   16170:	300b883a 	mov	r5,r6
   16174:	00160141 	jmpi	16014 <_malloc_r>
   16178:	defffb04 	addi	sp,sp,-20
   1617c:	dc400115 	stw	r17,4(sp)
   16180:	dc000015 	stw	r16,0(sp)
   16184:	dfc00415 	stw	ra,16(sp)
   16188:	dcc00315 	stw	r19,12(sp)
   1618c:	dc800215 	stw	r18,8(sp)
   16190:	3023883a 	mov	r17,r6
   16194:	2821883a 	mov	r16,r5
   16198:	3000021e 	bne	r6,zero,161a4 <_realloc_r+0x38>
   1619c:	0015f300 	call	15f30 <_free_r>
   161a0:	00001306 	br	161f0 <_realloc_r+0x84>
   161a4:	2025883a 	mov	r18,r4
   161a8:	0016a640 	call	16a64 <_malloc_usable_size_r>
   161ac:	14400e2e 	bgeu	r2,r17,161e8 <_realloc_r+0x7c>
   161b0:	880b883a 	mov	r5,r17
   161b4:	9009883a 	mov	r4,r18
   161b8:	00160140 	call	16014 <_malloc_r>
   161bc:	1027883a 	mov	r19,r2
   161c0:	10000b26 	beq	r2,zero,161f0 <_realloc_r+0x84>
   161c4:	880d883a 	mov	r6,r17
   161c8:	800b883a 	mov	r5,r16
   161cc:	1009883a 	mov	r4,r2
   161d0:	0015e880 	call	15e88 <memcpy>
   161d4:	800b883a 	mov	r5,r16
   161d8:	9009883a 	mov	r4,r18
   161dc:	0015f300 	call	15f30 <_free_r>
   161e0:	9805883a 	mov	r2,r19
   161e4:	00000306 	br	161f4 <_realloc_r+0x88>
   161e8:	8005883a 	mov	r2,r16
   161ec:	00000106 	br	161f4 <_realloc_r+0x88>
   161f0:	0005883a 	mov	r2,zero
   161f4:	dfc00417 	ldw	ra,16(sp)
   161f8:	dcc00317 	ldw	r19,12(sp)
   161fc:	dc800217 	ldw	r18,8(sp)
   16200:	dc400117 	ldw	r17,4(sp)
   16204:	dc000017 	ldw	r16,0(sp)
   16208:	dec00504 	addi	sp,sp,20
   1620c:	f800283a 	ret

00016210 <_sbrk_r>:
   16210:	defffd04 	addi	sp,sp,-12
   16214:	dc000015 	stw	r16,0(sp)
   16218:	04000074 	movhi	r16,1
   1621c:	dc400115 	stw	r17,4(sp)
   16220:	841e2e04 	addi	r16,r16,30904
   16224:	2023883a 	mov	r17,r4
   16228:	2809883a 	mov	r4,r5
   1622c:	dfc00215 	stw	ra,8(sp)
   16230:	80000015 	stw	zero,0(r16)
   16234:	0016cb80 	call	16cb8 <sbrk>
   16238:	00ffffc4 	movi	r3,-1
   1623c:	10c0031e 	bne	r2,r3,1624c <_sbrk_r+0x3c>
   16240:	80c00017 	ldw	r3,0(r16)
   16244:	18000126 	beq	r3,zero,1624c <_sbrk_r+0x3c>
   16248:	88c00015 	stw	r3,0(r17)
   1624c:	dfc00217 	ldw	ra,8(sp)
   16250:	dc400117 	ldw	r17,4(sp)
   16254:	dc000017 	ldw	r16,0(sp)
   16258:	dec00304 	addi	sp,sp,12
   1625c:	f800283a 	ret

00016260 <_strtol_r>:
   16260:	00800074 	movhi	r2,1
   16264:	defff304 	addi	sp,sp,-52
   16268:	109db704 	addi	r2,r2,30428
   1626c:	dcc00615 	stw	r19,24(sp)
   16270:	14c00017 	ldw	r19,0(r2)
   16274:	df000b15 	stw	fp,44(sp)
   16278:	dd400815 	stw	r21,32(sp)
   1627c:	dd000715 	stw	r20,28(sp)
   16280:	dc800515 	stw	r18,20(sp)
   16284:	202b883a 	mov	r21,r4
   16288:	dfc00c15 	stw	ra,48(sp)
   1628c:	ddc00a15 	stw	r23,40(sp)
   16290:	dd800915 	stw	r22,36(sp)
   16294:	dc400415 	stw	r17,16(sp)
   16298:	dc000315 	stw	r16,12(sp)
   1629c:	2829883a 	mov	r20,r5
   162a0:	3039883a 	mov	fp,r6
   162a4:	3825883a 	mov	r18,r7
   162a8:	2809883a 	mov	r4,r5
   162ac:	2005883a 	mov	r2,r4
   162b0:	14400003 	ldbu	r17,0(r2)
   162b4:	24000044 	addi	r16,r4,1
   162b8:	8009883a 	mov	r4,r16
   162bc:	9c47883a 	add	r3,r19,r17
   162c0:	18c00043 	ldbu	r3,1(r3)
   162c4:	18c0020c 	andi	r3,r3,8
   162c8:	183ff81e 	bne	r3,zero,162ac <__alt_data_end+0xffff62ac>
   162cc:	00c00b44 	movi	r3,45
   162d0:	88c0041e 	bne	r17,r3,162e4 <_strtol_r+0x84>
   162d4:	14000084 	addi	r16,r2,2
   162d8:	14400043 	ldbu	r17,1(r2)
   162dc:	05c00044 	movi	r23,1
   162e0:	00000506 	br	162f8 <_strtol_r+0x98>
   162e4:	00c00ac4 	movi	r3,43
   162e8:	88c0021e 	bne	r17,r3,162f4 <_strtol_r+0x94>
   162ec:	14400043 	ldbu	r17,1(r2)
   162f0:	14000084 	addi	r16,r2,2
   162f4:	002f883a 	mov	r23,zero
   162f8:	90000326 	beq	r18,zero,16308 <_strtol_r+0xa8>
   162fc:	00800404 	movi	r2,16
   16300:	90800a1e 	bne	r18,r2,1632c <_strtol_r+0xcc>
   16304:	00005406 	br	16458 <_strtol_r+0x1f8>
   16308:	00800c04 	movi	r2,48
   1630c:	8880501e 	bne	r17,r2,16450 <_strtol_r+0x1f0>
   16310:	80800003 	ldbu	r2,0(r16)
   16314:	00c01604 	movi	r3,88
   16318:	108037cc 	andi	r2,r2,223
   1631c:	10c0481e 	bne	r2,r3,16440 <_strtol_r+0x1e0>
   16320:	84400043 	ldbu	r17,1(r16)
   16324:	04800404 	movi	r18,16
   16328:	84000084 	addi	r16,r16,2
   1632c:	00e00034 	movhi	r3,32768
   16330:	18ffffc4 	addi	r3,r3,-1
   16334:	b8c7883a 	add	r3,r23,r3
   16338:	1809883a 	mov	r4,r3
   1633c:	900b883a 	mov	r5,r18
   16340:	d8c00015 	stw	r3,0(sp)
   16344:	0015bc00 	call	15bc0 <__umodsi3>
   16348:	d8c00017 	ldw	r3,0(sp)
   1634c:	900b883a 	mov	r5,r18
   16350:	102d883a 	mov	r22,r2
   16354:	1809883a 	mov	r4,r3
   16358:	0015b5c0 	call	15b5c <__udivsi3>
   1635c:	100d883a 	mov	r6,r2
   16360:	0009883a 	mov	r4,zero
   16364:	0005883a 	mov	r2,zero
   16368:	01c00044 	movi	r7,1
   1636c:	023fffc4 	movi	r8,-1
   16370:	9c47883a 	add	r3,r19,r17
   16374:	18c00043 	ldbu	r3,1(r3)
   16378:	1940010c 	andi	r5,r3,4
   1637c:	28000226 	beq	r5,zero,16388 <_strtol_r+0x128>
   16380:	8c7ff404 	addi	r17,r17,-48
   16384:	00000706 	br	163a4 <_strtol_r+0x144>
   16388:	18c000cc 	andi	r3,r3,3
   1638c:	18001a26 	beq	r3,zero,163f8 <_strtol_r+0x198>
   16390:	19c00226 	beq	r3,r7,1639c <_strtol_r+0x13c>
   16394:	00c015c4 	movi	r3,87
   16398:	00000106 	br	163a0 <_strtol_r+0x140>
   1639c:	00c00dc4 	movi	r3,55
   163a0:	88e3c83a 	sub	r17,r17,r3
   163a4:	8c80140e 	bge	r17,r18,163f8 <_strtol_r+0x198>
   163a8:	22001026 	beq	r4,r8,163ec <_strtol_r+0x18c>
   163ac:	30800e36 	bltu	r6,r2,163e8 <_strtol_r+0x188>
   163b0:	1180011e 	bne	r2,r6,163b8 <_strtol_r+0x158>
   163b4:	b4400c16 	blt	r22,r17,163e8 <_strtol_r+0x188>
   163b8:	1009883a 	mov	r4,r2
   163bc:	900b883a 	mov	r5,r18
   163c0:	d9800015 	stw	r6,0(sp)
   163c4:	d9c00115 	stw	r7,4(sp)
   163c8:	da000215 	stw	r8,8(sp)
   163cc:	001260c0 	call	1260c <__mulsi3>
   163d0:	8885883a 	add	r2,r17,r2
   163d4:	01000044 	movi	r4,1
   163d8:	d9800017 	ldw	r6,0(sp)
   163dc:	d9c00117 	ldw	r7,4(sp)
   163e0:	da000217 	ldw	r8,8(sp)
   163e4:	00000106 	br	163ec <_strtol_r+0x18c>
   163e8:	013fffc4 	movi	r4,-1
   163ec:	84400003 	ldbu	r17,0(r16)
   163f0:	84000044 	addi	r16,r16,1
   163f4:	003fde06 	br	16370 <__alt_data_end+0xffff6370>
   163f8:	00ffffc4 	movi	r3,-1
   163fc:	20c0071e 	bne	r4,r3,1641c <_strtol_r+0x1bc>
   16400:	00a00034 	movhi	r2,32768
   16404:	10c5883a 	add	r2,r2,r3
   16408:	00c00884 	movi	r3,34
   1640c:	a8c00015 	stw	r3,0(r21)
   16410:	b885883a 	add	r2,r23,r2
   16414:	e000051e 	bne	fp,zero,1642c <_strtol_r+0x1cc>
   16418:	00001206 	br	16464 <_strtol_r+0x204>
   1641c:	b8000126 	beq	r23,zero,16424 <_strtol_r+0x1c4>
   16420:	0085c83a 	sub	r2,zero,r2
   16424:	e0000f26 	beq	fp,zero,16464 <_strtol_r+0x204>
   16428:	20000226 	beq	r4,zero,16434 <_strtol_r+0x1d4>
   1642c:	843fffc4 	addi	r16,r16,-1
   16430:	00000106 	br	16438 <_strtol_r+0x1d8>
   16434:	a021883a 	mov	r16,r20
   16438:	e4000015 	stw	r16,0(fp)
   1643c:	00000906 	br	16464 <_strtol_r+0x204>
   16440:	04400c04 	movi	r17,48
   16444:	903fb91e 	bne	r18,zero,1632c <__alt_data_end+0xffff632c>
   16448:	04800204 	movi	r18,8
   1644c:	003fb706 	br	1632c <__alt_data_end+0xffff632c>
   16450:	04800284 	movi	r18,10
   16454:	003fb506 	br	1632c <__alt_data_end+0xffff632c>
   16458:	00800c04 	movi	r2,48
   1645c:	88bfac26 	beq	r17,r2,16310 <__alt_data_end+0xffff6310>
   16460:	003fb206 	br	1632c <__alt_data_end+0xffff632c>
   16464:	dfc00c17 	ldw	ra,48(sp)
   16468:	df000b17 	ldw	fp,44(sp)
   1646c:	ddc00a17 	ldw	r23,40(sp)
   16470:	dd800917 	ldw	r22,36(sp)
   16474:	dd400817 	ldw	r21,32(sp)
   16478:	dd000717 	ldw	r20,28(sp)
   1647c:	dcc00617 	ldw	r19,24(sp)
   16480:	dc800517 	ldw	r18,20(sp)
   16484:	dc400417 	ldw	r17,16(sp)
   16488:	dc000317 	ldw	r16,12(sp)
   1648c:	dec00d04 	addi	sp,sp,52
   16490:	f800283a 	ret

00016494 <strtol>:
   16494:	00800074 	movhi	r2,1
   16498:	109db604 	addi	r2,r2,30424
   1649c:	300f883a 	mov	r7,r6
   164a0:	280d883a 	mov	r6,r5
   164a4:	200b883a 	mov	r5,r4
   164a8:	11000017 	ldw	r4,0(r2)
   164ac:	00162601 	jmpi	16260 <_strtol_r>

000164b0 <print_repeat>:
   164b0:	defffb04 	addi	sp,sp,-20
   164b4:	dc800315 	stw	r18,12(sp)
   164b8:	dc400215 	stw	r17,8(sp)
   164bc:	dc000115 	stw	r16,4(sp)
   164c0:	dfc00415 	stw	ra,16(sp)
   164c4:	2025883a 	mov	r18,r4
   164c8:	2823883a 	mov	r17,r5
   164cc:	d9800005 	stb	r6,0(sp)
   164d0:	3821883a 	mov	r16,r7
   164d4:	04000a0e 	bge	zero,r16,16500 <print_repeat+0x50>
   164d8:	88800117 	ldw	r2,4(r17)
   164dc:	01c00044 	movi	r7,1
   164e0:	d80d883a 	mov	r6,sp
   164e4:	880b883a 	mov	r5,r17
   164e8:	9009883a 	mov	r4,r18
   164ec:	103ee83a 	callr	r2
   164f0:	843fffc4 	addi	r16,r16,-1
   164f4:	103ff726 	beq	r2,zero,164d4 <__alt_data_end+0xffff64d4>
   164f8:	00bfffc4 	movi	r2,-1
   164fc:	00000106 	br	16504 <print_repeat+0x54>
   16500:	0005883a 	mov	r2,zero
   16504:	dfc00417 	ldw	ra,16(sp)
   16508:	dc800317 	ldw	r18,12(sp)
   1650c:	dc400217 	ldw	r17,8(sp)
   16510:	dc000117 	ldw	r16,4(sp)
   16514:	dec00504 	addi	sp,sp,20
   16518:	f800283a 	ret

0001651c <___svfprintf_internal_r>:
   1651c:	deffe504 	addi	sp,sp,-108
   16520:	d8c00804 	addi	r3,sp,32
   16524:	ddc01815 	stw	r23,96(sp)
   16528:	dd801715 	stw	r22,92(sp)
   1652c:	dd401615 	stw	r21,88(sp)
   16530:	dd001515 	stw	r20,84(sp)
   16534:	dcc01415 	stw	r19,80(sp)
   16538:	dc801315 	stw	r18,76(sp)
   1653c:	dc401215 	stw	r17,72(sp)
   16540:	dc001115 	stw	r16,68(sp)
   16544:	dfc01a15 	stw	ra,104(sp)
   16548:	df001915 	stw	fp,100(sp)
   1654c:	2029883a 	mov	r20,r4
   16550:	2823883a 	mov	r17,r5
   16554:	382d883a 	mov	r22,r7
   16558:	d9800f15 	stw	r6,60(sp)
   1655c:	0021883a 	mov	r16,zero
   16560:	d8000e15 	stw	zero,56(sp)
   16564:	d8000a15 	stw	zero,40(sp)
   16568:	002b883a 	mov	r21,zero
   1656c:	0027883a 	mov	r19,zero
   16570:	0025883a 	mov	r18,zero
   16574:	d8000c15 	stw	zero,48(sp)
   16578:	d8000b15 	stw	zero,44(sp)
   1657c:	002f883a 	mov	r23,zero
   16580:	d8c00915 	stw	r3,36(sp)
   16584:	d8c00f17 	ldw	r3,60(sp)
   16588:	19000003 	ldbu	r4,0(r3)
   1658c:	20803fcc 	andi	r2,r4,255
   16590:	1080201c 	xori	r2,r2,128
   16594:	10bfe004 	addi	r2,r2,-128
   16598:	10011e26 	beq	r2,zero,16a14 <___svfprintf_internal_r+0x4f8>
   1659c:	00c00044 	movi	r3,1
   165a0:	b8c01426 	beq	r23,r3,165f4 <___svfprintf_internal_r+0xd8>
   165a4:	1dc00216 	blt	r3,r23,165b0 <___svfprintf_internal_r+0x94>
   165a8:	b8000626 	beq	r23,zero,165c4 <___svfprintf_internal_r+0xa8>
   165ac:	00011506 	br	16a04 <___svfprintf_internal_r+0x4e8>
   165b0:	01400084 	movi	r5,2
   165b4:	b9401d26 	beq	r23,r5,1662c <___svfprintf_internal_r+0x110>
   165b8:	014000c4 	movi	r5,3
   165bc:	b9402b26 	beq	r23,r5,1666c <___svfprintf_internal_r+0x150>
   165c0:	00011006 	br	16a04 <___svfprintf_internal_r+0x4e8>
   165c4:	01400944 	movi	r5,37
   165c8:	1140fc26 	beq	r2,r5,169bc <___svfprintf_internal_r+0x4a0>
   165cc:	88800117 	ldw	r2,4(r17)
   165d0:	d9000005 	stb	r4,0(sp)
   165d4:	01c00044 	movi	r7,1
   165d8:	d80d883a 	mov	r6,sp
   165dc:	880b883a 	mov	r5,r17
   165e0:	a009883a 	mov	r4,r20
   165e4:	103ee83a 	callr	r2
   165e8:	1000d81e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   165ec:	84000044 	addi	r16,r16,1
   165f0:	00010406 	br	16a04 <___svfprintf_internal_r+0x4e8>
   165f4:	01400c04 	movi	r5,48
   165f8:	1140fa26 	beq	r2,r5,169e4 <___svfprintf_internal_r+0x4c8>
   165fc:	01400944 	movi	r5,37
   16600:	11400a1e 	bne	r2,r5,1662c <___svfprintf_internal_r+0x110>
   16604:	d8800005 	stb	r2,0(sp)
   16608:	88800117 	ldw	r2,4(r17)
   1660c:	b80f883a 	mov	r7,r23
   16610:	d80d883a 	mov	r6,sp
   16614:	880b883a 	mov	r5,r17
   16618:	a009883a 	mov	r4,r20
   1661c:	103ee83a 	callr	r2
   16620:	1000ca1e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16624:	84000044 	addi	r16,r16,1
   16628:	0000f506 	br	16a00 <___svfprintf_internal_r+0x4e4>
   1662c:	25fff404 	addi	r23,r4,-48
   16630:	bdc03fcc 	andi	r23,r23,255
   16634:	00c00244 	movi	r3,9
   16638:	1dc00936 	bltu	r3,r23,16660 <___svfprintf_internal_r+0x144>
   1663c:	00bfffc4 	movi	r2,-1
   16640:	90800426 	beq	r18,r2,16654 <___svfprintf_internal_r+0x138>
   16644:	01400284 	movi	r5,10
   16648:	9009883a 	mov	r4,r18
   1664c:	001260c0 	call	1260c <__mulsi3>
   16650:	00000106 	br	16658 <___svfprintf_internal_r+0x13c>
   16654:	0005883a 	mov	r2,zero
   16658:	b8a5883a 	add	r18,r23,r2
   1665c:	0000e206 	br	169e8 <___svfprintf_internal_r+0x4cc>
   16660:	01400b84 	movi	r5,46
   16664:	1140e426 	beq	r2,r5,169f8 <___svfprintf_internal_r+0x4dc>
   16668:	05c00084 	movi	r23,2
   1666c:	213ff404 	addi	r4,r4,-48
   16670:	27003fcc 	andi	fp,r4,255
   16674:	00c00244 	movi	r3,9
   16678:	1f000936 	bltu	r3,fp,166a0 <___svfprintf_internal_r+0x184>
   1667c:	00bfffc4 	movi	r2,-1
   16680:	98800426 	beq	r19,r2,16694 <___svfprintf_internal_r+0x178>
   16684:	01400284 	movi	r5,10
   16688:	9809883a 	mov	r4,r19
   1668c:	001260c0 	call	1260c <__mulsi3>
   16690:	00000106 	br	16698 <___svfprintf_internal_r+0x17c>
   16694:	0005883a 	mov	r2,zero
   16698:	e0a7883a 	add	r19,fp,r2
   1669c:	0000d906 	br	16a04 <___svfprintf_internal_r+0x4e8>
   166a0:	00c01b04 	movi	r3,108
   166a4:	10c0d226 	beq	r2,r3,169f0 <___svfprintf_internal_r+0x4d4>
   166a8:	013fffc4 	movi	r4,-1
   166ac:	99000226 	beq	r19,r4,166b8 <___svfprintf_internal_r+0x19c>
   166b0:	d8000b15 	stw	zero,44(sp)
   166b4:	00000106 	br	166bc <___svfprintf_internal_r+0x1a0>
   166b8:	04c00044 	movi	r19,1
   166bc:	01001a44 	movi	r4,105
   166c0:	11001626 	beq	r2,r4,1671c <___svfprintf_internal_r+0x200>
   166c4:	20800916 	blt	r4,r2,166ec <___svfprintf_internal_r+0x1d0>
   166c8:	010018c4 	movi	r4,99
   166cc:	11008826 	beq	r2,r4,168f0 <___svfprintf_internal_r+0x3d4>
   166d0:	01001904 	movi	r4,100
   166d4:	11001126 	beq	r2,r4,1671c <___svfprintf_internal_r+0x200>
   166d8:	01001604 	movi	r4,88
   166dc:	1100c81e 	bne	r2,r4,16a00 <___svfprintf_internal_r+0x4e4>
   166e0:	00c00044 	movi	r3,1
   166e4:	d8c00e15 	stw	r3,56(sp)
   166e8:	00001506 	br	16740 <___svfprintf_internal_r+0x224>
   166ec:	01001cc4 	movi	r4,115
   166f0:	11009826 	beq	r2,r4,16954 <___svfprintf_internal_r+0x438>
   166f4:	20800416 	blt	r4,r2,16708 <___svfprintf_internal_r+0x1ec>
   166f8:	01001bc4 	movi	r4,111
   166fc:	1100c01e 	bne	r2,r4,16a00 <___svfprintf_internal_r+0x4e4>
   16700:	05400204 	movi	r21,8
   16704:	00000f06 	br	16744 <___svfprintf_internal_r+0x228>
   16708:	01001d44 	movi	r4,117
   1670c:	11000d26 	beq	r2,r4,16744 <___svfprintf_internal_r+0x228>
   16710:	01001e04 	movi	r4,120
   16714:	11000a26 	beq	r2,r4,16740 <___svfprintf_internal_r+0x224>
   16718:	0000b906 	br	16a00 <___svfprintf_internal_r+0x4e4>
   1671c:	d8c00a17 	ldw	r3,40(sp)
   16720:	b7000104 	addi	fp,r22,4
   16724:	18000726 	beq	r3,zero,16744 <___svfprintf_internal_r+0x228>
   16728:	df000d15 	stw	fp,52(sp)
   1672c:	b5c00017 	ldw	r23,0(r22)
   16730:	b800080e 	bge	r23,zero,16754 <___svfprintf_internal_r+0x238>
   16734:	05efc83a 	sub	r23,zero,r23
   16738:	02400044 	movi	r9,1
   1673c:	00000606 	br	16758 <___svfprintf_internal_r+0x23c>
   16740:	05400404 	movi	r21,16
   16744:	b0c00104 	addi	r3,r22,4
   16748:	d8c00d15 	stw	r3,52(sp)
   1674c:	b5c00017 	ldw	r23,0(r22)
   16750:	d8000a15 	stw	zero,40(sp)
   16754:	0013883a 	mov	r9,zero
   16758:	d839883a 	mov	fp,sp
   1675c:	b8001726 	beq	r23,zero,167bc <___svfprintf_internal_r+0x2a0>
   16760:	a80b883a 	mov	r5,r21
   16764:	b809883a 	mov	r4,r23
   16768:	da401015 	stw	r9,64(sp)
   1676c:	0015b5c0 	call	15b5c <__udivsi3>
   16770:	a80b883a 	mov	r5,r21
   16774:	1009883a 	mov	r4,r2
   16778:	102d883a 	mov	r22,r2
   1677c:	001260c0 	call	1260c <__mulsi3>
   16780:	b885c83a 	sub	r2,r23,r2
   16784:	00c00244 	movi	r3,9
   16788:	da401017 	ldw	r9,64(sp)
   1678c:	18800216 	blt	r3,r2,16798 <___svfprintf_internal_r+0x27c>
   16790:	10800c04 	addi	r2,r2,48
   16794:	00000506 	br	167ac <___svfprintf_internal_r+0x290>
   16798:	d8c00e17 	ldw	r3,56(sp)
   1679c:	18000226 	beq	r3,zero,167a8 <___svfprintf_internal_r+0x28c>
   167a0:	10800dc4 	addi	r2,r2,55
   167a4:	00000106 	br	167ac <___svfprintf_internal_r+0x290>
   167a8:	108015c4 	addi	r2,r2,87
   167ac:	e0800005 	stb	r2,0(fp)
   167b0:	b02f883a 	mov	r23,r22
   167b4:	e7000044 	addi	fp,fp,1
   167b8:	003fe806 	br	1675c <__alt_data_end+0xffff675c>
   167bc:	e6efc83a 	sub	r23,fp,sp
   167c0:	9dc5c83a 	sub	r2,r19,r23
   167c4:	0080090e 	bge	zero,r2,167ec <___svfprintf_internal_r+0x2d0>
   167c8:	e085883a 	add	r2,fp,r2
   167cc:	01400c04 	movi	r5,48
   167d0:	d8c00917 	ldw	r3,36(sp)
   167d4:	e009883a 	mov	r4,fp
   167d8:	e0c0032e 	bgeu	fp,r3,167e8 <___svfprintf_internal_r+0x2cc>
   167dc:	e7000044 	addi	fp,fp,1
   167e0:	21400005 	stb	r5,0(r4)
   167e4:	e0bffa1e 	bne	fp,r2,167d0 <__alt_data_end+0xffff67d0>
   167e8:	e6efc83a 	sub	r23,fp,sp
   167ec:	d8c00b17 	ldw	r3,44(sp)
   167f0:	4dd1883a 	add	r8,r9,r23
   167f4:	922dc83a 	sub	r22,r18,r8
   167f8:	18001626 	beq	r3,zero,16854 <___svfprintf_internal_r+0x338>
   167fc:	48000a26 	beq	r9,zero,16828 <___svfprintf_internal_r+0x30c>
   16800:	00800b44 	movi	r2,45
   16804:	d8800805 	stb	r2,32(sp)
   16808:	88800117 	ldw	r2,4(r17)
   1680c:	01c00044 	movi	r7,1
   16810:	d9800804 	addi	r6,sp,32
   16814:	880b883a 	mov	r5,r17
   16818:	a009883a 	mov	r4,r20
   1681c:	103ee83a 	callr	r2
   16820:	10004a1e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16824:	84000044 	addi	r16,r16,1
   16828:	0580070e 	bge	zero,r22,16848 <___svfprintf_internal_r+0x32c>
   1682c:	b00f883a 	mov	r7,r22
   16830:	01800c04 	movi	r6,48
   16834:	880b883a 	mov	r5,r17
   16838:	a009883a 	mov	r4,r20
   1683c:	00164b00 	call	164b0 <print_repeat>
   16840:	1000421e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16844:	85a1883a 	add	r16,r16,r22
   16848:	e02d883a 	mov	r22,fp
   1684c:	bf2fc83a 	sub	r23,r23,fp
   16850:	00002006 	br	168d4 <___svfprintf_internal_r+0x3b8>
   16854:	0580090e 	bge	zero,r22,1687c <___svfprintf_internal_r+0x360>
   16858:	b00f883a 	mov	r7,r22
   1685c:	01800804 	movi	r6,32
   16860:	880b883a 	mov	r5,r17
   16864:	a009883a 	mov	r4,r20
   16868:	da401015 	stw	r9,64(sp)
   1686c:	00164b00 	call	164b0 <print_repeat>
   16870:	da401017 	ldw	r9,64(sp)
   16874:	1000351e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16878:	85a1883a 	add	r16,r16,r22
   1687c:	483ff226 	beq	r9,zero,16848 <__alt_data_end+0xffff6848>
   16880:	00800b44 	movi	r2,45
   16884:	d8800805 	stb	r2,32(sp)
   16888:	88800117 	ldw	r2,4(r17)
   1688c:	01c00044 	movi	r7,1
   16890:	d9800804 	addi	r6,sp,32
   16894:	880b883a 	mov	r5,r17
   16898:	a009883a 	mov	r4,r20
   1689c:	103ee83a 	callr	r2
   168a0:	10002a1e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   168a4:	84000044 	addi	r16,r16,1
   168a8:	003fe706 	br	16848 <__alt_data_end+0xffff6848>
   168ac:	b5bfffc4 	addi	r22,r22,-1
   168b0:	b0800003 	ldbu	r2,0(r22)
   168b4:	01c00044 	movi	r7,1
   168b8:	d9800804 	addi	r6,sp,32
   168bc:	d8800805 	stb	r2,32(sp)
   168c0:	88800117 	ldw	r2,4(r17)
   168c4:	880b883a 	mov	r5,r17
   168c8:	a009883a 	mov	r4,r20
   168cc:	103ee83a 	callr	r2
   168d0:	10001e1e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   168d4:	8585c83a 	sub	r2,r16,r22
   168d8:	b5c9883a 	add	r4,r22,r23
   168dc:	e085883a 	add	r2,fp,r2
   168e0:	013ff216 	blt	zero,r4,168ac <__alt_data_end+0xffff68ac>
   168e4:	1021883a 	mov	r16,r2
   168e8:	dd800d17 	ldw	r22,52(sp)
   168ec:	00004406 	br	16a00 <___svfprintf_internal_r+0x4e4>
   168f0:	00800044 	movi	r2,1
   168f4:	1480080e 	bge	r2,r18,16918 <___svfprintf_internal_r+0x3fc>
   168f8:	95ffffc4 	addi	r23,r18,-1
   168fc:	b80f883a 	mov	r7,r23
   16900:	01800804 	movi	r6,32
   16904:	880b883a 	mov	r5,r17
   16908:	a009883a 	mov	r4,r20
   1690c:	00164b00 	call	164b0 <print_repeat>
   16910:	10000e1e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16914:	85e1883a 	add	r16,r16,r23
   16918:	b0800017 	ldw	r2,0(r22)
   1691c:	01c00044 	movi	r7,1
   16920:	d80d883a 	mov	r6,sp
   16924:	d8800005 	stb	r2,0(sp)
   16928:	88800117 	ldw	r2,4(r17)
   1692c:	880b883a 	mov	r5,r17
   16930:	a009883a 	mov	r4,r20
   16934:	b5c00104 	addi	r23,r22,4
   16938:	103ee83a 	callr	r2
   1693c:	1000031e 	bne	r2,zero,1694c <___svfprintf_internal_r+0x430>
   16940:	84000044 	addi	r16,r16,1
   16944:	b82d883a 	mov	r22,r23
   16948:	00002d06 	br	16a00 <___svfprintf_internal_r+0x4e4>
   1694c:	00bfffc4 	movi	r2,-1
   16950:	00003106 	br	16a18 <___svfprintf_internal_r+0x4fc>
   16954:	b5c00017 	ldw	r23,0(r22)
   16958:	b7000104 	addi	fp,r22,4
   1695c:	b809883a 	mov	r4,r23
   16960:	0016a800 	call	16a80 <strlen>
   16964:	9091c83a 	sub	r8,r18,r2
   16968:	102d883a 	mov	r22,r2
   1696c:	0200090e 	bge	zero,r8,16994 <___svfprintf_internal_r+0x478>
   16970:	400f883a 	mov	r7,r8
   16974:	01800804 	movi	r6,32
   16978:	880b883a 	mov	r5,r17
   1697c:	a009883a 	mov	r4,r20
   16980:	da001015 	stw	r8,64(sp)
   16984:	00164b00 	call	164b0 <print_repeat>
   16988:	da001017 	ldw	r8,64(sp)
   1698c:	103fef1e 	bne	r2,zero,1694c <__alt_data_end+0xffff694c>
   16990:	8221883a 	add	r16,r16,r8
   16994:	88800117 	ldw	r2,4(r17)
   16998:	b00f883a 	mov	r7,r22
   1699c:	b80d883a 	mov	r6,r23
   169a0:	880b883a 	mov	r5,r17
   169a4:	a009883a 	mov	r4,r20
   169a8:	103ee83a 	callr	r2
   169ac:	103fe71e 	bne	r2,zero,1694c <__alt_data_end+0xffff694c>
   169b0:	85a1883a 	add	r16,r16,r22
   169b4:	e02d883a 	mov	r22,fp
   169b8:	00001106 	br	16a00 <___svfprintf_internal_r+0x4e4>
   169bc:	00c00044 	movi	r3,1
   169c0:	04ffffc4 	movi	r19,-1
   169c4:	d8000e15 	stw	zero,56(sp)
   169c8:	d8c00a15 	stw	r3,40(sp)
   169cc:	05400284 	movi	r21,10
   169d0:	9825883a 	mov	r18,r19
   169d4:	d8000c15 	stw	zero,48(sp)
   169d8:	d8000b15 	stw	zero,44(sp)
   169dc:	182f883a 	mov	r23,r3
   169e0:	00000806 	br	16a04 <___svfprintf_internal_r+0x4e8>
   169e4:	ddc00b15 	stw	r23,44(sp)
   169e8:	05c00084 	movi	r23,2
   169ec:	00000506 	br	16a04 <___svfprintf_internal_r+0x4e8>
   169f0:	00c00044 	movi	r3,1
   169f4:	d8c00c15 	stw	r3,48(sp)
   169f8:	05c000c4 	movi	r23,3
   169fc:	00000106 	br	16a04 <___svfprintf_internal_r+0x4e8>
   16a00:	002f883a 	mov	r23,zero
   16a04:	d8c00f17 	ldw	r3,60(sp)
   16a08:	18c00044 	addi	r3,r3,1
   16a0c:	d8c00f15 	stw	r3,60(sp)
   16a10:	003edc06 	br	16584 <__alt_data_end+0xffff6584>
   16a14:	8005883a 	mov	r2,r16
   16a18:	dfc01a17 	ldw	ra,104(sp)
   16a1c:	df001917 	ldw	fp,100(sp)
   16a20:	ddc01817 	ldw	r23,96(sp)
   16a24:	dd801717 	ldw	r22,92(sp)
   16a28:	dd401617 	ldw	r21,88(sp)
   16a2c:	dd001517 	ldw	r20,84(sp)
   16a30:	dcc01417 	ldw	r19,80(sp)
   16a34:	dc801317 	ldw	r18,76(sp)
   16a38:	dc401217 	ldw	r17,72(sp)
   16a3c:	dc001117 	ldw	r16,68(sp)
   16a40:	dec01b04 	addi	sp,sp,108
   16a44:	f800283a 	ret

00016a48 <__vfprintf_internal_unused>:
   16a48:	00800074 	movhi	r2,1
   16a4c:	109db604 	addi	r2,r2,30424
   16a50:	300f883a 	mov	r7,r6
   16a54:	280d883a 	mov	r6,r5
   16a58:	200b883a 	mov	r5,r4
   16a5c:	11000017 	ldw	r4,0(r2)
   16a60:	001651c1 	jmpi	1651c <___svfprintf_internal_r>

00016a64 <_malloc_usable_size_r>:
   16a64:	28bfff17 	ldw	r2,-4(r5)
   16a68:	1000030e 	bge	r2,zero,16a78 <_malloc_usable_size_r+0x14>
   16a6c:	288b883a 	add	r5,r5,r2
   16a70:	28ffff17 	ldw	r3,-4(r5)
   16a74:	10c5883a 	add	r2,r2,r3
   16a78:	10bfff04 	addi	r2,r2,-4
   16a7c:	f800283a 	ret

00016a80 <strlen>:
   16a80:	2005883a 	mov	r2,r4
   16a84:	10c00007 	ldb	r3,0(r2)
   16a88:	18000226 	beq	r3,zero,16a94 <strlen+0x14>
   16a8c:	10800044 	addi	r2,r2,1
   16a90:	003ffc06 	br	16a84 <__alt_data_end+0xffff6a84>
   16a94:	1105c83a 	sub	r2,r2,r4
   16a98:	f800283a 	ret

00016a9c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   16a9c:	00800074 	movhi	r2,1
   16aa0:	109d9d04 	addi	r2,r2,30324
   16aa4:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   16aa8:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   16aac:	01000074 	movhi	r4,1
   16ab0:	01800044 	movi	r6,1
   16ab4:	d80b883a 	mov	r5,sp
   16ab8:	211dba04 	addi	r4,r4,30440
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   16abc:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   16ac0:	0016d340 	call	16d34 <altera_avalon_jtag_uart_read>
   16ac4:	0080020e 	bge	zero,r2,16ad0 <alt_getchar+0x34>
        return -1;
    }
    return c;
   16ac8:	d8800007 	ldb	r2,0(sp)
   16acc:	00000106 	br	16ad4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   16ad0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   16ad4:	dfc00117 	ldw	ra,4(sp)
   16ad8:	dec00204 	addi	sp,sp,8
   16adc:	f800283a 	ret

00016ae0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   16ae0:	008007c4 	movi	r2,31
   16ae4:	11002136 	bltu	r2,r4,16b6c <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ae8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16aec:	00ffff84 	movi	r3,-2
   16af0:	38c4703a 	and	r2,r7,r3
   16af4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   16af8:	200490fa 	slli	r2,r4,3
   16afc:	02000074 	movhi	r8,1
   16b00:	421e3404 	addi	r8,r8,30928
   16b04:	4085883a 	add	r2,r8,r2
   16b08:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   16b0c:	11400115 	stw	r5,4(r2)
   16b10:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   16b14:	30000726 	beq	r6,zero,16b34 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b18:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b1c:	28c6703a 	and	r3,r5,r3
   16b20:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   16b24:	d0e07c17 	ldw	r3,-32272(gp)
   16b28:	1104983a 	sll	r2,r2,r4
   16b2c:	10c4b03a 	or	r2,r2,r3
   16b30:	00000706 	br	16b50 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b34:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b38:	28c6703a 	and	r3,r5,r3
   16b3c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   16b40:	1104983a 	sll	r2,r2,r4
   16b44:	d0e07c17 	ldw	r3,-32272(gp)
   16b48:	0084303a 	nor	r2,zero,r2
   16b4c:	10c4703a 	and	r2,r2,r3
   16b50:	d0a07c15 	stw	r2,-32272(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16b54:	d0a07c17 	ldw	r2,-32272(gp)
   16b58:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b5c:	2801703a 	wrctl	status,r5
   16b60:	3801703a 	wrctl	status,r7
   16b64:	0005883a 	mov	r2,zero
   16b68:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   16b6c:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   16b70:	f800283a 	ret

00016b74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   16b74:	deffff04 	addi	sp,sp,-4
   16b78:	01000074 	movhi	r4,1
   16b7c:	01400074 	movhi	r5,1
   16b80:	dfc00015 	stw	ra,0(sp)
   16b84:	211d5a04 	addi	r4,r4,30056
   16b88:	295dc104 	addi	r5,r5,30468

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   16b8c:	2140061e 	bne	r4,r5,16ba8 <alt_load+0x34>
   16b90:	01000074 	movhi	r4,1
   16b94:	01400074 	movhi	r5,1
   16b98:	21000804 	addi	r4,r4,32
   16b9c:	29400804 	addi	r5,r5,32
   16ba0:	2140121e 	bne	r4,r5,16bec <alt_load+0x78>
   16ba4:	00000b06 	br	16bd4 <alt_load+0x60>
   16ba8:	00c00074 	movhi	r3,1
   16bac:	18ddc104 	addi	r3,r3,30468
   16bb0:	1907c83a 	sub	r3,r3,r4
   16bb4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   16bb8:	10fff526 	beq	r2,r3,16b90 <__alt_data_end+0xffff6b90>
    {
      *to++ = *from++;
   16bbc:	114f883a 	add	r7,r2,r5
   16bc0:	39c00017 	ldw	r7,0(r7)
   16bc4:	110d883a 	add	r6,r2,r4
   16bc8:	10800104 	addi	r2,r2,4
   16bcc:	31c00015 	stw	r7,0(r6)
   16bd0:	003ff906 	br	16bb8 <__alt_data_end+0xffff6bb8>
   16bd4:	01000074 	movhi	r4,1
   16bd8:	01400074 	movhi	r5,1
   16bdc:	211c3004 	addi	r4,r4,28864
   16be0:	295c3004 	addi	r5,r5,28864

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   16be4:	2140101e 	bne	r4,r5,16c28 <alt_load+0xb4>
   16be8:	00000b06 	br	16c18 <alt_load+0xa4>
   16bec:	00c00074 	movhi	r3,1
   16bf0:	18c06004 	addi	r3,r3,384
   16bf4:	1907c83a 	sub	r3,r3,r4
   16bf8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   16bfc:	10fff526 	beq	r2,r3,16bd4 <__alt_data_end+0xffff6bd4>
    {
      *to++ = *from++;
   16c00:	114f883a 	add	r7,r2,r5
   16c04:	39c00017 	ldw	r7,0(r7)
   16c08:	110d883a 	add	r6,r2,r4
   16c0c:	10800104 	addi	r2,r2,4
   16c10:	31c00015 	stw	r7,0(r6)
   16c14:	003ff906 	br	16bfc <__alt_data_end+0xffff6bfc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   16c18:	0016f240 	call	16f24 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   16c1c:	dfc00017 	ldw	ra,0(sp)
   16c20:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   16c24:	00170101 	jmpi	17010 <alt_icache_flush_all>
   16c28:	00c00074 	movhi	r3,1
   16c2c:	18dd5a04 	addi	r3,r3,30056
   16c30:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   16c34:	0005883a 	mov	r2,zero
  {
    while( to != end )
   16c38:	18bff726 	beq	r3,r2,16c18 <__alt_data_end+0xffff6c18>
    {
      *to++ = *from++;
   16c3c:	114f883a 	add	r7,r2,r5
   16c40:	39c00017 	ldw	r7,0(r7)
   16c44:	110d883a 	add	r6,r2,r4
   16c48:	10800104 	addi	r2,r2,4
   16c4c:	31c00015 	stw	r7,0(r6)
   16c50:	003ff906 	br	16c38 <__alt_data_end+0xffff6c38>

00016c54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   16c54:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   16c58:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   16c5c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   16c60:	0016d040 	call	16d04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   16c64:	0016d240 	call	16d24 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   16c68:	d1a07d17 	ldw	r6,-32268(gp)
   16c6c:	d1607e17 	ldw	r5,-32264(gp)
   16c70:	d1207f17 	ldw	r4,-32260(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   16c74:	dfc00017 	ldw	ra,0(sp)
   16c78:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   16c7c:	001079c1 	jmpi	1079c <main>

00016c80 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   16c80:	defffe04 	addi	sp,sp,-8
   16c84:	dc000015 	stw	r16,0(sp)
   16c88:	dfc00115 	stw	ra,4(sp)
   16c8c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   16c90:	0016a800 	call	16a80 <strlen>
   16c94:	01000074 	movhi	r4,1
   16c98:	000f883a 	mov	r7,zero
   16c9c:	100d883a 	mov	r6,r2
   16ca0:	800b883a 	mov	r5,r16
   16ca4:	211dba04 	addi	r4,r4,30440
#else
    return fputs(str, stdout);
#endif
#endif
}
   16ca8:	dfc00117 	ldw	ra,4(sp)
   16cac:	dc000017 	ldw	r16,0(sp)
   16cb0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   16cb4:	0016d901 	jmpi	16d90 <altera_avalon_jtag_uart_write>

00016cb8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16cb8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16cbc:	00bfff84 	movi	r2,-2
   16cc0:	2884703a 	and	r2,r5,r2
   16cc4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   16cc8:	d0a00617 	ldw	r2,-32744(gp)
   16ccc:	00ffff04 	movi	r3,-4
   16cd0:	108000c4 	addi	r2,r2,3
   16cd4:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   16cd8:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   16cdc:	d0a00615 	stw	r2,-32744(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   16ce0:	1109883a 	add	r4,r2,r4
   16ce4:	18c00004 	addi	r3,r3,0
   16ce8:	1900032e 	bgeu	r3,r4,16cf8 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cec:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   16cf0:	00bfffc4 	movi	r2,-1
   16cf4:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   16cf8:	d1200615 	stw	r4,-32744(gp)
   16cfc:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   16d00:	f800283a 	ret

00016d04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   16d04:	deffff04 	addi	sp,sp,-4
   16d08:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   16d0c:	00170140 	call	17014 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16d10:	00800044 	movi	r2,1
   16d14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   16d18:	dfc00017 	ldw	ra,0(sp)
   16d1c:	dec00104 	addi	sp,sp,4
   16d20:	f800283a 	ret

00016d24 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   16d24:	01000074 	movhi	r4,1
   16d28:	d1600904 	addi	r5,gp,-32732
   16d2c:	211d9204 	addi	r4,r4,30280
   16d30:	0016f301 	jmpi	16f30 <alt_dev_llist_insert>

00016d34 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   16d34:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   16d38:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   16d3c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   16d40:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   16d44:	11800b2e 	bgeu	r2,r6,16d74 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16d48:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   16d4c:	1a60000c 	andi	r9,r3,32768
   16d50:	48000326 	beq	r9,zero,16d60 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16d54:	10c00005 	stb	r3,0(r2)
   16d58:	10800044 	addi	r2,r2,1
   16d5c:	003ff906 	br	16d44 <__alt_data_end+0xffff6d44>
    else if (ptr != buffer)
   16d60:	11400226 	beq	r2,r5,16d6c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   16d64:	1145c83a 	sub	r2,r2,r5
   16d68:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   16d6c:	403ff526 	beq	r8,zero,16d44 <__alt_data_end+0xffff6d44>
   16d70:	00000106 	br	16d78 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   16d74:	117ffb1e 	bne	r2,r5,16d64 <__alt_data_end+0xffff6d64>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   16d78:	39d0000c 	andi	r7,r7,16384
   16d7c:	3800021e 	bne	r7,zero,16d88 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   16d80:	00bffec4 	movi	r2,-5
   16d84:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   16d88:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   16d8c:	f800283a 	ret

00016d90 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   16d90:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16d94:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   16d98:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   16d9c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   16da0:	2980072e 	bgeu	r5,r6,16dc0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   16da4:	38c00037 	ldwio	r3,0(r7)
   16da8:	18ffffec 	andhi	r3,r3,65535
   16dac:	183ffc26 	beq	r3,zero,16da0 <__alt_data_end+0xffff6da0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   16db0:	28c00007 	ldb	r3,0(r5)
   16db4:	20c00035 	stwio	r3,0(r4)
   16db8:	29400044 	addi	r5,r5,1
   16dbc:	003ff806 	br	16da0 <__alt_data_end+0xffff6da0>

  return count;
}
   16dc0:	f800283a 	ret

00016dc4 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   16dc4:	d1600904 	addi	r5,gp,-32732
   16dc8:	0016f9c1 	jmpi	16f9c <alt_find_dev>

00016dcc <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   16dcc:	20800a17 	ldw	r2,40(r4)
   16dd0:	10800023 	ldbuio	r2,0(r2)
   16dd4:	28800005 	stb	r2,0(r5)

	return 0;
}
   16dd8:	0005883a 	mov	r2,zero
   16ddc:	f800283a 	ret

00016de0 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16de0:	20800a17 	ldw	r2,40(r4)
   16de4:	29400fcc 	andi	r5,r5,63
   16de8:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16dec:	20800a17 	ldw	r2,40(r4)
   16df0:	10800063 	ldbuio	r2,1(r2)
   16df4:	30800005 	stb	r2,0(r6)

	return 0;
}
   16df8:	0005883a 	mov	r2,zero
   16dfc:	f800283a 	ret

00016e00 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e00:	20800a17 	ldw	r2,40(r4)
   16e04:	29400fcc 	andi	r5,r5,63
   16e08:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   16e0c:	20800a17 	ldw	r2,40(r4)
   16e10:	11800065 	stbio	r6,1(r2)

	return 0;
}
   16e14:	0005883a 	mov	r2,zero
   16e18:	f800283a 	ret

00016e1c <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e1c:	20800a17 	ldw	r2,40(r4)
   16e20:	00c00c84 	movi	r3,50
   16e24:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16e28:	20800a17 	ldw	r2,40(r4)
   16e2c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e30:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16e34:	10803fcc 	andi	r2,r2,255
   16e38:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e3c:	20800a17 	ldw	r2,40(r4)
   16e40:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16e44:	20800a17 	ldw	r2,40(r4)
   16e48:	10800063 	ldbuio	r2,1(r2)
   16e4c:	10803fcc 	andi	r2,r2,255
   16e50:	1006923a 	slli	r3,r2,8
   16e54:	28800017 	ldw	r2,0(r5)
   16e58:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   16e5c:	10e0000c 	andi	r3,r2,32768
   16e60:	18000126 	beq	r3,zero,16e68 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   16e64:	10bffff4 	orhi	r2,r2,65535
   16e68:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   16e6c:	0005883a 	mov	r2,zero
   16e70:	f800283a 	ret

00016e74 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e74:	20800a17 	ldw	r2,40(r4)
   16e78:	00c00d04 	movi	r3,52
   16e7c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16e80:	20800a17 	ldw	r2,40(r4)
   16e84:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e88:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16e8c:	10803fcc 	andi	r2,r2,255
   16e90:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e94:	20800a17 	ldw	r2,40(r4)
   16e98:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16e9c:	20800a17 	ldw	r2,40(r4)
   16ea0:	10800063 	ldbuio	r2,1(r2)
   16ea4:	10803fcc 	andi	r2,r2,255
   16ea8:	1006923a 	slli	r3,r2,8
   16eac:	28800017 	ldw	r2,0(r5)
   16eb0:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   16eb4:	10e0000c 	andi	r3,r2,32768
   16eb8:	18000126 	beq	r3,zero,16ec0 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   16ebc:	10bffff4 	orhi	r2,r2,65535
   16ec0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   16ec4:	0005883a 	mov	r2,zero
   16ec8:	f800283a 	ret

00016ecc <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16ecc:	20800a17 	ldw	r2,40(r4)
   16ed0:	00c00d84 	movi	r3,54
   16ed4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16ed8:	20800a17 	ldw	r2,40(r4)
   16edc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16ee0:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16ee4:	10803fcc 	andi	r2,r2,255
   16ee8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16eec:	20800a17 	ldw	r2,40(r4)
   16ef0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16ef4:	20800a17 	ldw	r2,40(r4)
   16ef8:	10800063 	ldbuio	r2,1(r2)
   16efc:	10803fcc 	andi	r2,r2,255
   16f00:	1006923a 	slli	r3,r2,8
   16f04:	28800017 	ldw	r2,0(r5)
   16f08:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   16f0c:	10e0000c 	andi	r3,r2,32768
   16f10:	18000126 	beq	r3,zero,16f18 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   16f14:	10bffff4 	orhi	r2,r2,65535
   16f18:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   16f1c:	0005883a 	mov	r2,zero
   16f20:	f800283a 	ret

00016f24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16f24:	f800283a 	ret

00016f28 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   16f28:	3005883a 	mov	r2,r6
   16f2c:	f800283a 	ret

00016f30 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16f30:	20000226 	beq	r4,zero,16f3c <alt_dev_llist_insert+0xc>
   16f34:	20800217 	ldw	r2,8(r4)
   16f38:	1000101e 	bne	r2,zero,16f7c <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   16f3c:	d0a00d17 	ldw	r2,-32716(gp)
   16f40:	10000926 	beq	r2,zero,16f68 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16f44:	deffff04 	addi	sp,sp,-4
   16f48:	dfc00015 	stw	ra,0(sp)
   16f4c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   16f50:	00c00584 	movi	r3,22
   16f54:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   16f58:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   16f5c:	dfc00017 	ldw	ra,0(sp)
   16f60:	dec00104 	addi	sp,sp,4
   16f64:	f800283a 	ret
   16f68:	d0a07b04 	addi	r2,gp,-32276
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   16f6c:	00c00584 	movi	r3,22
   16f70:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   16f74:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   16f78:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   16f7c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16f80:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   16f84:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   16f88:	28800017 	ldw	r2,0(r5)
   16f8c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   16f90:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   16f94:	0005883a 	mov	r2,zero
   16f98:	f800283a 	ret

00016f9c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16f9c:	defffb04 	addi	sp,sp,-20
   16fa0:	dcc00315 	stw	r19,12(sp)
   16fa4:	dc800215 	stw	r18,8(sp)
   16fa8:	dc400115 	stw	r17,4(sp)
   16fac:	dc000015 	stw	r16,0(sp)
   16fb0:	dfc00415 	stw	ra,16(sp)
   16fb4:	2027883a 	mov	r19,r4
   16fb8:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   16fbc:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   16fc0:	0016a800 	call	16a80 <strlen>
   16fc4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16fc8:	84400726 	beq	r16,r17,16fe8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16fcc:	81000217 	ldw	r4,8(r16)
   16fd0:	900d883a 	mov	r6,r18
   16fd4:	980b883a 	mov	r5,r19
   16fd8:	00170900 	call	17090 <memcmp>
   16fdc:	10000426 	beq	r2,zero,16ff0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   16fe0:	84000017 	ldw	r16,0(r16)
   16fe4:	003ff806 	br	16fc8 <__alt_data_end+0xffff6fc8>
  }
  
  /* No match found */
  
  return NULL;
   16fe8:	0005883a 	mov	r2,zero
   16fec:	00000106 	br	16ff4 <alt_find_dev+0x58>
   16ff0:	8005883a 	mov	r2,r16
}
   16ff4:	dfc00417 	ldw	ra,16(sp)
   16ff8:	dcc00317 	ldw	r19,12(sp)
   16ffc:	dc800217 	ldw	r18,8(sp)
   17000:	dc400117 	ldw	r17,4(sp)
   17004:	dc000017 	ldw	r16,0(sp)
   17008:	dec00504 	addi	sp,sp,20
   1700c:	f800283a 	ret

00017010 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   17010:	f800283a 	ret

00017014 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   17014:	000170fa 	wrctl	ienable,zero
   17018:	f800283a 	ret

0001701c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   1701c:	213ffe84 	addi	r4,r4,-6
   17020:	008003c4 	movi	r2,15
   17024:	11001636 	bltu	r2,r4,17080 <alt_exception_cause_generated_bad_addr+0x64>
   17028:	200890ba 	slli	r4,r4,2
   1702c:	00800074 	movhi	r2,1
   17030:	109c1004 	addi	r2,r2,28736
   17034:	2089883a 	add	r4,r4,r2
   17038:	20800017 	ldw	r2,0(r4)
   1703c:	1000683a 	jmp	r2
   17040:	00017088 	cmpgei	zero,zero,1474
   17044:	00017088 	cmpgei	zero,zero,1474
   17048:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   1704c:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   17050:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   17054:	00017088 	cmpgei	zero,zero,1474
   17058:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   1705c:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   17060:	00017088 	cmpgei	zero,zero,1474
   17064:	00017088 	cmpgei	zero,zero,1474
   17068:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   1706c:	00017088 	cmpgei	zero,zero,1474
   17070:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   17074:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   17078:	00017080 	call	1708 <__alt_mem_onchip_memory-0xe8f8>
   1707c:	00017088 	cmpgei	zero,zero,1474
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   17080:	0005883a 	mov	r2,zero
   17084:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   17088:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   1708c:	f800283a 	ret

00017090 <memcmp>:
   17090:	218d883a 	add	r6,r4,r6
   17094:	21800826 	beq	r4,r6,170b8 <memcmp+0x28>
   17098:	20800003 	ldbu	r2,0(r4)
   1709c:	28c00003 	ldbu	r3,0(r5)
   170a0:	10c00226 	beq	r2,r3,170ac <memcmp+0x1c>
   170a4:	10c5c83a 	sub	r2,r2,r3
   170a8:	f800283a 	ret
   170ac:	21000044 	addi	r4,r4,1
   170b0:	29400044 	addi	r5,r5,1
   170b4:	003ff706 	br	17094 <__alt_data_end+0xffff7094>
   170b8:	0005883a 	mov	r2,zero
   170bc:	f800283a 	ret
