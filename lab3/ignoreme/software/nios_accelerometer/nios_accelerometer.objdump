
nios_accelerometer.elf:     file format elf32-littlenios2
nios_accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000638c memsz 0x0000638c flags r-x
    LOAD off    0x000073ac vaddr 0x000163ac paddr 0x00017e44 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x000098dc vaddr 0x000198dc paddr 0x000198dc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005f44  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000234  00016178  00016178  00007178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  000163ac  00017e44  000073ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  000198dc  000198dc  000098dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00019a3c  00019a3c  00008e44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008e44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ab0  00000000  00000000  00008e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016e5c  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000065e2  00000000  00000000  00020774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006e1c  00000000  00000000  00026d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001798  00000000  00000000  0002db74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002af9  00000000  00000000  0002f30c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000453f  00000000  00000000  00031e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00036344  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000740  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000392a6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000392a9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000392ac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000392ad  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000392ae  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000392b2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000392b6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000392ba  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000392c3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000392cc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  000392d5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  000392e7  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  0003931b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004264c  00000000  00000000  0003e324  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
00016178 l    d  .rodata	00000000 .rodata
000163ac l    d  .rwdata	00000000 .rwdata
000198dc l    d  .bss	00000000 .bss
00019a3c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_accelerometer_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000115f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000119c4 l     F .text	00000034 alt_dev_reg
000163ac l     O .rwdata	00001060 jtag_uart
0001740c l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011cb8 l     F .text	00000210 altera_avalon_jtag_uart_irq
00011ec8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012500 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00012acc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012c00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012c2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00012e7c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00012fdc l     F .text	0000003c alt_get_errno
00013018 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000175e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000141c8 l     F .text	00000008 __fp_unlock
000141dc l     F .text	0000019c __sinit.part.1
00014378 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00015b10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00015c04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00015cec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00015e4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017e40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001603c l     F .text	0000003c alt_get_errno
00019900 g     O .bss	00000004 alt_instruction_exception_handler
000159c8 g     F .text	00000054 _isatty_r
000116e0 g     F .text	0000007c alt_main
00010270 g     F .text	00000038 led_write
0001993c g     O .bss	00000100 alt_irq
00015a1c g     F .text	00000060 _lseek_r
00017e44 g       *ABS*	00000000 __flash_rwdata_start
00019a3c g       *ABS*	00000000 __alt_heap_start
00015750 g     F .text	0000005c __sseek
00014528 g     F .text	00000010 __sinit
000139dc g     F .text	00000140 __swbuf_r
00014380 g     F .text	00000078 __sfmoreglue
00015e28 g     F .text	00000024 __malloc_unlock
0001059c g     F .text	000000a0 shift
00014510 g     F .text	00000018 _cleanup
0001110c g     F .text	00000070 .hidden __fixsfsi
00010350 g     F .text	000000d0 sys_timer_isr
00013488 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
0001273c g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001596c g     F .text	0000005c _fstat_r
00019904 g     O .bss	00000004 errno
000156cc g     F .text	00000008 __seofread
000198f0 g     O .bss	00000004 alt_argv
0001fe0c g       *ABS*	00000000 _gp
00017460 g     O .rwdata	00000180 alt_fd_list
00012dcc g     F .text	00000090 alt_find_dev
0001132c g     F .text	00000148 memcpy
000141d0 g     F .text	0000000c _cleanup_r
00012f60 g     F .text	0000007c alt_io_redirect
00016178 g       *ABS*	00000000 __DTOR_END__
00013678 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000120c0 g     F .text	0000021c altera_avalon_jtag_uart_read
00015c40 g     F .text	000000ac isatty
00019910 g     O .bss	00000004 __malloc_top_pad
00015624 g     F .text	00000054 _sbrk_r
00015a7c g     F .text	00000060 _read_r
00017e20 g     O .rwdata	00000004 alt_max_fd
00015868 g     F .text	000000f0 _fclose_r
00014198 g     F .text	00000030 fflush
0001990c g     O .bss	00000004 __malloc_max_sbrked_mem
00011474 g     F .text	00000180 alt_irq_register
00015d28 g     F .text	000000dc lseek
00017e30 g     O .rwdata	00000004 _global_impure_ptr
00019a3c g       *ABS*	00000000 __bss_end
00013380 g     F .text	00000108 alt_tick
00014548 g     F .text	00000018 __fp_lock_all
000132e4 g     F .text	0000009c alt_alarm_stop
000198e8 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
00017438 g     O .rwdata	00000028 alt_dev_null
00012be0 g     F .text	00000020 alt_dcache_flush_all
00017e44 g       *ABS*	00000000 __ram_rwdata_end
00010420 g     F .text	00000090 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00017e18 g     O .rwdata	00000008 alt_dev_list
00016078 g     F .text	00000100 write
000137dc g     F .text	000000a0 _putc_r
000163ac g       *ABS*	00000000 __ram_rodata_end
00015b4c g     F .text	000000b8 fstat
000198e0 g     O .bss	00000001 led
00019a3c g       *ABS*	00000000 end
00011c04 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
00016178 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001257c g     F .text	00000074 alt_avalon_timer_sc_init
000112a0 g     F .text	00000064 .hidden __clzsi2
000122dc g     F .text	00000224 altera_avalon_jtag_uart_write
00014538 g     F .text	00000004 __sfp_lock_acquire
0001469c g     F .text	00000310 _free_r
0001175c g     F .text	0000022c alt_printf
00013da0 g     F .text	00000180 __call_exitprocs
00017e38 g     O .rwdata	00000004 __malloc_sbrk_base
00010234 g     F .text	0000003c _start
000198e4 g     O .bss	00000004 level
000198f8 g     O .bss	00000004 _alt_tick_rate
000198fc g     O .bss	00000004 _alt_nticks
00015e88 g     F .text	00000104 read
00011a30 g     F .text	00000070 alt_sys_init
0001262c g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
0001117c g     F .text	00000124 .hidden __floatsisf
00013c88 g     F .text	00000118 __register_exitproc
000104b0 g     F .text	000000ec filter
00011f68 g     F .text	00000068 altera_avalon_jtag_uart_close
00011304 g     F .text	00000028 .hidden __mulsi3
000163ac g       *ABS*	00000000 __ram_rwdata_start
00016178 g       *ABS*	00000000 __ram_rodata_start
00019914 g     O .bss	00000028 __malloc_current_mallinfo
00011aa0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000135b4 g     F .text	000000c4 alt_get_fd
00012808 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00015814 g     F .text	00000054 _close_r
00013760 g     F .text	0000007c memcmp
00011b60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00019a3c g       *ABS*	00000000 __alt_stack_base
00011bb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00013b34 g     F .text	00000154 __swsetup_r
000143f8 g     F .text	00000118 __sfp
00017a04 g     O .rwdata	00000408 __malloc_av_
00014544 g     F .text	00000004 __sinit_lock_release
00015678 g     F .text	00000054 __sread
000134ac g     F .text	00000108 alt_find_file
00012c68 g     F .text	000000a4 alt_dev_llist_insert
00015e04 g     F .text	00000024 __malloc_lock
00015f8c g     F .text	000000b0 sbrk
0001413c g     F .text	0000005c _fflush_r
000198dc g       *ABS*	00000000 __bss_start
000154fc g     F .text	00000128 memset
0001063c g     F .text	000001d8 main
000198f4 g     O .bss	00000004 alt_envp
00019908 g     O .bss	00000004 __malloc_max_total_mem
00011b00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00013b1c g     F .text	00000018 __swbuf
000157ac g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00015958 g     F .text	00000014 fclose
00014cf0 g     F .text	0000080c _malloc_r
00017e24 g     O .rwdata	00000004 alt_errno
000149ac g     F .text	000000c4 _fwalk
0001387c g     F .text	000000c8 putc
00014578 g     F .text	00000124 _malloc_trim_r
00016178 g       *ABS*	00000000 __CTOR_END__
00010cdc g     F .text	00000430 .hidden __mulsf3
00016178 g       *ABS*	00000000 __flash_rodata_start
00016178 g       *ABS*	00000000 __DTOR_LIST__
000119f8 g     F .text	00000038 alt_irq_init
00013260 g     F .text	00000084 alt_release_fd
00016264 g     O .rodata	00000100 .hidden __clz_tab
00013714 g     F .text	00000014 atexit
000157b4 g     F .text	00000060 _write_r
00017e34 g     O .rwdata	00000004 _impure_ptr
000198ec g     O .bss	00000004 alt_argc
00013f20 g     F .text	0000021c __sflush_r
00012d6c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00014560 g     F .text	00000018 __fp_unlock_all
000198dc g     O .bss	00000001 pwm
00017e10 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000125f0 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00017e44 g       *ABS*	00000000 _edata
00019a3c g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
00011fd0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000156d4 g     F .text	0000007c __swrite
00017e3c g     O .rwdata	00000004 __malloc_trim_threshold
00013728 g     F .text	00000038 exit
00014a70 g     F .text	000000c4 _fwalk_reent
000128d4 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001453c g     F .text	00000004 __sfp_lock_release
000102a8 g     F .text	000000a8 convert_read
00015adc g     F .text	00000034 _exit
000129a0 g     F .text	0000012c alt_alarm_start
00012670 g     F .text	00000068 alt_up_accelerometer_spi_read
000126d8 g     F .text	00000064 alt_up_accelerometer_spi_write
00014b34 g     F .text	000001bc __smakebuf_r
00013944 g     F .text	00000098 strlen
00013104 g     F .text	0000015c open
00011988 g     F .text	0000003c alt_putchar
00012e5c g     F .text	00000020 alt_icache_flush_all
00017e0c g     O .rwdata	00000004 alt_priority_mask
00017e28 g     O .rwdata	00000008 alt_alarm_list
00012d0c g     F .text	00000060 _do_ctors
00012b08 g     F .text	000000d8 close
00010814 g     F .text	000004c8 .hidden __addsf3
0001165c g     F .text	00000084 alt_load
00014540 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a64f04 	addi	r2,r2,-26308
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a64f04 	addi	r2,r2,-26308
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a6bd17 	ldw	r2,-25868(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a6bd17 	ldw	r2,-25868(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10240:	d6bf8314 	ori	gp,gp,65036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10a63714 	ori	r2,r2,39132

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18e68f14 	ori	r3,r3,39484

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <__alt_data_end+0xffff0258>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	001165c0 	call	1165c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	00116e00 	call	116e0 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <__alt_data_end+0xffff026c>

00010270 <led_write>:

alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	2005883a 	mov	r2,r4
   10280:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   10284:	e0ffff03 	ldbu	r3,-4(fp)
   10288:	008000b4 	movhi	r2,2
   1028c:	10840804 	addi	r2,r2,4128
   10290:	10c00035 	stwio	r3,0(r2)
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
   102a8:	defffa04 	addi	sp,sp,-24
   102ac:	dfc00515 	stw	ra,20(sp)
   102b0:	df000415 	stw	fp,16(sp)
   102b4:	df000404 	addi	fp,sp,16
   102b8:	e13ffd15 	stw	r4,-12(fp)
   102bc:	e17ffe15 	stw	r5,-8(fp)
   102c0:	e1bfff15 	stw	r6,-4(fp)
    alt_printf("raw data: %x\n", acc_read);
   102c4:	e17ffd17 	ldw	r5,-12(fp)
   102c8:	01000074 	movhi	r4,1
   102cc:	21185e04 	addi	r4,r4,24952
   102d0:	001175c0 	call	1175c <alt_printf>
    acc_read += OFFSET;
   102d4:	e0bffd17 	ldw	r2,-12(fp)
   102d8:	10bff804 	addi	r2,r2,-32
   102dc:	e0bffd15 	stw	r2,-12(fp)
    // alt_printf("offset data: %x\n", acc_read);
    // shifts it to the right by 6 bits
    // & with 0b000000111
    // gets the MS 3 bits of the offset value
    alt_u8 val = (acc_read >> 6) & 0x07;
   102e0:	e0bffd17 	ldw	r2,-12(fp)
   102e4:	1005d1ba 	srai	r2,r2,6
   102e8:	108001cc 	andi	r2,r2,7
   102ec:	e0bffc05 	stb	r2,-16(fp)

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places 
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   102f0:	e0bffc03 	ldbu	r2,-16(fp)
   102f4:	00c00204 	movi	r3,8
   102f8:	1885d83a 	sra	r2,r3,r2
   102fc:	1009883a 	mov	r4,r2
   10300:	e0bffc03 	ldbu	r2,-16(fp)
   10304:	00c00204 	movi	r3,8
   10308:	1885c83a 	sub	r2,r3,r2
   1030c:	00c00204 	movi	r3,8
   10310:	1884983a 	sll	r2,r3,r2
   10314:	2084b03a 	or	r2,r4,r2
   10318:	1007883a 	mov	r3,r2
   1031c:	e0bfff17 	ldw	r2,-4(fp)
   10320:	10c00005 	stb	r3,0(r2)

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	1005d07a 	srai	r2,r2,1
   1032c:	10c007cc 	andi	r3,r2,31
   10330:	e0bffe17 	ldw	r2,-8(fp)
   10334:	10c00015 	stw	r3,0(r2)
}
   10338:	0001883a 	nop
   1033c:	e037883a 	mov	sp,fp
   10340:	dfc00117 	ldw	ra,4(sp)
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00204 	addi	sp,sp,8
   1034c:	f800283a 	ret

00010350 <sys_timer_isr>:

void sys_timer_isr() {
   10350:	defffe04 	addi	sp,sp,-8
   10354:	dfc00115 	stw	ra,4(sp)
   10358:	df000015 	stw	fp,0(sp)
   1035c:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10360:	0007883a 	mov	r3,zero
   10364:	008000b4 	movhi	r2,2
   10368:	10840004 	addi	r2,r2,4096
   1036c:	10c00035 	stwio	r3,0(r2)

    if (pwm < abs(level)) {
   10370:	d0a6b403 	ldbu	r2,-25904(gp)
   10374:	10c03fcc 	andi	r3,r2,255
   10378:	18c0201c 	xori	r3,r3,128
   1037c:	18ffe004 	addi	r3,r3,-128
   10380:	d0a6b617 	ldw	r2,-25896(gp)
   10384:	1000010e 	bge	r2,zero,1038c <sys_timer_isr+0x3c>
   10388:	0085c83a 	sub	r2,zero,r2
   1038c:	18800f0e 	bge	r3,r2,103cc <sys_timer_isr+0x7c>

        if (level < 0) {
   10390:	d0a6b617 	ldw	r2,-25896(gp)
   10394:	1000060e 	bge	r2,zero,103b0 <sys_timer_isr+0x60>
            led_write(led << 1);
   10398:	d0a6b503 	ldbu	r2,-25900(gp)
   1039c:	1085883a 	add	r2,r2,r2
   103a0:	10803fcc 	andi	r2,r2,255
   103a4:	1009883a 	mov	r4,r2
   103a8:	00102700 	call	10270 <led_write>
   103ac:	00000b06 	br	103dc <sys_timer_isr+0x8c>
        } else {
            led_write(led >> 1);
   103b0:	d0a6b503 	ldbu	r2,-25900(gp)
   103b4:	10803fcc 	andi	r2,r2,255
   103b8:	1004d07a 	srli	r2,r2,1
   103bc:	10803fcc 	andi	r2,r2,255
   103c0:	1009883a 	mov	r4,r2
   103c4:	00102700 	call	10270 <led_write>
   103c8:	00000406 	br	103dc <sys_timer_isr+0x8c>
        }

    } else {
        led_write(led);
   103cc:	d0a6b503 	ldbu	r2,-25900(gp)
   103d0:	10803fcc 	andi	r2,r2,255
   103d4:	1009883a 	mov	r4,r2
   103d8:	00102700 	call	10270 <led_write>
    }

    if (pwm > PWM_PERIOD) {
   103dc:	d0a6b403 	ldbu	r2,-25904(gp)
   103e0:	10803fcc 	andi	r2,r2,255
   103e4:	1080201c 	xori	r2,r2,128
   103e8:	10bfe004 	addi	r2,r2,-128
   103ec:	10800450 	cmplti	r2,r2,17
   103f0:	1000021e 	bne	r2,zero,103fc <sys_timer_isr+0xac>
        pwm = 0;
   103f4:	d026b405 	stb	zero,-25904(gp)
    } else {
        pwm++;
    }

}
   103f8:	00000306 	br	10408 <sys_timer_isr+0xb8>
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
   103fc:	d0a6b403 	ldbu	r2,-25904(gp)
   10400:	10800044 	addi	r2,r2,1
   10404:	d0a6b405 	stb	r2,-25904(gp)
    }

}
   10408:	0001883a 	nop
   1040c:	e037883a 	mov	sp,fp
   10410:	dfc00117 	ldw	ra,4(sp)
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00204 	addi	sp,sp,8
   1041c:	f800283a 	ret

00010420 <timer_init>:

void timer_init(void * isr) {
   10420:	defffd04 	addi	sp,sp,-12
   10424:	dfc00215 	stw	ra,8(sp)
   10428:	df000115 	stw	fp,4(sp)
   1042c:	df000104 	addi	fp,sp,4
   10430:	e13fff15 	stw	r4,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10434:	00c000c4 	movi	r3,3
   10438:	008000b4 	movhi	r2,2
   1043c:	10840104 	addi	r2,r2,4100
   10440:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10444:	0007883a 	mov	r3,zero
   10448:	008000b4 	movhi	r2,2
   1044c:	10840004 	addi	r2,r2,4096
   10450:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10454:	00c24004 	movi	r3,2304
   10458:	008000b4 	movhi	r2,2
   1045c:	10840204 	addi	r2,r2,4104
   10460:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10464:	0007883a 	mov	r3,zero
   10468:	008000b4 	movhi	r2,2
   1046c:	10840304 	addi	r2,r2,4108
   10470:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10474:	e0bfff17 	ldw	r2,-4(fp)
   10478:	100d883a 	mov	r6,r2
   1047c:	000b883a 	mov	r5,zero
   10480:	01000044 	movi	r4,1
   10484:	00114740 	call	11474 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10488:	00c001c4 	movi	r3,7
   1048c:	008000b4 	movhi	r2,2
   10490:	10840104 	addi	r2,r2,4100
   10494:	10c00035 	stwio	r3,0(r2)

}
   10498:	0001883a 	nop
   1049c:	e037883a 	mov	sp,fp
   104a0:	dfc00117 	ldw	ra,4(sp)
   104a4:	df000017 	ldw	fp,0(sp)
   104a8:	dec00204 	addi	sp,sp,8
   104ac:	f800283a 	ret

000104b0 <filter>:

alt_32 filter(float* taps, alt_32* prev_vals, int n){
   104b0:	defff704 	addi	sp,sp,-36
   104b4:	dfc00815 	stw	ra,32(sp)
   104b8:	df000715 	stw	fp,28(sp)
   104bc:	dc400615 	stw	r17,24(sp)
   104c0:	dc000515 	stw	r16,20(sp)
   104c4:	df000704 	addi	fp,sp,28
   104c8:	e13ffb15 	stw	r4,-20(fp)
   104cc:	e17ffc15 	stw	r5,-16(fp)
   104d0:	e1bffd15 	stw	r6,-12(fp)
    alt_32 sum = 0;
   104d4:	e03ff915 	stw	zero,-28(fp)

    for(int i = 0; i < n; i++){
   104d8:	e03ffa15 	stw	zero,-24(fp)
   104dc:	00002406 	br	10570 <filter+0xc0>
        sum += taps[i] * prev_vals[i];
   104e0:	e13ff917 	ldw	r4,-28(fp)
   104e4:	001117c0 	call	1117c <__floatsisf>
   104e8:	1023883a 	mov	r17,r2
   104ec:	e0bffa17 	ldw	r2,-24(fp)
   104f0:	1085883a 	add	r2,r2,r2
   104f4:	1085883a 	add	r2,r2,r2
   104f8:	1007883a 	mov	r3,r2
   104fc:	e0bffb17 	ldw	r2,-20(fp)
   10500:	10c5883a 	add	r2,r2,r3
   10504:	14000017 	ldw	r16,0(r2)
   10508:	e0bffa17 	ldw	r2,-24(fp)
   1050c:	1085883a 	add	r2,r2,r2
   10510:	1085883a 	add	r2,r2,r2
   10514:	1007883a 	mov	r3,r2
   10518:	e0bffc17 	ldw	r2,-16(fp)
   1051c:	10c5883a 	add	r2,r2,r3
   10520:	10800017 	ldw	r2,0(r2)
   10524:	1009883a 	mov	r4,r2
   10528:	001117c0 	call	1117c <__floatsisf>
   1052c:	1007883a 	mov	r3,r2
   10530:	180b883a 	mov	r5,r3
   10534:	8009883a 	mov	r4,r16
   10538:	0010cdc0 	call	10cdc <__mulsf3>
   1053c:	1007883a 	mov	r3,r2
   10540:	1805883a 	mov	r2,r3
   10544:	100b883a 	mov	r5,r2
   10548:	8809883a 	mov	r4,r17
   1054c:	00108140 	call	10814 <__addsf3>
   10550:	1007883a 	mov	r3,r2
   10554:	1805883a 	mov	r2,r3
   10558:	1009883a 	mov	r4,r2
   1055c:	001110c0 	call	1110c <__fixsfsi>
   10560:	e0bff915 	stw	r2,-28(fp)
}

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;

    for(int i = 0; i < n; i++){
   10564:	e0bffa17 	ldw	r2,-24(fp)
   10568:	10800044 	addi	r2,r2,1
   1056c:	e0bffa15 	stw	r2,-24(fp)
   10570:	e0fffa17 	ldw	r3,-24(fp)
   10574:	e0bffd17 	ldw	r2,-12(fp)
   10578:	18bfd916 	blt	r3,r2,104e0 <__alt_data_end+0xffff04e0>
        sum += taps[i] * prev_vals[i];
    }

    return sum;
   1057c:	e0bff917 	ldw	r2,-28(fp)
}
   10580:	e6fffe04 	addi	sp,fp,-8
   10584:	dfc00317 	ldw	ra,12(sp)
   10588:	df000217 	ldw	fp,8(sp)
   1058c:	dc400117 	ldw	r17,4(sp)
   10590:	dc000017 	ldw	r16,0(sp)
   10594:	dec00404 	addi	sp,sp,16
   10598:	f800283a 	ret

0001059c <shift>:

void shift(alt_32* prev_vals, alt_32 x_read, int n){
   1059c:	defffb04 	addi	sp,sp,-20
   105a0:	df000415 	stw	fp,16(sp)
   105a4:	df000404 	addi	fp,sp,16
   105a8:	e13ffd15 	stw	r4,-12(fp)
   105ac:	e17ffe15 	stw	r5,-8(fp)
   105b0:	e1bfff15 	stw	r6,-4(fp)
    for(int i = n - 1; i > 0; --i){
   105b4:	e0bfff17 	ldw	r2,-4(fp)
   105b8:	10bfffc4 	addi	r2,r2,-1
   105bc:	e0bffc15 	stw	r2,-16(fp)
   105c0:	00001406 	br	10614 <shift+0x78>
        prev_vals[i] = prev_vals[i - 1];
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	1085883a 	add	r2,r2,r2
   105cc:	1085883a 	add	r2,r2,r2
   105d0:	1007883a 	mov	r3,r2
   105d4:	e0bffd17 	ldw	r2,-12(fp)
   105d8:	10c7883a 	add	r3,r2,r3
   105dc:	e13ffc17 	ldw	r4,-16(fp)
   105e0:	00900034 	movhi	r2,16384
   105e4:	10bfffc4 	addi	r2,r2,-1
   105e8:	2085883a 	add	r2,r4,r2
   105ec:	1085883a 	add	r2,r2,r2
   105f0:	1085883a 	add	r2,r2,r2
   105f4:	1009883a 	mov	r4,r2
   105f8:	e0bffd17 	ldw	r2,-12(fp)
   105fc:	1105883a 	add	r2,r2,r4
   10600:	10800017 	ldw	r2,0(r2)
   10604:	18800015 	stw	r2,0(r3)

    return sum;
}

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   10608:	e0bffc17 	ldw	r2,-16(fp)
   1060c:	10bfffc4 	addi	r2,r2,-1
   10610:	e0bffc15 	stw	r2,-16(fp)
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	00bfea16 	blt	zero,r2,105c4 <__alt_data_end+0xffff05c4>
        prev_vals[i] = prev_vals[i - 1];
    }

    prev_vals[0] = x_read;
   1061c:	e0bffd17 	ldw	r2,-12(fp)
   10620:	e0fffe17 	ldw	r3,-8(fp)
   10624:	10c00015 	stw	r3,0(r2)

    return;
   10628:	0001883a 	nop
}
   1062c:	e037883a 	mov	sp,fp
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00104 	addi	sp,sp,4
   10638:	f800283a 	ret

0001063c <main>:

int main() {
   1063c:	deffbd04 	addi	sp,sp,-268
   10640:	dfc04215 	stw	ra,264(sp)
   10644:	df004115 	stw	fp,260(sp)
   10648:	ddc04015 	stw	r23,256(sp)
   1064c:	dd803f15 	stw	r22,252(sp)
   10650:	dd403e15 	stw	r21,248(sp)
   10654:	dd003d15 	stw	r20,244(sp)
   10658:	dcc03c15 	stw	r19,240(sp)
   1065c:	dc803b15 	stw	r18,236(sp)
   10660:	dc403a15 	stw	r17,232(sp)
   10664:	dc003915 	stw	r16,228(sp)
   10668:	df004104 	addi	fp,sp,260
   1066c:	d805883a 	mov	r2,sp
   10670:	e0bff715 	stw	r2,-36(fp)

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10674:	01000074 	movhi	r4,1
   10678:	21186204 	addi	r4,r4,24968
   1067c:	00125f00 	call	125f0 <alt_up_accelerometer_spi_open_dev>
   10680:	e0bfc015 	stw	r2,-256(fp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10684:	e0bfc017 	ldw	r2,-256(fp)
   10688:	1000031e 	bne	r2,zero,10698 <main+0x5c>
        return 1;
   1068c:	00800044 	movi	r2,1
   10690:	e6fff717 	ldw	sp,-36(fp)
   10694:	00005206 	br	107e0 <main+0x1a4>
    }

    const int array_size = 49;
   10698:	00800c44 	movi	r2,49
   1069c:	e0bfc115 	stw	r2,-252(fp)

    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   106a0:	00800074 	movhi	r2,1
   106a4:	10986804 	addi	r2,r2,24992
   106a8:	e0ffc604 	addi	r3,fp,-232
   106ac:	1009883a 	mov	r4,r2
   106b0:	00803104 	movi	r2,196
   106b4:	100d883a 	mov	r6,r2
   106b8:	200b883a 	mov	r5,r4
   106bc:	1809883a 	mov	r4,r3
   106c0:	001132c0 	call	1132c <memcpy>
    alt_32 prev_vals[array_size];
   106c4:	e0bfc117 	ldw	r2,-252(fp)
   106c8:	10bfffc4 	addi	r2,r2,-1
   106cc:	e0bfc215 	stw	r2,-248(fp)
   106d0:	e0bfc117 	ldw	r2,-252(fp)
   106d4:	102d883a 	mov	r22,r2
   106d8:	002f883a 	mov	r23,zero
   106dc:	b004d6fa 	srli	r2,r22,27
   106e0:	b826917a 	slli	r19,r23,5
   106e4:	14e6b03a 	or	r19,r2,r19
   106e8:	b024917a 	slli	r18,r22,5
   106ec:	e0bfc117 	ldw	r2,-252(fp)
   106f0:	1029883a 	mov	r20,r2
   106f4:	002b883a 	mov	r21,zero
   106f8:	a004d6fa 	srli	r2,r20,27
   106fc:	a822917a 	slli	r17,r21,5
   10700:	1462b03a 	or	r17,r2,r17
   10704:	a020917a 	slli	r16,r20,5
   10708:	e0bfc117 	ldw	r2,-252(fp)
   1070c:	1085883a 	add	r2,r2,r2
   10710:	1085883a 	add	r2,r2,r2
   10714:	108000c4 	addi	r2,r2,3
   10718:	108000c4 	addi	r2,r2,3
   1071c:	1004d0ba 	srli	r2,r2,2
   10720:	1085883a 	add	r2,r2,r2
   10724:	1085883a 	add	r2,r2,r2
   10728:	d8b7c83a 	sub	sp,sp,r2
   1072c:	d805883a 	mov	r2,sp
   10730:	108000c4 	addi	r2,r2,3
   10734:	1004d0ba 	srli	r2,r2,2
   10738:	1085883a 	add	r2,r2,r2
   1073c:	1085883a 	add	r2,r2,r2
   10740:	e0bfc315 	stw	r2,-244(fp)

    for(int i = 0; i < array_size; i++) {
   10744:	e03fbf15 	stw	zero,-260(fp)
   10748:	00000906 	br	10770 <main+0x134>
        prev_vals[i] = 0;
   1074c:	e0ffc317 	ldw	r3,-244(fp)
   10750:	e0bfbf17 	ldw	r2,-260(fp)
   10754:	1085883a 	add	r2,r2,r2
   10758:	1085883a 	add	r2,r2,r2
   1075c:	1885883a 	add	r2,r3,r2
   10760:	10000015 	stw	zero,0(r2)
    const int array_size = 49;

    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
    alt_32 prev_vals[array_size];

    for(int i = 0; i < array_size; i++) {
   10764:	e0bfbf17 	ldw	r2,-260(fp)
   10768:	10800044 	addi	r2,r2,1
   1076c:	e0bfbf15 	stw	r2,-260(fp)
   10770:	e0ffbf17 	ldw	r3,-260(fp)
   10774:	e0bfc117 	ldw	r2,-252(fp)
   10778:	18bff416 	blt	r3,r2,1074c <__alt_data_end+0xffff074c>
        prev_vals[i] = 0;
    }

    timer_init(sys_timer_isr);
   1077c:	01000074 	movhi	r4,1
   10780:	2100d404 	addi	r4,r4,848
   10784:	00104200 	call	10420 <timer_init>
    while (1) {
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10788:	e0bfc504 	addi	r2,fp,-236
   1078c:	100b883a 	mov	r5,r2
   10790:	e13fc017 	ldw	r4,-256(fp)
   10794:	001273c0 	call	1273c <alt_up_accelerometer_spi_read_x_axis>
        // alt_printf("raw data: %x\n", x_read);
        shift(& prev_vals, x_read, array_size);
   10798:	e0bfc317 	ldw	r2,-244(fp)
   1079c:	e0ffc517 	ldw	r3,-236(fp)
   107a0:	e1bfc117 	ldw	r6,-252(fp)
   107a4:	180b883a 	mov	r5,r3
   107a8:	1009883a 	mov	r4,r2
   107ac:	001059c0 	call	1059c <shift>
        filtered_x = filter(& taps, & prev_vals, array_size);
   107b0:	e0ffc317 	ldw	r3,-244(fp)
   107b4:	e0bfc604 	addi	r2,fp,-232
   107b8:	e1bfc117 	ldw	r6,-252(fp)
   107bc:	180b883a 	mov	r5,r3
   107c0:	1009883a 	mov	r4,r2
   107c4:	00104b00 	call	104b0 <filter>
   107c8:	e0bfc415 	stw	r2,-240(fp)

        convert_read(filtered_x, & level, & led);
   107cc:	d1a6b504 	addi	r6,gp,-25900
   107d0:	d166b604 	addi	r5,gp,-25896
   107d4:	e13fc417 	ldw	r4,-240(fp)
   107d8:	00102a80 	call	102a8 <convert_read>

    }
   107dc:	003fea06 	br	10788 <__alt_data_end+0xffff0788>

    return 0;

}
   107e0:	e6fff804 	addi	sp,fp,-32
   107e4:	dfc00917 	ldw	ra,36(sp)
   107e8:	df000817 	ldw	fp,32(sp)
   107ec:	ddc00717 	ldw	r23,28(sp)
   107f0:	dd800617 	ldw	r22,24(sp)
   107f4:	dd400517 	ldw	r21,20(sp)
   107f8:	dd000417 	ldw	r20,16(sp)
   107fc:	dcc00317 	ldw	r19,12(sp)
   10800:	dc800217 	ldw	r18,8(sp)
   10804:	dc400117 	ldw	r17,4(sp)
   10808:	dc000017 	ldw	r16,0(sp)
   1080c:	dec00a04 	addi	sp,sp,40
   10810:	f800283a 	ret

00010814 <__addsf3>:
   10814:	defffc04 	addi	sp,sp,-16
   10818:	2004d7fa 	srli	r2,r4,31
   1081c:	280cd5fa 	srli	r6,r5,23
   10820:	dc000015 	stw	r16,0(sp)
   10824:	00c02034 	movhi	r3,128
   10828:	2020d5fa 	srli	r16,r4,23
   1082c:	280ed7fa 	srli	r7,r5,31
   10830:	18ffffc4 	addi	r3,r3,-1
   10834:	dc400115 	stw	r17,4(sp)
   10838:	1908703a 	and	r4,r3,r4
   1083c:	194a703a 	and	r5,r3,r5
   10840:	dfc00315 	stw	ra,12(sp)
   10844:	dc800215 	stw	r18,8(sp)
   10848:	14403fcc 	andi	r17,r2,255
   1084c:	84003fcc 	andi	r16,r16,255
   10850:	200890fa 	slli	r4,r4,3
   10854:	31803fcc 	andi	r6,r6,255
   10858:	280a90fa 	slli	r5,r5,3
   1085c:	89c05026 	beq	r17,r7,109a0 <__addsf3+0x18c>
   10860:	8185c83a 	sub	r2,r16,r6
   10864:	00807a0e 	bge	zero,r2,10a50 <__addsf3+0x23c>
   10868:	30001e1e 	bne	r6,zero,108e4 <__addsf3+0xd0>
   1086c:	28006d1e 	bne	r5,zero,10a24 <__addsf3+0x210>
   10870:	208001cc 	andi	r2,r4,7
   10874:	10000426 	beq	r2,zero,10888 <__addsf3+0x74>
   10878:	208003cc 	andi	r2,r4,15
   1087c:	00c00104 	movi	r3,4
   10880:	10c00126 	beq	r2,r3,10888 <__addsf3+0x74>
   10884:	20c9883a 	add	r4,r4,r3
   10888:	2081002c 	andhi	r2,r4,1024
   1088c:	10003926 	beq	r2,zero,10974 <__addsf3+0x160>
   10890:	84000044 	addi	r16,r16,1
   10894:	00803fc4 	movi	r2,255
   10898:	80807826 	beq	r16,r2,10a7c <__addsf3+0x268>
   1089c:	200891ba 	slli	r4,r4,6
   108a0:	8805883a 	mov	r2,r17
   108a4:	2008d27a 	srli	r4,r4,9
   108a8:	84003fcc 	andi	r16,r16,255
   108ac:	800695fa 	slli	r3,r16,23
   108b0:	10803fcc 	andi	r2,r2,255
   108b4:	04002034 	movhi	r16,128
   108b8:	843fffc4 	addi	r16,r16,-1
   108bc:	100497fa 	slli	r2,r2,31
   108c0:	2408703a 	and	r4,r4,r16
   108c4:	20e0b03a 	or	r16,r4,r3
   108c8:	8084b03a 	or	r2,r16,r2
   108cc:	dfc00317 	ldw	ra,12(sp)
   108d0:	dc800217 	ldw	r18,8(sp)
   108d4:	dc400117 	ldw	r17,4(sp)
   108d8:	dc000017 	ldw	r16,0(sp)
   108dc:	dec00404 	addi	sp,sp,16
   108e0:	f800283a 	ret
   108e4:	00c03fc4 	movi	r3,255
   108e8:	80ffe126 	beq	r16,r3,10870 <__alt_data_end+0xffff0870>
   108ec:	29410034 	orhi	r5,r5,1024
   108f0:	00c006c4 	movi	r3,27
   108f4:	18807516 	blt	r3,r2,10acc <__addsf3+0x2b8>
   108f8:	00c00804 	movi	r3,32
   108fc:	1887c83a 	sub	r3,r3,r2
   10900:	28c6983a 	sll	r3,r5,r3
   10904:	288ad83a 	srl	r5,r5,r2
   10908:	1804c03a 	cmpne	r2,r3,zero
   1090c:	288ab03a 	or	r5,r5,r2
   10910:	2149c83a 	sub	r4,r4,r5
   10914:	2081002c 	andhi	r2,r4,1024
   10918:	10001426 	beq	r2,zero,1096c <__addsf3+0x158>
   1091c:	04810034 	movhi	r18,1024
   10920:	94bfffc4 	addi	r18,r18,-1
   10924:	24a4703a 	and	r18,r4,r18
   10928:	9009883a 	mov	r4,r18
   1092c:	00112a00 	call	112a0 <__clzsi2>
   10930:	10bffec4 	addi	r2,r2,-5
   10934:	90a4983a 	sll	r18,r18,r2
   10938:	14005416 	blt	r2,r16,10a8c <__addsf3+0x278>
   1093c:	1405c83a 	sub	r2,r2,r16
   10940:	11000044 	addi	r4,r2,1
   10944:	00800804 	movi	r2,32
   10948:	1105c83a 	sub	r2,r2,r4
   1094c:	9084983a 	sll	r2,r18,r2
   10950:	9124d83a 	srl	r18,r18,r4
   10954:	0021883a 	mov	r16,zero
   10958:	1008c03a 	cmpne	r4,r2,zero
   1095c:	9108b03a 	or	r4,r18,r4
   10960:	003fc306 	br	10870 <__alt_data_end+0xffff0870>
   10964:	1000db26 	beq	r2,zero,10cd4 <__addsf3+0x4c0>
   10968:	1009883a 	mov	r4,r2
   1096c:	208001cc 	andi	r2,r4,7
   10970:	103fc11e 	bne	r2,zero,10878 <__alt_data_end+0xffff0878>
   10974:	2006d0fa 	srli	r3,r4,3
   10978:	01003fc4 	movi	r4,255
   1097c:	8805883a 	mov	r2,r17
   10980:	8100241e 	bne	r16,r4,10a14 <__addsf3+0x200>
   10984:	18006e26 	beq	r3,zero,10b40 <__addsf3+0x32c>
   10988:	19001034 	orhi	r4,r3,64
   1098c:	00c02034 	movhi	r3,128
   10990:	18ffffc4 	addi	r3,r3,-1
   10994:	043fffc4 	movi	r16,-1
   10998:	20c8703a 	and	r4,r4,r3
   1099c:	003fc206 	br	108a8 <__alt_data_end+0xffff08a8>
   109a0:	8187c83a 	sub	r3,r16,r6
   109a4:	00c03e0e 	bge	zero,r3,10aa0 <__addsf3+0x28c>
   109a8:	30002326 	beq	r6,zero,10a38 <__addsf3+0x224>
   109ac:	01803fc4 	movi	r6,255
   109b0:	81bfaf26 	beq	r16,r6,10870 <__alt_data_end+0xffff0870>
   109b4:	29410034 	orhi	r5,r5,1024
   109b8:	018006c4 	movi	r6,27
   109bc:	30c07416 	blt	r6,r3,10b90 <__addsf3+0x37c>
   109c0:	01800804 	movi	r6,32
   109c4:	30cdc83a 	sub	r6,r6,r3
   109c8:	298c983a 	sll	r6,r5,r6
   109cc:	28cad83a 	srl	r5,r5,r3
   109d0:	3006c03a 	cmpne	r3,r6,zero
   109d4:	28cab03a 	or	r5,r5,r3
   109d8:	2149883a 	add	r4,r4,r5
   109dc:	20c1002c 	andhi	r3,r4,1024
   109e0:	183fe226 	beq	r3,zero,1096c <__alt_data_end+0xffff096c>
   109e4:	84000044 	addi	r16,r16,1
   109e8:	00c03fc4 	movi	r3,255
   109ec:	80c05426 	beq	r16,r3,10b40 <__addsf3+0x32c>
   109f0:	00bf0034 	movhi	r2,64512
   109f4:	10bfffc4 	addi	r2,r2,-1
   109f8:	20c0004c 	andi	r3,r4,1
   109fc:	2088703a 	and	r4,r4,r2
   10a00:	2008d07a 	srli	r4,r4,1
   10a04:	20c8b03a 	or	r4,r4,r3
   10a08:	003f9906 	br	10870 <__alt_data_end+0xffff0870>
   10a0c:	0007883a 	mov	r3,zero
   10a10:	0005883a 	mov	r2,zero
   10a14:	01002034 	movhi	r4,128
   10a18:	213fffc4 	addi	r4,r4,-1
   10a1c:	1908703a 	and	r4,r3,r4
   10a20:	003fa106 	br	108a8 <__alt_data_end+0xffff08a8>
   10a24:	10bfffc4 	addi	r2,r2,-1
   10a28:	103fb926 	beq	r2,zero,10910 <__alt_data_end+0xffff0910>
   10a2c:	00c03fc4 	movi	r3,255
   10a30:	80ffaf1e 	bne	r16,r3,108f0 <__alt_data_end+0xffff08f0>
   10a34:	003f8e06 	br	10870 <__alt_data_end+0xffff0870>
   10a38:	283f8d26 	beq	r5,zero,10870 <__alt_data_end+0xffff0870>
   10a3c:	18ffffc4 	addi	r3,r3,-1
   10a40:	183fe526 	beq	r3,zero,109d8 <__alt_data_end+0xffff09d8>
   10a44:	01803fc4 	movi	r6,255
   10a48:	81bfdb1e 	bne	r16,r6,109b8 <__alt_data_end+0xffff09b8>
   10a4c:	003f8806 	br	10870 <__alt_data_end+0xffff0870>
   10a50:	1000201e 	bne	r2,zero,10ad4 <__addsf3+0x2c0>
   10a54:	80800044 	addi	r2,r16,1
   10a58:	10803fcc 	andi	r2,r2,255
   10a5c:	01800044 	movi	r6,1
   10a60:	3080450e 	bge	r6,r2,10b78 <__addsf3+0x364>
   10a64:	2165c83a 	sub	r18,r4,r5
   10a68:	90c1002c 	andhi	r3,r18,1024
   10a6c:	18002b26 	beq	r3,zero,10b1c <__addsf3+0x308>
   10a70:	2925c83a 	sub	r18,r5,r4
   10a74:	3823883a 	mov	r17,r7
   10a78:	003fab06 	br	10928 <__alt_data_end+0xffff0928>
   10a7c:	8805883a 	mov	r2,r17
   10a80:	043fffc4 	movi	r16,-1
   10a84:	0009883a 	mov	r4,zero
   10a88:	003f8706 	br	108a8 <__alt_data_end+0xffff08a8>
   10a8c:	013f0034 	movhi	r4,64512
   10a90:	213fffc4 	addi	r4,r4,-1
   10a94:	80a1c83a 	sub	r16,r16,r2
   10a98:	9108703a 	and	r4,r18,r4
   10a9c:	003f7406 	br	10870 <__alt_data_end+0xffff0870>
   10aa0:	1800411e 	bne	r3,zero,10ba8 <__addsf3+0x394>
   10aa4:	80c00044 	addi	r3,r16,1
   10aa8:	19c03fcc 	andi	r7,r3,255
   10aac:	01800044 	movi	r6,1
   10ab0:	31c0260e 	bge	r6,r7,10b4c <__addsf3+0x338>
   10ab4:	01803fc4 	movi	r6,255
   10ab8:	19802126 	beq	r3,r6,10b40 <__addsf3+0x32c>
   10abc:	2149883a 	add	r4,r4,r5
   10ac0:	2008d07a 	srli	r4,r4,1
   10ac4:	1821883a 	mov	r16,r3
   10ac8:	003f6906 	br	10870 <__alt_data_end+0xffff0870>
   10acc:	01400044 	movi	r5,1
   10ad0:	003f8f06 	br	10910 <__alt_data_end+0xffff0910>
   10ad4:	8000151e 	bne	r16,zero,10b2c <__addsf3+0x318>
   10ad8:	20002f26 	beq	r4,zero,10b98 <__addsf3+0x384>
   10adc:	0084303a 	nor	r2,zero,r2
   10ae0:	10000a26 	beq	r2,zero,10b0c <__addsf3+0x2f8>
   10ae4:	00c03fc4 	movi	r3,255
   10ae8:	30c02b26 	beq	r6,r3,10b98 <__addsf3+0x384>
   10aec:	00c006c4 	movi	r3,27
   10af0:	18806d16 	blt	r3,r2,10ca8 <__addsf3+0x494>
   10af4:	00c00804 	movi	r3,32
   10af8:	1887c83a 	sub	r3,r3,r2
   10afc:	20c6983a 	sll	r3,r4,r3
   10b00:	2084d83a 	srl	r2,r4,r2
   10b04:	1808c03a 	cmpne	r4,r3,zero
   10b08:	1108b03a 	or	r4,r2,r4
   10b0c:	2909c83a 	sub	r4,r5,r4
   10b10:	3021883a 	mov	r16,r6
   10b14:	3823883a 	mov	r17,r7
   10b18:	003f7e06 	br	10914 <__alt_data_end+0xffff0914>
   10b1c:	903f821e 	bne	r18,zero,10928 <__alt_data_end+0xffff0928>
   10b20:	0005883a 	mov	r2,zero
   10b24:	0021883a 	mov	r16,zero
   10b28:	003fba06 	br	10a14 <__alt_data_end+0xffff0a14>
   10b2c:	00c03fc4 	movi	r3,255
   10b30:	30c01926 	beq	r6,r3,10b98 <__addsf3+0x384>
   10b34:	0085c83a 	sub	r2,zero,r2
   10b38:	21010034 	orhi	r4,r4,1024
   10b3c:	003feb06 	br	10aec <__alt_data_end+0xffff0aec>
   10b40:	043fffc4 	movi	r16,-1
   10b44:	0009883a 	mov	r4,zero
   10b48:	003f5706 	br	108a8 <__alt_data_end+0xffff08a8>
   10b4c:	80004a1e 	bne	r16,zero,10c78 <__addsf3+0x464>
   10b50:	20005926 	beq	r4,zero,10cb8 <__addsf3+0x4a4>
   10b54:	283f4626 	beq	r5,zero,10870 <__alt_data_end+0xffff0870>
   10b58:	2149883a 	add	r4,r4,r5
   10b5c:	2081002c 	andhi	r2,r4,1024
   10b60:	103f8226 	beq	r2,zero,1096c <__alt_data_end+0xffff096c>
   10b64:	00bf0034 	movhi	r2,64512
   10b68:	10bfffc4 	addi	r2,r2,-1
   10b6c:	3021883a 	mov	r16,r6
   10b70:	2088703a 	and	r4,r4,r2
   10b74:	003f3e06 	br	10870 <__alt_data_end+0xffff0870>
   10b78:	8000121e 	bne	r16,zero,10bc4 <__addsf3+0x3b0>
   10b7c:	2000261e 	bne	r4,zero,10c18 <__addsf3+0x404>
   10b80:	283fa226 	beq	r5,zero,10a0c <__alt_data_end+0xffff0a0c>
   10b84:	2809883a 	mov	r4,r5
   10b88:	3823883a 	mov	r17,r7
   10b8c:	003f3806 	br	10870 <__alt_data_end+0xffff0870>
   10b90:	01400044 	movi	r5,1
   10b94:	003f9006 	br	109d8 <__alt_data_end+0xffff09d8>
   10b98:	2809883a 	mov	r4,r5
   10b9c:	3021883a 	mov	r16,r6
   10ba0:	3823883a 	mov	r17,r7
   10ba4:	003f3206 	br	10870 <__alt_data_end+0xffff0870>
   10ba8:	80000c1e 	bne	r16,zero,10bdc <__addsf3+0x3c8>
   10bac:	20002f26 	beq	r4,zero,10c6c <__addsf3+0x458>
   10bb0:	00c6303a 	nor	r3,zero,r3
   10bb4:	18002b1e 	bne	r3,zero,10c64 <__addsf3+0x450>
   10bb8:	2149883a 	add	r4,r4,r5
   10bbc:	3021883a 	mov	r16,r6
   10bc0:	003f8606 	br	109dc <__alt_data_end+0xffff09dc>
   10bc4:	20001b1e 	bne	r4,zero,10c34 <__addsf3+0x420>
   10bc8:	28003926 	beq	r5,zero,10cb0 <__addsf3+0x49c>
   10bcc:	2809883a 	mov	r4,r5
   10bd0:	3823883a 	mov	r17,r7
   10bd4:	04003fc4 	movi	r16,255
   10bd8:	003f2506 	br	10870 <__alt_data_end+0xffff0870>
   10bdc:	01c03fc4 	movi	r7,255
   10be0:	31c02226 	beq	r6,r7,10c6c <__addsf3+0x458>
   10be4:	00c7c83a 	sub	r3,zero,r3
   10be8:	21010034 	orhi	r4,r4,1024
   10bec:	01c006c4 	movi	r7,27
   10bf0:	38c03616 	blt	r7,r3,10ccc <__addsf3+0x4b8>
   10bf4:	01c00804 	movi	r7,32
   10bf8:	38cfc83a 	sub	r7,r7,r3
   10bfc:	21ce983a 	sll	r7,r4,r7
   10c00:	20c6d83a 	srl	r3,r4,r3
   10c04:	3808c03a 	cmpne	r4,r7,zero
   10c08:	1906b03a 	or	r3,r3,r4
   10c0c:	1949883a 	add	r4,r3,r5
   10c10:	3021883a 	mov	r16,r6
   10c14:	003f7106 	br	109dc <__alt_data_end+0xffff09dc>
   10c18:	283f1526 	beq	r5,zero,10870 <__alt_data_end+0xffff0870>
   10c1c:	2145c83a 	sub	r2,r4,r5
   10c20:	10c1002c 	andhi	r3,r2,1024
   10c24:	183f4f26 	beq	r3,zero,10964 <__alt_data_end+0xffff0964>
   10c28:	2909c83a 	sub	r4,r5,r4
   10c2c:	3823883a 	mov	r17,r7
   10c30:	003f0f06 	br	10870 <__alt_data_end+0xffff0870>
   10c34:	28001a26 	beq	r5,zero,10ca0 <__addsf3+0x48c>
   10c38:	2008d0fa 	srli	r4,r4,3
   10c3c:	2080102c 	andhi	r2,r4,64
   10c40:	10000526 	beq	r2,zero,10c58 <__addsf3+0x444>
   10c44:	280ad0fa 	srli	r5,r5,3
   10c48:	2880102c 	andhi	r2,r5,64
   10c4c:	1000021e 	bne	r2,zero,10c58 <__addsf3+0x444>
   10c50:	2809883a 	mov	r4,r5
   10c54:	3823883a 	mov	r17,r7
   10c58:	200890fa 	slli	r4,r4,3
   10c5c:	04003fc4 	movi	r16,255
   10c60:	003f0306 	br	10870 <__alt_data_end+0xffff0870>
   10c64:	01c03fc4 	movi	r7,255
   10c68:	31ffe01e 	bne	r6,r7,10bec <__alt_data_end+0xffff0bec>
   10c6c:	2809883a 	mov	r4,r5
   10c70:	3021883a 	mov	r16,r6
   10c74:	003efe06 	br	10870 <__alt_data_end+0xffff0870>
   10c78:	20001126 	beq	r4,zero,10cc0 <__addsf3+0x4ac>
   10c7c:	28000826 	beq	r5,zero,10ca0 <__addsf3+0x48c>
   10c80:	2008d0fa 	srli	r4,r4,3
   10c84:	2080102c 	andhi	r2,r4,64
   10c88:	103ff326 	beq	r2,zero,10c58 <__alt_data_end+0xffff0c58>
   10c8c:	280ad0fa 	srli	r5,r5,3
   10c90:	2880102c 	andhi	r2,r5,64
   10c94:	103ff01e 	bne	r2,zero,10c58 <__alt_data_end+0xffff0c58>
   10c98:	2809883a 	mov	r4,r5
   10c9c:	003fee06 	br	10c58 <__alt_data_end+0xffff0c58>
   10ca0:	04003fc4 	movi	r16,255
   10ca4:	003ef206 	br	10870 <__alt_data_end+0xffff0870>
   10ca8:	01000044 	movi	r4,1
   10cac:	003f9706 	br	10b0c <__alt_data_end+0xffff0b0c>
   10cb0:	0005883a 	mov	r2,zero
   10cb4:	003f3406 	br	10988 <__alt_data_end+0xffff0988>
   10cb8:	2809883a 	mov	r4,r5
   10cbc:	003eec06 	br	10870 <__alt_data_end+0xffff0870>
   10cc0:	2809883a 	mov	r4,r5
   10cc4:	04003fc4 	movi	r16,255
   10cc8:	003ee906 	br	10870 <__alt_data_end+0xffff0870>
   10ccc:	00c00044 	movi	r3,1
   10cd0:	003fce06 	br	10c0c <__alt_data_end+0xffff0c0c>
   10cd4:	0005883a 	mov	r2,zero
   10cd8:	003f4e06 	br	10a14 <__alt_data_end+0xffff0a14>

00010cdc <__mulsf3>:
   10cdc:	defff504 	addi	sp,sp,-44
   10ce0:	dc000115 	stw	r16,4(sp)
   10ce4:	2020d5fa 	srli	r16,r4,23
   10ce8:	dd400615 	stw	r21,24(sp)
   10cec:	202ad7fa 	srli	r21,r4,31
   10cf0:	dc800315 	stw	r18,12(sp)
   10cf4:	04802034 	movhi	r18,128
   10cf8:	df000915 	stw	fp,36(sp)
   10cfc:	dd000515 	stw	r20,20(sp)
   10d00:	94bfffc4 	addi	r18,r18,-1
   10d04:	dfc00a15 	stw	ra,40(sp)
   10d08:	ddc00815 	stw	r23,32(sp)
   10d0c:	dd800715 	stw	r22,28(sp)
   10d10:	dcc00415 	stw	r19,16(sp)
   10d14:	dc400215 	stw	r17,8(sp)
   10d18:	84003fcc 	andi	r16,r16,255
   10d1c:	9124703a 	and	r18,r18,r4
   10d20:	a829883a 	mov	r20,r21
   10d24:	af003fcc 	andi	fp,r21,255
   10d28:	80005426 	beq	r16,zero,10e7c <__mulsf3+0x1a0>
   10d2c:	00803fc4 	movi	r2,255
   10d30:	80802f26 	beq	r16,r2,10df0 <__mulsf3+0x114>
   10d34:	91002034 	orhi	r4,r18,128
   10d38:	202490fa 	slli	r18,r4,3
   10d3c:	843fe044 	addi	r16,r16,-127
   10d40:	0023883a 	mov	r17,zero
   10d44:	002f883a 	mov	r23,zero
   10d48:	2804d5fa 	srli	r2,r5,23
   10d4c:	282cd7fa 	srli	r22,r5,31
   10d50:	01002034 	movhi	r4,128
   10d54:	213fffc4 	addi	r4,r4,-1
   10d58:	10803fcc 	andi	r2,r2,255
   10d5c:	2166703a 	and	r19,r4,r5
   10d60:	b1803fcc 	andi	r6,r22,255
   10d64:	10004c26 	beq	r2,zero,10e98 <__mulsf3+0x1bc>
   10d68:	00c03fc4 	movi	r3,255
   10d6c:	10c04726 	beq	r2,r3,10e8c <__mulsf3+0x1b0>
   10d70:	99002034 	orhi	r4,r19,128
   10d74:	202690fa 	slli	r19,r4,3
   10d78:	10bfe044 	addi	r2,r2,-127
   10d7c:	0007883a 	mov	r3,zero
   10d80:	80a1883a 	add	r16,r16,r2
   10d84:	010003c4 	movi	r4,15
   10d88:	1c44b03a 	or	r2,r3,r17
   10d8c:	b56af03a 	xor	r21,r22,r21
   10d90:	81c00044 	addi	r7,r16,1
   10d94:	20806b36 	bltu	r4,r2,10f44 <__mulsf3+0x268>
   10d98:	100490ba 	slli	r2,r2,2
   10d9c:	01000074 	movhi	r4,1
   10da0:	21036c04 	addi	r4,r4,3504
   10da4:	1105883a 	add	r2,r2,r4
   10da8:	10800017 	ldw	r2,0(r2)
   10dac:	1000683a 	jmp	r2
   10db0:	00010f44 	movi	zero,1085
   10db4:	00010e04 	movi	zero,1080
   10db8:	00010e04 	movi	zero,1080
   10dbc:	00010e00 	call	10e0 <__alt_mem_onchip_memory-0xef20>
   10dc0:	00010f28 	cmpgeui	zero,zero,1084
   10dc4:	00010f28 	cmpgeui	zero,zero,1084
   10dc8:	00010f14 	movui	zero,1084
   10dcc:	00010e00 	call	10e0 <__alt_mem_onchip_memory-0xef20>
   10dd0:	00010f28 	cmpgeui	zero,zero,1084
   10dd4:	00010f14 	movui	zero,1084
   10dd8:	00010f28 	cmpgeui	zero,zero,1084
   10ddc:	00010e00 	call	10e0 <__alt_mem_onchip_memory-0xef20>
   10de0:	00010f34 	movhi	zero,1084
   10de4:	00010f34 	movhi	zero,1084
   10de8:	00010f34 	movhi	zero,1084
   10dec:	00011044 	movi	zero,1089
   10df0:	90003b1e 	bne	r18,zero,10ee0 <__mulsf3+0x204>
   10df4:	04400204 	movi	r17,8
   10df8:	05c00084 	movi	r23,2
   10dfc:	003fd206 	br	10d48 <__alt_data_end+0xffff0d48>
   10e00:	302b883a 	mov	r21,r6
   10e04:	00800084 	movi	r2,2
   10e08:	18802626 	beq	r3,r2,10ea4 <__mulsf3+0x1c8>
   10e0c:	008000c4 	movi	r2,3
   10e10:	1880b826 	beq	r3,r2,110f4 <__mulsf3+0x418>
   10e14:	00800044 	movi	r2,1
   10e18:	1880af1e 	bne	r3,r2,110d8 <__mulsf3+0x3fc>
   10e1c:	a829883a 	mov	r20,r21
   10e20:	0007883a 	mov	r3,zero
   10e24:	0009883a 	mov	r4,zero
   10e28:	18803fcc 	andi	r2,r3,255
   10e2c:	100695fa 	slli	r3,r2,23
   10e30:	a0803fcc 	andi	r2,r20,255
   10e34:	100a97fa 	slli	r5,r2,31
   10e38:	00802034 	movhi	r2,128
   10e3c:	10bfffc4 	addi	r2,r2,-1
   10e40:	2084703a 	and	r2,r4,r2
   10e44:	10c4b03a 	or	r2,r2,r3
   10e48:	1144b03a 	or	r2,r2,r5
   10e4c:	dfc00a17 	ldw	ra,40(sp)
   10e50:	df000917 	ldw	fp,36(sp)
   10e54:	ddc00817 	ldw	r23,32(sp)
   10e58:	dd800717 	ldw	r22,28(sp)
   10e5c:	dd400617 	ldw	r21,24(sp)
   10e60:	dd000517 	ldw	r20,20(sp)
   10e64:	dcc00417 	ldw	r19,16(sp)
   10e68:	dc800317 	ldw	r18,12(sp)
   10e6c:	dc400217 	ldw	r17,8(sp)
   10e70:	dc000117 	ldw	r16,4(sp)
   10e74:	dec00b04 	addi	sp,sp,44
   10e78:	f800283a 	ret
   10e7c:	90000d1e 	bne	r18,zero,10eb4 <__mulsf3+0x1d8>
   10e80:	04400104 	movi	r17,4
   10e84:	05c00044 	movi	r23,1
   10e88:	003faf06 	br	10d48 <__alt_data_end+0xffff0d48>
   10e8c:	9806c03a 	cmpne	r3,r19,zero
   10e90:	18c00084 	addi	r3,r3,2
   10e94:	003fba06 	br	10d80 <__alt_data_end+0xffff0d80>
   10e98:	9800141e 	bne	r19,zero,10eec <__mulsf3+0x210>
   10e9c:	00c00044 	movi	r3,1
   10ea0:	003fb706 	br	10d80 <__alt_data_end+0xffff0d80>
   10ea4:	a829883a 	mov	r20,r21
   10ea8:	00ffffc4 	movi	r3,-1
   10eac:	0009883a 	mov	r4,zero
   10eb0:	003fdd06 	br	10e28 <__alt_data_end+0xffff0e28>
   10eb4:	9009883a 	mov	r4,r18
   10eb8:	d9400015 	stw	r5,0(sp)
   10ebc:	00112a00 	call	112a0 <__clzsi2>
   10ec0:	10fffec4 	addi	r3,r2,-5
   10ec4:	10801d84 	addi	r2,r2,118
   10ec8:	90e4983a 	sll	r18,r18,r3
   10ecc:	00a1c83a 	sub	r16,zero,r2
   10ed0:	0023883a 	mov	r17,zero
   10ed4:	002f883a 	mov	r23,zero
   10ed8:	d9400017 	ldw	r5,0(sp)
   10edc:	003f9a06 	br	10d48 <__alt_data_end+0xffff0d48>
   10ee0:	04400304 	movi	r17,12
   10ee4:	05c000c4 	movi	r23,3
   10ee8:	003f9706 	br	10d48 <__alt_data_end+0xffff0d48>
   10eec:	9809883a 	mov	r4,r19
   10ef0:	d9800015 	stw	r6,0(sp)
   10ef4:	00112a00 	call	112a0 <__clzsi2>
   10ef8:	10fffec4 	addi	r3,r2,-5
   10efc:	10801d84 	addi	r2,r2,118
   10f00:	98e6983a 	sll	r19,r19,r3
   10f04:	0085c83a 	sub	r2,zero,r2
   10f08:	0007883a 	mov	r3,zero
   10f0c:	d9800017 	ldw	r6,0(sp)
   10f10:	003f9b06 	br	10d80 <__alt_data_end+0xffff0d80>
   10f14:	01002034 	movhi	r4,128
   10f18:	0029883a 	mov	r20,zero
   10f1c:	213fffc4 	addi	r4,r4,-1
   10f20:	00ffffc4 	movi	r3,-1
   10f24:	003fc006 	br	10e28 <__alt_data_end+0xffff0e28>
   10f28:	9027883a 	mov	r19,r18
   10f2c:	b807883a 	mov	r3,r23
   10f30:	003fb406 	br	10e04 <__alt_data_end+0xffff0e04>
   10f34:	9027883a 	mov	r19,r18
   10f38:	e02b883a 	mov	r21,fp
   10f3c:	b807883a 	mov	r3,r23
   10f40:	003fb006 	br	10e04 <__alt_data_end+0xffff0e04>
   10f44:	9028d43a 	srli	r20,r18,16
   10f48:	982cd43a 	srli	r22,r19,16
   10f4c:	94bfffcc 	andi	r18,r18,65535
   10f50:	9cffffcc 	andi	r19,r19,65535
   10f54:	980b883a 	mov	r5,r19
   10f58:	9009883a 	mov	r4,r18
   10f5c:	d9c00015 	stw	r7,0(sp)
   10f60:	00113040 	call	11304 <__mulsi3>
   10f64:	a00b883a 	mov	r5,r20
   10f68:	9809883a 	mov	r4,r19
   10f6c:	1023883a 	mov	r17,r2
   10f70:	00113040 	call	11304 <__mulsi3>
   10f74:	a009883a 	mov	r4,r20
   10f78:	b00b883a 	mov	r5,r22
   10f7c:	1027883a 	mov	r19,r2
   10f80:	00113040 	call	11304 <__mulsi3>
   10f84:	b00b883a 	mov	r5,r22
   10f88:	9009883a 	mov	r4,r18
   10f8c:	1029883a 	mov	r20,r2
   10f90:	00113040 	call	11304 <__mulsi3>
   10f94:	8806d43a 	srli	r3,r17,16
   10f98:	14c5883a 	add	r2,r2,r19
   10f9c:	d9c00017 	ldw	r7,0(sp)
   10fa0:	1885883a 	add	r2,r3,r2
   10fa4:	14c0022e 	bgeu	r2,r19,10fb0 <__mulsf3+0x2d4>
   10fa8:	00c00074 	movhi	r3,1
   10fac:	a0e9883a 	add	r20,r20,r3
   10fb0:	1026943a 	slli	r19,r2,16
   10fb4:	8c7fffcc 	andi	r17,r17,65535
   10fb8:	1004d43a 	srli	r2,r2,16
   10fbc:	9c63883a 	add	r17,r19,r17
   10fc0:	882691ba 	slli	r19,r17,6
   10fc4:	1505883a 	add	r2,r2,r20
   10fc8:	8822d6ba 	srli	r17,r17,26
   10fcc:	100891ba 	slli	r4,r2,6
   10fd0:	9826c03a 	cmpne	r19,r19,zero
   10fd4:	9c62b03a 	or	r17,r19,r17
   10fd8:	8926b03a 	or	r19,r17,r4
   10fdc:	9882002c 	andhi	r2,r19,2048
   10fe0:	10000426 	beq	r2,zero,10ff4 <__mulsf3+0x318>
   10fe4:	9804d07a 	srli	r2,r19,1
   10fe8:	9900004c 	andi	r4,r19,1
   10fec:	3821883a 	mov	r16,r7
   10ff0:	1126b03a 	or	r19,r2,r4
   10ff4:	80c01fc4 	addi	r3,r16,127
   10ff8:	00c0210e 	bge	zero,r3,11080 <__mulsf3+0x3a4>
   10ffc:	988001cc 	andi	r2,r19,7
   11000:	10000426 	beq	r2,zero,11014 <__mulsf3+0x338>
   11004:	988003cc 	andi	r2,r19,15
   11008:	01000104 	movi	r4,4
   1100c:	11000126 	beq	r2,r4,11014 <__mulsf3+0x338>
   11010:	9927883a 	add	r19,r19,r4
   11014:	9882002c 	andhi	r2,r19,2048
   11018:	10000426 	beq	r2,zero,1102c <__mulsf3+0x350>
   1101c:	00be0034 	movhi	r2,63488
   11020:	10bfffc4 	addi	r2,r2,-1
   11024:	80c02004 	addi	r3,r16,128
   11028:	98a6703a 	and	r19,r19,r2
   1102c:	00803f84 	movi	r2,254
   11030:	10ff9c16 	blt	r2,r3,10ea4 <__alt_data_end+0xffff0ea4>
   11034:	980891ba 	slli	r4,r19,6
   11038:	a829883a 	mov	r20,r21
   1103c:	2008d27a 	srli	r4,r4,9
   11040:	003f7906 	br	10e28 <__alt_data_end+0xffff0e28>
   11044:	9080102c 	andhi	r2,r18,64
   11048:	10000826 	beq	r2,zero,1106c <__mulsf3+0x390>
   1104c:	9880102c 	andhi	r2,r19,64
   11050:	1000061e 	bne	r2,zero,1106c <__mulsf3+0x390>
   11054:	00802034 	movhi	r2,128
   11058:	99001034 	orhi	r4,r19,64
   1105c:	10bfffc4 	addi	r2,r2,-1
   11060:	b029883a 	mov	r20,r22
   11064:	2088703a 	and	r4,r4,r2
   11068:	003fad06 	br	10f20 <__alt_data_end+0xffff0f20>
   1106c:	00802034 	movhi	r2,128
   11070:	91001034 	orhi	r4,r18,64
   11074:	10bfffc4 	addi	r2,r2,-1
   11078:	2088703a 	and	r4,r4,r2
   1107c:	003fa806 	br	10f20 <__alt_data_end+0xffff0f20>
   11080:	00800044 	movi	r2,1
   11084:	10c7c83a 	sub	r3,r2,r3
   11088:	008006c4 	movi	r2,27
   1108c:	10ff6316 	blt	r2,r3,10e1c <__alt_data_end+0xffff0e1c>
   11090:	00800804 	movi	r2,32
   11094:	10c5c83a 	sub	r2,r2,r3
   11098:	9884983a 	sll	r2,r19,r2
   1109c:	98c6d83a 	srl	r3,r19,r3
   110a0:	1004c03a 	cmpne	r2,r2,zero
   110a4:	1884b03a 	or	r2,r3,r2
   110a8:	10c001cc 	andi	r3,r2,7
   110ac:	18000426 	beq	r3,zero,110c0 <__mulsf3+0x3e4>
   110b0:	10c003cc 	andi	r3,r2,15
   110b4:	01000104 	movi	r4,4
   110b8:	19000126 	beq	r3,r4,110c0 <__mulsf3+0x3e4>
   110bc:	1105883a 	add	r2,r2,r4
   110c0:	10c1002c 	andhi	r3,r2,1024
   110c4:	18000626 	beq	r3,zero,110e0 <__mulsf3+0x404>
   110c8:	a829883a 	mov	r20,r21
   110cc:	00c00044 	movi	r3,1
   110d0:	0009883a 	mov	r4,zero
   110d4:	003f5406 	br	10e28 <__alt_data_end+0xffff0e28>
   110d8:	3821883a 	mov	r16,r7
   110dc:	003fc506 	br	10ff4 <__alt_data_end+0xffff0ff4>
   110e0:	100491ba 	slli	r2,r2,6
   110e4:	a829883a 	mov	r20,r21
   110e8:	0007883a 	mov	r3,zero
   110ec:	1008d27a 	srli	r4,r2,9
   110f0:	003f4d06 	br	10e28 <__alt_data_end+0xffff0e28>
   110f4:	00802034 	movhi	r2,128
   110f8:	99001034 	orhi	r4,r19,64
   110fc:	10bfffc4 	addi	r2,r2,-1
   11100:	a829883a 	mov	r20,r21
   11104:	2088703a 	and	r4,r4,r2
   11108:	003f8506 	br	10f20 <__alt_data_end+0xffff0f20>

0001110c <__fixsfsi>:
   1110c:	200ad5fa 	srli	r5,r4,23
   11110:	00c02034 	movhi	r3,128
   11114:	18ffffc4 	addi	r3,r3,-1
   11118:	29403fcc 	andi	r5,r5,255
   1111c:	00801f84 	movi	r2,126
   11120:	1906703a 	and	r3,r3,r4
   11124:	2008d7fa 	srli	r4,r4,31
   11128:	11400e0e 	bge	r2,r5,11164 <__fixsfsi+0x58>
   1112c:	00802744 	movi	r2,157
   11130:	11400816 	blt	r2,r5,11154 <__fixsfsi+0x48>
   11134:	00802544 	movi	r2,149
   11138:	18c02034 	orhi	r3,r3,128
   1113c:	11400b0e 	bge	r2,r5,1116c <__fixsfsi+0x60>
   11140:	28bfda84 	addi	r2,r5,-150
   11144:	1884983a 	sll	r2,r3,r2
   11148:	20000726 	beq	r4,zero,11168 <__fixsfsi+0x5c>
   1114c:	0085c83a 	sub	r2,zero,r2
   11150:	f800283a 	ret
   11154:	00a00034 	movhi	r2,32768
   11158:	10bfffc4 	addi	r2,r2,-1
   1115c:	2085883a 	add	r2,r4,r2
   11160:	f800283a 	ret
   11164:	0005883a 	mov	r2,zero
   11168:	f800283a 	ret
   1116c:	00802584 	movi	r2,150
   11170:	1145c83a 	sub	r2,r2,r5
   11174:	1884d83a 	srl	r2,r3,r2
   11178:	003ff306 	br	11148 <__alt_data_end+0xffff1148>

0001117c <__floatsisf>:
   1117c:	defffd04 	addi	sp,sp,-12
   11180:	dfc00215 	stw	ra,8(sp)
   11184:	dc400115 	stw	r17,4(sp)
   11188:	dc000015 	stw	r16,0(sp)
   1118c:	20003526 	beq	r4,zero,11264 <__floatsisf+0xe8>
   11190:	2021883a 	mov	r16,r4
   11194:	2022d7fa 	srli	r17,r4,31
   11198:	20003616 	blt	r4,zero,11274 <__floatsisf+0xf8>
   1119c:	8009883a 	mov	r4,r16
   111a0:	00112a00 	call	112a0 <__clzsi2>
   111a4:	00c02784 	movi	r3,158
   111a8:	1887c83a 	sub	r3,r3,r2
   111ac:	01002584 	movi	r4,150
   111b0:	20c01416 	blt	r4,r3,11204 <__floatsisf+0x88>
   111b4:	20c9c83a 	sub	r4,r4,r3
   111b8:	8120983a 	sll	r16,r16,r4
   111bc:	00802034 	movhi	r2,128
   111c0:	10bfffc4 	addi	r2,r2,-1
   111c4:	8809883a 	mov	r4,r17
   111c8:	80a0703a 	and	r16,r16,r2
   111cc:	18803fcc 	andi	r2,r3,255
   111d0:	100695fa 	slli	r3,r2,23
   111d4:	20803fcc 	andi	r2,r4,255
   111d8:	100897fa 	slli	r4,r2,31
   111dc:	00802034 	movhi	r2,128
   111e0:	10bfffc4 	addi	r2,r2,-1
   111e4:	8084703a 	and	r2,r16,r2
   111e8:	10c4b03a 	or	r2,r2,r3
   111ec:	1104b03a 	or	r2,r2,r4
   111f0:	dfc00217 	ldw	ra,8(sp)
   111f4:	dc400117 	ldw	r17,4(sp)
   111f8:	dc000017 	ldw	r16,0(sp)
   111fc:	dec00304 	addi	sp,sp,12
   11200:	f800283a 	ret
   11204:	01002644 	movi	r4,153
   11208:	20c01c16 	blt	r4,r3,1127c <__floatsisf+0x100>
   1120c:	20c9c83a 	sub	r4,r4,r3
   11210:	8120983a 	sll	r16,r16,r4
   11214:	013f0034 	movhi	r4,64512
   11218:	213fffc4 	addi	r4,r4,-1
   1121c:	814001cc 	andi	r5,r16,7
   11220:	8108703a 	and	r4,r16,r4
   11224:	28000426 	beq	r5,zero,11238 <__floatsisf+0xbc>
   11228:	840003cc 	andi	r16,r16,15
   1122c:	01400104 	movi	r5,4
   11230:	81400126 	beq	r16,r5,11238 <__floatsisf+0xbc>
   11234:	2149883a 	add	r4,r4,r5
   11238:	2141002c 	andhi	r5,r4,1024
   1123c:	28000526 	beq	r5,zero,11254 <__floatsisf+0xd8>
   11240:	00c027c4 	movi	r3,159
   11244:	1887c83a 	sub	r3,r3,r2
   11248:	00bf0034 	movhi	r2,64512
   1124c:	10bfffc4 	addi	r2,r2,-1
   11250:	2088703a 	and	r4,r4,r2
   11254:	202091ba 	slli	r16,r4,6
   11258:	8809883a 	mov	r4,r17
   1125c:	8020d27a 	srli	r16,r16,9
   11260:	003fda06 	br	111cc <__alt_data_end+0xffff11cc>
   11264:	0009883a 	mov	r4,zero
   11268:	0007883a 	mov	r3,zero
   1126c:	0021883a 	mov	r16,zero
   11270:	003fd606 	br	111cc <__alt_data_end+0xffff11cc>
   11274:	0121c83a 	sub	r16,zero,r4
   11278:	003fc806 	br	1119c <__alt_data_end+0xffff119c>
   1127c:	01002e44 	movi	r4,185
   11280:	20c9c83a 	sub	r4,r4,r3
   11284:	01400144 	movi	r5,5
   11288:	8108983a 	sll	r4,r16,r4
   1128c:	288bc83a 	sub	r5,r5,r2
   11290:	8160d83a 	srl	r16,r16,r5
   11294:	2008c03a 	cmpne	r4,r4,zero
   11298:	8120b03a 	or	r16,r16,r4
   1129c:	003fdd06 	br	11214 <__alt_data_end+0xffff1214>

000112a0 <__clzsi2>:
   112a0:	00bfffd4 	movui	r2,65535
   112a4:	11000536 	bltu	r2,r4,112bc <__clzsi2+0x1c>
   112a8:	00803fc4 	movi	r2,255
   112ac:	11000f36 	bltu	r2,r4,112ec <__clzsi2+0x4c>
   112b0:	00800804 	movi	r2,32
   112b4:	0007883a 	mov	r3,zero
   112b8:	00000506 	br	112d0 <__clzsi2+0x30>
   112bc:	00804034 	movhi	r2,256
   112c0:	10bfffc4 	addi	r2,r2,-1
   112c4:	11000c2e 	bgeu	r2,r4,112f8 <__clzsi2+0x58>
   112c8:	00800204 	movi	r2,8
   112cc:	00c00604 	movi	r3,24
   112d0:	20c8d83a 	srl	r4,r4,r3
   112d4:	00c00074 	movhi	r3,1
   112d8:	18d89904 	addi	r3,r3,25188
   112dc:	1909883a 	add	r4,r3,r4
   112e0:	20c00003 	ldbu	r3,0(r4)
   112e4:	10c5c83a 	sub	r2,r2,r3
   112e8:	f800283a 	ret
   112ec:	00800604 	movi	r2,24
   112f0:	00c00204 	movi	r3,8
   112f4:	003ff606 	br	112d0 <__alt_data_end+0xffff12d0>
   112f8:	00800404 	movi	r2,16
   112fc:	1007883a 	mov	r3,r2
   11300:	003ff306 	br	112d0 <__alt_data_end+0xffff12d0>

00011304 <__mulsi3>:
   11304:	0005883a 	mov	r2,zero
   11308:	20000726 	beq	r4,zero,11328 <__mulsi3+0x24>
   1130c:	20c0004c 	andi	r3,r4,1
   11310:	2008d07a 	srli	r4,r4,1
   11314:	18000126 	beq	r3,zero,1131c <__mulsi3+0x18>
   11318:	1145883a 	add	r2,r2,r5
   1131c:	294b883a 	add	r5,r5,r5
   11320:	203ffa1e 	bne	r4,zero,1130c <__alt_data_end+0xffff130c>
   11324:	f800283a 	ret
   11328:	f800283a 	ret

0001132c <memcpy>:
   1132c:	defffd04 	addi	sp,sp,-12
   11330:	dfc00215 	stw	ra,8(sp)
   11334:	dc400115 	stw	r17,4(sp)
   11338:	dc000015 	stw	r16,0(sp)
   1133c:	00c003c4 	movi	r3,15
   11340:	2005883a 	mov	r2,r4
   11344:	1980452e 	bgeu	r3,r6,1145c <memcpy+0x130>
   11348:	2906b03a 	or	r3,r5,r4
   1134c:	18c000cc 	andi	r3,r3,3
   11350:	1800441e 	bne	r3,zero,11464 <memcpy+0x138>
   11354:	347ffc04 	addi	r17,r6,-16
   11358:	8822d13a 	srli	r17,r17,4
   1135c:	28c00104 	addi	r3,r5,4
   11360:	23400104 	addi	r13,r4,4
   11364:	8820913a 	slli	r16,r17,4
   11368:	2b000204 	addi	r12,r5,8
   1136c:	22c00204 	addi	r11,r4,8
   11370:	84000504 	addi	r16,r16,20
   11374:	2a800304 	addi	r10,r5,12
   11378:	22400304 	addi	r9,r4,12
   1137c:	2c21883a 	add	r16,r5,r16
   11380:	2811883a 	mov	r8,r5
   11384:	200f883a 	mov	r7,r4
   11388:	41000017 	ldw	r4,0(r8)
   1138c:	1fc00017 	ldw	ra,0(r3)
   11390:	63c00017 	ldw	r15,0(r12)
   11394:	39000015 	stw	r4,0(r7)
   11398:	53800017 	ldw	r14,0(r10)
   1139c:	6fc00015 	stw	ra,0(r13)
   113a0:	5bc00015 	stw	r15,0(r11)
   113a4:	4b800015 	stw	r14,0(r9)
   113a8:	18c00404 	addi	r3,r3,16
   113ac:	39c00404 	addi	r7,r7,16
   113b0:	42000404 	addi	r8,r8,16
   113b4:	6b400404 	addi	r13,r13,16
   113b8:	63000404 	addi	r12,r12,16
   113bc:	5ac00404 	addi	r11,r11,16
   113c0:	52800404 	addi	r10,r10,16
   113c4:	4a400404 	addi	r9,r9,16
   113c8:	1c3fef1e 	bne	r3,r16,11388 <__alt_data_end+0xffff1388>
   113cc:	89c00044 	addi	r7,r17,1
   113d0:	380e913a 	slli	r7,r7,4
   113d4:	310003cc 	andi	r4,r6,15
   113d8:	02c000c4 	movi	r11,3
   113dc:	11c7883a 	add	r3,r2,r7
   113e0:	29cb883a 	add	r5,r5,r7
   113e4:	5900212e 	bgeu	r11,r4,1146c <memcpy+0x140>
   113e8:	1813883a 	mov	r9,r3
   113ec:	2811883a 	mov	r8,r5
   113f0:	200f883a 	mov	r7,r4
   113f4:	42800017 	ldw	r10,0(r8)
   113f8:	4a400104 	addi	r9,r9,4
   113fc:	39ffff04 	addi	r7,r7,-4
   11400:	4abfff15 	stw	r10,-4(r9)
   11404:	42000104 	addi	r8,r8,4
   11408:	59fffa36 	bltu	r11,r7,113f4 <__alt_data_end+0xffff13f4>
   1140c:	213fff04 	addi	r4,r4,-4
   11410:	2008d0ba 	srli	r4,r4,2
   11414:	318000cc 	andi	r6,r6,3
   11418:	21000044 	addi	r4,r4,1
   1141c:	2109883a 	add	r4,r4,r4
   11420:	2109883a 	add	r4,r4,r4
   11424:	1907883a 	add	r3,r3,r4
   11428:	290b883a 	add	r5,r5,r4
   1142c:	30000626 	beq	r6,zero,11448 <memcpy+0x11c>
   11430:	198d883a 	add	r6,r3,r6
   11434:	29c00003 	ldbu	r7,0(r5)
   11438:	18c00044 	addi	r3,r3,1
   1143c:	29400044 	addi	r5,r5,1
   11440:	19ffffc5 	stb	r7,-1(r3)
   11444:	19bffb1e 	bne	r3,r6,11434 <__alt_data_end+0xffff1434>
   11448:	dfc00217 	ldw	ra,8(sp)
   1144c:	dc400117 	ldw	r17,4(sp)
   11450:	dc000017 	ldw	r16,0(sp)
   11454:	dec00304 	addi	sp,sp,12
   11458:	f800283a 	ret
   1145c:	2007883a 	mov	r3,r4
   11460:	003ff206 	br	1142c <__alt_data_end+0xffff142c>
   11464:	2007883a 	mov	r3,r4
   11468:	003ff106 	br	11430 <__alt_data_end+0xffff1430>
   1146c:	200d883a 	mov	r6,r4
   11470:	003fee06 	br	1142c <__alt_data_end+0xffff142c>

00011474 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11474:	defff004 	addi	sp,sp,-64
   11478:	df000f15 	stw	fp,60(sp)
   1147c:	df000f04 	addi	fp,sp,60
   11480:	e13ffd15 	stw	r4,-12(fp)
   11484:	e17ffe15 	stw	r5,-8(fp)
   11488:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1148c:	00bffa84 	movi	r2,-22
   11490:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11494:	e0bffd17 	ldw	r2,-12(fp)
   11498:	10800828 	cmpgeui	r2,r2,32
   1149c:	1000501e 	bne	r2,zero,115e0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114a0:	0005303a 	rdctl	r2,status
   114a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114a8:	e0fff617 	ldw	r3,-40(fp)
   114ac:	00bfff84 	movi	r2,-2
   114b0:	1884703a 	and	r2,r3,r2
   114b4:	1001703a 	wrctl	status,r2
  
  return context;
   114b8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   114bc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   114c0:	008000b4 	movhi	r2,2
   114c4:	10a64f04 	addi	r2,r2,-26308
   114c8:	e0fffd17 	ldw	r3,-12(fp)
   114cc:	180690fa 	slli	r3,r3,3
   114d0:	10c5883a 	add	r2,r2,r3
   114d4:	e0ffff17 	ldw	r3,-4(fp)
   114d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   114dc:	008000b4 	movhi	r2,2
   114e0:	10a64f04 	addi	r2,r2,-26308
   114e4:	e0fffd17 	ldw	r3,-12(fp)
   114e8:	180690fa 	slli	r3,r3,3
   114ec:	10c5883a 	add	r2,r2,r3
   114f0:	10800104 	addi	r2,r2,4
   114f4:	e0fffe17 	ldw	r3,-8(fp)
   114f8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   114fc:	e0bfff17 	ldw	r2,-4(fp)
   11500:	10001926 	beq	r2,zero,11568 <alt_irq_register+0xf4>
   11504:	e0bffd17 	ldw	r2,-12(fp)
   11508:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1150c:	0005303a 	rdctl	r2,status
   11510:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11514:	e0fff717 	ldw	r3,-36(fp)
   11518:	00bfff84 	movi	r2,-2
   1151c:	1884703a 	and	r2,r3,r2
   11520:	1001703a 	wrctl	status,r2
  
  return context;
   11524:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11528:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1152c:	00c00044 	movi	r3,1
   11530:	e0bff217 	ldw	r2,-56(fp)
   11534:	1884983a 	sll	r2,r3,r2
   11538:	1007883a 	mov	r3,r2
   1153c:	d0a6b717 	ldw	r2,-25892(gp)
   11540:	1884b03a 	or	r2,r3,r2
   11544:	d0a6b715 	stw	r2,-25892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11548:	d0a6b717 	ldw	r2,-25892(gp)
   1154c:	100170fa 	wrctl	ienable,r2
   11550:	e0bff817 	ldw	r2,-32(fp)
   11554:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11558:	e0bff917 	ldw	r2,-28(fp)
   1155c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11560:	0005883a 	mov	r2,zero
   11564:	00001906 	br	115cc <alt_irq_register+0x158>
   11568:	e0bffd17 	ldw	r2,-12(fp)
   1156c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11570:	0005303a 	rdctl	r2,status
   11574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11578:	e0fffa17 	ldw	r3,-24(fp)
   1157c:	00bfff84 	movi	r2,-2
   11580:	1884703a 	and	r2,r3,r2
   11584:	1001703a 	wrctl	status,r2
  
  return context;
   11588:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1158c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   11590:	00c00044 	movi	r3,1
   11594:	e0bff417 	ldw	r2,-48(fp)
   11598:	1884983a 	sll	r2,r3,r2
   1159c:	0084303a 	nor	r2,zero,r2
   115a0:	1007883a 	mov	r3,r2
   115a4:	d0a6b717 	ldw	r2,-25892(gp)
   115a8:	1884703a 	and	r2,r3,r2
   115ac:	d0a6b715 	stw	r2,-25892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   115b0:	d0a6b717 	ldw	r2,-25892(gp)
   115b4:	100170fa 	wrctl	ienable,r2
   115b8:	e0bffb17 	ldw	r2,-20(fp)
   115bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c0:	e0bffc17 	ldw	r2,-16(fp)
   115c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   115c8:	0005883a 	mov	r2,zero
   115cc:	e0bff115 	stw	r2,-60(fp)
   115d0:	e0bff317 	ldw	r2,-52(fp)
   115d4:	e0bff515 	stw	r2,-44(fp)
   115d8:	e0bff517 	ldw	r2,-44(fp)
   115dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   115e0:	e0bff117 	ldw	r2,-60(fp)
}
   115e4:	e037883a 	mov	sp,fp
   115e8:	df000017 	ldw	fp,0(sp)
   115ec:	dec00104 	addi	sp,sp,4
   115f0:	f800283a 	ret

000115f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   115f4:	defffc04 	addi	sp,sp,-16
   115f8:	df000315 	stw	fp,12(sp)
   115fc:	df000304 	addi	fp,sp,12
   11600:	e13ffd15 	stw	r4,-12(fp)
   11604:	e17ffe15 	stw	r5,-8(fp)
   11608:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1160c:	e0fffe17 	ldw	r3,-8(fp)
   11610:	e0bffd17 	ldw	r2,-12(fp)
   11614:	18800c26 	beq	r3,r2,11648 <alt_load_section+0x54>
  {
    while( to != end )
   11618:	00000806 	br	1163c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1161c:	e0bffe17 	ldw	r2,-8(fp)
   11620:	10c00104 	addi	r3,r2,4
   11624:	e0fffe15 	stw	r3,-8(fp)
   11628:	e0fffd17 	ldw	r3,-12(fp)
   1162c:	19000104 	addi	r4,r3,4
   11630:	e13ffd15 	stw	r4,-12(fp)
   11634:	18c00017 	ldw	r3,0(r3)
   11638:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1163c:	e0fffe17 	ldw	r3,-8(fp)
   11640:	e0bfff17 	ldw	r2,-4(fp)
   11644:	18bff51e 	bne	r3,r2,1161c <__alt_data_end+0xffff161c>
    {
      *to++ = *from++;
    }
  }
}
   11648:	0001883a 	nop
   1164c:	e037883a 	mov	sp,fp
   11650:	df000017 	ldw	fp,0(sp)
   11654:	dec00104 	addi	sp,sp,4
   11658:	f800283a 	ret

0001165c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1165c:	defffe04 	addi	sp,sp,-8
   11660:	dfc00115 	stw	ra,4(sp)
   11664:	df000015 	stw	fp,0(sp)
   11668:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1166c:	01800074 	movhi	r6,1
   11670:	319f9104 	addi	r6,r6,32324
   11674:	01400074 	movhi	r5,1
   11678:	2958eb04 	addi	r5,r5,25516
   1167c:	01000074 	movhi	r4,1
   11680:	211f9104 	addi	r4,r4,32324
   11684:	00115f40 	call	115f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11688:	01800074 	movhi	r6,1
   1168c:	31808d04 	addi	r6,r6,564
   11690:	01400074 	movhi	r5,1
   11694:	29400804 	addi	r5,r5,32
   11698:	01000074 	movhi	r4,1
   1169c:	21000804 	addi	r4,r4,32
   116a0:	00115f40 	call	115f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   116a4:	01800074 	movhi	r6,1
   116a8:	3198eb04 	addi	r6,r6,25516
   116ac:	01400074 	movhi	r5,1
   116b0:	29585e04 	addi	r5,r5,24952
   116b4:	01000074 	movhi	r4,1
   116b8:	21185e04 	addi	r4,r4,24952
   116bc:	00115f40 	call	115f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   116c0:	0012be00 	call	12be0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   116c4:	0012e5c0 	call	12e5c <alt_icache_flush_all>
}
   116c8:	0001883a 	nop
   116cc:	e037883a 	mov	sp,fp
   116d0:	dfc00117 	ldw	ra,4(sp)
   116d4:	df000017 	ldw	fp,0(sp)
   116d8:	dec00204 	addi	sp,sp,8
   116dc:	f800283a 	ret

000116e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   116e0:	defffd04 	addi	sp,sp,-12
   116e4:	dfc00215 	stw	ra,8(sp)
   116e8:	df000115 	stw	fp,4(sp)
   116ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   116f0:	0009883a 	mov	r4,zero
   116f4:	00119f80 	call	119f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   116f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   116fc:	0011a300 	call	11a30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11700:	01800074 	movhi	r6,1
   11704:	3198d904 	addi	r6,r6,25444
   11708:	01400074 	movhi	r5,1
   1170c:	2958d904 	addi	r5,r5,25444
   11710:	01000074 	movhi	r4,1
   11714:	2118d904 	addi	r4,r4,25444
   11718:	0012f600 	call	12f60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1171c:	0012d0c0 	call	12d0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11720:	01000074 	movhi	r4,1
   11724:	210b5b04 	addi	r4,r4,11628
   11728:	00137140 	call	13714 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1172c:	d0a6b817 	ldw	r2,-25888(gp)
   11730:	d0e6b917 	ldw	r3,-25884(gp)
   11734:	d126ba17 	ldw	r4,-25880(gp)
   11738:	200d883a 	mov	r6,r4
   1173c:	180b883a 	mov	r5,r3
   11740:	1009883a 	mov	r4,r2
   11744:	001063c0 	call	1063c <main>
   11748:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1174c:	01000044 	movi	r4,1
   11750:	0012b080 	call	12b08 <close>
  exit (result);
   11754:	e13fff17 	ldw	r4,-4(fp)
   11758:	00137280 	call	13728 <exit>

0001175c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1175c:	defff204 	addi	sp,sp,-56
   11760:	dfc00a15 	stw	ra,40(sp)
   11764:	df000915 	stw	fp,36(sp)
   11768:	df000904 	addi	fp,sp,36
   1176c:	e13fff15 	stw	r4,-4(fp)
   11770:	e1400215 	stw	r5,8(fp)
   11774:	e1800315 	stw	r6,12(fp)
   11778:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   1177c:	e0800204 	addi	r2,fp,8
   11780:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   11784:	e0bfff17 	ldw	r2,-4(fp)
   11788:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   1178c:	00006f06 	br	1194c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11790:	e0bff807 	ldb	r2,-32(fp)
   11794:	10800960 	cmpeqi	r2,r2,37
   11798:	1000041e 	bne	r2,zero,117ac <alt_printf+0x50>
        {
            alt_putchar(c);
   1179c:	e0bff807 	ldb	r2,-32(fp)
   117a0:	1009883a 	mov	r4,r2
   117a4:	00119880 	call	11988 <alt_putchar>
   117a8:	00006806 	br	1194c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   117ac:	e0bff717 	ldw	r2,-36(fp)
   117b0:	10c00044 	addi	r3,r2,1
   117b4:	e0fff715 	stw	r3,-36(fp)
   117b8:	10800003 	ldbu	r2,0(r2)
   117bc:	e0bff805 	stb	r2,-32(fp)
   117c0:	e0bff807 	ldb	r2,-32(fp)
   117c4:	10006926 	beq	r2,zero,1196c <alt_printf+0x210>
            {
                if (c == '%')
   117c8:	e0bff807 	ldb	r2,-32(fp)
   117cc:	10800958 	cmpnei	r2,r2,37
   117d0:	1000041e 	bne	r2,zero,117e4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   117d4:	e0bff807 	ldb	r2,-32(fp)
   117d8:	1009883a 	mov	r4,r2
   117dc:	00119880 	call	11988 <alt_putchar>
   117e0:	00005a06 	br	1194c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   117e4:	e0bff807 	ldb	r2,-32(fp)
   117e8:	108018d8 	cmpnei	r2,r2,99
   117ec:	1000081e 	bne	r2,zero,11810 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   117f0:	e0bffe17 	ldw	r2,-8(fp)
   117f4:	10c00104 	addi	r3,r2,4
   117f8:	e0fffe15 	stw	r3,-8(fp)
   117fc:	10800017 	ldw	r2,0(r2)
   11800:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   11804:	e13ffd17 	ldw	r4,-12(fp)
   11808:	00119880 	call	11988 <alt_putchar>
   1180c:	00004f06 	br	1194c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   11810:	e0bff807 	ldb	r2,-32(fp)
   11814:	10801e18 	cmpnei	r2,r2,120
   11818:	1000341e 	bne	r2,zero,118ec <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1181c:	e0bffe17 	ldw	r2,-8(fp)
   11820:	10c00104 	addi	r3,r2,4
   11824:	e0fffe15 	stw	r3,-8(fp)
   11828:	10800017 	ldw	r2,0(r2)
   1182c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11830:	e0bffb17 	ldw	r2,-20(fp)
   11834:	1000031e 	bne	r2,zero,11844 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   11838:	01000c04 	movi	r4,48
   1183c:	00119880 	call	11988 <alt_putchar>
                        continue;
   11840:	00004206 	br	1194c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   11844:	00800704 	movi	r2,28
   11848:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   1184c:	00000306 	br	1185c <alt_printf+0x100>
                        digit_shift -= 4;
   11850:	e0bff917 	ldw	r2,-28(fp)
   11854:	10bfff04 	addi	r2,r2,-4
   11858:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1185c:	00c003c4 	movi	r3,15
   11860:	e0bff917 	ldw	r2,-28(fp)
   11864:	1884983a 	sll	r2,r3,r2
   11868:	1007883a 	mov	r3,r2
   1186c:	e0bffb17 	ldw	r2,-20(fp)
   11870:	1884703a 	and	r2,r3,r2
   11874:	103ff626 	beq	r2,zero,11850 <__alt_data_end+0xffff1850>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11878:	00001906 	br	118e0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1187c:	00c003c4 	movi	r3,15
   11880:	e0bff917 	ldw	r2,-28(fp)
   11884:	1884983a 	sll	r2,r3,r2
   11888:	1007883a 	mov	r3,r2
   1188c:	e0bffb17 	ldw	r2,-20(fp)
   11890:	1886703a 	and	r3,r3,r2
   11894:	e0bff917 	ldw	r2,-28(fp)
   11898:	1884d83a 	srl	r2,r3,r2
   1189c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   118a0:	e0bffc17 	ldw	r2,-16(fp)
   118a4:	108002a8 	cmpgeui	r2,r2,10
   118a8:	1000041e 	bne	r2,zero,118bc <alt_printf+0x160>
                            c = '0' + digit;
   118ac:	e0bffc17 	ldw	r2,-16(fp)
   118b0:	10800c04 	addi	r2,r2,48
   118b4:	e0bff805 	stb	r2,-32(fp)
   118b8:	00000306 	br	118c8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   118bc:	e0bffc17 	ldw	r2,-16(fp)
   118c0:	108015c4 	addi	r2,r2,87
   118c4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   118c8:	e0bff807 	ldb	r2,-32(fp)
   118cc:	1009883a 	mov	r4,r2
   118d0:	00119880 	call	11988 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   118d4:	e0bff917 	ldw	r2,-28(fp)
   118d8:	10bfff04 	addi	r2,r2,-4
   118dc:	e0bff915 	stw	r2,-28(fp)
   118e0:	e0bff917 	ldw	r2,-28(fp)
   118e4:	103fe50e 	bge	r2,zero,1187c <__alt_data_end+0xffff187c>
   118e8:	00001806 	br	1194c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   118ec:	e0bff807 	ldb	r2,-32(fp)
   118f0:	10801cd8 	cmpnei	r2,r2,115
   118f4:	1000151e 	bne	r2,zero,1194c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   118f8:	e0bffe17 	ldw	r2,-8(fp)
   118fc:	10c00104 	addi	r3,r2,4
   11900:	e0fffe15 	stw	r3,-8(fp)
   11904:	10800017 	ldw	r2,0(r2)
   11908:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   1190c:	00000906 	br	11934 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   11910:	e0bffa17 	ldw	r2,-24(fp)
   11914:	10c00044 	addi	r3,r2,1
   11918:	e0fffa15 	stw	r3,-24(fp)
   1191c:	10800003 	ldbu	r2,0(r2)
   11920:	10803fcc 	andi	r2,r2,255
   11924:	1080201c 	xori	r2,r2,128
   11928:	10bfe004 	addi	r2,r2,-128
   1192c:	1009883a 	mov	r4,r2
   11930:	00119880 	call	11988 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   11934:	e0bffa17 	ldw	r2,-24(fp)
   11938:	10800003 	ldbu	r2,0(r2)
   1193c:	10803fcc 	andi	r2,r2,255
   11940:	1080201c 	xori	r2,r2,128
   11944:	10bfe004 	addi	r2,r2,-128
   11948:	103ff11e 	bne	r2,zero,11910 <__alt_data_end+0xffff1910>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1194c:	e0bff717 	ldw	r2,-36(fp)
   11950:	10c00044 	addi	r3,r2,1
   11954:	e0fff715 	stw	r3,-36(fp)
   11958:	10800003 	ldbu	r2,0(r2)
   1195c:	e0bff805 	stb	r2,-32(fp)
   11960:	e0bff807 	ldb	r2,-32(fp)
   11964:	103f8a1e 	bne	r2,zero,11790 <__alt_data_end+0xffff1790>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   11968:	00000106 	br	11970 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   1196c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   11970:	0001883a 	nop
   11974:	e037883a 	mov	sp,fp
   11978:	dfc00117 	ldw	ra,4(sp)
   1197c:	df000017 	ldw	fp,0(sp)
   11980:	dec00504 	addi	sp,sp,20
   11984:	f800283a 	ret

00011988 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11988:	defffd04 	addi	sp,sp,-12
   1198c:	dfc00215 	stw	ra,8(sp)
   11990:	df000115 	stw	fp,4(sp)
   11994:	df000104 	addi	fp,sp,4
   11998:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   1199c:	d0a00a17 	ldw	r2,-32728(gp)
   119a0:	10800217 	ldw	r2,8(r2)
   119a4:	100b883a 	mov	r5,r2
   119a8:	e13fff17 	ldw	r4,-4(fp)
   119ac:	001387c0 	call	1387c <putc>
#endif
#endif
}
   119b0:	e037883a 	mov	sp,fp
   119b4:	dfc00117 	ldw	ra,4(sp)
   119b8:	df000017 	ldw	fp,0(sp)
   119bc:	dec00204 	addi	sp,sp,8
   119c0:	f800283a 	ret

000119c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   119c4:	defffd04 	addi	sp,sp,-12
   119c8:	dfc00215 	stw	ra,8(sp)
   119cc:	df000115 	stw	fp,4(sp)
   119d0:	df000104 	addi	fp,sp,4
   119d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   119d8:	d1600304 	addi	r5,gp,-32756
   119dc:	e13fff17 	ldw	r4,-4(fp)
   119e0:	0012c680 	call	12c68 <alt_dev_llist_insert>
}
   119e4:	e037883a 	mov	sp,fp
   119e8:	dfc00117 	ldw	ra,4(sp)
   119ec:	df000017 	ldw	fp,0(sp)
   119f0:	dec00204 	addi	sp,sp,8
   119f4:	f800283a 	ret

000119f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   119f8:	defffd04 	addi	sp,sp,-12
   119fc:	dfc00215 	stw	ra,8(sp)
   11a00:	df000115 	stw	fp,4(sp)
   11a04:	df000104 	addi	fp,sp,4
   11a08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11a0c:	00134880 	call	13488 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11a10:	00800044 	movi	r2,1
   11a14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11a18:	0001883a 	nop
   11a1c:	e037883a 	mov	sp,fp
   11a20:	dfc00117 	ldw	ra,4(sp)
   11a24:	df000017 	ldw	fp,0(sp)
   11a28:	dec00204 	addi	sp,sp,8
   11a2c:	f800283a 	ret

00011a30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11a30:	defffe04 	addi	sp,sp,-8
   11a34:	dfc00115 	stw	ra,4(sp)
   11a38:	df000015 	stw	fp,0(sp)
   11a3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   11a40:	01c0fa04 	movi	r7,1000
   11a44:	01800044 	movi	r6,1
   11a48:	000b883a 	mov	r5,zero
   11a4c:	010000b4 	movhi	r4,2
   11a50:	21040004 	addi	r4,r4,4096
   11a54:	001257c0 	call	1257c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   11a58:	000d883a 	mov	r6,zero
   11a5c:	000b883a 	mov	r5,zero
   11a60:	01000074 	movhi	r4,1
   11a64:	2118f504 	addi	r4,r4,25556
   11a68:	0011c040 	call	11c04 <altera_avalon_jtag_uart_init>
   11a6c:	01000074 	movhi	r4,1
   11a70:	2118eb04 	addi	r4,r4,25516
   11a74:	00119c40 	call	119c4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   11a78:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   11a7c:	01000074 	movhi	r4,1
   11a80:	211d0304 	addi	r4,r4,29708
   11a84:	00119c40 	call	119c4 <alt_dev_reg>
}
   11a88:	0001883a 	nop
   11a8c:	e037883a 	mov	sp,fp
   11a90:	dfc00117 	ldw	ra,4(sp)
   11a94:	df000017 	ldw	fp,0(sp)
   11a98:	dec00204 	addi	sp,sp,8
   11a9c:	f800283a 	ret

00011aa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11aa0:	defffa04 	addi	sp,sp,-24
   11aa4:	dfc00515 	stw	ra,20(sp)
   11aa8:	df000415 	stw	fp,16(sp)
   11aac:	df000404 	addi	fp,sp,16
   11ab0:	e13ffd15 	stw	r4,-12(fp)
   11ab4:	e17ffe15 	stw	r5,-8(fp)
   11ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11abc:	e0bffd17 	ldw	r2,-12(fp)
   11ac0:	10800017 	ldw	r2,0(r2)
   11ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11ac8:	e0bffc17 	ldw	r2,-16(fp)
   11acc:	10c00a04 	addi	r3,r2,40
   11ad0:	e0bffd17 	ldw	r2,-12(fp)
   11ad4:	10800217 	ldw	r2,8(r2)
   11ad8:	100f883a 	mov	r7,r2
   11adc:	e1bfff17 	ldw	r6,-4(fp)
   11ae0:	e17ffe17 	ldw	r5,-8(fp)
   11ae4:	1809883a 	mov	r4,r3
   11ae8:	00120c00 	call	120c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11aec:	e037883a 	mov	sp,fp
   11af0:	dfc00117 	ldw	ra,4(sp)
   11af4:	df000017 	ldw	fp,0(sp)
   11af8:	dec00204 	addi	sp,sp,8
   11afc:	f800283a 	ret

00011b00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11b00:	defffa04 	addi	sp,sp,-24
   11b04:	dfc00515 	stw	ra,20(sp)
   11b08:	df000415 	stw	fp,16(sp)
   11b0c:	df000404 	addi	fp,sp,16
   11b10:	e13ffd15 	stw	r4,-12(fp)
   11b14:	e17ffe15 	stw	r5,-8(fp)
   11b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
   11b20:	10800017 	ldw	r2,0(r2)
   11b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11b28:	e0bffc17 	ldw	r2,-16(fp)
   11b2c:	10c00a04 	addi	r3,r2,40
   11b30:	e0bffd17 	ldw	r2,-12(fp)
   11b34:	10800217 	ldw	r2,8(r2)
   11b38:	100f883a 	mov	r7,r2
   11b3c:	e1bfff17 	ldw	r6,-4(fp)
   11b40:	e17ffe17 	ldw	r5,-8(fp)
   11b44:	1809883a 	mov	r4,r3
   11b48:	00122dc0 	call	122dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11b4c:	e037883a 	mov	sp,fp
   11b50:	dfc00117 	ldw	ra,4(sp)
   11b54:	df000017 	ldw	fp,0(sp)
   11b58:	dec00204 	addi	sp,sp,8
   11b5c:	f800283a 	ret

00011b60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11b60:	defffc04 	addi	sp,sp,-16
   11b64:	dfc00315 	stw	ra,12(sp)
   11b68:	df000215 	stw	fp,8(sp)
   11b6c:	df000204 	addi	fp,sp,8
   11b70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11b74:	e0bfff17 	ldw	r2,-4(fp)
   11b78:	10800017 	ldw	r2,0(r2)
   11b7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11b80:	e0bffe17 	ldw	r2,-8(fp)
   11b84:	10c00a04 	addi	r3,r2,40
   11b88:	e0bfff17 	ldw	r2,-4(fp)
   11b8c:	10800217 	ldw	r2,8(r2)
   11b90:	100b883a 	mov	r5,r2
   11b94:	1809883a 	mov	r4,r3
   11b98:	0011f680 	call	11f68 <altera_avalon_jtag_uart_close>
}
   11b9c:	e037883a 	mov	sp,fp
   11ba0:	dfc00117 	ldw	ra,4(sp)
   11ba4:	df000017 	ldw	fp,0(sp)
   11ba8:	dec00204 	addi	sp,sp,8
   11bac:	f800283a 	ret

00011bb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11bb0:	defffa04 	addi	sp,sp,-24
   11bb4:	dfc00515 	stw	ra,20(sp)
   11bb8:	df000415 	stw	fp,16(sp)
   11bbc:	df000404 	addi	fp,sp,16
   11bc0:	e13ffd15 	stw	r4,-12(fp)
   11bc4:	e17ffe15 	stw	r5,-8(fp)
   11bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11bcc:	e0bffd17 	ldw	r2,-12(fp)
   11bd0:	10800017 	ldw	r2,0(r2)
   11bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11bd8:	e0bffc17 	ldw	r2,-16(fp)
   11bdc:	10800a04 	addi	r2,r2,40
   11be0:	e1bfff17 	ldw	r6,-4(fp)
   11be4:	e17ffe17 	ldw	r5,-8(fp)
   11be8:	1009883a 	mov	r4,r2
   11bec:	0011fd00 	call	11fd0 <altera_avalon_jtag_uart_ioctl>
}
   11bf0:	e037883a 	mov	sp,fp
   11bf4:	dfc00117 	ldw	ra,4(sp)
   11bf8:	df000017 	ldw	fp,0(sp)
   11bfc:	dec00204 	addi	sp,sp,8
   11c00:	f800283a 	ret

00011c04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11c04:	defffb04 	addi	sp,sp,-20
   11c08:	dfc00415 	stw	ra,16(sp)
   11c0c:	df000315 	stw	fp,12(sp)
   11c10:	df000304 	addi	fp,sp,12
   11c14:	e13ffd15 	stw	r4,-12(fp)
   11c18:	e17ffe15 	stw	r5,-8(fp)
   11c1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11c20:	e0bffd17 	ldw	r2,-12(fp)
   11c24:	00c00044 	movi	r3,1
   11c28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11c2c:	e0bffd17 	ldw	r2,-12(fp)
   11c30:	10800017 	ldw	r2,0(r2)
   11c34:	10800104 	addi	r2,r2,4
   11c38:	1007883a 	mov	r3,r2
   11c3c:	e0bffd17 	ldw	r2,-12(fp)
   11c40:	10800817 	ldw	r2,32(r2)
   11c44:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   11c48:	e0bfff17 	ldw	r2,-4(fp)
   11c4c:	01800074 	movhi	r6,1
   11c50:	31872e04 	addi	r6,r6,7352
   11c54:	e17ffd17 	ldw	r5,-12(fp)
   11c58:	1009883a 	mov	r4,r2
   11c5c:	00114740 	call	11474 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11c60:	e0bffd17 	ldw	r2,-12(fp)
   11c64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11c68:	e0bffd17 	ldw	r2,-12(fp)
   11c6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11c70:	d0e6bb17 	ldw	r3,-25876(gp)
   11c74:	e1fffd17 	ldw	r7,-12(fp)
   11c78:	01800074 	movhi	r6,1
   11c7c:	3187b204 	addi	r6,r6,7880
   11c80:	180b883a 	mov	r5,r3
   11c84:	1009883a 	mov	r4,r2
   11c88:	00129a00 	call	129a0 <alt_alarm_start>
   11c8c:	1000040e 	bge	r2,zero,11ca0 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11c90:	e0fffd17 	ldw	r3,-12(fp)
   11c94:	00a00034 	movhi	r2,32768
   11c98:	10bfffc4 	addi	r2,r2,-1
   11c9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11ca0:	0001883a 	nop
   11ca4:	e037883a 	mov	sp,fp
   11ca8:	dfc00117 	ldw	ra,4(sp)
   11cac:	df000017 	ldw	fp,0(sp)
   11cb0:	dec00204 	addi	sp,sp,8
   11cb4:	f800283a 	ret

00011cb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11cb8:	defff704 	addi	sp,sp,-36
   11cbc:	df000815 	stw	fp,32(sp)
   11cc0:	df000804 	addi	fp,sp,32
   11cc4:	e13ffe15 	stw	r4,-8(fp)
   11cc8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11ccc:	e0bffe17 	ldw	r2,-8(fp)
   11cd0:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   11cd4:	e0bffa17 	ldw	r2,-24(fp)
   11cd8:	10800017 	ldw	r2,0(r2)
   11cdc:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11ce0:	e0bffb17 	ldw	r2,-20(fp)
   11ce4:	10800104 	addi	r2,r2,4
   11ce8:	10800037 	ldwio	r2,0(r2)
   11cec:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11cf0:	e0bffc17 	ldw	r2,-16(fp)
   11cf4:	1080c00c 	andi	r2,r2,768
   11cf8:	10006d26 	beq	r2,zero,11eb0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11cfc:	e0bffc17 	ldw	r2,-16(fp)
   11d00:	1080400c 	andi	r2,r2,256
   11d04:	10003526 	beq	r2,zero,11ddc <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11d08:	00800074 	movhi	r2,1
   11d0c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11d10:	e0bffa17 	ldw	r2,-24(fp)
   11d14:	10800a17 	ldw	r2,40(r2)
   11d18:	10800044 	addi	r2,r2,1
   11d1c:	1081ffcc 	andi	r2,r2,2047
   11d20:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   11d24:	e0bffa17 	ldw	r2,-24(fp)
   11d28:	10c00b17 	ldw	r3,44(r2)
   11d2c:	e0bffd17 	ldw	r2,-12(fp)
   11d30:	18801526 	beq	r3,r2,11d88 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11d34:	e0bffb17 	ldw	r2,-20(fp)
   11d38:	10800037 	ldwio	r2,0(r2)
   11d3c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   11d40:	e0bff817 	ldw	r2,-32(fp)
   11d44:	10a0000c 	andi	r2,r2,32768
   11d48:	10001126 	beq	r2,zero,11d90 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11d4c:	e0bffa17 	ldw	r2,-24(fp)
   11d50:	10800a17 	ldw	r2,40(r2)
   11d54:	e0fff817 	ldw	r3,-32(fp)
   11d58:	1809883a 	mov	r4,r3
   11d5c:	e0fffa17 	ldw	r3,-24(fp)
   11d60:	1885883a 	add	r2,r3,r2
   11d64:	10800e04 	addi	r2,r2,56
   11d68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11d6c:	e0bffa17 	ldw	r2,-24(fp)
   11d70:	10800a17 	ldw	r2,40(r2)
   11d74:	10800044 	addi	r2,r2,1
   11d78:	10c1ffcc 	andi	r3,r2,2047
   11d7c:	e0bffa17 	ldw	r2,-24(fp)
   11d80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11d84:	003fe206 	br	11d10 <__alt_data_end+0xffff1d10>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   11d88:	0001883a 	nop
   11d8c:	00000106 	br	11d94 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   11d90:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11d94:	e0bff817 	ldw	r2,-32(fp)
   11d98:	10bfffec 	andhi	r2,r2,65535
   11d9c:	10000f26 	beq	r2,zero,11ddc <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11da0:	e0bffa17 	ldw	r2,-24(fp)
   11da4:	10c00817 	ldw	r3,32(r2)
   11da8:	00bfff84 	movi	r2,-2
   11dac:	1886703a 	and	r3,r3,r2
   11db0:	e0bffa17 	ldw	r2,-24(fp)
   11db4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   11db8:	e0bffb17 	ldw	r2,-20(fp)
   11dbc:	10800104 	addi	r2,r2,4
   11dc0:	1007883a 	mov	r3,r2
   11dc4:	e0bffa17 	ldw	r2,-24(fp)
   11dc8:	10800817 	ldw	r2,32(r2)
   11dcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11dd0:	e0bffb17 	ldw	r2,-20(fp)
   11dd4:	10800104 	addi	r2,r2,4
   11dd8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11ddc:	e0bffc17 	ldw	r2,-16(fp)
   11de0:	1080800c 	andi	r2,r2,512
   11de4:	103fbe26 	beq	r2,zero,11ce0 <__alt_data_end+0xffff1ce0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	1004d43a 	srli	r2,r2,16
   11df0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   11df4:	00001406 	br	11e48 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   11df8:	e0bffb17 	ldw	r2,-20(fp)
   11dfc:	e0fffa17 	ldw	r3,-24(fp)
   11e00:	18c00d17 	ldw	r3,52(r3)
   11e04:	e13ffa17 	ldw	r4,-24(fp)
   11e08:	20c7883a 	add	r3,r4,r3
   11e0c:	18c20e04 	addi	r3,r3,2104
   11e10:	18c00003 	ldbu	r3,0(r3)
   11e14:	18c03fcc 	andi	r3,r3,255
   11e18:	18c0201c 	xori	r3,r3,128
   11e1c:	18ffe004 	addi	r3,r3,-128
   11e20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11e24:	e0bffa17 	ldw	r2,-24(fp)
   11e28:	10800d17 	ldw	r2,52(r2)
   11e2c:	10800044 	addi	r2,r2,1
   11e30:	10c1ffcc 	andi	r3,r2,2047
   11e34:	e0bffa17 	ldw	r2,-24(fp)
   11e38:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11e3c:	e0bff917 	ldw	r2,-28(fp)
   11e40:	10bfffc4 	addi	r2,r2,-1
   11e44:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   11e48:	e0bff917 	ldw	r2,-28(fp)
   11e4c:	10000526 	beq	r2,zero,11e64 <altera_avalon_jtag_uart_irq+0x1ac>
   11e50:	e0bffa17 	ldw	r2,-24(fp)
   11e54:	10c00d17 	ldw	r3,52(r2)
   11e58:	e0bffa17 	ldw	r2,-24(fp)
   11e5c:	10800c17 	ldw	r2,48(r2)
   11e60:	18bfe51e 	bne	r3,r2,11df8 <__alt_data_end+0xffff1df8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   11e64:	e0bff917 	ldw	r2,-28(fp)
   11e68:	103f9d26 	beq	r2,zero,11ce0 <__alt_data_end+0xffff1ce0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11e6c:	e0bffa17 	ldw	r2,-24(fp)
   11e70:	10c00817 	ldw	r3,32(r2)
   11e74:	00bfff44 	movi	r2,-3
   11e78:	1886703a 	and	r3,r3,r2
   11e7c:	e0bffa17 	ldw	r2,-24(fp)
   11e80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11e84:	e0bffa17 	ldw	r2,-24(fp)
   11e88:	10800017 	ldw	r2,0(r2)
   11e8c:	10800104 	addi	r2,r2,4
   11e90:	1007883a 	mov	r3,r2
   11e94:	e0bffa17 	ldw	r2,-24(fp)
   11e98:	10800817 	ldw	r2,32(r2)
   11e9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11ea0:	e0bffb17 	ldw	r2,-20(fp)
   11ea4:	10800104 	addi	r2,r2,4
   11ea8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   11eac:	003f8c06 	br	11ce0 <__alt_data_end+0xffff1ce0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   11eb0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   11eb4:	0001883a 	nop
   11eb8:	e037883a 	mov	sp,fp
   11ebc:	df000017 	ldw	fp,0(sp)
   11ec0:	dec00104 	addi	sp,sp,4
   11ec4:	f800283a 	ret

00011ec8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11ec8:	defff804 	addi	sp,sp,-32
   11ecc:	df000715 	stw	fp,28(sp)
   11ed0:	df000704 	addi	fp,sp,28
   11ed4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   11ed8:	e0bffb17 	ldw	r2,-20(fp)
   11edc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   11ee0:	e0bff917 	ldw	r2,-28(fp)
   11ee4:	10800017 	ldw	r2,0(r2)
   11ee8:	10800104 	addi	r2,r2,4
   11eec:	10800037 	ldwio	r2,0(r2)
   11ef0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   11ef4:	e0bffa17 	ldw	r2,-24(fp)
   11ef8:	1081000c 	andi	r2,r2,1024
   11efc:	10000b26 	beq	r2,zero,11f2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   11f00:	e0bff917 	ldw	r2,-28(fp)
   11f04:	10800017 	ldw	r2,0(r2)
   11f08:	10800104 	addi	r2,r2,4
   11f0c:	1007883a 	mov	r3,r2
   11f10:	e0bff917 	ldw	r2,-28(fp)
   11f14:	10800817 	ldw	r2,32(r2)
   11f18:	10810014 	ori	r2,r2,1024
   11f1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   11f20:	e0bff917 	ldw	r2,-28(fp)
   11f24:	10000915 	stw	zero,36(r2)
   11f28:	00000a06 	br	11f54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   11f2c:	e0bff917 	ldw	r2,-28(fp)
   11f30:	10c00917 	ldw	r3,36(r2)
   11f34:	00a00034 	movhi	r2,32768
   11f38:	10bfff04 	addi	r2,r2,-4
   11f3c:	10c00536 	bltu	r2,r3,11f54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   11f40:	e0bff917 	ldw	r2,-28(fp)
   11f44:	10800917 	ldw	r2,36(r2)
   11f48:	10c00044 	addi	r3,r2,1
   11f4c:	e0bff917 	ldw	r2,-28(fp)
   11f50:	10c00915 	stw	r3,36(r2)
   11f54:	d0a6bb17 	ldw	r2,-25876(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11f58:	e037883a 	mov	sp,fp
   11f5c:	df000017 	ldw	fp,0(sp)
   11f60:	dec00104 	addi	sp,sp,4
   11f64:	f800283a 	ret

00011f68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11f68:	defffd04 	addi	sp,sp,-12
   11f6c:	df000215 	stw	fp,8(sp)
   11f70:	df000204 	addi	fp,sp,8
   11f74:	e13ffe15 	stw	r4,-8(fp)
   11f78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11f7c:	00000506 	br	11f94 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   11f80:	e0bfff17 	ldw	r2,-4(fp)
   11f84:	1090000c 	andi	r2,r2,16384
   11f88:	10000226 	beq	r2,zero,11f94 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11f8c:	00bffd44 	movi	r2,-11
   11f90:	00000b06 	br	11fc0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11f94:	e0bffe17 	ldw	r2,-8(fp)
   11f98:	10c00d17 	ldw	r3,52(r2)
   11f9c:	e0bffe17 	ldw	r2,-8(fp)
   11fa0:	10800c17 	ldw	r2,48(r2)
   11fa4:	18800526 	beq	r3,r2,11fbc <altera_avalon_jtag_uart_close+0x54>
   11fa8:	e0bffe17 	ldw	r2,-8(fp)
   11fac:	10c00917 	ldw	r3,36(r2)
   11fb0:	e0bffe17 	ldw	r2,-8(fp)
   11fb4:	10800117 	ldw	r2,4(r2)
   11fb8:	18bff136 	bltu	r3,r2,11f80 <__alt_data_end+0xffff1f80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11fbc:	0005883a 	mov	r2,zero
}
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	df000017 	ldw	fp,0(sp)
   11fc8:	dec00104 	addi	sp,sp,4
   11fcc:	f800283a 	ret

00011fd0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   11fd0:	defffa04 	addi	sp,sp,-24
   11fd4:	df000515 	stw	fp,20(sp)
   11fd8:	df000504 	addi	fp,sp,20
   11fdc:	e13ffd15 	stw	r4,-12(fp)
   11fe0:	e17ffe15 	stw	r5,-8(fp)
   11fe4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11fe8:	00bff9c4 	movi	r2,-25
   11fec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	10da8060 	cmpeqi	r3,r2,27137
   11ff8:	1800031e 	bne	r3,zero,12008 <altera_avalon_jtag_uart_ioctl+0x38>
   11ffc:	109a80a0 	cmpeqi	r2,r2,27138
   12000:	1000181e 	bne	r2,zero,12064 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   12004:	00002906 	br	120ac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12008:	e0bffd17 	ldw	r2,-12(fp)
   1200c:	10c00117 	ldw	r3,4(r2)
   12010:	00a00034 	movhi	r2,32768
   12014:	10bfffc4 	addi	r2,r2,-1
   12018:	18802126 	beq	r3,r2,120a0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1201c:	e0bfff17 	ldw	r2,-4(fp)
   12020:	10800017 	ldw	r2,0(r2)
   12024:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12028:	e0bffc17 	ldw	r2,-16(fp)
   1202c:	10800090 	cmplti	r2,r2,2
   12030:	1000061e 	bne	r2,zero,1204c <altera_avalon_jtag_uart_ioctl+0x7c>
   12034:	e0fffc17 	ldw	r3,-16(fp)
   12038:	00a00034 	movhi	r2,32768
   1203c:	10bfffc4 	addi	r2,r2,-1
   12040:	18800226 	beq	r3,r2,1204c <altera_avalon_jtag_uart_ioctl+0x7c>
   12044:	e0bffc17 	ldw	r2,-16(fp)
   12048:	00000206 	br	12054 <altera_avalon_jtag_uart_ioctl+0x84>
   1204c:	00a00034 	movhi	r2,32768
   12050:	10bfff84 	addi	r2,r2,-2
   12054:	e0fffd17 	ldw	r3,-12(fp)
   12058:	18800115 	stw	r2,4(r3)
      rc = 0;
   1205c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12060:	00000f06 	br	120a0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12064:	e0bffd17 	ldw	r2,-12(fp)
   12068:	10c00117 	ldw	r3,4(r2)
   1206c:	00a00034 	movhi	r2,32768
   12070:	10bfffc4 	addi	r2,r2,-1
   12074:	18800c26 	beq	r3,r2,120a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12078:	e0bffd17 	ldw	r2,-12(fp)
   1207c:	10c00917 	ldw	r3,36(r2)
   12080:	e0bffd17 	ldw	r2,-12(fp)
   12084:	10800117 	ldw	r2,4(r2)
   12088:	1885803a 	cmpltu	r2,r3,r2
   1208c:	10c03fcc 	andi	r3,r2,255
   12090:	e0bfff17 	ldw	r2,-4(fp)
   12094:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12098:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1209c:	00000206 	br	120a8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   120a0:	0001883a 	nop
   120a4:	00000106 	br	120ac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   120a8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   120ac:	e0bffb17 	ldw	r2,-20(fp)
}
   120b0:	e037883a 	mov	sp,fp
   120b4:	df000017 	ldw	fp,0(sp)
   120b8:	dec00104 	addi	sp,sp,4
   120bc:	f800283a 	ret

000120c0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   120c0:	defff304 	addi	sp,sp,-52
   120c4:	dfc00c15 	stw	ra,48(sp)
   120c8:	df000b15 	stw	fp,44(sp)
   120cc:	df000b04 	addi	fp,sp,44
   120d0:	e13ffc15 	stw	r4,-16(fp)
   120d4:	e17ffd15 	stw	r5,-12(fp)
   120d8:	e1bffe15 	stw	r6,-8(fp)
   120dc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   120e0:	e0bffd17 	ldw	r2,-12(fp)
   120e4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   120e8:	00004706 	br	12208 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   120ec:	e0bffc17 	ldw	r2,-16(fp)
   120f0:	10800a17 	ldw	r2,40(r2)
   120f4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   120f8:	e0bffc17 	ldw	r2,-16(fp)
   120fc:	10800b17 	ldw	r2,44(r2)
   12100:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   12104:	e0fff717 	ldw	r3,-36(fp)
   12108:	e0bff817 	ldw	r2,-32(fp)
   1210c:	18800536 	bltu	r3,r2,12124 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12110:	e0fff717 	ldw	r3,-36(fp)
   12114:	e0bff817 	ldw	r2,-32(fp)
   12118:	1885c83a 	sub	r2,r3,r2
   1211c:	e0bff615 	stw	r2,-40(fp)
   12120:	00000406 	br	12134 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12124:	00c20004 	movi	r3,2048
   12128:	e0bff817 	ldw	r2,-32(fp)
   1212c:	1885c83a 	sub	r2,r3,r2
   12130:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12134:	e0bff617 	ldw	r2,-40(fp)
   12138:	10001e26 	beq	r2,zero,121b4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1213c:	e0fffe17 	ldw	r3,-8(fp)
   12140:	e0bff617 	ldw	r2,-40(fp)
   12144:	1880022e 	bgeu	r3,r2,12150 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12148:	e0bffe17 	ldw	r2,-8(fp)
   1214c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12150:	e0bffc17 	ldw	r2,-16(fp)
   12154:	10c00e04 	addi	r3,r2,56
   12158:	e0bff817 	ldw	r2,-32(fp)
   1215c:	1885883a 	add	r2,r3,r2
   12160:	e1bff617 	ldw	r6,-40(fp)
   12164:	100b883a 	mov	r5,r2
   12168:	e13ff517 	ldw	r4,-44(fp)
   1216c:	001132c0 	call	1132c <memcpy>
      ptr   += n;
   12170:	e0fff517 	ldw	r3,-44(fp)
   12174:	e0bff617 	ldw	r2,-40(fp)
   12178:	1885883a 	add	r2,r3,r2
   1217c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12180:	e0fffe17 	ldw	r3,-8(fp)
   12184:	e0bff617 	ldw	r2,-40(fp)
   12188:	1885c83a 	sub	r2,r3,r2
   1218c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12190:	e0fff817 	ldw	r3,-32(fp)
   12194:	e0bff617 	ldw	r2,-40(fp)
   12198:	1885883a 	add	r2,r3,r2
   1219c:	10c1ffcc 	andi	r3,r2,2047
   121a0:	e0bffc17 	ldw	r2,-16(fp)
   121a4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   121a8:	e0bffe17 	ldw	r2,-8(fp)
   121ac:	00bfcf16 	blt	zero,r2,120ec <__alt_data_end+0xffff20ec>
   121b0:	00000106 	br	121b8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   121b4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   121b8:	e0fff517 	ldw	r3,-44(fp)
   121bc:	e0bffd17 	ldw	r2,-12(fp)
   121c0:	1880141e 	bne	r3,r2,12214 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   121c4:	e0bfff17 	ldw	r2,-4(fp)
   121c8:	1090000c 	andi	r2,r2,16384
   121cc:	1000131e 	bne	r2,zero,1221c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   121d0:	0001883a 	nop
   121d4:	e0bffc17 	ldw	r2,-16(fp)
   121d8:	10c00a17 	ldw	r3,40(r2)
   121dc:	e0bff717 	ldw	r2,-36(fp)
   121e0:	1880051e 	bne	r3,r2,121f8 <altera_avalon_jtag_uart_read+0x138>
   121e4:	e0bffc17 	ldw	r2,-16(fp)
   121e8:	10c00917 	ldw	r3,36(r2)
   121ec:	e0bffc17 	ldw	r2,-16(fp)
   121f0:	10800117 	ldw	r2,4(r2)
   121f4:	18bff736 	bltu	r3,r2,121d4 <__alt_data_end+0xffff21d4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   121f8:	e0bffc17 	ldw	r2,-16(fp)
   121fc:	10c00a17 	ldw	r3,40(r2)
   12200:	e0bff717 	ldw	r2,-36(fp)
   12204:	18800726 	beq	r3,r2,12224 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12208:	e0bffe17 	ldw	r2,-8(fp)
   1220c:	00bfb716 	blt	zero,r2,120ec <__alt_data_end+0xffff20ec>
   12210:	00000506 	br	12228 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   12214:	0001883a 	nop
   12218:	00000306 	br	12228 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1221c:	0001883a 	nop
   12220:	00000106 	br	12228 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   12224:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12228:	e0fff517 	ldw	r3,-44(fp)
   1222c:	e0bffd17 	ldw	r2,-12(fp)
   12230:	18801826 	beq	r3,r2,12294 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12234:	0005303a 	rdctl	r2,status
   12238:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1223c:	e0fffb17 	ldw	r3,-20(fp)
   12240:	00bfff84 	movi	r2,-2
   12244:	1884703a 	and	r2,r3,r2
   12248:	1001703a 	wrctl	status,r2
  
  return context;
   1224c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12250:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12254:	e0bffc17 	ldw	r2,-16(fp)
   12258:	10800817 	ldw	r2,32(r2)
   1225c:	10c00054 	ori	r3,r2,1
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12268:	e0bffc17 	ldw	r2,-16(fp)
   1226c:	10800017 	ldw	r2,0(r2)
   12270:	10800104 	addi	r2,r2,4
   12274:	1007883a 	mov	r3,r2
   12278:	e0bffc17 	ldw	r2,-16(fp)
   1227c:	10800817 	ldw	r2,32(r2)
   12280:	18800035 	stwio	r2,0(r3)
   12284:	e0bffa17 	ldw	r2,-24(fp)
   12288:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1228c:	e0bff917 	ldw	r2,-28(fp)
   12290:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12294:	e0fff517 	ldw	r3,-44(fp)
   12298:	e0bffd17 	ldw	r2,-12(fp)
   1229c:	18800426 	beq	r3,r2,122b0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   122a0:	e0fff517 	ldw	r3,-44(fp)
   122a4:	e0bffd17 	ldw	r2,-12(fp)
   122a8:	1885c83a 	sub	r2,r3,r2
   122ac:	00000606 	br	122c8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   122b0:	e0bfff17 	ldw	r2,-4(fp)
   122b4:	1090000c 	andi	r2,r2,16384
   122b8:	10000226 	beq	r2,zero,122c4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   122bc:	00bffd44 	movi	r2,-11
   122c0:	00000106 	br	122c8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   122c4:	00bffec4 	movi	r2,-5
}
   122c8:	e037883a 	mov	sp,fp
   122cc:	dfc00117 	ldw	ra,4(sp)
   122d0:	df000017 	ldw	fp,0(sp)
   122d4:	dec00204 	addi	sp,sp,8
   122d8:	f800283a 	ret

000122dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   122dc:	defff304 	addi	sp,sp,-52
   122e0:	dfc00c15 	stw	ra,48(sp)
   122e4:	df000b15 	stw	fp,44(sp)
   122e8:	df000b04 	addi	fp,sp,44
   122ec:	e13ffc15 	stw	r4,-16(fp)
   122f0:	e17ffd15 	stw	r5,-12(fp)
   122f4:	e1bffe15 	stw	r6,-8(fp)
   122f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   122fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12300:	e0bffd17 	ldw	r2,-12(fp)
   12304:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12308:	00003706 	br	123e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1230c:	e0bffc17 	ldw	r2,-16(fp)
   12310:	10800c17 	ldw	r2,48(r2)
   12314:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   12318:	e0bffc17 	ldw	r2,-16(fp)
   1231c:	10800d17 	ldw	r2,52(r2)
   12320:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   12324:	e0fff917 	ldw	r3,-28(fp)
   12328:	e0bff517 	ldw	r2,-44(fp)
   1232c:	1880062e 	bgeu	r3,r2,12348 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12330:	e0fff517 	ldw	r3,-44(fp)
   12334:	e0bff917 	ldw	r2,-28(fp)
   12338:	1885c83a 	sub	r2,r3,r2
   1233c:	10bfffc4 	addi	r2,r2,-1
   12340:	e0bff615 	stw	r2,-40(fp)
   12344:	00000b06 	br	12374 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12348:	e0bff517 	ldw	r2,-44(fp)
   1234c:	10000526 	beq	r2,zero,12364 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12350:	00c20004 	movi	r3,2048
   12354:	e0bff917 	ldw	r2,-28(fp)
   12358:	1885c83a 	sub	r2,r3,r2
   1235c:	e0bff615 	stw	r2,-40(fp)
   12360:	00000406 	br	12374 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12364:	00c1ffc4 	movi	r3,2047
   12368:	e0bff917 	ldw	r2,-28(fp)
   1236c:	1885c83a 	sub	r2,r3,r2
   12370:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12374:	e0bff617 	ldw	r2,-40(fp)
   12378:	10001e26 	beq	r2,zero,123f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1237c:	e0fffe17 	ldw	r3,-8(fp)
   12380:	e0bff617 	ldw	r2,-40(fp)
   12384:	1880022e 	bgeu	r3,r2,12390 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12388:	e0bffe17 	ldw	r2,-8(fp)
   1238c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12390:	e0bffc17 	ldw	r2,-16(fp)
   12394:	10c20e04 	addi	r3,r2,2104
   12398:	e0bff917 	ldw	r2,-28(fp)
   1239c:	1885883a 	add	r2,r3,r2
   123a0:	e1bff617 	ldw	r6,-40(fp)
   123a4:	e17ffd17 	ldw	r5,-12(fp)
   123a8:	1009883a 	mov	r4,r2
   123ac:	001132c0 	call	1132c <memcpy>
      ptr   += n;
   123b0:	e0fffd17 	ldw	r3,-12(fp)
   123b4:	e0bff617 	ldw	r2,-40(fp)
   123b8:	1885883a 	add	r2,r3,r2
   123bc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   123c0:	e0fffe17 	ldw	r3,-8(fp)
   123c4:	e0bff617 	ldw	r2,-40(fp)
   123c8:	1885c83a 	sub	r2,r3,r2
   123cc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   123d0:	e0fff917 	ldw	r3,-28(fp)
   123d4:	e0bff617 	ldw	r2,-40(fp)
   123d8:	1885883a 	add	r2,r3,r2
   123dc:	10c1ffcc 	andi	r3,r2,2047
   123e0:	e0bffc17 	ldw	r2,-16(fp)
   123e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   123e8:	e0bffe17 	ldw	r2,-8(fp)
   123ec:	00bfc716 	blt	zero,r2,1230c <__alt_data_end+0xffff230c>
   123f0:	00000106 	br	123f8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   123f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123f8:	0005303a 	rdctl	r2,status
   123fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12400:	e0fffb17 	ldw	r3,-20(fp)
   12404:	00bfff84 	movi	r2,-2
   12408:	1884703a 	and	r2,r3,r2
   1240c:	1001703a 	wrctl	status,r2
  
  return context;
   12410:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12414:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12418:	e0bffc17 	ldw	r2,-16(fp)
   1241c:	10800817 	ldw	r2,32(r2)
   12420:	10c00094 	ori	r3,r2,2
   12424:	e0bffc17 	ldw	r2,-16(fp)
   12428:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1242c:	e0bffc17 	ldw	r2,-16(fp)
   12430:	10800017 	ldw	r2,0(r2)
   12434:	10800104 	addi	r2,r2,4
   12438:	1007883a 	mov	r3,r2
   1243c:	e0bffc17 	ldw	r2,-16(fp)
   12440:	10800817 	ldw	r2,32(r2)
   12444:	18800035 	stwio	r2,0(r3)
   12448:	e0bffa17 	ldw	r2,-24(fp)
   1244c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12450:	e0bff817 	ldw	r2,-32(fp)
   12454:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12458:	e0bffe17 	ldw	r2,-8(fp)
   1245c:	0080100e 	bge	zero,r2,124a0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12460:	e0bfff17 	ldw	r2,-4(fp)
   12464:	1090000c 	andi	r2,r2,16384
   12468:	1000101e 	bne	r2,zero,124ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1246c:	0001883a 	nop
   12470:	e0bffc17 	ldw	r2,-16(fp)
   12474:	10c00d17 	ldw	r3,52(r2)
   12478:	e0bff517 	ldw	r2,-44(fp)
   1247c:	1880051e 	bne	r3,r2,12494 <altera_avalon_jtag_uart_write+0x1b8>
   12480:	e0bffc17 	ldw	r2,-16(fp)
   12484:	10c00917 	ldw	r3,36(r2)
   12488:	e0bffc17 	ldw	r2,-16(fp)
   1248c:	10800117 	ldw	r2,4(r2)
   12490:	18bff736 	bltu	r3,r2,12470 <__alt_data_end+0xffff2470>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   12494:	e0bffc17 	ldw	r2,-16(fp)
   12498:	10800917 	ldw	r2,36(r2)
   1249c:	1000051e 	bne	r2,zero,124b4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   124a0:	e0bffe17 	ldw	r2,-8(fp)
   124a4:	00bfd016 	blt	zero,r2,123e8 <__alt_data_end+0xffff23e8>
   124a8:	00000306 	br	124b8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   124ac:	0001883a 	nop
   124b0:	00000106 	br	124b8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   124b4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   124b8:	e0fffd17 	ldw	r3,-12(fp)
   124bc:	e0bff717 	ldw	r2,-36(fp)
   124c0:	18800426 	beq	r3,r2,124d4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   124c4:	e0fffd17 	ldw	r3,-12(fp)
   124c8:	e0bff717 	ldw	r2,-36(fp)
   124cc:	1885c83a 	sub	r2,r3,r2
   124d0:	00000606 	br	124ec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	1090000c 	andi	r2,r2,16384
   124dc:	10000226 	beq	r2,zero,124e8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   124e0:	00bffd44 	movi	r2,-11
   124e4:	00000106 	br	124ec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   124e8:	00bffec4 	movi	r2,-5
}
   124ec:	e037883a 	mov	sp,fp
   124f0:	dfc00117 	ldw	ra,4(sp)
   124f4:	df000017 	ldw	fp,0(sp)
   124f8:	dec00204 	addi	sp,sp,8
   124fc:	f800283a 	ret

00012500 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12500:	defff904 	addi	sp,sp,-28
   12504:	dfc00615 	stw	ra,24(sp)
   12508:	df000515 	stw	fp,20(sp)
   1250c:	df000504 	addi	fp,sp,20
   12510:	e13ffe15 	stw	r4,-8(fp)
   12514:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12518:	0007883a 	mov	r3,zero
   1251c:	e0bffe17 	ldw	r2,-8(fp)
   12520:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12524:	e0bffe17 	ldw	r2,-8(fp)
   12528:	10800104 	addi	r2,r2,4
   1252c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12530:	0005303a 	rdctl	r2,status
   12534:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12538:	e0fffc17 	ldw	r3,-16(fp)
   1253c:	00bfff84 	movi	r2,-2
   12540:	1884703a 	and	r2,r3,r2
   12544:	1001703a 	wrctl	status,r2
  
  return context;
   12548:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1254c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   12550:	00133800 	call	13380 <alt_tick>
   12554:	e0bffb17 	ldw	r2,-20(fp)
   12558:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1255c:	e0bffd17 	ldw	r2,-12(fp)
   12560:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12564:	0001883a 	nop
   12568:	e037883a 	mov	sp,fp
   1256c:	dfc00117 	ldw	ra,4(sp)
   12570:	df000017 	ldw	fp,0(sp)
   12574:	dec00204 	addi	sp,sp,8
   12578:	f800283a 	ret

0001257c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1257c:	defff904 	addi	sp,sp,-28
   12580:	dfc00615 	stw	ra,24(sp)
   12584:	df000515 	stw	fp,20(sp)
   12588:	df000504 	addi	fp,sp,20
   1258c:	e13ffc15 	stw	r4,-16(fp)
   12590:	e17ffd15 	stw	r5,-12(fp)
   12594:	e1bffe15 	stw	r6,-8(fp)
   12598:	e1ffff15 	stw	r7,-4(fp)
   1259c:	e0bfff17 	ldw	r2,-4(fp)
   125a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   125a4:	d0a6bb17 	ldw	r2,-25876(gp)
   125a8:	1000021e 	bne	r2,zero,125b4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   125ac:	e0bffb17 	ldw	r2,-20(fp)
   125b0:	d0a6bb15 	stw	r2,-25876(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   125b4:	e0bffc17 	ldw	r2,-16(fp)
   125b8:	10800104 	addi	r2,r2,4
   125bc:	00c001c4 	movi	r3,7
   125c0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   125c4:	01800074 	movhi	r6,1
   125c8:	31894004 	addi	r6,r6,9472
   125cc:	e17ffc17 	ldw	r5,-16(fp)
   125d0:	e13ffe17 	ldw	r4,-8(fp)
   125d4:	00114740 	call	11474 <alt_irq_register>
#endif  
}
   125d8:	0001883a 	nop
   125dc:	e037883a 	mov	sp,fp
   125e0:	dfc00117 	ldw	ra,4(sp)
   125e4:	df000017 	ldw	fp,0(sp)
   125e8:	dec00204 	addi	sp,sp,8
   125ec:	f800283a 	ret

000125f0 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   125f0:	defffc04 	addi	sp,sp,-16
   125f4:	dfc00315 	stw	ra,12(sp)
   125f8:	df000215 	stw	fp,8(sp)
   125fc:	df000204 	addi	fp,sp,8
   12600:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   12604:	d1600304 	addi	r5,gp,-32756
   12608:	e13fff17 	ldw	r4,-4(fp)
   1260c:	0012dcc0 	call	12dcc <alt_find_dev>
   12610:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   12614:	e0bffe17 	ldw	r2,-8(fp)
}
   12618:	e037883a 	mov	sp,fp
   1261c:	dfc00117 	ldw	ra,4(sp)
   12620:	df000017 	ldw	fp,0(sp)
   12624:	dec00204 	addi	sp,sp,8
   12628:	f800283a 	ret

0001262c <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   1262c:	defffd04 	addi	sp,sp,-12
   12630:	df000215 	stw	fp,8(sp)
   12634:	df000204 	addi	fp,sp,8
   12638:	e13ffe15 	stw	r4,-8(fp)
   1263c:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   12640:	e0bffe17 	ldw	r2,-8(fp)
   12644:	10800a17 	ldw	r2,40(r2)
   12648:	10800023 	ldbuio	r2,0(r2)
   1264c:	10803fcc 	andi	r2,r2,255
   12650:	1007883a 	mov	r3,r2
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	10c00005 	stb	r3,0(r2)

	return 0;
   1265c:	0005883a 	mov	r2,zero
}
   12660:	e037883a 	mov	sp,fp
   12664:	df000017 	ldw	fp,0(sp)
   12668:	dec00104 	addi	sp,sp,4
   1266c:	f800283a 	ret

00012670 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   12670:	defffc04 	addi	sp,sp,-16
   12674:	df000315 	stw	fp,12(sp)
   12678:	df000304 	addi	fp,sp,12
   1267c:	e13ffd15 	stw	r4,-12(fp)
   12680:	2805883a 	mov	r2,r5
   12684:	e1bfff15 	stw	r6,-4(fp)
   12688:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1268c:	e0bffd17 	ldw	r2,-12(fp)
   12690:	10800a17 	ldw	r2,40(r2)
   12694:	1007883a 	mov	r3,r2
   12698:	e0bffe03 	ldbu	r2,-8(fp)
   1269c:	10800fcc 	andi	r2,r2,63
   126a0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   126a4:	e0bffd17 	ldw	r2,-12(fp)
   126a8:	10800a17 	ldw	r2,40(r2)
   126ac:	10800044 	addi	r2,r2,1
   126b0:	10800023 	ldbuio	r2,0(r2)
   126b4:	10803fcc 	andi	r2,r2,255
   126b8:	1007883a 	mov	r3,r2
   126bc:	e0bfff17 	ldw	r2,-4(fp)
   126c0:	10c00005 	stb	r3,0(r2)

	return 0;
   126c4:	0005883a 	mov	r2,zero
}
   126c8:	e037883a 	mov	sp,fp
   126cc:	df000017 	ldw	fp,0(sp)
   126d0:	dec00104 	addi	sp,sp,4
   126d4:	f800283a 	ret

000126d8 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   126d8:	defffc04 	addi	sp,sp,-16
   126dc:	df000315 	stw	fp,12(sp)
   126e0:	df000304 	addi	fp,sp,12
   126e4:	e13ffd15 	stw	r4,-12(fp)
   126e8:	2807883a 	mov	r3,r5
   126ec:	3005883a 	mov	r2,r6
   126f0:	e0fffe05 	stb	r3,-8(fp)
   126f4:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   126f8:	e0bffd17 	ldw	r2,-12(fp)
   126fc:	10800a17 	ldw	r2,40(r2)
   12700:	1007883a 	mov	r3,r2
   12704:	e0bffe03 	ldbu	r2,-8(fp)
   12708:	10800fcc 	andi	r2,r2,63
   1270c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   12710:	e0bffd17 	ldw	r2,-12(fp)
   12714:	10800a17 	ldw	r2,40(r2)
   12718:	10800044 	addi	r2,r2,1
   1271c:	1007883a 	mov	r3,r2
   12720:	e0bfff03 	ldbu	r2,-4(fp)
   12724:	18800025 	stbio	r2,0(r3)

	return 0;
   12728:	0005883a 	mov	r2,zero
}
   1272c:	e037883a 	mov	sp,fp
   12730:	df000017 	ldw	fp,0(sp)
   12734:	dec00104 	addi	sp,sp,4
   12738:	f800283a 	ret

0001273c <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   1273c:	defffd04 	addi	sp,sp,-12
   12740:	df000215 	stw	fp,8(sp)
   12744:	df000204 	addi	fp,sp,8
   12748:	e13ffe15 	stw	r4,-8(fp)
   1274c:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12750:	e0bffe17 	ldw	r2,-8(fp)
   12754:	10800a17 	ldw	r2,40(r2)
   12758:	1007883a 	mov	r3,r2
   1275c:	00800c84 	movi	r2,50
   12760:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12764:	e0bffe17 	ldw	r2,-8(fp)
   12768:	10800a17 	ldw	r2,40(r2)
   1276c:	10800044 	addi	r2,r2,1
   12770:	10800023 	ldbuio	r2,0(r2)
   12774:	10803fcc 	andi	r2,r2,255
   12778:	10ffffcc 	andi	r3,r2,65535
   1277c:	e0bfff17 	ldw	r2,-4(fp)
   12780:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12784:	e0bffe17 	ldw	r2,-8(fp)
   12788:	10800a17 	ldw	r2,40(r2)
   1278c:	1007883a 	mov	r3,r2
   12790:	00800cc4 	movi	r2,51
   12794:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12798:	e0bffe17 	ldw	r2,-8(fp)
   1279c:	10800a17 	ldw	r2,40(r2)
   127a0:	10800044 	addi	r2,r2,1
   127a4:	10800023 	ldbuio	r2,0(r2)
   127a8:	10803fcc 	andi	r2,r2,255
   127ac:	10bfffcc 	andi	r2,r2,65535
   127b0:	1004923a 	slli	r2,r2,8
   127b4:	e0ffff17 	ldw	r3,-4(fp)
   127b8:	18c00017 	ldw	r3,0(r3)
   127bc:	1885883a 	add	r2,r3,r2
   127c0:	1007883a 	mov	r3,r2
   127c4:	e0bfff17 	ldw	r2,-4(fp)
   127c8:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   127cc:	e0bfff17 	ldw	r2,-4(fp)
   127d0:	10800017 	ldw	r2,0(r2)
   127d4:	10a0000c 	andi	r2,r2,32768
   127d8:	10000626 	beq	r2,zero,127f4 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   127dc:	e0bfff17 	ldw	r2,-4(fp)
   127e0:	10800017 	ldw	r2,0(r2)
   127e4:	10bffff4 	orhi	r2,r2,65535
   127e8:	1007883a 	mov	r3,r2
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   127f4:	0005883a 	mov	r2,zero
}
   127f8:	e037883a 	mov	sp,fp
   127fc:	df000017 	ldw	fp,0(sp)
   12800:	dec00104 	addi	sp,sp,4
   12804:	f800283a 	ret

00012808 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   12808:	defffd04 	addi	sp,sp,-12
   1280c:	df000215 	stw	fp,8(sp)
   12810:	df000204 	addi	fp,sp,8
   12814:	e13ffe15 	stw	r4,-8(fp)
   12818:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1281c:	e0bffe17 	ldw	r2,-8(fp)
   12820:	10800a17 	ldw	r2,40(r2)
   12824:	1007883a 	mov	r3,r2
   12828:	00800d04 	movi	r2,52
   1282c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12830:	e0bffe17 	ldw	r2,-8(fp)
   12834:	10800a17 	ldw	r2,40(r2)
   12838:	10800044 	addi	r2,r2,1
   1283c:	10800023 	ldbuio	r2,0(r2)
   12840:	10803fcc 	andi	r2,r2,255
   12844:	10ffffcc 	andi	r3,r2,65535
   12848:	e0bfff17 	ldw	r2,-4(fp)
   1284c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12850:	e0bffe17 	ldw	r2,-8(fp)
   12854:	10800a17 	ldw	r2,40(r2)
   12858:	1007883a 	mov	r3,r2
   1285c:	00800d44 	movi	r2,53
   12860:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12864:	e0bffe17 	ldw	r2,-8(fp)
   12868:	10800a17 	ldw	r2,40(r2)
   1286c:	10800044 	addi	r2,r2,1
   12870:	10800023 	ldbuio	r2,0(r2)
   12874:	10803fcc 	andi	r2,r2,255
   12878:	10bfffcc 	andi	r2,r2,65535
   1287c:	1004923a 	slli	r2,r2,8
   12880:	e0ffff17 	ldw	r3,-4(fp)
   12884:	18c00017 	ldw	r3,0(r3)
   12888:	1885883a 	add	r2,r3,r2
   1288c:	1007883a 	mov	r3,r2
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   12898:	e0bfff17 	ldw	r2,-4(fp)
   1289c:	10800017 	ldw	r2,0(r2)
   128a0:	10a0000c 	andi	r2,r2,32768
   128a4:	10000626 	beq	r2,zero,128c0 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   128a8:	e0bfff17 	ldw	r2,-4(fp)
   128ac:	10800017 	ldw	r2,0(r2)
   128b0:	10bffff4 	orhi	r2,r2,65535
   128b4:	1007883a 	mov	r3,r2
   128b8:	e0bfff17 	ldw	r2,-4(fp)
   128bc:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   128c0:	0005883a 	mov	r2,zero
}
   128c4:	e037883a 	mov	sp,fp
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00104 	addi	sp,sp,4
   128d0:	f800283a 	ret

000128d4 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   128d4:	defffd04 	addi	sp,sp,-12
   128d8:	df000215 	stw	fp,8(sp)
   128dc:	df000204 	addi	fp,sp,8
   128e0:	e13ffe15 	stw	r4,-8(fp)
   128e4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   128e8:	e0bffe17 	ldw	r2,-8(fp)
   128ec:	10800a17 	ldw	r2,40(r2)
   128f0:	1007883a 	mov	r3,r2
   128f4:	00800d84 	movi	r2,54
   128f8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	10800a17 	ldw	r2,40(r2)
   12904:	10800044 	addi	r2,r2,1
   12908:	10800023 	ldbuio	r2,0(r2)
   1290c:	10803fcc 	andi	r2,r2,255
   12910:	10ffffcc 	andi	r3,r2,65535
   12914:	e0bfff17 	ldw	r2,-4(fp)
   12918:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1291c:	e0bffe17 	ldw	r2,-8(fp)
   12920:	10800a17 	ldw	r2,40(r2)
   12924:	1007883a 	mov	r3,r2
   12928:	00800dc4 	movi	r2,55
   1292c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12930:	e0bffe17 	ldw	r2,-8(fp)
   12934:	10800a17 	ldw	r2,40(r2)
   12938:	10800044 	addi	r2,r2,1
   1293c:	10800023 	ldbuio	r2,0(r2)
   12940:	10803fcc 	andi	r2,r2,255
   12944:	10bfffcc 	andi	r2,r2,65535
   12948:	1004923a 	slli	r2,r2,8
   1294c:	e0ffff17 	ldw	r3,-4(fp)
   12950:	18c00017 	ldw	r3,0(r3)
   12954:	1885883a 	add	r2,r3,r2
   12958:	1007883a 	mov	r3,r2
   1295c:	e0bfff17 	ldw	r2,-4(fp)
   12960:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   12964:	e0bfff17 	ldw	r2,-4(fp)
   12968:	10800017 	ldw	r2,0(r2)
   1296c:	10a0000c 	andi	r2,r2,32768
   12970:	10000626 	beq	r2,zero,1298c <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	10800017 	ldw	r2,0(r2)
   1297c:	10bffff4 	orhi	r2,r2,65535
   12980:	1007883a 	mov	r3,r2
   12984:	e0bfff17 	ldw	r2,-4(fp)
   12988:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   1298c:	0005883a 	mov	r2,zero
}
   12990:	e037883a 	mov	sp,fp
   12994:	df000017 	ldw	fp,0(sp)
   12998:	dec00104 	addi	sp,sp,4
   1299c:	f800283a 	ret

000129a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   129a0:	defff504 	addi	sp,sp,-44
   129a4:	df000a15 	stw	fp,40(sp)
   129a8:	df000a04 	addi	fp,sp,40
   129ac:	e13ffc15 	stw	r4,-16(fp)
   129b0:	e17ffd15 	stw	r5,-12(fp)
   129b4:	e1bffe15 	stw	r6,-8(fp)
   129b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   129bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   129c0:	d0a6bb17 	ldw	r2,-25876(gp)
  
  if (alt_ticks_per_second ())
   129c4:	10003c26 	beq	r2,zero,12ab8 <alt_alarm_start+0x118>
  {
    if (alarm)
   129c8:	e0bffc17 	ldw	r2,-16(fp)
   129cc:	10003826 	beq	r2,zero,12ab0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   129d0:	e0bffc17 	ldw	r2,-16(fp)
   129d4:	e0fffe17 	ldw	r3,-8(fp)
   129d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   129dc:	e0bffc17 	ldw	r2,-16(fp)
   129e0:	e0ffff17 	ldw	r3,-4(fp)
   129e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129e8:	0005303a 	rdctl	r2,status
   129ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129f0:	e0fff917 	ldw	r3,-28(fp)
   129f4:	00bfff84 	movi	r2,-2
   129f8:	1884703a 	and	r2,r3,r2
   129fc:	1001703a 	wrctl	status,r2
  
  return context;
   12a00:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12a04:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12a08:	d0a6bc17 	ldw	r2,-25872(gp)
      
      current_nticks = alt_nticks();
   12a0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12a10:	e0fffd17 	ldw	r3,-12(fp)
   12a14:	e0bff617 	ldw	r2,-40(fp)
   12a18:	1885883a 	add	r2,r3,r2
   12a1c:	10c00044 	addi	r3,r2,1
   12a20:	e0bffc17 	ldw	r2,-16(fp)
   12a24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12a28:	e0bffc17 	ldw	r2,-16(fp)
   12a2c:	10c00217 	ldw	r3,8(r2)
   12a30:	e0bff617 	ldw	r2,-40(fp)
   12a34:	1880042e 	bgeu	r3,r2,12a48 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   12a38:	e0bffc17 	ldw	r2,-16(fp)
   12a3c:	00c00044 	movi	r3,1
   12a40:	10c00405 	stb	r3,16(r2)
   12a44:	00000206 	br	12a50 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   12a48:	e0bffc17 	ldw	r2,-16(fp)
   12a4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12a50:	e0bffc17 	ldw	r2,-16(fp)
   12a54:	d0e00704 	addi	r3,gp,-32740
   12a58:	e0fffa15 	stw	r3,-24(fp)
   12a5c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12a60:	e0bffb17 	ldw	r2,-20(fp)
   12a64:	e0fffa17 	ldw	r3,-24(fp)
   12a68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12a6c:	e0bffa17 	ldw	r2,-24(fp)
   12a70:	10c00017 	ldw	r3,0(r2)
   12a74:	e0bffb17 	ldw	r2,-20(fp)
   12a78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12a7c:	e0bffa17 	ldw	r2,-24(fp)
   12a80:	10800017 	ldw	r2,0(r2)
   12a84:	e0fffb17 	ldw	r3,-20(fp)
   12a88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12a8c:	e0bffa17 	ldw	r2,-24(fp)
   12a90:	e0fffb17 	ldw	r3,-20(fp)
   12a94:	10c00015 	stw	r3,0(r2)
   12a98:	e0bff817 	ldw	r2,-32(fp)
   12a9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12aa0:	e0bff717 	ldw	r2,-36(fp)
   12aa4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12aa8:	0005883a 	mov	r2,zero
   12aac:	00000306 	br	12abc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12ab0:	00bffa84 	movi	r2,-22
   12ab4:	00000106 	br	12abc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12ab8:	00bfde84 	movi	r2,-134
  }
}
   12abc:	e037883a 	mov	sp,fp
   12ac0:	df000017 	ldw	fp,0(sp)
   12ac4:	dec00104 	addi	sp,sp,4
   12ac8:	f800283a 	ret

00012acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12acc:	defffe04 	addi	sp,sp,-8
   12ad0:	dfc00115 	stw	ra,4(sp)
   12ad4:	df000015 	stw	fp,0(sp)
   12ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12adc:	d0a00617 	ldw	r2,-32744(gp)
   12ae0:	10000326 	beq	r2,zero,12af0 <alt_get_errno+0x24>
   12ae4:	d0a00617 	ldw	r2,-32744(gp)
   12ae8:	103ee83a 	callr	r2
   12aec:	00000106 	br	12af4 <alt_get_errno+0x28>
   12af0:	d0a6be04 	addi	r2,gp,-25864
}
   12af4:	e037883a 	mov	sp,fp
   12af8:	dfc00117 	ldw	ra,4(sp)
   12afc:	df000017 	ldw	fp,0(sp)
   12b00:	dec00204 	addi	sp,sp,8
   12b04:	f800283a 	ret

00012b08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12b08:	defffb04 	addi	sp,sp,-20
   12b0c:	dfc00415 	stw	ra,16(sp)
   12b10:	df000315 	stw	fp,12(sp)
   12b14:	df000304 	addi	fp,sp,12
   12b18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12b1c:	e0bfff17 	ldw	r2,-4(fp)
   12b20:	10000816 	blt	r2,zero,12b44 <close+0x3c>
   12b24:	01400304 	movi	r5,12
   12b28:	e13fff17 	ldw	r4,-4(fp)
   12b2c:	00113040 	call	11304 <__mulsi3>
   12b30:	1007883a 	mov	r3,r2
   12b34:	00800074 	movhi	r2,1
   12b38:	109d1804 	addi	r2,r2,29792
   12b3c:	1885883a 	add	r2,r3,r2
   12b40:	00000106 	br	12b48 <close+0x40>
   12b44:	0005883a 	mov	r2,zero
   12b48:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12b4c:	e0bffd17 	ldw	r2,-12(fp)
   12b50:	10001926 	beq	r2,zero,12bb8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12b54:	e0bffd17 	ldw	r2,-12(fp)
   12b58:	10800017 	ldw	r2,0(r2)
   12b5c:	10800417 	ldw	r2,16(r2)
   12b60:	10000626 	beq	r2,zero,12b7c <close+0x74>
   12b64:	e0bffd17 	ldw	r2,-12(fp)
   12b68:	10800017 	ldw	r2,0(r2)
   12b6c:	10800417 	ldw	r2,16(r2)
   12b70:	e13ffd17 	ldw	r4,-12(fp)
   12b74:	103ee83a 	callr	r2
   12b78:	00000106 	br	12b80 <close+0x78>
   12b7c:	0005883a 	mov	r2,zero
   12b80:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12b84:	e13fff17 	ldw	r4,-4(fp)
   12b88:	00132600 	call	13260 <alt_release_fd>
    if (rval < 0)
   12b8c:	e0bffe17 	ldw	r2,-8(fp)
   12b90:	1000070e 	bge	r2,zero,12bb0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   12b94:	0012acc0 	call	12acc <alt_get_errno>
   12b98:	1007883a 	mov	r3,r2
   12b9c:	e0bffe17 	ldw	r2,-8(fp)
   12ba0:	0085c83a 	sub	r2,zero,r2
   12ba4:	18800015 	stw	r2,0(r3)
      return -1;
   12ba8:	00bfffc4 	movi	r2,-1
   12bac:	00000706 	br	12bcc <close+0xc4>
    }
    return 0;
   12bb0:	0005883a 	mov	r2,zero
   12bb4:	00000506 	br	12bcc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12bb8:	0012acc0 	call	12acc <alt_get_errno>
   12bbc:	1007883a 	mov	r3,r2
   12bc0:	00801444 	movi	r2,81
   12bc4:	18800015 	stw	r2,0(r3)
    return -1;
   12bc8:	00bfffc4 	movi	r2,-1
  }
}
   12bcc:	e037883a 	mov	sp,fp
   12bd0:	dfc00117 	ldw	ra,4(sp)
   12bd4:	df000017 	ldw	fp,0(sp)
   12bd8:	dec00204 	addi	sp,sp,8
   12bdc:	f800283a 	ret

00012be0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12be0:	deffff04 	addi	sp,sp,-4
   12be4:	df000015 	stw	fp,0(sp)
   12be8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12bec:	0001883a 	nop
   12bf0:	e037883a 	mov	sp,fp
   12bf4:	df000017 	ldw	fp,0(sp)
   12bf8:	dec00104 	addi	sp,sp,4
   12bfc:	f800283a 	ret

00012c00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12c00:	defffc04 	addi	sp,sp,-16
   12c04:	df000315 	stw	fp,12(sp)
   12c08:	df000304 	addi	fp,sp,12
   12c0c:	e13ffd15 	stw	r4,-12(fp)
   12c10:	e17ffe15 	stw	r5,-8(fp)
   12c14:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12c18:	e0bfff17 	ldw	r2,-4(fp)
}
   12c1c:	e037883a 	mov	sp,fp
   12c20:	df000017 	ldw	fp,0(sp)
   12c24:	dec00104 	addi	sp,sp,4
   12c28:	f800283a 	ret

00012c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12c2c:	defffe04 	addi	sp,sp,-8
   12c30:	dfc00115 	stw	ra,4(sp)
   12c34:	df000015 	stw	fp,0(sp)
   12c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12c3c:	d0a00617 	ldw	r2,-32744(gp)
   12c40:	10000326 	beq	r2,zero,12c50 <alt_get_errno+0x24>
   12c44:	d0a00617 	ldw	r2,-32744(gp)
   12c48:	103ee83a 	callr	r2
   12c4c:	00000106 	br	12c54 <alt_get_errno+0x28>
   12c50:	d0a6be04 	addi	r2,gp,-25864
}
   12c54:	e037883a 	mov	sp,fp
   12c58:	dfc00117 	ldw	ra,4(sp)
   12c5c:	df000017 	ldw	fp,0(sp)
   12c60:	dec00204 	addi	sp,sp,8
   12c64:	f800283a 	ret

00012c68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12c68:	defffa04 	addi	sp,sp,-24
   12c6c:	dfc00515 	stw	ra,20(sp)
   12c70:	df000415 	stw	fp,16(sp)
   12c74:	df000404 	addi	fp,sp,16
   12c78:	e13ffe15 	stw	r4,-8(fp)
   12c7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12c80:	e0bffe17 	ldw	r2,-8(fp)
   12c84:	10000326 	beq	r2,zero,12c94 <alt_dev_llist_insert+0x2c>
   12c88:	e0bffe17 	ldw	r2,-8(fp)
   12c8c:	10800217 	ldw	r2,8(r2)
   12c90:	1000061e 	bne	r2,zero,12cac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12c94:	0012c2c0 	call	12c2c <alt_get_errno>
   12c98:	1007883a 	mov	r3,r2
   12c9c:	00800584 	movi	r2,22
   12ca0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12ca4:	00bffa84 	movi	r2,-22
   12ca8:	00001306 	br	12cf8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12cac:	e0bffe17 	ldw	r2,-8(fp)
   12cb0:	e0ffff17 	ldw	r3,-4(fp)
   12cb4:	e0fffc15 	stw	r3,-16(fp)
   12cb8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12cbc:	e0bffd17 	ldw	r2,-12(fp)
   12cc0:	e0fffc17 	ldw	r3,-16(fp)
   12cc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12cc8:	e0bffc17 	ldw	r2,-16(fp)
   12ccc:	10c00017 	ldw	r3,0(r2)
   12cd0:	e0bffd17 	ldw	r2,-12(fp)
   12cd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12cd8:	e0bffc17 	ldw	r2,-16(fp)
   12cdc:	10800017 	ldw	r2,0(r2)
   12ce0:	e0fffd17 	ldw	r3,-12(fp)
   12ce4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12ce8:	e0bffc17 	ldw	r2,-16(fp)
   12cec:	e0fffd17 	ldw	r3,-12(fp)
   12cf0:	10c00015 	stw	r3,0(r2)

  return 0;  
   12cf4:	0005883a 	mov	r2,zero
}
   12cf8:	e037883a 	mov	sp,fp
   12cfc:	dfc00117 	ldw	ra,4(sp)
   12d00:	df000017 	ldw	fp,0(sp)
   12d04:	dec00204 	addi	sp,sp,8
   12d08:	f800283a 	ret

00012d0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12d0c:	defffd04 	addi	sp,sp,-12
   12d10:	dfc00215 	stw	ra,8(sp)
   12d14:	df000115 	stw	fp,4(sp)
   12d18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12d1c:	00800074 	movhi	r2,1
   12d20:	10985d04 	addi	r2,r2,24948
   12d24:	e0bfff15 	stw	r2,-4(fp)
   12d28:	00000606 	br	12d44 <_do_ctors+0x38>
        (*ctor) (); 
   12d2c:	e0bfff17 	ldw	r2,-4(fp)
   12d30:	10800017 	ldw	r2,0(r2)
   12d34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12d38:	e0bfff17 	ldw	r2,-4(fp)
   12d3c:	10bfff04 	addi	r2,r2,-4
   12d40:	e0bfff15 	stw	r2,-4(fp)
   12d44:	e0ffff17 	ldw	r3,-4(fp)
   12d48:	00800074 	movhi	r2,1
   12d4c:	10985e04 	addi	r2,r2,24952
   12d50:	18bff62e 	bgeu	r3,r2,12d2c <__alt_data_end+0xffff2d2c>
        (*ctor) (); 
}
   12d54:	0001883a 	nop
   12d58:	e037883a 	mov	sp,fp
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	f800283a 	ret

00012d6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   12d6c:	defffd04 	addi	sp,sp,-12
   12d70:	dfc00215 	stw	ra,8(sp)
   12d74:	df000115 	stw	fp,4(sp)
   12d78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12d7c:	00800074 	movhi	r2,1
   12d80:	10985d04 	addi	r2,r2,24948
   12d84:	e0bfff15 	stw	r2,-4(fp)
   12d88:	00000606 	br	12da4 <_do_dtors+0x38>
        (*dtor) (); 
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	10800017 	ldw	r2,0(r2)
   12d94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   12d98:	e0bfff17 	ldw	r2,-4(fp)
   12d9c:	10bfff04 	addi	r2,r2,-4
   12da0:	e0bfff15 	stw	r2,-4(fp)
   12da4:	e0ffff17 	ldw	r3,-4(fp)
   12da8:	00800074 	movhi	r2,1
   12dac:	10985e04 	addi	r2,r2,24952
   12db0:	18bff62e 	bgeu	r3,r2,12d8c <__alt_data_end+0xffff2d8c>
        (*dtor) (); 
}
   12db4:	0001883a 	nop
   12db8:	e037883a 	mov	sp,fp
   12dbc:	dfc00117 	ldw	ra,4(sp)
   12dc0:	df000017 	ldw	fp,0(sp)
   12dc4:	dec00204 	addi	sp,sp,8
   12dc8:	f800283a 	ret

00012dcc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12dcc:	defffa04 	addi	sp,sp,-24
   12dd0:	dfc00515 	stw	ra,20(sp)
   12dd4:	df000415 	stw	fp,16(sp)
   12dd8:	df000404 	addi	fp,sp,16
   12ddc:	e13ffe15 	stw	r4,-8(fp)
   12de0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	10800017 	ldw	r2,0(r2)
   12dec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12df0:	e13ffe17 	ldw	r4,-8(fp)
   12df4:	00139440 	call	13944 <strlen>
   12df8:	10800044 	addi	r2,r2,1
   12dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12e00:	00000d06 	br	12e38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12e04:	e0bffc17 	ldw	r2,-16(fp)
   12e08:	10800217 	ldw	r2,8(r2)
   12e0c:	e0fffd17 	ldw	r3,-12(fp)
   12e10:	180d883a 	mov	r6,r3
   12e14:	e17ffe17 	ldw	r5,-8(fp)
   12e18:	1009883a 	mov	r4,r2
   12e1c:	00137600 	call	13760 <memcmp>
   12e20:	1000021e 	bne	r2,zero,12e2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12e24:	e0bffc17 	ldw	r2,-16(fp)
   12e28:	00000706 	br	12e48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   12e2c:	e0bffc17 	ldw	r2,-16(fp)
   12e30:	10800017 	ldw	r2,0(r2)
   12e34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12e38:	e0fffc17 	ldw	r3,-16(fp)
   12e3c:	e0bfff17 	ldw	r2,-4(fp)
   12e40:	18bff01e 	bne	r3,r2,12e04 <__alt_data_end+0xffff2e04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   12e44:	0005883a 	mov	r2,zero
}
   12e48:	e037883a 	mov	sp,fp
   12e4c:	dfc00117 	ldw	ra,4(sp)
   12e50:	df000017 	ldw	fp,0(sp)
   12e54:	dec00204 	addi	sp,sp,8
   12e58:	f800283a 	ret

00012e5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12e5c:	deffff04 	addi	sp,sp,-4
   12e60:	df000015 	stw	fp,0(sp)
   12e64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   12e68:	0001883a 	nop
   12e6c:	e037883a 	mov	sp,fp
   12e70:	df000017 	ldw	fp,0(sp)
   12e74:	dec00104 	addi	sp,sp,4
   12e78:	f800283a 	ret

00012e7c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   12e7c:	defff804 	addi	sp,sp,-32
   12e80:	dfc00715 	stw	ra,28(sp)
   12e84:	df000615 	stw	fp,24(sp)
   12e88:	dc000515 	stw	r16,20(sp)
   12e8c:	df000604 	addi	fp,sp,24
   12e90:	e13ffb15 	stw	r4,-20(fp)
   12e94:	e17ffc15 	stw	r5,-16(fp)
   12e98:	e1bffd15 	stw	r6,-12(fp)
   12e9c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   12ea0:	e1bffe17 	ldw	r6,-8(fp)
   12ea4:	e17ffd17 	ldw	r5,-12(fp)
   12ea8:	e13ffc17 	ldw	r4,-16(fp)
   12eac:	00131040 	call	13104 <open>
   12eb0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   12eb4:	e0bffa17 	ldw	r2,-24(fp)
   12eb8:	10002216 	blt	r2,zero,12f44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   12ebc:	04000074 	movhi	r16,1
   12ec0:	841d1804 	addi	r16,r16,29792
   12ec4:	e0bffa17 	ldw	r2,-24(fp)
   12ec8:	01400304 	movi	r5,12
   12ecc:	1009883a 	mov	r4,r2
   12ed0:	00113040 	call	11304 <__mulsi3>
   12ed4:	8085883a 	add	r2,r16,r2
   12ed8:	10c00017 	ldw	r3,0(r2)
   12edc:	e0bffb17 	ldw	r2,-20(fp)
   12ee0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   12ee4:	04000074 	movhi	r16,1
   12ee8:	841d1804 	addi	r16,r16,29792
   12eec:	e0bffa17 	ldw	r2,-24(fp)
   12ef0:	01400304 	movi	r5,12
   12ef4:	1009883a 	mov	r4,r2
   12ef8:	00113040 	call	11304 <__mulsi3>
   12efc:	8085883a 	add	r2,r16,r2
   12f00:	10800104 	addi	r2,r2,4
   12f04:	10c00017 	ldw	r3,0(r2)
   12f08:	e0bffb17 	ldw	r2,-20(fp)
   12f0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12f10:	04000074 	movhi	r16,1
   12f14:	841d1804 	addi	r16,r16,29792
   12f18:	e0bffa17 	ldw	r2,-24(fp)
   12f1c:	01400304 	movi	r5,12
   12f20:	1009883a 	mov	r4,r2
   12f24:	00113040 	call	11304 <__mulsi3>
   12f28:	8085883a 	add	r2,r16,r2
   12f2c:	10800204 	addi	r2,r2,8
   12f30:	10c00017 	ldw	r3,0(r2)
   12f34:	e0bffb17 	ldw	r2,-20(fp)
   12f38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12f3c:	e13ffa17 	ldw	r4,-24(fp)
   12f40:	00132600 	call	13260 <alt_release_fd>
  }
} 
   12f44:	0001883a 	nop
   12f48:	e6ffff04 	addi	sp,fp,-4
   12f4c:	dfc00217 	ldw	ra,8(sp)
   12f50:	df000117 	ldw	fp,4(sp)
   12f54:	dc000017 	ldw	r16,0(sp)
   12f58:	dec00304 	addi	sp,sp,12
   12f5c:	f800283a 	ret

00012f60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12f60:	defffb04 	addi	sp,sp,-20
   12f64:	dfc00415 	stw	ra,16(sp)
   12f68:	df000315 	stw	fp,12(sp)
   12f6c:	df000304 	addi	fp,sp,12
   12f70:	e13ffd15 	stw	r4,-12(fp)
   12f74:	e17ffe15 	stw	r5,-8(fp)
   12f78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   12f7c:	01c07fc4 	movi	r7,511
   12f80:	01800044 	movi	r6,1
   12f84:	e17ffd17 	ldw	r5,-12(fp)
   12f88:	01000074 	movhi	r4,1
   12f8c:	211d1b04 	addi	r4,r4,29804
   12f90:	0012e7c0 	call	12e7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12f94:	01c07fc4 	movi	r7,511
   12f98:	000d883a 	mov	r6,zero
   12f9c:	e17ffe17 	ldw	r5,-8(fp)
   12fa0:	01000074 	movhi	r4,1
   12fa4:	211d1804 	addi	r4,r4,29792
   12fa8:	0012e7c0 	call	12e7c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   12fac:	01c07fc4 	movi	r7,511
   12fb0:	01800044 	movi	r6,1
   12fb4:	e17fff17 	ldw	r5,-4(fp)
   12fb8:	01000074 	movhi	r4,1
   12fbc:	211d1e04 	addi	r4,r4,29816
   12fc0:	0012e7c0 	call	12e7c <alt_open_fd>
}  
   12fc4:	0001883a 	nop
   12fc8:	e037883a 	mov	sp,fp
   12fcc:	dfc00117 	ldw	ra,4(sp)
   12fd0:	df000017 	ldw	fp,0(sp)
   12fd4:	dec00204 	addi	sp,sp,8
   12fd8:	f800283a 	ret

00012fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12fdc:	defffe04 	addi	sp,sp,-8
   12fe0:	dfc00115 	stw	ra,4(sp)
   12fe4:	df000015 	stw	fp,0(sp)
   12fe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12fec:	d0a00617 	ldw	r2,-32744(gp)
   12ff0:	10000326 	beq	r2,zero,13000 <alt_get_errno+0x24>
   12ff4:	d0a00617 	ldw	r2,-32744(gp)
   12ff8:	103ee83a 	callr	r2
   12ffc:	00000106 	br	13004 <alt_get_errno+0x28>
   13000:	d0a6be04 	addi	r2,gp,-25864
}
   13004:	e037883a 	mov	sp,fp
   13008:	dfc00117 	ldw	ra,4(sp)
   1300c:	df000017 	ldw	fp,0(sp)
   13010:	dec00204 	addi	sp,sp,8
   13014:	f800283a 	ret

00013018 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13018:	defffb04 	addi	sp,sp,-20
   1301c:	dfc00415 	stw	ra,16(sp)
   13020:	df000315 	stw	fp,12(sp)
   13024:	dc000215 	stw	r16,8(sp)
   13028:	df000304 	addi	fp,sp,12
   1302c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13030:	e0bffe17 	ldw	r2,-8(fp)
   13034:	10800217 	ldw	r2,8(r2)
   13038:	10d00034 	orhi	r3,r2,16384
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13044:	e03ffd15 	stw	zero,-12(fp)
   13048:	00002306 	br	130d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1304c:	04000074 	movhi	r16,1
   13050:	841d1804 	addi	r16,r16,29792
   13054:	e0bffd17 	ldw	r2,-12(fp)
   13058:	01400304 	movi	r5,12
   1305c:	1009883a 	mov	r4,r2
   13060:	00113040 	call	11304 <__mulsi3>
   13064:	8085883a 	add	r2,r16,r2
   13068:	10c00017 	ldw	r3,0(r2)
   1306c:	e0bffe17 	ldw	r2,-8(fp)
   13070:	10800017 	ldw	r2,0(r2)
   13074:	1880151e 	bne	r3,r2,130cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13078:	04000074 	movhi	r16,1
   1307c:	841d1804 	addi	r16,r16,29792
   13080:	e0bffd17 	ldw	r2,-12(fp)
   13084:	01400304 	movi	r5,12
   13088:	1009883a 	mov	r4,r2
   1308c:	00113040 	call	11304 <__mulsi3>
   13090:	8085883a 	add	r2,r16,r2
   13094:	10800204 	addi	r2,r2,8
   13098:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1309c:	10000b0e 	bge	r2,zero,130cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   130a0:	01400304 	movi	r5,12
   130a4:	e13ffd17 	ldw	r4,-12(fp)
   130a8:	00113040 	call	11304 <__mulsi3>
   130ac:	1007883a 	mov	r3,r2
   130b0:	00800074 	movhi	r2,1
   130b4:	109d1804 	addi	r2,r2,29792
   130b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   130bc:	e0bffe17 	ldw	r2,-8(fp)
   130c0:	18800226 	beq	r3,r2,130cc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   130c4:	00bffcc4 	movi	r2,-13
   130c8:	00000806 	br	130ec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   130cc:	e0bffd17 	ldw	r2,-12(fp)
   130d0:	10800044 	addi	r2,r2,1
   130d4:	e0bffd15 	stw	r2,-12(fp)
   130d8:	d0a00517 	ldw	r2,-32748(gp)
   130dc:	1007883a 	mov	r3,r2
   130e0:	e0bffd17 	ldw	r2,-12(fp)
   130e4:	18bfd92e 	bgeu	r3,r2,1304c <__alt_data_end+0xffff304c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   130e8:	0005883a 	mov	r2,zero
}
   130ec:	e6ffff04 	addi	sp,fp,-4
   130f0:	dfc00217 	ldw	ra,8(sp)
   130f4:	df000117 	ldw	fp,4(sp)
   130f8:	dc000017 	ldw	r16,0(sp)
   130fc:	dec00304 	addi	sp,sp,12
   13100:	f800283a 	ret

00013104 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13104:	defff604 	addi	sp,sp,-40
   13108:	dfc00915 	stw	ra,36(sp)
   1310c:	df000815 	stw	fp,32(sp)
   13110:	df000804 	addi	fp,sp,32
   13114:	e13ffd15 	stw	r4,-12(fp)
   13118:	e17ffe15 	stw	r5,-8(fp)
   1311c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13120:	00bfffc4 	movi	r2,-1
   13124:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13128:	00bffb44 	movi	r2,-19
   1312c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13130:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13134:	d1600304 	addi	r5,gp,-32756
   13138:	e13ffd17 	ldw	r4,-12(fp)
   1313c:	0012dcc0 	call	12dcc <alt_find_dev>
   13140:	e0bff815 	stw	r2,-32(fp)
   13144:	e0bff817 	ldw	r2,-32(fp)
   13148:	1000051e 	bne	r2,zero,13160 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1314c:	e13ffd17 	ldw	r4,-12(fp)
   13150:	00134ac0 	call	134ac <alt_find_file>
   13154:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13158:	00800044 	movi	r2,1
   1315c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13160:	e0bff817 	ldw	r2,-32(fp)
   13164:	10002b26 	beq	r2,zero,13214 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13168:	e13ff817 	ldw	r4,-32(fp)
   1316c:	00135b40 	call	135b4 <alt_get_fd>
   13170:	e0bff915 	stw	r2,-28(fp)
   13174:	e0bff917 	ldw	r2,-28(fp)
   13178:	1000030e 	bge	r2,zero,13188 <open+0x84>
    {
      status = index;
   1317c:	e0bff917 	ldw	r2,-28(fp)
   13180:	e0bffa15 	stw	r2,-24(fp)
   13184:	00002506 	br	1321c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   13188:	01400304 	movi	r5,12
   1318c:	e13ff917 	ldw	r4,-28(fp)
   13190:	00113040 	call	11304 <__mulsi3>
   13194:	1007883a 	mov	r3,r2
   13198:	00800074 	movhi	r2,1
   1319c:	109d1804 	addi	r2,r2,29792
   131a0:	1885883a 	add	r2,r3,r2
   131a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   131a8:	e0fffe17 	ldw	r3,-8(fp)
   131ac:	00900034 	movhi	r2,16384
   131b0:	10bfffc4 	addi	r2,r2,-1
   131b4:	1886703a 	and	r3,r3,r2
   131b8:	e0bffc17 	ldw	r2,-16(fp)
   131bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   131c0:	e0bffb17 	ldw	r2,-20(fp)
   131c4:	1000051e 	bne	r2,zero,131dc <open+0xd8>
   131c8:	e13ffc17 	ldw	r4,-16(fp)
   131cc:	00130180 	call	13018 <alt_file_locked>
   131d0:	e0bffa15 	stw	r2,-24(fp)
   131d4:	e0bffa17 	ldw	r2,-24(fp)
   131d8:	10001016 	blt	r2,zero,1321c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   131dc:	e0bff817 	ldw	r2,-32(fp)
   131e0:	10800317 	ldw	r2,12(r2)
   131e4:	10000826 	beq	r2,zero,13208 <open+0x104>
   131e8:	e0bff817 	ldw	r2,-32(fp)
   131ec:	10800317 	ldw	r2,12(r2)
   131f0:	e1ffff17 	ldw	r7,-4(fp)
   131f4:	e1bffe17 	ldw	r6,-8(fp)
   131f8:	e17ffd17 	ldw	r5,-12(fp)
   131fc:	e13ffc17 	ldw	r4,-16(fp)
   13200:	103ee83a 	callr	r2
   13204:	00000106 	br	1320c <open+0x108>
   13208:	0005883a 	mov	r2,zero
   1320c:	e0bffa15 	stw	r2,-24(fp)
   13210:	00000206 	br	1321c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13214:	00bffb44 	movi	r2,-19
   13218:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1321c:	e0bffa17 	ldw	r2,-24(fp)
   13220:	1000090e 	bge	r2,zero,13248 <open+0x144>
  {
    alt_release_fd (index);  
   13224:	e13ff917 	ldw	r4,-28(fp)
   13228:	00132600 	call	13260 <alt_release_fd>
    ALT_ERRNO = -status;
   1322c:	0012fdc0 	call	12fdc <alt_get_errno>
   13230:	1007883a 	mov	r3,r2
   13234:	e0bffa17 	ldw	r2,-24(fp)
   13238:	0085c83a 	sub	r2,zero,r2
   1323c:	18800015 	stw	r2,0(r3)
    return -1;
   13240:	00bfffc4 	movi	r2,-1
   13244:	00000106 	br	1324c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   13248:	e0bff917 	ldw	r2,-28(fp)
}
   1324c:	e037883a 	mov	sp,fp
   13250:	dfc00117 	ldw	ra,4(sp)
   13254:	df000017 	ldw	fp,0(sp)
   13258:	dec00204 	addi	sp,sp,8
   1325c:	f800283a 	ret

00013260 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13260:	defffc04 	addi	sp,sp,-16
   13264:	dfc00315 	stw	ra,12(sp)
   13268:	df000215 	stw	fp,8(sp)
   1326c:	dc000115 	stw	r16,4(sp)
   13270:	df000204 	addi	fp,sp,8
   13274:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   13278:	e0bffe17 	ldw	r2,-8(fp)
   1327c:	108000d0 	cmplti	r2,r2,3
   13280:	1000111e 	bne	r2,zero,132c8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   13284:	04000074 	movhi	r16,1
   13288:	841d1804 	addi	r16,r16,29792
   1328c:	e0bffe17 	ldw	r2,-8(fp)
   13290:	01400304 	movi	r5,12
   13294:	1009883a 	mov	r4,r2
   13298:	00113040 	call	11304 <__mulsi3>
   1329c:	8085883a 	add	r2,r16,r2
   132a0:	10800204 	addi	r2,r2,8
   132a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   132a8:	04000074 	movhi	r16,1
   132ac:	841d1804 	addi	r16,r16,29792
   132b0:	e0bffe17 	ldw	r2,-8(fp)
   132b4:	01400304 	movi	r5,12
   132b8:	1009883a 	mov	r4,r2
   132bc:	00113040 	call	11304 <__mulsi3>
   132c0:	8085883a 	add	r2,r16,r2
   132c4:	10000015 	stw	zero,0(r2)
  }
}
   132c8:	0001883a 	nop
   132cc:	e6ffff04 	addi	sp,fp,-4
   132d0:	dfc00217 	ldw	ra,8(sp)
   132d4:	df000117 	ldw	fp,4(sp)
   132d8:	dc000017 	ldw	r16,0(sp)
   132dc:	dec00304 	addi	sp,sp,12
   132e0:	f800283a 	ret

000132e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   132e4:	defffa04 	addi	sp,sp,-24
   132e8:	df000515 	stw	fp,20(sp)
   132ec:	df000504 	addi	fp,sp,20
   132f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132f4:	0005303a 	rdctl	r2,status
   132f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132fc:	e0fffc17 	ldw	r3,-16(fp)
   13300:	00bfff84 	movi	r2,-2
   13304:	1884703a 	and	r2,r3,r2
   13308:	1001703a 	wrctl	status,r2
  
  return context;
   1330c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13310:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13314:	e0bfff17 	ldw	r2,-4(fp)
   13318:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1331c:	e0bffd17 	ldw	r2,-12(fp)
   13320:	10800017 	ldw	r2,0(r2)
   13324:	e0fffd17 	ldw	r3,-12(fp)
   13328:	18c00117 	ldw	r3,4(r3)
   1332c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   13330:	e0bffd17 	ldw	r2,-12(fp)
   13334:	10800117 	ldw	r2,4(r2)
   13338:	e0fffd17 	ldw	r3,-12(fp)
   1333c:	18c00017 	ldw	r3,0(r3)
   13340:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13344:	e0bffd17 	ldw	r2,-12(fp)
   13348:	e0fffd17 	ldw	r3,-12(fp)
   1334c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   13350:	e0bffd17 	ldw	r2,-12(fp)
   13354:	e0fffd17 	ldw	r3,-12(fp)
   13358:	10c00015 	stw	r3,0(r2)
   1335c:	e0bffb17 	ldw	r2,-20(fp)
   13360:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13364:	e0bffe17 	ldw	r2,-8(fp)
   13368:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1336c:	0001883a 	nop
   13370:	e037883a 	mov	sp,fp
   13374:	df000017 	ldw	fp,0(sp)
   13378:	dec00104 	addi	sp,sp,4
   1337c:	f800283a 	ret

00013380 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13380:	defffb04 	addi	sp,sp,-20
   13384:	dfc00415 	stw	ra,16(sp)
   13388:	df000315 	stw	fp,12(sp)
   1338c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13390:	d0a00717 	ldw	r2,-32740(gp)
   13394:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13398:	d0a6bc17 	ldw	r2,-25872(gp)
   1339c:	10800044 	addi	r2,r2,1
   133a0:	d0a6bc15 	stw	r2,-25872(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   133a4:	00002e06 	br	13460 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   133a8:	e0bffd17 	ldw	r2,-12(fp)
   133ac:	10800017 	ldw	r2,0(r2)
   133b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   133b4:	e0bffd17 	ldw	r2,-12(fp)
   133b8:	10800403 	ldbu	r2,16(r2)
   133bc:	10803fcc 	andi	r2,r2,255
   133c0:	10000426 	beq	r2,zero,133d4 <alt_tick+0x54>
   133c4:	d0a6bc17 	ldw	r2,-25872(gp)
   133c8:	1000021e 	bne	r2,zero,133d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   133cc:	e0bffd17 	ldw	r2,-12(fp)
   133d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	10800217 	ldw	r2,8(r2)
   133dc:	d0e6bc17 	ldw	r3,-25872(gp)
   133e0:	18801d36 	bltu	r3,r2,13458 <alt_tick+0xd8>
   133e4:	e0bffd17 	ldw	r2,-12(fp)
   133e8:	10800403 	ldbu	r2,16(r2)
   133ec:	10803fcc 	andi	r2,r2,255
   133f0:	1000191e 	bne	r2,zero,13458 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   133f4:	e0bffd17 	ldw	r2,-12(fp)
   133f8:	10800317 	ldw	r2,12(r2)
   133fc:	e0fffd17 	ldw	r3,-12(fp)
   13400:	18c00517 	ldw	r3,20(r3)
   13404:	1809883a 	mov	r4,r3
   13408:	103ee83a 	callr	r2
   1340c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13410:	e0bfff17 	ldw	r2,-4(fp)
   13414:	1000031e 	bne	r2,zero,13424 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   13418:	e13ffd17 	ldw	r4,-12(fp)
   1341c:	00132e40 	call	132e4 <alt_alarm_stop>
   13420:	00000d06 	br	13458 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   13424:	e0bffd17 	ldw	r2,-12(fp)
   13428:	10c00217 	ldw	r3,8(r2)
   1342c:	e0bfff17 	ldw	r2,-4(fp)
   13430:	1887883a 	add	r3,r3,r2
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1343c:	e0bffd17 	ldw	r2,-12(fp)
   13440:	10c00217 	ldw	r3,8(r2)
   13444:	d0a6bc17 	ldw	r2,-25872(gp)
   13448:	1880032e 	bgeu	r3,r2,13458 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1344c:	e0bffd17 	ldw	r2,-12(fp)
   13450:	00c00044 	movi	r3,1
   13454:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   13458:	e0bffe17 	ldw	r2,-8(fp)
   1345c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13460:	e0fffd17 	ldw	r3,-12(fp)
   13464:	d0a00704 	addi	r2,gp,-32740
   13468:	18bfcf1e 	bne	r3,r2,133a8 <__alt_data_end+0xffff33a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1346c:	0001883a 	nop
}
   13470:	0001883a 	nop
   13474:	e037883a 	mov	sp,fp
   13478:	dfc00117 	ldw	ra,4(sp)
   1347c:	df000017 	ldw	fp,0(sp)
   13480:	dec00204 	addi	sp,sp,8
   13484:	f800283a 	ret

00013488 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   13488:	deffff04 	addi	sp,sp,-4
   1348c:	df000015 	stw	fp,0(sp)
   13490:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13494:	000170fa 	wrctl	ienable,zero
}
   13498:	0001883a 	nop
   1349c:	e037883a 	mov	sp,fp
   134a0:	df000017 	ldw	fp,0(sp)
   134a4:	dec00104 	addi	sp,sp,4
   134a8:	f800283a 	ret

000134ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   134ac:	defffb04 	addi	sp,sp,-20
   134b0:	dfc00415 	stw	ra,16(sp)
   134b4:	df000315 	stw	fp,12(sp)
   134b8:	df000304 	addi	fp,sp,12
   134bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   134c0:	d0a00117 	ldw	r2,-32764(gp)
   134c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   134c8:	00003106 	br	13590 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   134cc:	e0bffd17 	ldw	r2,-12(fp)
   134d0:	10800217 	ldw	r2,8(r2)
   134d4:	1009883a 	mov	r4,r2
   134d8:	00139440 	call	13944 <strlen>
   134dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   134e0:	e0bffd17 	ldw	r2,-12(fp)
   134e4:	10c00217 	ldw	r3,8(r2)
   134e8:	e0bffe17 	ldw	r2,-8(fp)
   134ec:	10bfffc4 	addi	r2,r2,-1
   134f0:	1885883a 	add	r2,r3,r2
   134f4:	10800003 	ldbu	r2,0(r2)
   134f8:	10803fcc 	andi	r2,r2,255
   134fc:	1080201c 	xori	r2,r2,128
   13500:	10bfe004 	addi	r2,r2,-128
   13504:	10800bd8 	cmpnei	r2,r2,47
   13508:	1000031e 	bne	r2,zero,13518 <alt_find_file+0x6c>
    {
      len -= 1;
   1350c:	e0bffe17 	ldw	r2,-8(fp)
   13510:	10bfffc4 	addi	r2,r2,-1
   13514:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13518:	e0bffe17 	ldw	r2,-8(fp)
   1351c:	e0ffff17 	ldw	r3,-4(fp)
   13520:	1885883a 	add	r2,r3,r2
   13524:	10800003 	ldbu	r2,0(r2)
   13528:	10803fcc 	andi	r2,r2,255
   1352c:	1080201c 	xori	r2,r2,128
   13530:	10bfe004 	addi	r2,r2,-128
   13534:	10800be0 	cmpeqi	r2,r2,47
   13538:	1000081e 	bne	r2,zero,1355c <alt_find_file+0xb0>
   1353c:	e0bffe17 	ldw	r2,-8(fp)
   13540:	e0ffff17 	ldw	r3,-4(fp)
   13544:	1885883a 	add	r2,r3,r2
   13548:	10800003 	ldbu	r2,0(r2)
   1354c:	10803fcc 	andi	r2,r2,255
   13550:	1080201c 	xori	r2,r2,128
   13554:	10bfe004 	addi	r2,r2,-128
   13558:	10000a1e 	bne	r2,zero,13584 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1355c:	e0bffd17 	ldw	r2,-12(fp)
   13560:	10800217 	ldw	r2,8(r2)
   13564:	e0fffe17 	ldw	r3,-8(fp)
   13568:	180d883a 	mov	r6,r3
   1356c:	e17fff17 	ldw	r5,-4(fp)
   13570:	1009883a 	mov	r4,r2
   13574:	00137600 	call	13760 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13578:	1000021e 	bne	r2,zero,13584 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1357c:	e0bffd17 	ldw	r2,-12(fp)
   13580:	00000706 	br	135a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   13584:	e0bffd17 	ldw	r2,-12(fp)
   13588:	10800017 	ldw	r2,0(r2)
   1358c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13590:	e0fffd17 	ldw	r3,-12(fp)
   13594:	d0a00104 	addi	r2,gp,-32764
   13598:	18bfcc1e 	bne	r3,r2,134cc <__alt_data_end+0xffff34cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1359c:	0005883a 	mov	r2,zero
}
   135a0:	e037883a 	mov	sp,fp
   135a4:	dfc00117 	ldw	ra,4(sp)
   135a8:	df000017 	ldw	fp,0(sp)
   135ac:	dec00204 	addi	sp,sp,8
   135b0:	f800283a 	ret

000135b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   135b4:	defffa04 	addi	sp,sp,-24
   135b8:	dfc00515 	stw	ra,20(sp)
   135bc:	df000415 	stw	fp,16(sp)
   135c0:	dc000315 	stw	r16,12(sp)
   135c4:	df000404 	addi	fp,sp,16
   135c8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   135cc:	00bffa04 	movi	r2,-24
   135d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   135d4:	e03ffc15 	stw	zero,-16(fp)
   135d8:	00001d06 	br	13650 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   135dc:	04000074 	movhi	r16,1
   135e0:	841d1804 	addi	r16,r16,29792
   135e4:	e0bffc17 	ldw	r2,-16(fp)
   135e8:	01400304 	movi	r5,12
   135ec:	1009883a 	mov	r4,r2
   135f0:	00113040 	call	11304 <__mulsi3>
   135f4:	8085883a 	add	r2,r16,r2
   135f8:	10800017 	ldw	r2,0(r2)
   135fc:	1000111e 	bne	r2,zero,13644 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   13600:	04000074 	movhi	r16,1
   13604:	841d1804 	addi	r16,r16,29792
   13608:	e0bffc17 	ldw	r2,-16(fp)
   1360c:	01400304 	movi	r5,12
   13610:	1009883a 	mov	r4,r2
   13614:	00113040 	call	11304 <__mulsi3>
   13618:	8085883a 	add	r2,r16,r2
   1361c:	e0fffe17 	ldw	r3,-8(fp)
   13620:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13624:	d0e00517 	ldw	r3,-32748(gp)
   13628:	e0bffc17 	ldw	r2,-16(fp)
   1362c:	1880020e 	bge	r3,r2,13638 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   13630:	e0bffc17 	ldw	r2,-16(fp)
   13634:	d0a00515 	stw	r2,-32748(gp)
      }
      rc = i;
   13638:	e0bffc17 	ldw	r2,-16(fp)
   1363c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13640:	00000606 	br	1365c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13644:	e0bffc17 	ldw	r2,-16(fp)
   13648:	10800044 	addi	r2,r2,1
   1364c:	e0bffc15 	stw	r2,-16(fp)
   13650:	e0bffc17 	ldw	r2,-16(fp)
   13654:	10800810 	cmplti	r2,r2,32
   13658:	103fe01e 	bne	r2,zero,135dc <__alt_data_end+0xffff35dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1365c:	e0bffd17 	ldw	r2,-12(fp)
}
   13660:	e6ffff04 	addi	sp,fp,-4
   13664:	dfc00217 	ldw	ra,8(sp)
   13668:	df000117 	ldw	fp,4(sp)
   1366c:	dc000017 	ldw	r16,0(sp)
   13670:	dec00304 	addi	sp,sp,12
   13674:	f800283a 	ret

00013678 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13678:	defffe04 	addi	sp,sp,-8
   1367c:	df000115 	stw	fp,4(sp)
   13680:	df000104 	addi	fp,sp,4
   13684:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   13688:	e0bfff17 	ldw	r2,-4(fp)
   1368c:	10bffe84 	addi	r2,r2,-6
   13690:	10c00428 	cmpgeui	r3,r2,16
   13694:	18001a1e 	bne	r3,zero,13700 <alt_exception_cause_generated_bad_addr+0x88>
   13698:	100690ba 	slli	r3,r2,2
   1369c:	00800074 	movhi	r2,1
   136a0:	108dac04 	addi	r2,r2,14000
   136a4:	1885883a 	add	r2,r3,r2
   136a8:	10800017 	ldw	r2,0(r2)
   136ac:	1000683a 	jmp	r2
   136b0:	000136f0 	cmpltui	zero,zero,1243
   136b4:	000136f0 	cmpltui	zero,zero,1243
   136b8:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136bc:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136c0:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136c4:	000136f0 	cmpltui	zero,zero,1243
   136c8:	000136f8 	rdprs	zero,zero,1243
   136cc:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136d0:	000136f0 	cmpltui	zero,zero,1243
   136d4:	000136f0 	cmpltui	zero,zero,1243
   136d8:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136dc:	000136f0 	cmpltui	zero,zero,1243
   136e0:	000136f8 	rdprs	zero,zero,1243
   136e4:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136e8:	00013700 	call	1370 <__alt_mem_onchip_memory-0xec90>
   136ec:	000136f0 	cmpltui	zero,zero,1243
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   136f0:	00800044 	movi	r2,1
   136f4:	00000306 	br	13704 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   136f8:	0005883a 	mov	r2,zero
   136fc:	00000106 	br	13704 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13700:	0005883a 	mov	r2,zero
  }
}
   13704:	e037883a 	mov	sp,fp
   13708:	df000017 	ldw	fp,0(sp)
   1370c:	dec00104 	addi	sp,sp,4
   13710:	f800283a 	ret

00013714 <atexit>:
   13714:	200b883a 	mov	r5,r4
   13718:	000f883a 	mov	r7,zero
   1371c:	000d883a 	mov	r6,zero
   13720:	0009883a 	mov	r4,zero
   13724:	0013c881 	jmpi	13c88 <__register_exitproc>

00013728 <exit>:
   13728:	defffe04 	addi	sp,sp,-8
   1372c:	000b883a 	mov	r5,zero
   13730:	dc000015 	stw	r16,0(sp)
   13734:	dfc00115 	stw	ra,4(sp)
   13738:	2021883a 	mov	r16,r4
   1373c:	0013da00 	call	13da0 <__call_exitprocs>
   13740:	00800074 	movhi	r2,1
   13744:	109f8c04 	addi	r2,r2,32304
   13748:	11000017 	ldw	r4,0(r2)
   1374c:	20800f17 	ldw	r2,60(r4)
   13750:	10000126 	beq	r2,zero,13758 <exit+0x30>
   13754:	103ee83a 	callr	r2
   13758:	8009883a 	mov	r4,r16
   1375c:	0015adc0 	call	15adc <_exit>

00013760 <memcmp>:
   13760:	01c000c4 	movi	r7,3
   13764:	3980192e 	bgeu	r7,r6,137cc <memcmp+0x6c>
   13768:	2144b03a 	or	r2,r4,r5
   1376c:	11c4703a 	and	r2,r2,r7
   13770:	10000f26 	beq	r2,zero,137b0 <memcmp+0x50>
   13774:	20800003 	ldbu	r2,0(r4)
   13778:	28c00003 	ldbu	r3,0(r5)
   1377c:	10c0151e 	bne	r2,r3,137d4 <memcmp+0x74>
   13780:	31bfff84 	addi	r6,r6,-2
   13784:	01ffffc4 	movi	r7,-1
   13788:	00000406 	br	1379c <memcmp+0x3c>
   1378c:	20800003 	ldbu	r2,0(r4)
   13790:	28c00003 	ldbu	r3,0(r5)
   13794:	31bfffc4 	addi	r6,r6,-1
   13798:	10c00e1e 	bne	r2,r3,137d4 <memcmp+0x74>
   1379c:	21000044 	addi	r4,r4,1
   137a0:	29400044 	addi	r5,r5,1
   137a4:	31fff91e 	bne	r6,r7,1378c <__alt_data_end+0xffff378c>
   137a8:	0005883a 	mov	r2,zero
   137ac:	f800283a 	ret
   137b0:	20c00017 	ldw	r3,0(r4)
   137b4:	28800017 	ldw	r2,0(r5)
   137b8:	18bfee1e 	bne	r3,r2,13774 <__alt_data_end+0xffff3774>
   137bc:	31bfff04 	addi	r6,r6,-4
   137c0:	21000104 	addi	r4,r4,4
   137c4:	29400104 	addi	r5,r5,4
   137c8:	39bff936 	bltu	r7,r6,137b0 <__alt_data_end+0xffff37b0>
   137cc:	303fe91e 	bne	r6,zero,13774 <__alt_data_end+0xffff3774>
   137d0:	003ff506 	br	137a8 <__alt_data_end+0xffff37a8>
   137d4:	10c5c83a 	sub	r2,r2,r3
   137d8:	f800283a 	ret

000137dc <_putc_r>:
   137dc:	defffc04 	addi	sp,sp,-16
   137e0:	dc000215 	stw	r16,8(sp)
   137e4:	dfc00315 	stw	ra,12(sp)
   137e8:	2021883a 	mov	r16,r4
   137ec:	20000226 	beq	r4,zero,137f8 <_putc_r+0x1c>
   137f0:	20800e17 	ldw	r2,56(r4)
   137f4:	10001b26 	beq	r2,zero,13864 <_putc_r+0x88>
   137f8:	30800217 	ldw	r2,8(r6)
   137fc:	10bfffc4 	addi	r2,r2,-1
   13800:	30800215 	stw	r2,8(r6)
   13804:	10000a16 	blt	r2,zero,13830 <_putc_r+0x54>
   13808:	30800017 	ldw	r2,0(r6)
   1380c:	11400005 	stb	r5,0(r2)
   13810:	30800017 	ldw	r2,0(r6)
   13814:	10c00044 	addi	r3,r2,1
   13818:	30c00015 	stw	r3,0(r6)
   1381c:	10800003 	ldbu	r2,0(r2)
   13820:	dfc00317 	ldw	ra,12(sp)
   13824:	dc000217 	ldw	r16,8(sp)
   13828:	dec00404 	addi	sp,sp,16
   1382c:	f800283a 	ret
   13830:	30c00617 	ldw	r3,24(r6)
   13834:	10c00616 	blt	r2,r3,13850 <_putc_r+0x74>
   13838:	30800017 	ldw	r2,0(r6)
   1383c:	00c00284 	movi	r3,10
   13840:	11400005 	stb	r5,0(r2)
   13844:	30800017 	ldw	r2,0(r6)
   13848:	11400003 	ldbu	r5,0(r2)
   1384c:	28fff11e 	bne	r5,r3,13814 <__alt_data_end+0xffff3814>
   13850:	8009883a 	mov	r4,r16
   13854:	dfc00317 	ldw	ra,12(sp)
   13858:	dc000217 	ldw	r16,8(sp)
   1385c:	dec00404 	addi	sp,sp,16
   13860:	00139dc1 	jmpi	139dc <__swbuf_r>
   13864:	d9400015 	stw	r5,0(sp)
   13868:	d9800115 	stw	r6,4(sp)
   1386c:	00145280 	call	14528 <__sinit>
   13870:	d9800117 	ldw	r6,4(sp)
   13874:	d9400017 	ldw	r5,0(sp)
   13878:	003fdf06 	br	137f8 <__alt_data_end+0xffff37f8>

0001387c <putc>:
   1387c:	00800074 	movhi	r2,1
   13880:	defffc04 	addi	sp,sp,-16
   13884:	109f8d04 	addi	r2,r2,32308
   13888:	dc000115 	stw	r16,4(sp)
   1388c:	14000017 	ldw	r16,0(r2)
   13890:	dc400215 	stw	r17,8(sp)
   13894:	dfc00315 	stw	ra,12(sp)
   13898:	2023883a 	mov	r17,r4
   1389c:	80000226 	beq	r16,zero,138a8 <putc+0x2c>
   138a0:	80800e17 	ldw	r2,56(r16)
   138a4:	10001a26 	beq	r2,zero,13910 <putc+0x94>
   138a8:	28800217 	ldw	r2,8(r5)
   138ac:	10bfffc4 	addi	r2,r2,-1
   138b0:	28800215 	stw	r2,8(r5)
   138b4:	10000b16 	blt	r2,zero,138e4 <putc+0x68>
   138b8:	28800017 	ldw	r2,0(r5)
   138bc:	14400005 	stb	r17,0(r2)
   138c0:	28800017 	ldw	r2,0(r5)
   138c4:	10c00044 	addi	r3,r2,1
   138c8:	28c00015 	stw	r3,0(r5)
   138cc:	10800003 	ldbu	r2,0(r2)
   138d0:	dfc00317 	ldw	ra,12(sp)
   138d4:	dc400217 	ldw	r17,8(sp)
   138d8:	dc000117 	ldw	r16,4(sp)
   138dc:	dec00404 	addi	sp,sp,16
   138e0:	f800283a 	ret
   138e4:	28c00617 	ldw	r3,24(r5)
   138e8:	10c00e16 	blt	r2,r3,13924 <putc+0xa8>
   138ec:	28800017 	ldw	r2,0(r5)
   138f0:	01000284 	movi	r4,10
   138f4:	14400005 	stb	r17,0(r2)
   138f8:	28800017 	ldw	r2,0(r5)
   138fc:	10c00003 	ldbu	r3,0(r2)
   13900:	193ff01e 	bne	r3,r4,138c4 <__alt_data_end+0xffff38c4>
   13904:	280d883a 	mov	r6,r5
   13908:	180b883a 	mov	r5,r3
   1390c:	00000706 	br	1392c <putc+0xb0>
   13910:	8009883a 	mov	r4,r16
   13914:	d9400015 	stw	r5,0(sp)
   13918:	00145280 	call	14528 <__sinit>
   1391c:	d9400017 	ldw	r5,0(sp)
   13920:	003fe106 	br	138a8 <__alt_data_end+0xffff38a8>
   13924:	280d883a 	mov	r6,r5
   13928:	880b883a 	mov	r5,r17
   1392c:	8009883a 	mov	r4,r16
   13930:	dfc00317 	ldw	ra,12(sp)
   13934:	dc400217 	ldw	r17,8(sp)
   13938:	dc000117 	ldw	r16,4(sp)
   1393c:	dec00404 	addi	sp,sp,16
   13940:	00139dc1 	jmpi	139dc <__swbuf_r>

00013944 <strlen>:
   13944:	208000cc 	andi	r2,r4,3
   13948:	10002026 	beq	r2,zero,139cc <strlen+0x88>
   1394c:	20800007 	ldb	r2,0(r4)
   13950:	10002026 	beq	r2,zero,139d4 <strlen+0x90>
   13954:	2005883a 	mov	r2,r4
   13958:	00000206 	br	13964 <strlen+0x20>
   1395c:	10c00007 	ldb	r3,0(r2)
   13960:	18001826 	beq	r3,zero,139c4 <strlen+0x80>
   13964:	10800044 	addi	r2,r2,1
   13968:	10c000cc 	andi	r3,r2,3
   1396c:	183ffb1e 	bne	r3,zero,1395c <__alt_data_end+0xffff395c>
   13970:	10c00017 	ldw	r3,0(r2)
   13974:	01ffbff4 	movhi	r7,65279
   13978:	39ffbfc4 	addi	r7,r7,-257
   1397c:	00ca303a 	nor	r5,zero,r3
   13980:	01a02074 	movhi	r6,32897
   13984:	19c7883a 	add	r3,r3,r7
   13988:	31a02004 	addi	r6,r6,-32640
   1398c:	1946703a 	and	r3,r3,r5
   13990:	1986703a 	and	r3,r3,r6
   13994:	1800091e 	bne	r3,zero,139bc <strlen+0x78>
   13998:	10800104 	addi	r2,r2,4
   1399c:	10c00017 	ldw	r3,0(r2)
   139a0:	19cb883a 	add	r5,r3,r7
   139a4:	00c6303a 	nor	r3,zero,r3
   139a8:	28c6703a 	and	r3,r5,r3
   139ac:	1986703a 	and	r3,r3,r6
   139b0:	183ff926 	beq	r3,zero,13998 <__alt_data_end+0xffff3998>
   139b4:	00000106 	br	139bc <strlen+0x78>
   139b8:	10800044 	addi	r2,r2,1
   139bc:	10c00007 	ldb	r3,0(r2)
   139c0:	183ffd1e 	bne	r3,zero,139b8 <__alt_data_end+0xffff39b8>
   139c4:	1105c83a 	sub	r2,r2,r4
   139c8:	f800283a 	ret
   139cc:	2005883a 	mov	r2,r4
   139d0:	003fe706 	br	13970 <__alt_data_end+0xffff3970>
   139d4:	0005883a 	mov	r2,zero
   139d8:	f800283a 	ret

000139dc <__swbuf_r>:
   139dc:	defffb04 	addi	sp,sp,-20
   139e0:	dcc00315 	stw	r19,12(sp)
   139e4:	dc800215 	stw	r18,8(sp)
   139e8:	dc000015 	stw	r16,0(sp)
   139ec:	dfc00415 	stw	ra,16(sp)
   139f0:	dc400115 	stw	r17,4(sp)
   139f4:	2025883a 	mov	r18,r4
   139f8:	2827883a 	mov	r19,r5
   139fc:	3021883a 	mov	r16,r6
   13a00:	20000226 	beq	r4,zero,13a0c <__swbuf_r+0x30>
   13a04:	20800e17 	ldw	r2,56(r4)
   13a08:	10004226 	beq	r2,zero,13b14 <__swbuf_r+0x138>
   13a0c:	80800617 	ldw	r2,24(r16)
   13a10:	8100030b 	ldhu	r4,12(r16)
   13a14:	80800215 	stw	r2,8(r16)
   13a18:	2080020c 	andi	r2,r4,8
   13a1c:	10003626 	beq	r2,zero,13af8 <__swbuf_r+0x11c>
   13a20:	80c00417 	ldw	r3,16(r16)
   13a24:	18003426 	beq	r3,zero,13af8 <__swbuf_r+0x11c>
   13a28:	2088000c 	andi	r2,r4,8192
   13a2c:	9c403fcc 	andi	r17,r19,255
   13a30:	10001a26 	beq	r2,zero,13a9c <__swbuf_r+0xc0>
   13a34:	80800017 	ldw	r2,0(r16)
   13a38:	81000517 	ldw	r4,20(r16)
   13a3c:	10c7c83a 	sub	r3,r2,r3
   13a40:	1900200e 	bge	r3,r4,13ac4 <__swbuf_r+0xe8>
   13a44:	18c00044 	addi	r3,r3,1
   13a48:	81000217 	ldw	r4,8(r16)
   13a4c:	11400044 	addi	r5,r2,1
   13a50:	81400015 	stw	r5,0(r16)
   13a54:	213fffc4 	addi	r4,r4,-1
   13a58:	81000215 	stw	r4,8(r16)
   13a5c:	14c00005 	stb	r19,0(r2)
   13a60:	80800517 	ldw	r2,20(r16)
   13a64:	10c01e26 	beq	r2,r3,13ae0 <__swbuf_r+0x104>
   13a68:	8080030b 	ldhu	r2,12(r16)
   13a6c:	1080004c 	andi	r2,r2,1
   13a70:	10000226 	beq	r2,zero,13a7c <__swbuf_r+0xa0>
   13a74:	00800284 	movi	r2,10
   13a78:	88801926 	beq	r17,r2,13ae0 <__swbuf_r+0x104>
   13a7c:	8805883a 	mov	r2,r17
   13a80:	dfc00417 	ldw	ra,16(sp)
   13a84:	dcc00317 	ldw	r19,12(sp)
   13a88:	dc800217 	ldw	r18,8(sp)
   13a8c:	dc400117 	ldw	r17,4(sp)
   13a90:	dc000017 	ldw	r16,0(sp)
   13a94:	dec00504 	addi	sp,sp,20
   13a98:	f800283a 	ret
   13a9c:	81401917 	ldw	r5,100(r16)
   13aa0:	00b7ffc4 	movi	r2,-8193
   13aa4:	21080014 	ori	r4,r4,8192
   13aa8:	2884703a 	and	r2,r5,r2
   13aac:	80801915 	stw	r2,100(r16)
   13ab0:	80800017 	ldw	r2,0(r16)
   13ab4:	8100030d 	sth	r4,12(r16)
   13ab8:	81000517 	ldw	r4,20(r16)
   13abc:	10c7c83a 	sub	r3,r2,r3
   13ac0:	193fe016 	blt	r3,r4,13a44 <__alt_data_end+0xffff3a44>
   13ac4:	800b883a 	mov	r5,r16
   13ac8:	9009883a 	mov	r4,r18
   13acc:	001413c0 	call	1413c <_fflush_r>
   13ad0:	1000071e 	bne	r2,zero,13af0 <__swbuf_r+0x114>
   13ad4:	80800017 	ldw	r2,0(r16)
   13ad8:	00c00044 	movi	r3,1
   13adc:	003fda06 	br	13a48 <__alt_data_end+0xffff3a48>
   13ae0:	800b883a 	mov	r5,r16
   13ae4:	9009883a 	mov	r4,r18
   13ae8:	001413c0 	call	1413c <_fflush_r>
   13aec:	103fe326 	beq	r2,zero,13a7c <__alt_data_end+0xffff3a7c>
   13af0:	00bfffc4 	movi	r2,-1
   13af4:	003fe206 	br	13a80 <__alt_data_end+0xffff3a80>
   13af8:	800b883a 	mov	r5,r16
   13afc:	9009883a 	mov	r4,r18
   13b00:	0013b340 	call	13b34 <__swsetup_r>
   13b04:	103ffa1e 	bne	r2,zero,13af0 <__alt_data_end+0xffff3af0>
   13b08:	8100030b 	ldhu	r4,12(r16)
   13b0c:	80c00417 	ldw	r3,16(r16)
   13b10:	003fc506 	br	13a28 <__alt_data_end+0xffff3a28>
   13b14:	00145280 	call	14528 <__sinit>
   13b18:	003fbc06 	br	13a0c <__alt_data_end+0xffff3a0c>

00013b1c <__swbuf>:
   13b1c:	00800074 	movhi	r2,1
   13b20:	109f8d04 	addi	r2,r2,32308
   13b24:	280d883a 	mov	r6,r5
   13b28:	200b883a 	mov	r5,r4
   13b2c:	11000017 	ldw	r4,0(r2)
   13b30:	00139dc1 	jmpi	139dc <__swbuf_r>

00013b34 <__swsetup_r>:
   13b34:	00800074 	movhi	r2,1
   13b38:	defffd04 	addi	sp,sp,-12
   13b3c:	109f8d04 	addi	r2,r2,32308
   13b40:	dc400115 	stw	r17,4(sp)
   13b44:	2023883a 	mov	r17,r4
   13b48:	11000017 	ldw	r4,0(r2)
   13b4c:	dc000015 	stw	r16,0(sp)
   13b50:	dfc00215 	stw	ra,8(sp)
   13b54:	2821883a 	mov	r16,r5
   13b58:	20000226 	beq	r4,zero,13b64 <__swsetup_r+0x30>
   13b5c:	20800e17 	ldw	r2,56(r4)
   13b60:	10003126 	beq	r2,zero,13c28 <__swsetup_r+0xf4>
   13b64:	8080030b 	ldhu	r2,12(r16)
   13b68:	10c0020c 	andi	r3,r2,8
   13b6c:	1009883a 	mov	r4,r2
   13b70:	18000f26 	beq	r3,zero,13bb0 <__swsetup_r+0x7c>
   13b74:	80c00417 	ldw	r3,16(r16)
   13b78:	18001526 	beq	r3,zero,13bd0 <__swsetup_r+0x9c>
   13b7c:	1100004c 	andi	r4,r2,1
   13b80:	20001c1e 	bne	r4,zero,13bf4 <__swsetup_r+0xc0>
   13b84:	1080008c 	andi	r2,r2,2
   13b88:	1000291e 	bne	r2,zero,13c30 <__swsetup_r+0xfc>
   13b8c:	80800517 	ldw	r2,20(r16)
   13b90:	80800215 	stw	r2,8(r16)
   13b94:	18001c26 	beq	r3,zero,13c08 <__swsetup_r+0xd4>
   13b98:	0005883a 	mov	r2,zero
   13b9c:	dfc00217 	ldw	ra,8(sp)
   13ba0:	dc400117 	ldw	r17,4(sp)
   13ba4:	dc000017 	ldw	r16,0(sp)
   13ba8:	dec00304 	addi	sp,sp,12
   13bac:	f800283a 	ret
   13bb0:	2080040c 	andi	r2,r4,16
   13bb4:	10002e26 	beq	r2,zero,13c70 <__swsetup_r+0x13c>
   13bb8:	2080010c 	andi	r2,r4,4
   13bbc:	10001e1e 	bne	r2,zero,13c38 <__swsetup_r+0x104>
   13bc0:	80c00417 	ldw	r3,16(r16)
   13bc4:	20800214 	ori	r2,r4,8
   13bc8:	8080030d 	sth	r2,12(r16)
   13bcc:	183feb1e 	bne	r3,zero,13b7c <__alt_data_end+0xffff3b7c>
   13bd0:	1100a00c 	andi	r4,r2,640
   13bd4:	01408004 	movi	r5,512
   13bd8:	217fe826 	beq	r4,r5,13b7c <__alt_data_end+0xffff3b7c>
   13bdc:	800b883a 	mov	r5,r16
   13be0:	8809883a 	mov	r4,r17
   13be4:	0014b340 	call	14b34 <__smakebuf_r>
   13be8:	8080030b 	ldhu	r2,12(r16)
   13bec:	80c00417 	ldw	r3,16(r16)
   13bf0:	003fe206 	br	13b7c <__alt_data_end+0xffff3b7c>
   13bf4:	80800517 	ldw	r2,20(r16)
   13bf8:	80000215 	stw	zero,8(r16)
   13bfc:	0085c83a 	sub	r2,zero,r2
   13c00:	80800615 	stw	r2,24(r16)
   13c04:	183fe41e 	bne	r3,zero,13b98 <__alt_data_end+0xffff3b98>
   13c08:	80c0030b 	ldhu	r3,12(r16)
   13c0c:	0005883a 	mov	r2,zero
   13c10:	1900200c 	andi	r4,r3,128
   13c14:	203fe126 	beq	r4,zero,13b9c <__alt_data_end+0xffff3b9c>
   13c18:	18c01014 	ori	r3,r3,64
   13c1c:	80c0030d 	sth	r3,12(r16)
   13c20:	00bfffc4 	movi	r2,-1
   13c24:	003fdd06 	br	13b9c <__alt_data_end+0xffff3b9c>
   13c28:	00145280 	call	14528 <__sinit>
   13c2c:	003fcd06 	br	13b64 <__alt_data_end+0xffff3b64>
   13c30:	0005883a 	mov	r2,zero
   13c34:	003fd606 	br	13b90 <__alt_data_end+0xffff3b90>
   13c38:	81400c17 	ldw	r5,48(r16)
   13c3c:	28000626 	beq	r5,zero,13c58 <__swsetup_r+0x124>
   13c40:	80801004 	addi	r2,r16,64
   13c44:	28800326 	beq	r5,r2,13c54 <__swsetup_r+0x120>
   13c48:	8809883a 	mov	r4,r17
   13c4c:	001469c0 	call	1469c <_free_r>
   13c50:	8100030b 	ldhu	r4,12(r16)
   13c54:	80000c15 	stw	zero,48(r16)
   13c58:	80c00417 	ldw	r3,16(r16)
   13c5c:	00bff6c4 	movi	r2,-37
   13c60:	1108703a 	and	r4,r2,r4
   13c64:	80000115 	stw	zero,4(r16)
   13c68:	80c00015 	stw	r3,0(r16)
   13c6c:	003fd506 	br	13bc4 <__alt_data_end+0xffff3bc4>
   13c70:	00800244 	movi	r2,9
   13c74:	88800015 	stw	r2,0(r17)
   13c78:	20801014 	ori	r2,r4,64
   13c7c:	8080030d 	sth	r2,12(r16)
   13c80:	00bfffc4 	movi	r2,-1
   13c84:	003fc506 	br	13b9c <__alt_data_end+0xffff3b9c>

00013c88 <__register_exitproc>:
   13c88:	defffa04 	addi	sp,sp,-24
   13c8c:	dc000315 	stw	r16,12(sp)
   13c90:	04000074 	movhi	r16,1
   13c94:	841f8c04 	addi	r16,r16,32304
   13c98:	80c00017 	ldw	r3,0(r16)
   13c9c:	dc400415 	stw	r17,16(sp)
   13ca0:	dfc00515 	stw	ra,20(sp)
   13ca4:	18805217 	ldw	r2,328(r3)
   13ca8:	2023883a 	mov	r17,r4
   13cac:	10003726 	beq	r2,zero,13d8c <__register_exitproc+0x104>
   13cb0:	10c00117 	ldw	r3,4(r2)
   13cb4:	010007c4 	movi	r4,31
   13cb8:	20c00e16 	blt	r4,r3,13cf4 <__register_exitproc+0x6c>
   13cbc:	1a000044 	addi	r8,r3,1
   13cc0:	8800221e 	bne	r17,zero,13d4c <__register_exitproc+0xc4>
   13cc4:	18c00084 	addi	r3,r3,2
   13cc8:	18c7883a 	add	r3,r3,r3
   13ccc:	18c7883a 	add	r3,r3,r3
   13cd0:	12000115 	stw	r8,4(r2)
   13cd4:	10c7883a 	add	r3,r2,r3
   13cd8:	19400015 	stw	r5,0(r3)
   13cdc:	0005883a 	mov	r2,zero
   13ce0:	dfc00517 	ldw	ra,20(sp)
   13ce4:	dc400417 	ldw	r17,16(sp)
   13ce8:	dc000317 	ldw	r16,12(sp)
   13cec:	dec00604 	addi	sp,sp,24
   13cf0:	f800283a 	ret
   13cf4:	00800034 	movhi	r2,0
   13cf8:	10800004 	addi	r2,r2,0
   13cfc:	10002626 	beq	r2,zero,13d98 <__register_exitproc+0x110>
   13d00:	01006404 	movi	r4,400
   13d04:	d9400015 	stw	r5,0(sp)
   13d08:	d9800115 	stw	r6,4(sp)
   13d0c:	d9c00215 	stw	r7,8(sp)
   13d10:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   13d14:	d9400017 	ldw	r5,0(sp)
   13d18:	d9800117 	ldw	r6,4(sp)
   13d1c:	d9c00217 	ldw	r7,8(sp)
   13d20:	10001d26 	beq	r2,zero,13d98 <__register_exitproc+0x110>
   13d24:	81000017 	ldw	r4,0(r16)
   13d28:	10000115 	stw	zero,4(r2)
   13d2c:	02000044 	movi	r8,1
   13d30:	22405217 	ldw	r9,328(r4)
   13d34:	0007883a 	mov	r3,zero
   13d38:	12400015 	stw	r9,0(r2)
   13d3c:	20805215 	stw	r2,328(r4)
   13d40:	10006215 	stw	zero,392(r2)
   13d44:	10006315 	stw	zero,396(r2)
   13d48:	883fde26 	beq	r17,zero,13cc4 <__alt_data_end+0xffff3cc4>
   13d4c:	18c9883a 	add	r4,r3,r3
   13d50:	2109883a 	add	r4,r4,r4
   13d54:	1109883a 	add	r4,r2,r4
   13d58:	21802215 	stw	r6,136(r4)
   13d5c:	01800044 	movi	r6,1
   13d60:	12406217 	ldw	r9,392(r2)
   13d64:	30cc983a 	sll	r6,r6,r3
   13d68:	4992b03a 	or	r9,r9,r6
   13d6c:	12406215 	stw	r9,392(r2)
   13d70:	21c04215 	stw	r7,264(r4)
   13d74:	01000084 	movi	r4,2
   13d78:	893fd21e 	bne	r17,r4,13cc4 <__alt_data_end+0xffff3cc4>
   13d7c:	11006317 	ldw	r4,396(r2)
   13d80:	218cb03a 	or	r6,r4,r6
   13d84:	11806315 	stw	r6,396(r2)
   13d88:	003fce06 	br	13cc4 <__alt_data_end+0xffff3cc4>
   13d8c:	18805304 	addi	r2,r3,332
   13d90:	18805215 	stw	r2,328(r3)
   13d94:	003fc606 	br	13cb0 <__alt_data_end+0xffff3cb0>
   13d98:	00bfffc4 	movi	r2,-1
   13d9c:	003fd006 	br	13ce0 <__alt_data_end+0xffff3ce0>

00013da0 <__call_exitprocs>:
   13da0:	defff504 	addi	sp,sp,-44
   13da4:	df000915 	stw	fp,36(sp)
   13da8:	dd400615 	stw	r21,24(sp)
   13dac:	dc800315 	stw	r18,12(sp)
   13db0:	dfc00a15 	stw	ra,40(sp)
   13db4:	ddc00815 	stw	r23,32(sp)
   13db8:	dd800715 	stw	r22,28(sp)
   13dbc:	dd000515 	stw	r20,20(sp)
   13dc0:	dcc00415 	stw	r19,16(sp)
   13dc4:	dc400215 	stw	r17,8(sp)
   13dc8:	dc000115 	stw	r16,4(sp)
   13dcc:	d9000015 	stw	r4,0(sp)
   13dd0:	2839883a 	mov	fp,r5
   13dd4:	04800044 	movi	r18,1
   13dd8:	057fffc4 	movi	r21,-1
   13ddc:	00800074 	movhi	r2,1
   13de0:	109f8c04 	addi	r2,r2,32304
   13de4:	12000017 	ldw	r8,0(r2)
   13de8:	45005217 	ldw	r20,328(r8)
   13dec:	44c05204 	addi	r19,r8,328
   13df0:	a0001c26 	beq	r20,zero,13e64 <__call_exitprocs+0xc4>
   13df4:	a0800117 	ldw	r2,4(r20)
   13df8:	15ffffc4 	addi	r23,r2,-1
   13dfc:	b8000d16 	blt	r23,zero,13e34 <__call_exitprocs+0x94>
   13e00:	14000044 	addi	r16,r2,1
   13e04:	8421883a 	add	r16,r16,r16
   13e08:	8421883a 	add	r16,r16,r16
   13e0c:	84402004 	addi	r17,r16,128
   13e10:	a463883a 	add	r17,r20,r17
   13e14:	a421883a 	add	r16,r20,r16
   13e18:	e0001e26 	beq	fp,zero,13e94 <__call_exitprocs+0xf4>
   13e1c:	80804017 	ldw	r2,256(r16)
   13e20:	e0801c26 	beq	fp,r2,13e94 <__call_exitprocs+0xf4>
   13e24:	bdffffc4 	addi	r23,r23,-1
   13e28:	843fff04 	addi	r16,r16,-4
   13e2c:	8c7fff04 	addi	r17,r17,-4
   13e30:	bd7ff91e 	bne	r23,r21,13e18 <__alt_data_end+0xffff3e18>
   13e34:	00800034 	movhi	r2,0
   13e38:	10800004 	addi	r2,r2,0
   13e3c:	10000926 	beq	r2,zero,13e64 <__call_exitprocs+0xc4>
   13e40:	a0800117 	ldw	r2,4(r20)
   13e44:	1000301e 	bne	r2,zero,13f08 <__call_exitprocs+0x168>
   13e48:	a0800017 	ldw	r2,0(r20)
   13e4c:	10003226 	beq	r2,zero,13f18 <__call_exitprocs+0x178>
   13e50:	a009883a 	mov	r4,r20
   13e54:	98800015 	stw	r2,0(r19)
   13e58:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   13e5c:	9d000017 	ldw	r20,0(r19)
   13e60:	a03fe41e 	bne	r20,zero,13df4 <__alt_data_end+0xffff3df4>
   13e64:	dfc00a17 	ldw	ra,40(sp)
   13e68:	df000917 	ldw	fp,36(sp)
   13e6c:	ddc00817 	ldw	r23,32(sp)
   13e70:	dd800717 	ldw	r22,28(sp)
   13e74:	dd400617 	ldw	r21,24(sp)
   13e78:	dd000517 	ldw	r20,20(sp)
   13e7c:	dcc00417 	ldw	r19,16(sp)
   13e80:	dc800317 	ldw	r18,12(sp)
   13e84:	dc400217 	ldw	r17,8(sp)
   13e88:	dc000117 	ldw	r16,4(sp)
   13e8c:	dec00b04 	addi	sp,sp,44
   13e90:	f800283a 	ret
   13e94:	a0800117 	ldw	r2,4(r20)
   13e98:	80c00017 	ldw	r3,0(r16)
   13e9c:	10bfffc4 	addi	r2,r2,-1
   13ea0:	15c01426 	beq	r2,r23,13ef4 <__call_exitprocs+0x154>
   13ea4:	80000015 	stw	zero,0(r16)
   13ea8:	183fde26 	beq	r3,zero,13e24 <__alt_data_end+0xffff3e24>
   13eac:	95c8983a 	sll	r4,r18,r23
   13eb0:	a0806217 	ldw	r2,392(r20)
   13eb4:	a5800117 	ldw	r22,4(r20)
   13eb8:	2084703a 	and	r2,r4,r2
   13ebc:	10000b26 	beq	r2,zero,13eec <__call_exitprocs+0x14c>
   13ec0:	a0806317 	ldw	r2,396(r20)
   13ec4:	2088703a 	and	r4,r4,r2
   13ec8:	20000c1e 	bne	r4,zero,13efc <__call_exitprocs+0x15c>
   13ecc:	89400017 	ldw	r5,0(r17)
   13ed0:	d9000017 	ldw	r4,0(sp)
   13ed4:	183ee83a 	callr	r3
   13ed8:	a0800117 	ldw	r2,4(r20)
   13edc:	15bfbf1e 	bne	r2,r22,13ddc <__alt_data_end+0xffff3ddc>
   13ee0:	98800017 	ldw	r2,0(r19)
   13ee4:	153fcf26 	beq	r2,r20,13e24 <__alt_data_end+0xffff3e24>
   13ee8:	003fbc06 	br	13ddc <__alt_data_end+0xffff3ddc>
   13eec:	183ee83a 	callr	r3
   13ef0:	003ff906 	br	13ed8 <__alt_data_end+0xffff3ed8>
   13ef4:	a5c00115 	stw	r23,4(r20)
   13ef8:	003feb06 	br	13ea8 <__alt_data_end+0xffff3ea8>
   13efc:	89000017 	ldw	r4,0(r17)
   13f00:	183ee83a 	callr	r3
   13f04:	003ff406 	br	13ed8 <__alt_data_end+0xffff3ed8>
   13f08:	a0800017 	ldw	r2,0(r20)
   13f0c:	a027883a 	mov	r19,r20
   13f10:	1029883a 	mov	r20,r2
   13f14:	003fb606 	br	13df0 <__alt_data_end+0xffff3df0>
   13f18:	0005883a 	mov	r2,zero
   13f1c:	003ffb06 	br	13f0c <__alt_data_end+0xffff3f0c>

00013f20 <__sflush_r>:
   13f20:	2880030b 	ldhu	r2,12(r5)
   13f24:	defffb04 	addi	sp,sp,-20
   13f28:	dcc00315 	stw	r19,12(sp)
   13f2c:	dc400115 	stw	r17,4(sp)
   13f30:	dfc00415 	stw	ra,16(sp)
   13f34:	dc800215 	stw	r18,8(sp)
   13f38:	dc000015 	stw	r16,0(sp)
   13f3c:	10c0020c 	andi	r3,r2,8
   13f40:	2823883a 	mov	r17,r5
   13f44:	2027883a 	mov	r19,r4
   13f48:	1800311e 	bne	r3,zero,14010 <__sflush_r+0xf0>
   13f4c:	28c00117 	ldw	r3,4(r5)
   13f50:	10820014 	ori	r2,r2,2048
   13f54:	2880030d 	sth	r2,12(r5)
   13f58:	00c04b0e 	bge	zero,r3,14088 <__sflush_r+0x168>
   13f5c:	8a000a17 	ldw	r8,40(r17)
   13f60:	40002326 	beq	r8,zero,13ff0 <__sflush_r+0xd0>
   13f64:	9c000017 	ldw	r16,0(r19)
   13f68:	10c4000c 	andi	r3,r2,4096
   13f6c:	98000015 	stw	zero,0(r19)
   13f70:	18004826 	beq	r3,zero,14094 <__sflush_r+0x174>
   13f74:	89801417 	ldw	r6,80(r17)
   13f78:	10c0010c 	andi	r3,r2,4
   13f7c:	18000626 	beq	r3,zero,13f98 <__sflush_r+0x78>
   13f80:	88c00117 	ldw	r3,4(r17)
   13f84:	88800c17 	ldw	r2,48(r17)
   13f88:	30cdc83a 	sub	r6,r6,r3
   13f8c:	10000226 	beq	r2,zero,13f98 <__sflush_r+0x78>
   13f90:	88800f17 	ldw	r2,60(r17)
   13f94:	308dc83a 	sub	r6,r6,r2
   13f98:	89400717 	ldw	r5,28(r17)
   13f9c:	000f883a 	mov	r7,zero
   13fa0:	9809883a 	mov	r4,r19
   13fa4:	403ee83a 	callr	r8
   13fa8:	00ffffc4 	movi	r3,-1
   13fac:	10c04426 	beq	r2,r3,140c0 <__sflush_r+0x1a0>
   13fb0:	88c0030b 	ldhu	r3,12(r17)
   13fb4:	89000417 	ldw	r4,16(r17)
   13fb8:	88000115 	stw	zero,4(r17)
   13fbc:	197dffcc 	andi	r5,r3,63487
   13fc0:	8940030d 	sth	r5,12(r17)
   13fc4:	89000015 	stw	r4,0(r17)
   13fc8:	18c4000c 	andi	r3,r3,4096
   13fcc:	18002c1e 	bne	r3,zero,14080 <__sflush_r+0x160>
   13fd0:	89400c17 	ldw	r5,48(r17)
   13fd4:	9c000015 	stw	r16,0(r19)
   13fd8:	28000526 	beq	r5,zero,13ff0 <__sflush_r+0xd0>
   13fdc:	88801004 	addi	r2,r17,64
   13fe0:	28800226 	beq	r5,r2,13fec <__sflush_r+0xcc>
   13fe4:	9809883a 	mov	r4,r19
   13fe8:	001469c0 	call	1469c <_free_r>
   13fec:	88000c15 	stw	zero,48(r17)
   13ff0:	0005883a 	mov	r2,zero
   13ff4:	dfc00417 	ldw	ra,16(sp)
   13ff8:	dcc00317 	ldw	r19,12(sp)
   13ffc:	dc800217 	ldw	r18,8(sp)
   14000:	dc400117 	ldw	r17,4(sp)
   14004:	dc000017 	ldw	r16,0(sp)
   14008:	dec00504 	addi	sp,sp,20
   1400c:	f800283a 	ret
   14010:	2c800417 	ldw	r18,16(r5)
   14014:	903ff626 	beq	r18,zero,13ff0 <__alt_data_end+0xffff3ff0>
   14018:	2c000017 	ldw	r16,0(r5)
   1401c:	108000cc 	andi	r2,r2,3
   14020:	2c800015 	stw	r18,0(r5)
   14024:	84a1c83a 	sub	r16,r16,r18
   14028:	1000131e 	bne	r2,zero,14078 <__sflush_r+0x158>
   1402c:	28800517 	ldw	r2,20(r5)
   14030:	88800215 	stw	r2,8(r17)
   14034:	04000316 	blt	zero,r16,14044 <__sflush_r+0x124>
   14038:	003fed06 	br	13ff0 <__alt_data_end+0xffff3ff0>
   1403c:	90a5883a 	add	r18,r18,r2
   14040:	043feb0e 	bge	zero,r16,13ff0 <__alt_data_end+0xffff3ff0>
   14044:	88800917 	ldw	r2,36(r17)
   14048:	89400717 	ldw	r5,28(r17)
   1404c:	800f883a 	mov	r7,r16
   14050:	900d883a 	mov	r6,r18
   14054:	9809883a 	mov	r4,r19
   14058:	103ee83a 	callr	r2
   1405c:	80a1c83a 	sub	r16,r16,r2
   14060:	00bff616 	blt	zero,r2,1403c <__alt_data_end+0xffff403c>
   14064:	88c0030b 	ldhu	r3,12(r17)
   14068:	00bfffc4 	movi	r2,-1
   1406c:	18c01014 	ori	r3,r3,64
   14070:	88c0030d 	sth	r3,12(r17)
   14074:	003fdf06 	br	13ff4 <__alt_data_end+0xffff3ff4>
   14078:	0005883a 	mov	r2,zero
   1407c:	003fec06 	br	14030 <__alt_data_end+0xffff4030>
   14080:	88801415 	stw	r2,80(r17)
   14084:	003fd206 	br	13fd0 <__alt_data_end+0xffff3fd0>
   14088:	28c00f17 	ldw	r3,60(r5)
   1408c:	00ffb316 	blt	zero,r3,13f5c <__alt_data_end+0xffff3f5c>
   14090:	003fd706 	br	13ff0 <__alt_data_end+0xffff3ff0>
   14094:	89400717 	ldw	r5,28(r17)
   14098:	000d883a 	mov	r6,zero
   1409c:	01c00044 	movi	r7,1
   140a0:	9809883a 	mov	r4,r19
   140a4:	403ee83a 	callr	r8
   140a8:	100d883a 	mov	r6,r2
   140ac:	00bfffc4 	movi	r2,-1
   140b0:	30801426 	beq	r6,r2,14104 <__sflush_r+0x1e4>
   140b4:	8880030b 	ldhu	r2,12(r17)
   140b8:	8a000a17 	ldw	r8,40(r17)
   140bc:	003fae06 	br	13f78 <__alt_data_end+0xffff3f78>
   140c0:	98c00017 	ldw	r3,0(r19)
   140c4:	183fba26 	beq	r3,zero,13fb0 <__alt_data_end+0xffff3fb0>
   140c8:	01000744 	movi	r4,29
   140cc:	19000626 	beq	r3,r4,140e8 <__sflush_r+0x1c8>
   140d0:	01000584 	movi	r4,22
   140d4:	19000426 	beq	r3,r4,140e8 <__sflush_r+0x1c8>
   140d8:	88c0030b 	ldhu	r3,12(r17)
   140dc:	18c01014 	ori	r3,r3,64
   140e0:	88c0030d 	sth	r3,12(r17)
   140e4:	003fc306 	br	13ff4 <__alt_data_end+0xffff3ff4>
   140e8:	8880030b 	ldhu	r2,12(r17)
   140ec:	88c00417 	ldw	r3,16(r17)
   140f0:	88000115 	stw	zero,4(r17)
   140f4:	10bdffcc 	andi	r2,r2,63487
   140f8:	8880030d 	sth	r2,12(r17)
   140fc:	88c00015 	stw	r3,0(r17)
   14100:	003fb306 	br	13fd0 <__alt_data_end+0xffff3fd0>
   14104:	98800017 	ldw	r2,0(r19)
   14108:	103fea26 	beq	r2,zero,140b4 <__alt_data_end+0xffff40b4>
   1410c:	00c00744 	movi	r3,29
   14110:	10c00226 	beq	r2,r3,1411c <__sflush_r+0x1fc>
   14114:	00c00584 	movi	r3,22
   14118:	10c0031e 	bne	r2,r3,14128 <__sflush_r+0x208>
   1411c:	9c000015 	stw	r16,0(r19)
   14120:	0005883a 	mov	r2,zero
   14124:	003fb306 	br	13ff4 <__alt_data_end+0xffff3ff4>
   14128:	88c0030b 	ldhu	r3,12(r17)
   1412c:	3005883a 	mov	r2,r6
   14130:	18c01014 	ori	r3,r3,64
   14134:	88c0030d 	sth	r3,12(r17)
   14138:	003fae06 	br	13ff4 <__alt_data_end+0xffff3ff4>

0001413c <_fflush_r>:
   1413c:	defffd04 	addi	sp,sp,-12
   14140:	dc000115 	stw	r16,4(sp)
   14144:	dfc00215 	stw	ra,8(sp)
   14148:	2021883a 	mov	r16,r4
   1414c:	20000226 	beq	r4,zero,14158 <_fflush_r+0x1c>
   14150:	20800e17 	ldw	r2,56(r4)
   14154:	10000c26 	beq	r2,zero,14188 <_fflush_r+0x4c>
   14158:	2880030f 	ldh	r2,12(r5)
   1415c:	1000051e 	bne	r2,zero,14174 <_fflush_r+0x38>
   14160:	0005883a 	mov	r2,zero
   14164:	dfc00217 	ldw	ra,8(sp)
   14168:	dc000117 	ldw	r16,4(sp)
   1416c:	dec00304 	addi	sp,sp,12
   14170:	f800283a 	ret
   14174:	8009883a 	mov	r4,r16
   14178:	dfc00217 	ldw	ra,8(sp)
   1417c:	dc000117 	ldw	r16,4(sp)
   14180:	dec00304 	addi	sp,sp,12
   14184:	0013f201 	jmpi	13f20 <__sflush_r>
   14188:	d9400015 	stw	r5,0(sp)
   1418c:	00145280 	call	14528 <__sinit>
   14190:	d9400017 	ldw	r5,0(sp)
   14194:	003ff006 	br	14158 <__alt_data_end+0xffff4158>

00014198 <fflush>:
   14198:	20000526 	beq	r4,zero,141b0 <fflush+0x18>
   1419c:	00800074 	movhi	r2,1
   141a0:	109f8d04 	addi	r2,r2,32308
   141a4:	200b883a 	mov	r5,r4
   141a8:	11000017 	ldw	r4,0(r2)
   141ac:	001413c1 	jmpi	1413c <_fflush_r>
   141b0:	00800074 	movhi	r2,1
   141b4:	109f8c04 	addi	r2,r2,32304
   141b8:	11000017 	ldw	r4,0(r2)
   141bc:	01400074 	movhi	r5,1
   141c0:	29504f04 	addi	r5,r5,16700
   141c4:	0014a701 	jmpi	14a70 <_fwalk_reent>

000141c8 <__fp_unlock>:
   141c8:	0005883a 	mov	r2,zero
   141cc:	f800283a 	ret

000141d0 <_cleanup_r>:
   141d0:	01400074 	movhi	r5,1
   141d4:	29561a04 	addi	r5,r5,22632
   141d8:	0014a701 	jmpi	14a70 <_fwalk_reent>

000141dc <__sinit.part.1>:
   141dc:	defff704 	addi	sp,sp,-36
   141e0:	00c00074 	movhi	r3,1
   141e4:	dfc00815 	stw	ra,32(sp)
   141e8:	ddc00715 	stw	r23,28(sp)
   141ec:	dd800615 	stw	r22,24(sp)
   141f0:	dd400515 	stw	r21,20(sp)
   141f4:	dd000415 	stw	r20,16(sp)
   141f8:	dcc00315 	stw	r19,12(sp)
   141fc:	dc800215 	stw	r18,8(sp)
   14200:	dc400115 	stw	r17,4(sp)
   14204:	dc000015 	stw	r16,0(sp)
   14208:	18d07404 	addi	r3,r3,16848
   1420c:	24000117 	ldw	r16,4(r4)
   14210:	20c00f15 	stw	r3,60(r4)
   14214:	2080bb04 	addi	r2,r4,748
   14218:	00c000c4 	movi	r3,3
   1421c:	20c0b915 	stw	r3,740(r4)
   14220:	2080ba15 	stw	r2,744(r4)
   14224:	2000b815 	stw	zero,736(r4)
   14228:	05c00204 	movi	r23,8
   1422c:	00800104 	movi	r2,4
   14230:	2025883a 	mov	r18,r4
   14234:	b80d883a 	mov	r6,r23
   14238:	81001704 	addi	r4,r16,92
   1423c:	000b883a 	mov	r5,zero
   14240:	80000015 	stw	zero,0(r16)
   14244:	80000115 	stw	zero,4(r16)
   14248:	80000215 	stw	zero,8(r16)
   1424c:	8080030d 	sth	r2,12(r16)
   14250:	80001915 	stw	zero,100(r16)
   14254:	8000038d 	sth	zero,14(r16)
   14258:	80000415 	stw	zero,16(r16)
   1425c:	80000515 	stw	zero,20(r16)
   14260:	80000615 	stw	zero,24(r16)
   14264:	00154fc0 	call	154fc <memset>
   14268:	05800074 	movhi	r22,1
   1426c:	94400217 	ldw	r17,8(r18)
   14270:	05400074 	movhi	r21,1
   14274:	05000074 	movhi	r20,1
   14278:	04c00074 	movhi	r19,1
   1427c:	b5959e04 	addi	r22,r22,22136
   14280:	ad55b504 	addi	r21,r21,22228
   14284:	a515d404 	addi	r20,r20,22352
   14288:	9cd5eb04 	addi	r19,r19,22444
   1428c:	85800815 	stw	r22,32(r16)
   14290:	85400915 	stw	r21,36(r16)
   14294:	85000a15 	stw	r20,40(r16)
   14298:	84c00b15 	stw	r19,44(r16)
   1429c:	84000715 	stw	r16,28(r16)
   142a0:	00800284 	movi	r2,10
   142a4:	8880030d 	sth	r2,12(r17)
   142a8:	00800044 	movi	r2,1
   142ac:	b80d883a 	mov	r6,r23
   142b0:	89001704 	addi	r4,r17,92
   142b4:	000b883a 	mov	r5,zero
   142b8:	88000015 	stw	zero,0(r17)
   142bc:	88000115 	stw	zero,4(r17)
   142c0:	88000215 	stw	zero,8(r17)
   142c4:	88001915 	stw	zero,100(r17)
   142c8:	8880038d 	sth	r2,14(r17)
   142cc:	88000415 	stw	zero,16(r17)
   142d0:	88000515 	stw	zero,20(r17)
   142d4:	88000615 	stw	zero,24(r17)
   142d8:	00154fc0 	call	154fc <memset>
   142dc:	94000317 	ldw	r16,12(r18)
   142e0:	00800484 	movi	r2,18
   142e4:	8c400715 	stw	r17,28(r17)
   142e8:	8d800815 	stw	r22,32(r17)
   142ec:	8d400915 	stw	r21,36(r17)
   142f0:	8d000a15 	stw	r20,40(r17)
   142f4:	8cc00b15 	stw	r19,44(r17)
   142f8:	8080030d 	sth	r2,12(r16)
   142fc:	00800084 	movi	r2,2
   14300:	80000015 	stw	zero,0(r16)
   14304:	80000115 	stw	zero,4(r16)
   14308:	80000215 	stw	zero,8(r16)
   1430c:	80001915 	stw	zero,100(r16)
   14310:	8080038d 	sth	r2,14(r16)
   14314:	80000415 	stw	zero,16(r16)
   14318:	80000515 	stw	zero,20(r16)
   1431c:	80000615 	stw	zero,24(r16)
   14320:	b80d883a 	mov	r6,r23
   14324:	000b883a 	mov	r5,zero
   14328:	81001704 	addi	r4,r16,92
   1432c:	00154fc0 	call	154fc <memset>
   14330:	00800044 	movi	r2,1
   14334:	84000715 	stw	r16,28(r16)
   14338:	85800815 	stw	r22,32(r16)
   1433c:	85400915 	stw	r21,36(r16)
   14340:	85000a15 	stw	r20,40(r16)
   14344:	84c00b15 	stw	r19,44(r16)
   14348:	90800e15 	stw	r2,56(r18)
   1434c:	dfc00817 	ldw	ra,32(sp)
   14350:	ddc00717 	ldw	r23,28(sp)
   14354:	dd800617 	ldw	r22,24(sp)
   14358:	dd400517 	ldw	r21,20(sp)
   1435c:	dd000417 	ldw	r20,16(sp)
   14360:	dcc00317 	ldw	r19,12(sp)
   14364:	dc800217 	ldw	r18,8(sp)
   14368:	dc400117 	ldw	r17,4(sp)
   1436c:	dc000017 	ldw	r16,0(sp)
   14370:	dec00904 	addi	sp,sp,36
   14374:	f800283a 	ret

00014378 <__fp_lock>:
   14378:	0005883a 	mov	r2,zero
   1437c:	f800283a 	ret

00014380 <__sfmoreglue>:
   14380:	defffc04 	addi	sp,sp,-16
   14384:	dc800215 	stw	r18,8(sp)
   14388:	2825883a 	mov	r18,r5
   1438c:	dc000015 	stw	r16,0(sp)
   14390:	01401a04 	movi	r5,104
   14394:	2021883a 	mov	r16,r4
   14398:	913fffc4 	addi	r4,r18,-1
   1439c:	dfc00315 	stw	ra,12(sp)
   143a0:	dc400115 	stw	r17,4(sp)
   143a4:	00113040 	call	11304 <__mulsi3>
   143a8:	8009883a 	mov	r4,r16
   143ac:	11401d04 	addi	r5,r2,116
   143b0:	1023883a 	mov	r17,r2
   143b4:	0014cf00 	call	14cf0 <_malloc_r>
   143b8:	1021883a 	mov	r16,r2
   143bc:	10000726 	beq	r2,zero,143dc <__sfmoreglue+0x5c>
   143c0:	11000304 	addi	r4,r2,12
   143c4:	10000015 	stw	zero,0(r2)
   143c8:	14800115 	stw	r18,4(r2)
   143cc:	11000215 	stw	r4,8(r2)
   143d0:	89801a04 	addi	r6,r17,104
   143d4:	000b883a 	mov	r5,zero
   143d8:	00154fc0 	call	154fc <memset>
   143dc:	8005883a 	mov	r2,r16
   143e0:	dfc00317 	ldw	ra,12(sp)
   143e4:	dc800217 	ldw	r18,8(sp)
   143e8:	dc400117 	ldw	r17,4(sp)
   143ec:	dc000017 	ldw	r16,0(sp)
   143f0:	dec00404 	addi	sp,sp,16
   143f4:	f800283a 	ret

000143f8 <__sfp>:
   143f8:	defffb04 	addi	sp,sp,-20
   143fc:	dc000015 	stw	r16,0(sp)
   14400:	04000074 	movhi	r16,1
   14404:	841f8c04 	addi	r16,r16,32304
   14408:	dcc00315 	stw	r19,12(sp)
   1440c:	2027883a 	mov	r19,r4
   14410:	81000017 	ldw	r4,0(r16)
   14414:	dfc00415 	stw	ra,16(sp)
   14418:	dc800215 	stw	r18,8(sp)
   1441c:	20800e17 	ldw	r2,56(r4)
   14420:	dc400115 	stw	r17,4(sp)
   14424:	1000021e 	bne	r2,zero,14430 <__sfp+0x38>
   14428:	00141dc0 	call	141dc <__sinit.part.1>
   1442c:	81000017 	ldw	r4,0(r16)
   14430:	2480b804 	addi	r18,r4,736
   14434:	047fffc4 	movi	r17,-1
   14438:	91000117 	ldw	r4,4(r18)
   1443c:	94000217 	ldw	r16,8(r18)
   14440:	213fffc4 	addi	r4,r4,-1
   14444:	20000a16 	blt	r4,zero,14470 <__sfp+0x78>
   14448:	8080030f 	ldh	r2,12(r16)
   1444c:	10000c26 	beq	r2,zero,14480 <__sfp+0x88>
   14450:	80c01d04 	addi	r3,r16,116
   14454:	00000206 	br	14460 <__sfp+0x68>
   14458:	18bfe60f 	ldh	r2,-104(r3)
   1445c:	10000826 	beq	r2,zero,14480 <__sfp+0x88>
   14460:	213fffc4 	addi	r4,r4,-1
   14464:	1c3ffd04 	addi	r16,r3,-12
   14468:	18c01a04 	addi	r3,r3,104
   1446c:	247ffa1e 	bne	r4,r17,14458 <__alt_data_end+0xffff4458>
   14470:	90800017 	ldw	r2,0(r18)
   14474:	10001d26 	beq	r2,zero,144ec <__sfp+0xf4>
   14478:	1025883a 	mov	r18,r2
   1447c:	003fee06 	br	14438 <__alt_data_end+0xffff4438>
   14480:	00bfffc4 	movi	r2,-1
   14484:	8080038d 	sth	r2,14(r16)
   14488:	00800044 	movi	r2,1
   1448c:	8080030d 	sth	r2,12(r16)
   14490:	80001915 	stw	zero,100(r16)
   14494:	80000015 	stw	zero,0(r16)
   14498:	80000215 	stw	zero,8(r16)
   1449c:	80000115 	stw	zero,4(r16)
   144a0:	80000415 	stw	zero,16(r16)
   144a4:	80000515 	stw	zero,20(r16)
   144a8:	80000615 	stw	zero,24(r16)
   144ac:	01800204 	movi	r6,8
   144b0:	000b883a 	mov	r5,zero
   144b4:	81001704 	addi	r4,r16,92
   144b8:	00154fc0 	call	154fc <memset>
   144bc:	8005883a 	mov	r2,r16
   144c0:	80000c15 	stw	zero,48(r16)
   144c4:	80000d15 	stw	zero,52(r16)
   144c8:	80001115 	stw	zero,68(r16)
   144cc:	80001215 	stw	zero,72(r16)
   144d0:	dfc00417 	ldw	ra,16(sp)
   144d4:	dcc00317 	ldw	r19,12(sp)
   144d8:	dc800217 	ldw	r18,8(sp)
   144dc:	dc400117 	ldw	r17,4(sp)
   144e0:	dc000017 	ldw	r16,0(sp)
   144e4:	dec00504 	addi	sp,sp,20
   144e8:	f800283a 	ret
   144ec:	01400104 	movi	r5,4
   144f0:	9809883a 	mov	r4,r19
   144f4:	00143800 	call	14380 <__sfmoreglue>
   144f8:	90800015 	stw	r2,0(r18)
   144fc:	103fde1e 	bne	r2,zero,14478 <__alt_data_end+0xffff4478>
   14500:	00800304 	movi	r2,12
   14504:	98800015 	stw	r2,0(r19)
   14508:	0005883a 	mov	r2,zero
   1450c:	003ff006 	br	144d0 <__alt_data_end+0xffff44d0>

00014510 <_cleanup>:
   14510:	00800074 	movhi	r2,1
   14514:	109f8c04 	addi	r2,r2,32304
   14518:	11000017 	ldw	r4,0(r2)
   1451c:	01400074 	movhi	r5,1
   14520:	29561a04 	addi	r5,r5,22632
   14524:	0014a701 	jmpi	14a70 <_fwalk_reent>

00014528 <__sinit>:
   14528:	20800e17 	ldw	r2,56(r4)
   1452c:	10000126 	beq	r2,zero,14534 <__sinit+0xc>
   14530:	f800283a 	ret
   14534:	00141dc1 	jmpi	141dc <__sinit.part.1>

00014538 <__sfp_lock_acquire>:
   14538:	f800283a 	ret

0001453c <__sfp_lock_release>:
   1453c:	f800283a 	ret

00014540 <__sinit_lock_acquire>:
   14540:	f800283a 	ret

00014544 <__sinit_lock_release>:
   14544:	f800283a 	ret

00014548 <__fp_lock_all>:
   14548:	00800074 	movhi	r2,1
   1454c:	109f8d04 	addi	r2,r2,32308
   14550:	11000017 	ldw	r4,0(r2)
   14554:	01400074 	movhi	r5,1
   14558:	2950de04 	addi	r5,r5,17272
   1455c:	00149ac1 	jmpi	149ac <_fwalk>

00014560 <__fp_unlock_all>:
   14560:	00800074 	movhi	r2,1
   14564:	109f8d04 	addi	r2,r2,32308
   14568:	11000017 	ldw	r4,0(r2)
   1456c:	01400074 	movhi	r5,1
   14570:	29507204 	addi	r5,r5,16840
   14574:	00149ac1 	jmpi	149ac <_fwalk>

00014578 <_malloc_trim_r>:
   14578:	defffb04 	addi	sp,sp,-20
   1457c:	dcc00315 	stw	r19,12(sp)
   14580:	04c00074 	movhi	r19,1
   14584:	dc800215 	stw	r18,8(sp)
   14588:	dc400115 	stw	r17,4(sp)
   1458c:	dc000015 	stw	r16,0(sp)
   14590:	dfc00415 	stw	ra,16(sp)
   14594:	2821883a 	mov	r16,r5
   14598:	9cde8104 	addi	r19,r19,31236
   1459c:	2025883a 	mov	r18,r4
   145a0:	0015e040 	call	15e04 <__malloc_lock>
   145a4:	98800217 	ldw	r2,8(r19)
   145a8:	14400117 	ldw	r17,4(r2)
   145ac:	00bfff04 	movi	r2,-4
   145b0:	88a2703a 	and	r17,r17,r2
   145b4:	8c21c83a 	sub	r16,r17,r16
   145b8:	8403fbc4 	addi	r16,r16,4079
   145bc:	8020d33a 	srli	r16,r16,12
   145c0:	0083ffc4 	movi	r2,4095
   145c4:	843fffc4 	addi	r16,r16,-1
   145c8:	8020933a 	slli	r16,r16,12
   145cc:	1400060e 	bge	r2,r16,145e8 <_malloc_trim_r+0x70>
   145d0:	000b883a 	mov	r5,zero
   145d4:	9009883a 	mov	r4,r18
   145d8:	00156240 	call	15624 <_sbrk_r>
   145dc:	98c00217 	ldw	r3,8(r19)
   145e0:	1c47883a 	add	r3,r3,r17
   145e4:	10c00a26 	beq	r2,r3,14610 <_malloc_trim_r+0x98>
   145e8:	9009883a 	mov	r4,r18
   145ec:	0015e280 	call	15e28 <__malloc_unlock>
   145f0:	0005883a 	mov	r2,zero
   145f4:	dfc00417 	ldw	ra,16(sp)
   145f8:	dcc00317 	ldw	r19,12(sp)
   145fc:	dc800217 	ldw	r18,8(sp)
   14600:	dc400117 	ldw	r17,4(sp)
   14604:	dc000017 	ldw	r16,0(sp)
   14608:	dec00504 	addi	sp,sp,20
   1460c:	f800283a 	ret
   14610:	040bc83a 	sub	r5,zero,r16
   14614:	9009883a 	mov	r4,r18
   14618:	00156240 	call	15624 <_sbrk_r>
   1461c:	00ffffc4 	movi	r3,-1
   14620:	10c00d26 	beq	r2,r3,14658 <_malloc_trim_r+0xe0>
   14624:	00c000b4 	movhi	r3,2
   14628:	18e64504 	addi	r3,r3,-26348
   1462c:	18800017 	ldw	r2,0(r3)
   14630:	99000217 	ldw	r4,8(r19)
   14634:	8c23c83a 	sub	r17,r17,r16
   14638:	8c400054 	ori	r17,r17,1
   1463c:	1421c83a 	sub	r16,r2,r16
   14640:	24400115 	stw	r17,4(r4)
   14644:	9009883a 	mov	r4,r18
   14648:	1c000015 	stw	r16,0(r3)
   1464c:	0015e280 	call	15e28 <__malloc_unlock>
   14650:	00800044 	movi	r2,1
   14654:	003fe706 	br	145f4 <__alt_data_end+0xffff45f4>
   14658:	000b883a 	mov	r5,zero
   1465c:	9009883a 	mov	r4,r18
   14660:	00156240 	call	15624 <_sbrk_r>
   14664:	99000217 	ldw	r4,8(r19)
   14668:	014003c4 	movi	r5,15
   1466c:	1107c83a 	sub	r3,r2,r4
   14670:	28ffdd0e 	bge	r5,r3,145e8 <__alt_data_end+0xffff45e8>
   14674:	01400074 	movhi	r5,1
   14678:	295f8e04 	addi	r5,r5,32312
   1467c:	29400017 	ldw	r5,0(r5)
   14680:	18c00054 	ori	r3,r3,1
   14684:	20c00115 	stw	r3,4(r4)
   14688:	00c000b4 	movhi	r3,2
   1468c:	1145c83a 	sub	r2,r2,r5
   14690:	18e64504 	addi	r3,r3,-26348
   14694:	18800015 	stw	r2,0(r3)
   14698:	003fd306 	br	145e8 <__alt_data_end+0xffff45e8>

0001469c <_free_r>:
   1469c:	28004126 	beq	r5,zero,147a4 <_free_r+0x108>
   146a0:	defffd04 	addi	sp,sp,-12
   146a4:	dc400115 	stw	r17,4(sp)
   146a8:	dc000015 	stw	r16,0(sp)
   146ac:	2023883a 	mov	r17,r4
   146b0:	2821883a 	mov	r16,r5
   146b4:	dfc00215 	stw	ra,8(sp)
   146b8:	0015e040 	call	15e04 <__malloc_lock>
   146bc:	81ffff17 	ldw	r7,-4(r16)
   146c0:	00bfff84 	movi	r2,-2
   146c4:	01000074 	movhi	r4,1
   146c8:	81bffe04 	addi	r6,r16,-8
   146cc:	3884703a 	and	r2,r7,r2
   146d0:	211e8104 	addi	r4,r4,31236
   146d4:	308b883a 	add	r5,r6,r2
   146d8:	2a400117 	ldw	r9,4(r5)
   146dc:	22000217 	ldw	r8,8(r4)
   146e0:	00ffff04 	movi	r3,-4
   146e4:	48c6703a 	and	r3,r9,r3
   146e8:	2a005726 	beq	r5,r8,14848 <_free_r+0x1ac>
   146ec:	28c00115 	stw	r3,4(r5)
   146f0:	39c0004c 	andi	r7,r7,1
   146f4:	3800091e 	bne	r7,zero,1471c <_free_r+0x80>
   146f8:	823ffe17 	ldw	r8,-8(r16)
   146fc:	22400204 	addi	r9,r4,8
   14700:	320dc83a 	sub	r6,r6,r8
   14704:	31c00217 	ldw	r7,8(r6)
   14708:	1205883a 	add	r2,r2,r8
   1470c:	3a406526 	beq	r7,r9,148a4 <_free_r+0x208>
   14710:	32000317 	ldw	r8,12(r6)
   14714:	3a000315 	stw	r8,12(r7)
   14718:	41c00215 	stw	r7,8(r8)
   1471c:	28cf883a 	add	r7,r5,r3
   14720:	39c00117 	ldw	r7,4(r7)
   14724:	39c0004c 	andi	r7,r7,1
   14728:	38003a26 	beq	r7,zero,14814 <_free_r+0x178>
   1472c:	10c00054 	ori	r3,r2,1
   14730:	30c00115 	stw	r3,4(r6)
   14734:	3087883a 	add	r3,r6,r2
   14738:	18800015 	stw	r2,0(r3)
   1473c:	00c07fc4 	movi	r3,511
   14740:	18801936 	bltu	r3,r2,147a8 <_free_r+0x10c>
   14744:	1004d0fa 	srli	r2,r2,3
   14748:	01c00044 	movi	r7,1
   1474c:	21400117 	ldw	r5,4(r4)
   14750:	10c00044 	addi	r3,r2,1
   14754:	18c7883a 	add	r3,r3,r3
   14758:	1005d0ba 	srai	r2,r2,2
   1475c:	18c7883a 	add	r3,r3,r3
   14760:	18c7883a 	add	r3,r3,r3
   14764:	1907883a 	add	r3,r3,r4
   14768:	3884983a 	sll	r2,r7,r2
   1476c:	19c00017 	ldw	r7,0(r3)
   14770:	1a3ffe04 	addi	r8,r3,-8
   14774:	1144b03a 	or	r2,r2,r5
   14778:	32000315 	stw	r8,12(r6)
   1477c:	31c00215 	stw	r7,8(r6)
   14780:	20800115 	stw	r2,4(r4)
   14784:	19800015 	stw	r6,0(r3)
   14788:	39800315 	stw	r6,12(r7)
   1478c:	8809883a 	mov	r4,r17
   14790:	dfc00217 	ldw	ra,8(sp)
   14794:	dc400117 	ldw	r17,4(sp)
   14798:	dc000017 	ldw	r16,0(sp)
   1479c:	dec00304 	addi	sp,sp,12
   147a0:	0015e281 	jmpi	15e28 <__malloc_unlock>
   147a4:	f800283a 	ret
   147a8:	100ad27a 	srli	r5,r2,9
   147ac:	00c00104 	movi	r3,4
   147b0:	19404a36 	bltu	r3,r5,148dc <_free_r+0x240>
   147b4:	100ad1ba 	srli	r5,r2,6
   147b8:	28c00e44 	addi	r3,r5,57
   147bc:	18c7883a 	add	r3,r3,r3
   147c0:	29400e04 	addi	r5,r5,56
   147c4:	18c7883a 	add	r3,r3,r3
   147c8:	18c7883a 	add	r3,r3,r3
   147cc:	1909883a 	add	r4,r3,r4
   147d0:	20c00017 	ldw	r3,0(r4)
   147d4:	01c00074 	movhi	r7,1
   147d8:	213ffe04 	addi	r4,r4,-8
   147dc:	39de8104 	addi	r7,r7,31236
   147e0:	20c04426 	beq	r4,r3,148f4 <_free_r+0x258>
   147e4:	01ffff04 	movi	r7,-4
   147e8:	19400117 	ldw	r5,4(r3)
   147ec:	29ca703a 	and	r5,r5,r7
   147f0:	1140022e 	bgeu	r2,r5,147fc <_free_r+0x160>
   147f4:	18c00217 	ldw	r3,8(r3)
   147f8:	20fffb1e 	bne	r4,r3,147e8 <__alt_data_end+0xffff47e8>
   147fc:	19000317 	ldw	r4,12(r3)
   14800:	31000315 	stw	r4,12(r6)
   14804:	30c00215 	stw	r3,8(r6)
   14808:	21800215 	stw	r6,8(r4)
   1480c:	19800315 	stw	r6,12(r3)
   14810:	003fde06 	br	1478c <__alt_data_end+0xffff478c>
   14814:	29c00217 	ldw	r7,8(r5)
   14818:	10c5883a 	add	r2,r2,r3
   1481c:	00c00074 	movhi	r3,1
   14820:	18de8304 	addi	r3,r3,31244
   14824:	38c03b26 	beq	r7,r3,14914 <_free_r+0x278>
   14828:	2a000317 	ldw	r8,12(r5)
   1482c:	11400054 	ori	r5,r2,1
   14830:	3087883a 	add	r3,r6,r2
   14834:	3a000315 	stw	r8,12(r7)
   14838:	41c00215 	stw	r7,8(r8)
   1483c:	31400115 	stw	r5,4(r6)
   14840:	18800015 	stw	r2,0(r3)
   14844:	003fbd06 	br	1473c <__alt_data_end+0xffff473c>
   14848:	39c0004c 	andi	r7,r7,1
   1484c:	10c5883a 	add	r2,r2,r3
   14850:	3800071e 	bne	r7,zero,14870 <_free_r+0x1d4>
   14854:	81fffe17 	ldw	r7,-8(r16)
   14858:	31cdc83a 	sub	r6,r6,r7
   1485c:	30c00317 	ldw	r3,12(r6)
   14860:	31400217 	ldw	r5,8(r6)
   14864:	11c5883a 	add	r2,r2,r7
   14868:	28c00315 	stw	r3,12(r5)
   1486c:	19400215 	stw	r5,8(r3)
   14870:	10c00054 	ori	r3,r2,1
   14874:	30c00115 	stw	r3,4(r6)
   14878:	00c00074 	movhi	r3,1
   1487c:	18df8f04 	addi	r3,r3,32316
   14880:	18c00017 	ldw	r3,0(r3)
   14884:	21800215 	stw	r6,8(r4)
   14888:	10ffc036 	bltu	r2,r3,1478c <__alt_data_end+0xffff478c>
   1488c:	008000b4 	movhi	r2,2
   14890:	10a64404 	addi	r2,r2,-26352
   14894:	11400017 	ldw	r5,0(r2)
   14898:	8809883a 	mov	r4,r17
   1489c:	00145780 	call	14578 <_malloc_trim_r>
   148a0:	003fba06 	br	1478c <__alt_data_end+0xffff478c>
   148a4:	28c9883a 	add	r4,r5,r3
   148a8:	21000117 	ldw	r4,4(r4)
   148ac:	2100004c 	andi	r4,r4,1
   148b0:	2000391e 	bne	r4,zero,14998 <_free_r+0x2fc>
   148b4:	29c00217 	ldw	r7,8(r5)
   148b8:	29000317 	ldw	r4,12(r5)
   148bc:	1885883a 	add	r2,r3,r2
   148c0:	10c00054 	ori	r3,r2,1
   148c4:	39000315 	stw	r4,12(r7)
   148c8:	21c00215 	stw	r7,8(r4)
   148cc:	30c00115 	stw	r3,4(r6)
   148d0:	308d883a 	add	r6,r6,r2
   148d4:	30800015 	stw	r2,0(r6)
   148d8:	003fac06 	br	1478c <__alt_data_end+0xffff478c>
   148dc:	00c00504 	movi	r3,20
   148e0:	19401536 	bltu	r3,r5,14938 <_free_r+0x29c>
   148e4:	28c01704 	addi	r3,r5,92
   148e8:	18c7883a 	add	r3,r3,r3
   148ec:	294016c4 	addi	r5,r5,91
   148f0:	003fb406 	br	147c4 <__alt_data_end+0xffff47c4>
   148f4:	280bd0ba 	srai	r5,r5,2
   148f8:	00c00044 	movi	r3,1
   148fc:	38800117 	ldw	r2,4(r7)
   14900:	194a983a 	sll	r5,r3,r5
   14904:	2007883a 	mov	r3,r4
   14908:	2884b03a 	or	r2,r5,r2
   1490c:	38800115 	stw	r2,4(r7)
   14910:	003fbb06 	br	14800 <__alt_data_end+0xffff4800>
   14914:	21800515 	stw	r6,20(r4)
   14918:	21800415 	stw	r6,16(r4)
   1491c:	10c00054 	ori	r3,r2,1
   14920:	31c00315 	stw	r7,12(r6)
   14924:	31c00215 	stw	r7,8(r6)
   14928:	30c00115 	stw	r3,4(r6)
   1492c:	308d883a 	add	r6,r6,r2
   14930:	30800015 	stw	r2,0(r6)
   14934:	003f9506 	br	1478c <__alt_data_end+0xffff478c>
   14938:	00c01504 	movi	r3,84
   1493c:	19400536 	bltu	r3,r5,14954 <_free_r+0x2b8>
   14940:	100ad33a 	srli	r5,r2,12
   14944:	28c01bc4 	addi	r3,r5,111
   14948:	18c7883a 	add	r3,r3,r3
   1494c:	29401b84 	addi	r5,r5,110
   14950:	003f9c06 	br	147c4 <__alt_data_end+0xffff47c4>
   14954:	00c05504 	movi	r3,340
   14958:	19400536 	bltu	r3,r5,14970 <_free_r+0x2d4>
   1495c:	100ad3fa 	srli	r5,r2,15
   14960:	28c01e04 	addi	r3,r5,120
   14964:	18c7883a 	add	r3,r3,r3
   14968:	29401dc4 	addi	r5,r5,119
   1496c:	003f9506 	br	147c4 <__alt_data_end+0xffff47c4>
   14970:	00c15504 	movi	r3,1364
   14974:	19400536 	bltu	r3,r5,1498c <_free_r+0x2f0>
   14978:	100ad4ba 	srli	r5,r2,18
   1497c:	28c01f44 	addi	r3,r5,125
   14980:	18c7883a 	add	r3,r3,r3
   14984:	29401f04 	addi	r5,r5,124
   14988:	003f8e06 	br	147c4 <__alt_data_end+0xffff47c4>
   1498c:	00c03f84 	movi	r3,254
   14990:	01401f84 	movi	r5,126
   14994:	003f8b06 	br	147c4 <__alt_data_end+0xffff47c4>
   14998:	10c00054 	ori	r3,r2,1
   1499c:	30c00115 	stw	r3,4(r6)
   149a0:	308d883a 	add	r6,r6,r2
   149a4:	30800015 	stw	r2,0(r6)
   149a8:	003f7806 	br	1478c <__alt_data_end+0xffff478c>

000149ac <_fwalk>:
   149ac:	defff704 	addi	sp,sp,-36
   149b0:	dd000415 	stw	r20,16(sp)
   149b4:	dfc00815 	stw	ra,32(sp)
   149b8:	ddc00715 	stw	r23,28(sp)
   149bc:	dd800615 	stw	r22,24(sp)
   149c0:	dd400515 	stw	r21,20(sp)
   149c4:	dcc00315 	stw	r19,12(sp)
   149c8:	dc800215 	stw	r18,8(sp)
   149cc:	dc400115 	stw	r17,4(sp)
   149d0:	dc000015 	stw	r16,0(sp)
   149d4:	2500b804 	addi	r20,r4,736
   149d8:	a0002326 	beq	r20,zero,14a68 <_fwalk+0xbc>
   149dc:	282b883a 	mov	r21,r5
   149e0:	002f883a 	mov	r23,zero
   149e4:	05800044 	movi	r22,1
   149e8:	04ffffc4 	movi	r19,-1
   149ec:	a4400117 	ldw	r17,4(r20)
   149f0:	a4800217 	ldw	r18,8(r20)
   149f4:	8c7fffc4 	addi	r17,r17,-1
   149f8:	88000d16 	blt	r17,zero,14a30 <_fwalk+0x84>
   149fc:	94000304 	addi	r16,r18,12
   14a00:	94800384 	addi	r18,r18,14
   14a04:	8080000b 	ldhu	r2,0(r16)
   14a08:	8c7fffc4 	addi	r17,r17,-1
   14a0c:	813ffd04 	addi	r4,r16,-12
   14a10:	b080042e 	bgeu	r22,r2,14a24 <_fwalk+0x78>
   14a14:	9080000f 	ldh	r2,0(r18)
   14a18:	14c00226 	beq	r2,r19,14a24 <_fwalk+0x78>
   14a1c:	a83ee83a 	callr	r21
   14a20:	b8aeb03a 	or	r23,r23,r2
   14a24:	84001a04 	addi	r16,r16,104
   14a28:	94801a04 	addi	r18,r18,104
   14a2c:	8cfff51e 	bne	r17,r19,14a04 <__alt_data_end+0xffff4a04>
   14a30:	a5000017 	ldw	r20,0(r20)
   14a34:	a03fed1e 	bne	r20,zero,149ec <__alt_data_end+0xffff49ec>
   14a38:	b805883a 	mov	r2,r23
   14a3c:	dfc00817 	ldw	ra,32(sp)
   14a40:	ddc00717 	ldw	r23,28(sp)
   14a44:	dd800617 	ldw	r22,24(sp)
   14a48:	dd400517 	ldw	r21,20(sp)
   14a4c:	dd000417 	ldw	r20,16(sp)
   14a50:	dcc00317 	ldw	r19,12(sp)
   14a54:	dc800217 	ldw	r18,8(sp)
   14a58:	dc400117 	ldw	r17,4(sp)
   14a5c:	dc000017 	ldw	r16,0(sp)
   14a60:	dec00904 	addi	sp,sp,36
   14a64:	f800283a 	ret
   14a68:	002f883a 	mov	r23,zero
   14a6c:	003ff206 	br	14a38 <__alt_data_end+0xffff4a38>

00014a70 <_fwalk_reent>:
   14a70:	defff704 	addi	sp,sp,-36
   14a74:	dd000415 	stw	r20,16(sp)
   14a78:	dfc00815 	stw	ra,32(sp)
   14a7c:	ddc00715 	stw	r23,28(sp)
   14a80:	dd800615 	stw	r22,24(sp)
   14a84:	dd400515 	stw	r21,20(sp)
   14a88:	dcc00315 	stw	r19,12(sp)
   14a8c:	dc800215 	stw	r18,8(sp)
   14a90:	dc400115 	stw	r17,4(sp)
   14a94:	dc000015 	stw	r16,0(sp)
   14a98:	2500b804 	addi	r20,r4,736
   14a9c:	a0002326 	beq	r20,zero,14b2c <_fwalk_reent+0xbc>
   14aa0:	282b883a 	mov	r21,r5
   14aa4:	2027883a 	mov	r19,r4
   14aa8:	002f883a 	mov	r23,zero
   14aac:	05800044 	movi	r22,1
   14ab0:	04bfffc4 	movi	r18,-1
   14ab4:	a4400117 	ldw	r17,4(r20)
   14ab8:	a4000217 	ldw	r16,8(r20)
   14abc:	8c7fffc4 	addi	r17,r17,-1
   14ac0:	88000c16 	blt	r17,zero,14af4 <_fwalk_reent+0x84>
   14ac4:	84000304 	addi	r16,r16,12
   14ac8:	8080000b 	ldhu	r2,0(r16)
   14acc:	8c7fffc4 	addi	r17,r17,-1
   14ad0:	817ffd04 	addi	r5,r16,-12
   14ad4:	b080052e 	bgeu	r22,r2,14aec <_fwalk_reent+0x7c>
   14ad8:	8080008f 	ldh	r2,2(r16)
   14adc:	9809883a 	mov	r4,r19
   14ae0:	14800226 	beq	r2,r18,14aec <_fwalk_reent+0x7c>
   14ae4:	a83ee83a 	callr	r21
   14ae8:	b8aeb03a 	or	r23,r23,r2
   14aec:	84001a04 	addi	r16,r16,104
   14af0:	8cbff51e 	bne	r17,r18,14ac8 <__alt_data_end+0xffff4ac8>
   14af4:	a5000017 	ldw	r20,0(r20)
   14af8:	a03fee1e 	bne	r20,zero,14ab4 <__alt_data_end+0xffff4ab4>
   14afc:	b805883a 	mov	r2,r23
   14b00:	dfc00817 	ldw	ra,32(sp)
   14b04:	ddc00717 	ldw	r23,28(sp)
   14b08:	dd800617 	ldw	r22,24(sp)
   14b0c:	dd400517 	ldw	r21,20(sp)
   14b10:	dd000417 	ldw	r20,16(sp)
   14b14:	dcc00317 	ldw	r19,12(sp)
   14b18:	dc800217 	ldw	r18,8(sp)
   14b1c:	dc400117 	ldw	r17,4(sp)
   14b20:	dc000017 	ldw	r16,0(sp)
   14b24:	dec00904 	addi	sp,sp,36
   14b28:	f800283a 	ret
   14b2c:	002f883a 	mov	r23,zero
   14b30:	003ff206 	br	14afc <__alt_data_end+0xffff4afc>

00014b34 <__smakebuf_r>:
   14b34:	2880030b 	ldhu	r2,12(r5)
   14b38:	10c0008c 	andi	r3,r2,2
   14b3c:	1800411e 	bne	r3,zero,14c44 <__smakebuf_r+0x110>
   14b40:	deffec04 	addi	sp,sp,-80
   14b44:	dc000f15 	stw	r16,60(sp)
   14b48:	2821883a 	mov	r16,r5
   14b4c:	2940038f 	ldh	r5,14(r5)
   14b50:	dc401015 	stw	r17,64(sp)
   14b54:	dfc01315 	stw	ra,76(sp)
   14b58:	dcc01215 	stw	r19,72(sp)
   14b5c:	dc801115 	stw	r18,68(sp)
   14b60:	2023883a 	mov	r17,r4
   14b64:	28001c16 	blt	r5,zero,14bd8 <__smakebuf_r+0xa4>
   14b68:	d80d883a 	mov	r6,sp
   14b6c:	001596c0 	call	1596c <_fstat_r>
   14b70:	10001816 	blt	r2,zero,14bd4 <__smakebuf_r+0xa0>
   14b74:	d8800117 	ldw	r2,4(sp)
   14b78:	00e00014 	movui	r3,32768
   14b7c:	10bc000c 	andi	r2,r2,61440
   14b80:	14c80020 	cmpeqi	r19,r2,8192
   14b84:	10c03726 	beq	r2,r3,14c64 <__smakebuf_r+0x130>
   14b88:	80c0030b 	ldhu	r3,12(r16)
   14b8c:	18c20014 	ori	r3,r3,2048
   14b90:	80c0030d 	sth	r3,12(r16)
   14b94:	00c80004 	movi	r3,8192
   14b98:	10c0521e 	bne	r2,r3,14ce4 <__smakebuf_r+0x1b0>
   14b9c:	8140038f 	ldh	r5,14(r16)
   14ba0:	8809883a 	mov	r4,r17
   14ba4:	00159c80 	call	159c8 <_isatty_r>
   14ba8:	10004c26 	beq	r2,zero,14cdc <__smakebuf_r+0x1a8>
   14bac:	8080030b 	ldhu	r2,12(r16)
   14bb0:	80c010c4 	addi	r3,r16,67
   14bb4:	80c00015 	stw	r3,0(r16)
   14bb8:	10800054 	ori	r2,r2,1
   14bbc:	8080030d 	sth	r2,12(r16)
   14bc0:	00800044 	movi	r2,1
   14bc4:	80c00415 	stw	r3,16(r16)
   14bc8:	80800515 	stw	r2,20(r16)
   14bcc:	04810004 	movi	r18,1024
   14bd0:	00000706 	br	14bf0 <__smakebuf_r+0xbc>
   14bd4:	8080030b 	ldhu	r2,12(r16)
   14bd8:	10c0200c 	andi	r3,r2,128
   14bdc:	18001f1e 	bne	r3,zero,14c5c <__smakebuf_r+0x128>
   14be0:	04810004 	movi	r18,1024
   14be4:	10820014 	ori	r2,r2,2048
   14be8:	8080030d 	sth	r2,12(r16)
   14bec:	0027883a 	mov	r19,zero
   14bf0:	900b883a 	mov	r5,r18
   14bf4:	8809883a 	mov	r4,r17
   14bf8:	0014cf00 	call	14cf0 <_malloc_r>
   14bfc:	10002c26 	beq	r2,zero,14cb0 <__smakebuf_r+0x17c>
   14c00:	80c0030b 	ldhu	r3,12(r16)
   14c04:	01000074 	movhi	r4,1
   14c08:	21107404 	addi	r4,r4,16848
   14c0c:	89000f15 	stw	r4,60(r17)
   14c10:	18c02014 	ori	r3,r3,128
   14c14:	80c0030d 	sth	r3,12(r16)
   14c18:	80800015 	stw	r2,0(r16)
   14c1c:	80800415 	stw	r2,16(r16)
   14c20:	84800515 	stw	r18,20(r16)
   14c24:	98001a1e 	bne	r19,zero,14c90 <__smakebuf_r+0x15c>
   14c28:	dfc01317 	ldw	ra,76(sp)
   14c2c:	dcc01217 	ldw	r19,72(sp)
   14c30:	dc801117 	ldw	r18,68(sp)
   14c34:	dc401017 	ldw	r17,64(sp)
   14c38:	dc000f17 	ldw	r16,60(sp)
   14c3c:	dec01404 	addi	sp,sp,80
   14c40:	f800283a 	ret
   14c44:	288010c4 	addi	r2,r5,67
   14c48:	28800015 	stw	r2,0(r5)
   14c4c:	28800415 	stw	r2,16(r5)
   14c50:	00800044 	movi	r2,1
   14c54:	28800515 	stw	r2,20(r5)
   14c58:	f800283a 	ret
   14c5c:	04801004 	movi	r18,64
   14c60:	003fe006 	br	14be4 <__alt_data_end+0xffff4be4>
   14c64:	81000a17 	ldw	r4,40(r16)
   14c68:	00c00074 	movhi	r3,1
   14c6c:	18d5d404 	addi	r3,r3,22352
   14c70:	20ffc51e 	bne	r4,r3,14b88 <__alt_data_end+0xffff4b88>
   14c74:	8080030b 	ldhu	r2,12(r16)
   14c78:	04810004 	movi	r18,1024
   14c7c:	84801315 	stw	r18,76(r16)
   14c80:	1484b03a 	or	r2,r2,r18
   14c84:	8080030d 	sth	r2,12(r16)
   14c88:	0027883a 	mov	r19,zero
   14c8c:	003fd806 	br	14bf0 <__alt_data_end+0xffff4bf0>
   14c90:	8140038f 	ldh	r5,14(r16)
   14c94:	8809883a 	mov	r4,r17
   14c98:	00159c80 	call	159c8 <_isatty_r>
   14c9c:	103fe226 	beq	r2,zero,14c28 <__alt_data_end+0xffff4c28>
   14ca0:	8080030b 	ldhu	r2,12(r16)
   14ca4:	10800054 	ori	r2,r2,1
   14ca8:	8080030d 	sth	r2,12(r16)
   14cac:	003fde06 	br	14c28 <__alt_data_end+0xffff4c28>
   14cb0:	8080030b 	ldhu	r2,12(r16)
   14cb4:	10c0800c 	andi	r3,r2,512
   14cb8:	183fdb1e 	bne	r3,zero,14c28 <__alt_data_end+0xffff4c28>
   14cbc:	10800094 	ori	r2,r2,2
   14cc0:	80c010c4 	addi	r3,r16,67
   14cc4:	8080030d 	sth	r2,12(r16)
   14cc8:	00800044 	movi	r2,1
   14ccc:	80c00015 	stw	r3,0(r16)
   14cd0:	80c00415 	stw	r3,16(r16)
   14cd4:	80800515 	stw	r2,20(r16)
   14cd8:	003fd306 	br	14c28 <__alt_data_end+0xffff4c28>
   14cdc:	04810004 	movi	r18,1024
   14ce0:	003fc306 	br	14bf0 <__alt_data_end+0xffff4bf0>
   14ce4:	0027883a 	mov	r19,zero
   14ce8:	04810004 	movi	r18,1024
   14cec:	003fc006 	br	14bf0 <__alt_data_end+0xffff4bf0>

00014cf0 <_malloc_r>:
   14cf0:	defff504 	addi	sp,sp,-44
   14cf4:	dc800315 	stw	r18,12(sp)
   14cf8:	dfc00a15 	stw	ra,40(sp)
   14cfc:	df000915 	stw	fp,36(sp)
   14d00:	ddc00815 	stw	r23,32(sp)
   14d04:	dd800715 	stw	r22,28(sp)
   14d08:	dd400615 	stw	r21,24(sp)
   14d0c:	dd000515 	stw	r20,20(sp)
   14d10:	dcc00415 	stw	r19,16(sp)
   14d14:	dc400215 	stw	r17,8(sp)
   14d18:	dc000115 	stw	r16,4(sp)
   14d1c:	288002c4 	addi	r2,r5,11
   14d20:	00c00584 	movi	r3,22
   14d24:	2025883a 	mov	r18,r4
   14d28:	18807f2e 	bgeu	r3,r2,14f28 <_malloc_r+0x238>
   14d2c:	047ffe04 	movi	r17,-8
   14d30:	1462703a 	and	r17,r2,r17
   14d34:	8800a316 	blt	r17,zero,14fc4 <_malloc_r+0x2d4>
   14d38:	8940a236 	bltu	r17,r5,14fc4 <_malloc_r+0x2d4>
   14d3c:	0015e040 	call	15e04 <__malloc_lock>
   14d40:	00807dc4 	movi	r2,503
   14d44:	1441e92e 	bgeu	r2,r17,154ec <_malloc_r+0x7fc>
   14d48:	8804d27a 	srli	r2,r17,9
   14d4c:	1000a126 	beq	r2,zero,14fd4 <_malloc_r+0x2e4>
   14d50:	00c00104 	movi	r3,4
   14d54:	18811e36 	bltu	r3,r2,151d0 <_malloc_r+0x4e0>
   14d58:	8804d1ba 	srli	r2,r17,6
   14d5c:	12000e44 	addi	r8,r2,57
   14d60:	11c00e04 	addi	r7,r2,56
   14d64:	4209883a 	add	r4,r8,r8
   14d68:	04c00074 	movhi	r19,1
   14d6c:	2109883a 	add	r4,r4,r4
   14d70:	9cde8104 	addi	r19,r19,31236
   14d74:	2109883a 	add	r4,r4,r4
   14d78:	9909883a 	add	r4,r19,r4
   14d7c:	24000117 	ldw	r16,4(r4)
   14d80:	213ffe04 	addi	r4,r4,-8
   14d84:	24009726 	beq	r4,r16,14fe4 <_malloc_r+0x2f4>
   14d88:	80800117 	ldw	r2,4(r16)
   14d8c:	01bfff04 	movi	r6,-4
   14d90:	014003c4 	movi	r5,15
   14d94:	1184703a 	and	r2,r2,r6
   14d98:	1447c83a 	sub	r3,r2,r17
   14d9c:	28c00716 	blt	r5,r3,14dbc <_malloc_r+0xcc>
   14da0:	1800920e 	bge	r3,zero,14fec <_malloc_r+0x2fc>
   14da4:	84000317 	ldw	r16,12(r16)
   14da8:	24008e26 	beq	r4,r16,14fe4 <_malloc_r+0x2f4>
   14dac:	80800117 	ldw	r2,4(r16)
   14db0:	1184703a 	and	r2,r2,r6
   14db4:	1447c83a 	sub	r3,r2,r17
   14db8:	28fff90e 	bge	r5,r3,14da0 <__alt_data_end+0xffff4da0>
   14dbc:	3809883a 	mov	r4,r7
   14dc0:	01800074 	movhi	r6,1
   14dc4:	9c000417 	ldw	r16,16(r19)
   14dc8:	319e8104 	addi	r6,r6,31236
   14dcc:	32000204 	addi	r8,r6,8
   14dd0:	82013426 	beq	r16,r8,152a4 <_malloc_r+0x5b4>
   14dd4:	80c00117 	ldw	r3,4(r16)
   14dd8:	00bfff04 	movi	r2,-4
   14ddc:	188e703a 	and	r7,r3,r2
   14de0:	3c45c83a 	sub	r2,r7,r17
   14de4:	00c003c4 	movi	r3,15
   14de8:	18811f16 	blt	r3,r2,15268 <_malloc_r+0x578>
   14dec:	32000515 	stw	r8,20(r6)
   14df0:	32000415 	stw	r8,16(r6)
   14df4:	10007f0e 	bge	r2,zero,14ff4 <_malloc_r+0x304>
   14df8:	00807fc4 	movi	r2,511
   14dfc:	11c0fd36 	bltu	r2,r7,151f4 <_malloc_r+0x504>
   14e00:	3806d0fa 	srli	r3,r7,3
   14e04:	01c00044 	movi	r7,1
   14e08:	30800117 	ldw	r2,4(r6)
   14e0c:	19400044 	addi	r5,r3,1
   14e10:	294b883a 	add	r5,r5,r5
   14e14:	1807d0ba 	srai	r3,r3,2
   14e18:	294b883a 	add	r5,r5,r5
   14e1c:	294b883a 	add	r5,r5,r5
   14e20:	298b883a 	add	r5,r5,r6
   14e24:	38c6983a 	sll	r3,r7,r3
   14e28:	29c00017 	ldw	r7,0(r5)
   14e2c:	2a7ffe04 	addi	r9,r5,-8
   14e30:	1886b03a 	or	r3,r3,r2
   14e34:	82400315 	stw	r9,12(r16)
   14e38:	81c00215 	stw	r7,8(r16)
   14e3c:	30c00115 	stw	r3,4(r6)
   14e40:	2c000015 	stw	r16,0(r5)
   14e44:	3c000315 	stw	r16,12(r7)
   14e48:	2005d0ba 	srai	r2,r4,2
   14e4c:	01400044 	movi	r5,1
   14e50:	288a983a 	sll	r5,r5,r2
   14e54:	19406f36 	bltu	r3,r5,15014 <_malloc_r+0x324>
   14e58:	28c4703a 	and	r2,r5,r3
   14e5c:	10000a1e 	bne	r2,zero,14e88 <_malloc_r+0x198>
   14e60:	00bfff04 	movi	r2,-4
   14e64:	294b883a 	add	r5,r5,r5
   14e68:	2088703a 	and	r4,r4,r2
   14e6c:	28c4703a 	and	r2,r5,r3
   14e70:	21000104 	addi	r4,r4,4
   14e74:	1000041e 	bne	r2,zero,14e88 <_malloc_r+0x198>
   14e78:	294b883a 	add	r5,r5,r5
   14e7c:	28c4703a 	and	r2,r5,r3
   14e80:	21000104 	addi	r4,r4,4
   14e84:	103ffc26 	beq	r2,zero,14e78 <__alt_data_end+0xffff4e78>
   14e88:	02bfff04 	movi	r10,-4
   14e8c:	024003c4 	movi	r9,15
   14e90:	21800044 	addi	r6,r4,1
   14e94:	318d883a 	add	r6,r6,r6
   14e98:	318d883a 	add	r6,r6,r6
   14e9c:	318d883a 	add	r6,r6,r6
   14ea0:	998d883a 	add	r6,r19,r6
   14ea4:	333ffe04 	addi	r12,r6,-8
   14ea8:	2017883a 	mov	r11,r4
   14eac:	31800104 	addi	r6,r6,4
   14eb0:	34000017 	ldw	r16,0(r6)
   14eb4:	31fffd04 	addi	r7,r6,-12
   14eb8:	81c0041e 	bne	r16,r7,14ecc <_malloc_r+0x1dc>
   14ebc:	0000fb06 	br	152ac <_malloc_r+0x5bc>
   14ec0:	1801030e 	bge	r3,zero,152d0 <_malloc_r+0x5e0>
   14ec4:	84000317 	ldw	r16,12(r16)
   14ec8:	81c0f826 	beq	r16,r7,152ac <_malloc_r+0x5bc>
   14ecc:	80800117 	ldw	r2,4(r16)
   14ed0:	1284703a 	and	r2,r2,r10
   14ed4:	1447c83a 	sub	r3,r2,r17
   14ed8:	48fff90e 	bge	r9,r3,14ec0 <__alt_data_end+0xffff4ec0>
   14edc:	80800317 	ldw	r2,12(r16)
   14ee0:	81000217 	ldw	r4,8(r16)
   14ee4:	89400054 	ori	r5,r17,1
   14ee8:	81400115 	stw	r5,4(r16)
   14eec:	20800315 	stw	r2,12(r4)
   14ef0:	11000215 	stw	r4,8(r2)
   14ef4:	8463883a 	add	r17,r16,r17
   14ef8:	9c400515 	stw	r17,20(r19)
   14efc:	9c400415 	stw	r17,16(r19)
   14f00:	18800054 	ori	r2,r3,1
   14f04:	88800115 	stw	r2,4(r17)
   14f08:	8a000315 	stw	r8,12(r17)
   14f0c:	8a000215 	stw	r8,8(r17)
   14f10:	88e3883a 	add	r17,r17,r3
   14f14:	88c00015 	stw	r3,0(r17)
   14f18:	9009883a 	mov	r4,r18
   14f1c:	0015e280 	call	15e28 <__malloc_unlock>
   14f20:	80800204 	addi	r2,r16,8
   14f24:	00001b06 	br	14f94 <_malloc_r+0x2a4>
   14f28:	04400404 	movi	r17,16
   14f2c:	89402536 	bltu	r17,r5,14fc4 <_malloc_r+0x2d4>
   14f30:	0015e040 	call	15e04 <__malloc_lock>
   14f34:	00800184 	movi	r2,6
   14f38:	01000084 	movi	r4,2
   14f3c:	04c00074 	movhi	r19,1
   14f40:	1085883a 	add	r2,r2,r2
   14f44:	9cde8104 	addi	r19,r19,31236
   14f48:	1085883a 	add	r2,r2,r2
   14f4c:	9885883a 	add	r2,r19,r2
   14f50:	14000117 	ldw	r16,4(r2)
   14f54:	10fffe04 	addi	r3,r2,-8
   14f58:	80c0d926 	beq	r16,r3,152c0 <_malloc_r+0x5d0>
   14f5c:	80c00117 	ldw	r3,4(r16)
   14f60:	81000317 	ldw	r4,12(r16)
   14f64:	00bfff04 	movi	r2,-4
   14f68:	1884703a 	and	r2,r3,r2
   14f6c:	81400217 	ldw	r5,8(r16)
   14f70:	8085883a 	add	r2,r16,r2
   14f74:	10c00117 	ldw	r3,4(r2)
   14f78:	29000315 	stw	r4,12(r5)
   14f7c:	21400215 	stw	r5,8(r4)
   14f80:	18c00054 	ori	r3,r3,1
   14f84:	10c00115 	stw	r3,4(r2)
   14f88:	9009883a 	mov	r4,r18
   14f8c:	0015e280 	call	15e28 <__malloc_unlock>
   14f90:	80800204 	addi	r2,r16,8
   14f94:	dfc00a17 	ldw	ra,40(sp)
   14f98:	df000917 	ldw	fp,36(sp)
   14f9c:	ddc00817 	ldw	r23,32(sp)
   14fa0:	dd800717 	ldw	r22,28(sp)
   14fa4:	dd400617 	ldw	r21,24(sp)
   14fa8:	dd000517 	ldw	r20,20(sp)
   14fac:	dcc00417 	ldw	r19,16(sp)
   14fb0:	dc800317 	ldw	r18,12(sp)
   14fb4:	dc400217 	ldw	r17,8(sp)
   14fb8:	dc000117 	ldw	r16,4(sp)
   14fbc:	dec00b04 	addi	sp,sp,44
   14fc0:	f800283a 	ret
   14fc4:	00800304 	movi	r2,12
   14fc8:	90800015 	stw	r2,0(r18)
   14fcc:	0005883a 	mov	r2,zero
   14fd0:	003ff006 	br	14f94 <__alt_data_end+0xffff4f94>
   14fd4:	01002004 	movi	r4,128
   14fd8:	02001004 	movi	r8,64
   14fdc:	01c00fc4 	movi	r7,63
   14fe0:	003f6106 	br	14d68 <__alt_data_end+0xffff4d68>
   14fe4:	4009883a 	mov	r4,r8
   14fe8:	003f7506 	br	14dc0 <__alt_data_end+0xffff4dc0>
   14fec:	81000317 	ldw	r4,12(r16)
   14ff0:	003fde06 	br	14f6c <__alt_data_end+0xffff4f6c>
   14ff4:	81c5883a 	add	r2,r16,r7
   14ff8:	11400117 	ldw	r5,4(r2)
   14ffc:	9009883a 	mov	r4,r18
   15000:	29400054 	ori	r5,r5,1
   15004:	11400115 	stw	r5,4(r2)
   15008:	0015e280 	call	15e28 <__malloc_unlock>
   1500c:	80800204 	addi	r2,r16,8
   15010:	003fe006 	br	14f94 <__alt_data_end+0xffff4f94>
   15014:	9c000217 	ldw	r16,8(r19)
   15018:	00bfff04 	movi	r2,-4
   1501c:	85800117 	ldw	r22,4(r16)
   15020:	b0ac703a 	and	r22,r22,r2
   15024:	b4400336 	bltu	r22,r17,15034 <_malloc_r+0x344>
   15028:	b445c83a 	sub	r2,r22,r17
   1502c:	00c003c4 	movi	r3,15
   15030:	18805d16 	blt	r3,r2,151a8 <_malloc_r+0x4b8>
   15034:	05c00074 	movhi	r23,1
   15038:	008000b4 	movhi	r2,2
   1503c:	10a64404 	addi	r2,r2,-26352
   15040:	bddf8e04 	addi	r23,r23,32312
   15044:	15400017 	ldw	r21,0(r2)
   15048:	b8c00017 	ldw	r3,0(r23)
   1504c:	00bfffc4 	movi	r2,-1
   15050:	858d883a 	add	r6,r16,r22
   15054:	8d6b883a 	add	r21,r17,r21
   15058:	1880ea26 	beq	r3,r2,15404 <_malloc_r+0x714>
   1505c:	ad4403c4 	addi	r21,r21,4111
   15060:	00bc0004 	movi	r2,-4096
   15064:	a8aa703a 	and	r21,r21,r2
   15068:	a80b883a 	mov	r5,r21
   1506c:	9009883a 	mov	r4,r18
   15070:	d9800015 	stw	r6,0(sp)
   15074:	00156240 	call	15624 <_sbrk_r>
   15078:	1029883a 	mov	r20,r2
   1507c:	00bfffc4 	movi	r2,-1
   15080:	d9800017 	ldw	r6,0(sp)
   15084:	a080e826 	beq	r20,r2,15428 <_malloc_r+0x738>
   15088:	a180a636 	bltu	r20,r6,15324 <_malloc_r+0x634>
   1508c:	070000b4 	movhi	fp,2
   15090:	e7264504 	addi	fp,fp,-26348
   15094:	e0800017 	ldw	r2,0(fp)
   15098:	a887883a 	add	r3,r21,r2
   1509c:	e0c00015 	stw	r3,0(fp)
   150a0:	3500e626 	beq	r6,r20,1543c <_malloc_r+0x74c>
   150a4:	b9000017 	ldw	r4,0(r23)
   150a8:	00bfffc4 	movi	r2,-1
   150ac:	2080ee26 	beq	r4,r2,15468 <_malloc_r+0x778>
   150b0:	a185c83a 	sub	r2,r20,r6
   150b4:	10c5883a 	add	r2,r2,r3
   150b8:	e0800015 	stw	r2,0(fp)
   150bc:	a0c001cc 	andi	r3,r20,7
   150c0:	1800bc26 	beq	r3,zero,153b4 <_malloc_r+0x6c4>
   150c4:	a0e9c83a 	sub	r20,r20,r3
   150c8:	00840204 	movi	r2,4104
   150cc:	a5000204 	addi	r20,r20,8
   150d0:	10c7c83a 	sub	r3,r2,r3
   150d4:	a545883a 	add	r2,r20,r21
   150d8:	1083ffcc 	andi	r2,r2,4095
   150dc:	18abc83a 	sub	r21,r3,r2
   150e0:	a80b883a 	mov	r5,r21
   150e4:	9009883a 	mov	r4,r18
   150e8:	00156240 	call	15624 <_sbrk_r>
   150ec:	00ffffc4 	movi	r3,-1
   150f0:	10c0e126 	beq	r2,r3,15478 <_malloc_r+0x788>
   150f4:	1505c83a 	sub	r2,r2,r20
   150f8:	1545883a 	add	r2,r2,r21
   150fc:	10800054 	ori	r2,r2,1
   15100:	e0c00017 	ldw	r3,0(fp)
   15104:	9d000215 	stw	r20,8(r19)
   15108:	a0800115 	stw	r2,4(r20)
   1510c:	a8c7883a 	add	r3,r21,r3
   15110:	e0c00015 	stw	r3,0(fp)
   15114:	84c00e26 	beq	r16,r19,15150 <_malloc_r+0x460>
   15118:	018003c4 	movi	r6,15
   1511c:	3580a72e 	bgeu	r6,r22,153bc <_malloc_r+0x6cc>
   15120:	81400117 	ldw	r5,4(r16)
   15124:	013ffe04 	movi	r4,-8
   15128:	b0bffd04 	addi	r2,r22,-12
   1512c:	1104703a 	and	r2,r2,r4
   15130:	2900004c 	andi	r4,r5,1
   15134:	2088b03a 	or	r4,r4,r2
   15138:	81000115 	stw	r4,4(r16)
   1513c:	01400144 	movi	r5,5
   15140:	8089883a 	add	r4,r16,r2
   15144:	21400115 	stw	r5,4(r4)
   15148:	21400215 	stw	r5,8(r4)
   1514c:	3080cd36 	bltu	r6,r2,15484 <_malloc_r+0x794>
   15150:	008000b4 	movhi	r2,2
   15154:	10a64304 	addi	r2,r2,-26356
   15158:	11000017 	ldw	r4,0(r2)
   1515c:	20c0012e 	bgeu	r4,r3,15164 <_malloc_r+0x474>
   15160:	10c00015 	stw	r3,0(r2)
   15164:	008000b4 	movhi	r2,2
   15168:	10a64204 	addi	r2,r2,-26360
   1516c:	11000017 	ldw	r4,0(r2)
   15170:	9c000217 	ldw	r16,8(r19)
   15174:	20c0012e 	bgeu	r4,r3,1517c <_malloc_r+0x48c>
   15178:	10c00015 	stw	r3,0(r2)
   1517c:	80c00117 	ldw	r3,4(r16)
   15180:	00bfff04 	movi	r2,-4
   15184:	1886703a 	and	r3,r3,r2
   15188:	1c45c83a 	sub	r2,r3,r17
   1518c:	1c400236 	bltu	r3,r17,15198 <_malloc_r+0x4a8>
   15190:	00c003c4 	movi	r3,15
   15194:	18800416 	blt	r3,r2,151a8 <_malloc_r+0x4b8>
   15198:	9009883a 	mov	r4,r18
   1519c:	0015e280 	call	15e28 <__malloc_unlock>
   151a0:	0005883a 	mov	r2,zero
   151a4:	003f7b06 	br	14f94 <__alt_data_end+0xffff4f94>
   151a8:	88c00054 	ori	r3,r17,1
   151ac:	80c00115 	stw	r3,4(r16)
   151b0:	8463883a 	add	r17,r16,r17
   151b4:	10800054 	ori	r2,r2,1
   151b8:	9c400215 	stw	r17,8(r19)
   151bc:	88800115 	stw	r2,4(r17)
   151c0:	9009883a 	mov	r4,r18
   151c4:	0015e280 	call	15e28 <__malloc_unlock>
   151c8:	80800204 	addi	r2,r16,8
   151cc:	003f7106 	br	14f94 <__alt_data_end+0xffff4f94>
   151d0:	00c00504 	movi	r3,20
   151d4:	18804a2e 	bgeu	r3,r2,15300 <_malloc_r+0x610>
   151d8:	00c01504 	movi	r3,84
   151dc:	18806e36 	bltu	r3,r2,15398 <_malloc_r+0x6a8>
   151e0:	8804d33a 	srli	r2,r17,12
   151e4:	12001bc4 	addi	r8,r2,111
   151e8:	11c01b84 	addi	r7,r2,110
   151ec:	4209883a 	add	r4,r8,r8
   151f0:	003edd06 	br	14d68 <__alt_data_end+0xffff4d68>
   151f4:	3804d27a 	srli	r2,r7,9
   151f8:	00c00104 	movi	r3,4
   151fc:	1880442e 	bgeu	r3,r2,15310 <_malloc_r+0x620>
   15200:	00c00504 	movi	r3,20
   15204:	18808136 	bltu	r3,r2,1540c <_malloc_r+0x71c>
   15208:	11401704 	addi	r5,r2,92
   1520c:	10c016c4 	addi	r3,r2,91
   15210:	294b883a 	add	r5,r5,r5
   15214:	294b883a 	add	r5,r5,r5
   15218:	294b883a 	add	r5,r5,r5
   1521c:	994b883a 	add	r5,r19,r5
   15220:	28800017 	ldw	r2,0(r5)
   15224:	01800074 	movhi	r6,1
   15228:	297ffe04 	addi	r5,r5,-8
   1522c:	319e8104 	addi	r6,r6,31236
   15230:	28806526 	beq	r5,r2,153c8 <_malloc_r+0x6d8>
   15234:	01bfff04 	movi	r6,-4
   15238:	10c00117 	ldw	r3,4(r2)
   1523c:	1986703a 	and	r3,r3,r6
   15240:	38c0022e 	bgeu	r7,r3,1524c <_malloc_r+0x55c>
   15244:	10800217 	ldw	r2,8(r2)
   15248:	28bffb1e 	bne	r5,r2,15238 <__alt_data_end+0xffff5238>
   1524c:	11400317 	ldw	r5,12(r2)
   15250:	98c00117 	ldw	r3,4(r19)
   15254:	81400315 	stw	r5,12(r16)
   15258:	80800215 	stw	r2,8(r16)
   1525c:	2c000215 	stw	r16,8(r5)
   15260:	14000315 	stw	r16,12(r2)
   15264:	003ef806 	br	14e48 <__alt_data_end+0xffff4e48>
   15268:	88c00054 	ori	r3,r17,1
   1526c:	80c00115 	stw	r3,4(r16)
   15270:	8463883a 	add	r17,r16,r17
   15274:	34400515 	stw	r17,20(r6)
   15278:	34400415 	stw	r17,16(r6)
   1527c:	10c00054 	ori	r3,r2,1
   15280:	8a000315 	stw	r8,12(r17)
   15284:	8a000215 	stw	r8,8(r17)
   15288:	88c00115 	stw	r3,4(r17)
   1528c:	88a3883a 	add	r17,r17,r2
   15290:	88800015 	stw	r2,0(r17)
   15294:	9009883a 	mov	r4,r18
   15298:	0015e280 	call	15e28 <__malloc_unlock>
   1529c:	80800204 	addi	r2,r16,8
   152a0:	003f3c06 	br	14f94 <__alt_data_end+0xffff4f94>
   152a4:	30c00117 	ldw	r3,4(r6)
   152a8:	003ee706 	br	14e48 <__alt_data_end+0xffff4e48>
   152ac:	5ac00044 	addi	r11,r11,1
   152b0:	588000cc 	andi	r2,r11,3
   152b4:	31800204 	addi	r6,r6,8
   152b8:	103efd1e 	bne	r2,zero,14eb0 <__alt_data_end+0xffff4eb0>
   152bc:	00002406 	br	15350 <_malloc_r+0x660>
   152c0:	14000317 	ldw	r16,12(r2)
   152c4:	143f251e 	bne	r2,r16,14f5c <__alt_data_end+0xffff4f5c>
   152c8:	21000084 	addi	r4,r4,2
   152cc:	003ebc06 	br	14dc0 <__alt_data_end+0xffff4dc0>
   152d0:	8085883a 	add	r2,r16,r2
   152d4:	10c00117 	ldw	r3,4(r2)
   152d8:	81000317 	ldw	r4,12(r16)
   152dc:	81400217 	ldw	r5,8(r16)
   152e0:	18c00054 	ori	r3,r3,1
   152e4:	10c00115 	stw	r3,4(r2)
   152e8:	29000315 	stw	r4,12(r5)
   152ec:	21400215 	stw	r5,8(r4)
   152f0:	9009883a 	mov	r4,r18
   152f4:	0015e280 	call	15e28 <__malloc_unlock>
   152f8:	80800204 	addi	r2,r16,8
   152fc:	003f2506 	br	14f94 <__alt_data_end+0xffff4f94>
   15300:	12001704 	addi	r8,r2,92
   15304:	11c016c4 	addi	r7,r2,91
   15308:	4209883a 	add	r4,r8,r8
   1530c:	003e9606 	br	14d68 <__alt_data_end+0xffff4d68>
   15310:	3804d1ba 	srli	r2,r7,6
   15314:	11400e44 	addi	r5,r2,57
   15318:	10c00e04 	addi	r3,r2,56
   1531c:	294b883a 	add	r5,r5,r5
   15320:	003fbc06 	br	15214 <__alt_data_end+0xffff5214>
   15324:	84ff5926 	beq	r16,r19,1508c <__alt_data_end+0xffff508c>
   15328:	00800074 	movhi	r2,1
   1532c:	109e8104 	addi	r2,r2,31236
   15330:	14000217 	ldw	r16,8(r2)
   15334:	00bfff04 	movi	r2,-4
   15338:	80c00117 	ldw	r3,4(r16)
   1533c:	1886703a 	and	r3,r3,r2
   15340:	003f9106 	br	15188 <__alt_data_end+0xffff5188>
   15344:	60800217 	ldw	r2,8(r12)
   15348:	213fffc4 	addi	r4,r4,-1
   1534c:	1300651e 	bne	r2,r12,154e4 <_malloc_r+0x7f4>
   15350:	208000cc 	andi	r2,r4,3
   15354:	633ffe04 	addi	r12,r12,-8
   15358:	103ffa1e 	bne	r2,zero,15344 <__alt_data_end+0xffff5344>
   1535c:	98800117 	ldw	r2,4(r19)
   15360:	0146303a 	nor	r3,zero,r5
   15364:	1884703a 	and	r2,r3,r2
   15368:	98800115 	stw	r2,4(r19)
   1536c:	294b883a 	add	r5,r5,r5
   15370:	117f2836 	bltu	r2,r5,15014 <__alt_data_end+0xffff5014>
   15374:	283f2726 	beq	r5,zero,15014 <__alt_data_end+0xffff5014>
   15378:	2886703a 	and	r3,r5,r2
   1537c:	5809883a 	mov	r4,r11
   15380:	183ec31e 	bne	r3,zero,14e90 <__alt_data_end+0xffff4e90>
   15384:	294b883a 	add	r5,r5,r5
   15388:	2886703a 	and	r3,r5,r2
   1538c:	21000104 	addi	r4,r4,4
   15390:	183ffc26 	beq	r3,zero,15384 <__alt_data_end+0xffff5384>
   15394:	003ebe06 	br	14e90 <__alt_data_end+0xffff4e90>
   15398:	00c05504 	movi	r3,340
   1539c:	18801236 	bltu	r3,r2,153e8 <_malloc_r+0x6f8>
   153a0:	8804d3fa 	srli	r2,r17,15
   153a4:	12001e04 	addi	r8,r2,120
   153a8:	11c01dc4 	addi	r7,r2,119
   153ac:	4209883a 	add	r4,r8,r8
   153b0:	003e6d06 	br	14d68 <__alt_data_end+0xffff4d68>
   153b4:	00c40004 	movi	r3,4096
   153b8:	003f4606 	br	150d4 <__alt_data_end+0xffff50d4>
   153bc:	00800044 	movi	r2,1
   153c0:	a0800115 	stw	r2,4(r20)
   153c4:	003f7406 	br	15198 <__alt_data_end+0xffff5198>
   153c8:	1805d0ba 	srai	r2,r3,2
   153cc:	01c00044 	movi	r7,1
   153d0:	30c00117 	ldw	r3,4(r6)
   153d4:	388e983a 	sll	r7,r7,r2
   153d8:	2805883a 	mov	r2,r5
   153dc:	38c6b03a 	or	r3,r7,r3
   153e0:	30c00115 	stw	r3,4(r6)
   153e4:	003f9b06 	br	15254 <__alt_data_end+0xffff5254>
   153e8:	00c15504 	movi	r3,1364
   153ec:	18801a36 	bltu	r3,r2,15458 <_malloc_r+0x768>
   153f0:	8804d4ba 	srli	r2,r17,18
   153f4:	12001f44 	addi	r8,r2,125
   153f8:	11c01f04 	addi	r7,r2,124
   153fc:	4209883a 	add	r4,r8,r8
   15400:	003e5906 	br	14d68 <__alt_data_end+0xffff4d68>
   15404:	ad400404 	addi	r21,r21,16
   15408:	003f1706 	br	15068 <__alt_data_end+0xffff5068>
   1540c:	00c01504 	movi	r3,84
   15410:	18802336 	bltu	r3,r2,154a0 <_malloc_r+0x7b0>
   15414:	3804d33a 	srli	r2,r7,12
   15418:	11401bc4 	addi	r5,r2,111
   1541c:	10c01b84 	addi	r3,r2,110
   15420:	294b883a 	add	r5,r5,r5
   15424:	003f7b06 	br	15214 <__alt_data_end+0xffff5214>
   15428:	9c000217 	ldw	r16,8(r19)
   1542c:	00bfff04 	movi	r2,-4
   15430:	80c00117 	ldw	r3,4(r16)
   15434:	1886703a 	and	r3,r3,r2
   15438:	003f5306 	br	15188 <__alt_data_end+0xffff5188>
   1543c:	3083ffcc 	andi	r2,r6,4095
   15440:	103f181e 	bne	r2,zero,150a4 <__alt_data_end+0xffff50a4>
   15444:	99000217 	ldw	r4,8(r19)
   15448:	b545883a 	add	r2,r22,r21
   1544c:	10800054 	ori	r2,r2,1
   15450:	20800115 	stw	r2,4(r4)
   15454:	003f3e06 	br	15150 <__alt_data_end+0xffff5150>
   15458:	01003f84 	movi	r4,254
   1545c:	02001fc4 	movi	r8,127
   15460:	01c01f84 	movi	r7,126
   15464:	003e4006 	br	14d68 <__alt_data_end+0xffff4d68>
   15468:	00800074 	movhi	r2,1
   1546c:	109f8e04 	addi	r2,r2,32312
   15470:	15000015 	stw	r20,0(r2)
   15474:	003f1106 	br	150bc <__alt_data_end+0xffff50bc>
   15478:	00800044 	movi	r2,1
   1547c:	002b883a 	mov	r21,zero
   15480:	003f1f06 	br	15100 <__alt_data_end+0xffff5100>
   15484:	81400204 	addi	r5,r16,8
   15488:	9009883a 	mov	r4,r18
   1548c:	001469c0 	call	1469c <_free_r>
   15490:	008000b4 	movhi	r2,2
   15494:	10a64504 	addi	r2,r2,-26348
   15498:	10c00017 	ldw	r3,0(r2)
   1549c:	003f2c06 	br	15150 <__alt_data_end+0xffff5150>
   154a0:	00c05504 	movi	r3,340
   154a4:	18800536 	bltu	r3,r2,154bc <_malloc_r+0x7cc>
   154a8:	3804d3fa 	srli	r2,r7,15
   154ac:	11401e04 	addi	r5,r2,120
   154b0:	10c01dc4 	addi	r3,r2,119
   154b4:	294b883a 	add	r5,r5,r5
   154b8:	003f5606 	br	15214 <__alt_data_end+0xffff5214>
   154bc:	00c15504 	movi	r3,1364
   154c0:	18800536 	bltu	r3,r2,154d8 <_malloc_r+0x7e8>
   154c4:	3804d4ba 	srli	r2,r7,18
   154c8:	11401f44 	addi	r5,r2,125
   154cc:	10c01f04 	addi	r3,r2,124
   154d0:	294b883a 	add	r5,r5,r5
   154d4:	003f4f06 	br	15214 <__alt_data_end+0xffff5214>
   154d8:	01403f84 	movi	r5,254
   154dc:	00c01f84 	movi	r3,126
   154e0:	003f4c06 	br	15214 <__alt_data_end+0xffff5214>
   154e4:	98800117 	ldw	r2,4(r19)
   154e8:	003fa006 	br	1536c <__alt_data_end+0xffff536c>
   154ec:	8808d0fa 	srli	r4,r17,3
   154f0:	20800044 	addi	r2,r4,1
   154f4:	1085883a 	add	r2,r2,r2
   154f8:	003e9006 	br	14f3c <__alt_data_end+0xffff4f3c>

000154fc <memset>:
   154fc:	20c000cc 	andi	r3,r4,3
   15500:	2005883a 	mov	r2,r4
   15504:	18004426 	beq	r3,zero,15618 <memset+0x11c>
   15508:	31ffffc4 	addi	r7,r6,-1
   1550c:	30004026 	beq	r6,zero,15610 <memset+0x114>
   15510:	2813883a 	mov	r9,r5
   15514:	200d883a 	mov	r6,r4
   15518:	2007883a 	mov	r3,r4
   1551c:	00000406 	br	15530 <memset+0x34>
   15520:	3a3fffc4 	addi	r8,r7,-1
   15524:	31800044 	addi	r6,r6,1
   15528:	38003926 	beq	r7,zero,15610 <memset+0x114>
   1552c:	400f883a 	mov	r7,r8
   15530:	18c00044 	addi	r3,r3,1
   15534:	32400005 	stb	r9,0(r6)
   15538:	1a0000cc 	andi	r8,r3,3
   1553c:	403ff81e 	bne	r8,zero,15520 <__alt_data_end+0xffff5520>
   15540:	010000c4 	movi	r4,3
   15544:	21c02d2e 	bgeu	r4,r7,155fc <memset+0x100>
   15548:	29003fcc 	andi	r4,r5,255
   1554c:	200c923a 	slli	r6,r4,8
   15550:	3108b03a 	or	r4,r6,r4
   15554:	200c943a 	slli	r6,r4,16
   15558:	218cb03a 	or	r6,r4,r6
   1555c:	010003c4 	movi	r4,15
   15560:	21c0182e 	bgeu	r4,r7,155c4 <memset+0xc8>
   15564:	3b3ffc04 	addi	r12,r7,-16
   15568:	6018d13a 	srli	r12,r12,4
   1556c:	1a000104 	addi	r8,r3,4
   15570:	1ac00204 	addi	r11,r3,8
   15574:	6008913a 	slli	r4,r12,4
   15578:	1a800304 	addi	r10,r3,12
   1557c:	1813883a 	mov	r9,r3
   15580:	21000504 	addi	r4,r4,20
   15584:	1909883a 	add	r4,r3,r4
   15588:	49800015 	stw	r6,0(r9)
   1558c:	41800015 	stw	r6,0(r8)
   15590:	59800015 	stw	r6,0(r11)
   15594:	51800015 	stw	r6,0(r10)
   15598:	42000404 	addi	r8,r8,16
   1559c:	4a400404 	addi	r9,r9,16
   155a0:	5ac00404 	addi	r11,r11,16
   155a4:	52800404 	addi	r10,r10,16
   155a8:	413ff71e 	bne	r8,r4,15588 <__alt_data_end+0xffff5588>
   155ac:	63000044 	addi	r12,r12,1
   155b0:	6018913a 	slli	r12,r12,4
   155b4:	39c003cc 	andi	r7,r7,15
   155b8:	010000c4 	movi	r4,3
   155bc:	1b07883a 	add	r3,r3,r12
   155c0:	21c00e2e 	bgeu	r4,r7,155fc <memset+0x100>
   155c4:	1813883a 	mov	r9,r3
   155c8:	3811883a 	mov	r8,r7
   155cc:	010000c4 	movi	r4,3
   155d0:	49800015 	stw	r6,0(r9)
   155d4:	423fff04 	addi	r8,r8,-4
   155d8:	4a400104 	addi	r9,r9,4
   155dc:	223ffc36 	bltu	r4,r8,155d0 <__alt_data_end+0xffff55d0>
   155e0:	393fff04 	addi	r4,r7,-4
   155e4:	2008d0ba 	srli	r4,r4,2
   155e8:	39c000cc 	andi	r7,r7,3
   155ec:	21000044 	addi	r4,r4,1
   155f0:	2109883a 	add	r4,r4,r4
   155f4:	2109883a 	add	r4,r4,r4
   155f8:	1907883a 	add	r3,r3,r4
   155fc:	38000526 	beq	r7,zero,15614 <memset+0x118>
   15600:	19cf883a 	add	r7,r3,r7
   15604:	19400005 	stb	r5,0(r3)
   15608:	18c00044 	addi	r3,r3,1
   1560c:	38fffd1e 	bne	r7,r3,15604 <__alt_data_end+0xffff5604>
   15610:	f800283a 	ret
   15614:	f800283a 	ret
   15618:	2007883a 	mov	r3,r4
   1561c:	300f883a 	mov	r7,r6
   15620:	003fc706 	br	15540 <__alt_data_end+0xffff5540>

00015624 <_sbrk_r>:
   15624:	defffd04 	addi	sp,sp,-12
   15628:	dc000015 	stw	r16,0(sp)
   1562c:	040000b4 	movhi	r16,2
   15630:	dc400115 	stw	r17,4(sp)
   15634:	84264104 	addi	r16,r16,-26364
   15638:	2023883a 	mov	r17,r4
   1563c:	2809883a 	mov	r4,r5
   15640:	dfc00215 	stw	ra,8(sp)
   15644:	80000015 	stw	zero,0(r16)
   15648:	0015f8c0 	call	15f8c <sbrk>
   1564c:	00ffffc4 	movi	r3,-1
   15650:	10c00526 	beq	r2,r3,15668 <_sbrk_r+0x44>
   15654:	dfc00217 	ldw	ra,8(sp)
   15658:	dc400117 	ldw	r17,4(sp)
   1565c:	dc000017 	ldw	r16,0(sp)
   15660:	dec00304 	addi	sp,sp,12
   15664:	f800283a 	ret
   15668:	80c00017 	ldw	r3,0(r16)
   1566c:	183ff926 	beq	r3,zero,15654 <__alt_data_end+0xffff5654>
   15670:	88c00015 	stw	r3,0(r17)
   15674:	003ff706 	br	15654 <__alt_data_end+0xffff5654>

00015678 <__sread>:
   15678:	defffe04 	addi	sp,sp,-8
   1567c:	dc000015 	stw	r16,0(sp)
   15680:	2821883a 	mov	r16,r5
   15684:	2940038f 	ldh	r5,14(r5)
   15688:	dfc00115 	stw	ra,4(sp)
   1568c:	0015a7c0 	call	15a7c <_read_r>
   15690:	10000716 	blt	r2,zero,156b0 <__sread+0x38>
   15694:	80c01417 	ldw	r3,80(r16)
   15698:	1887883a 	add	r3,r3,r2
   1569c:	80c01415 	stw	r3,80(r16)
   156a0:	dfc00117 	ldw	ra,4(sp)
   156a4:	dc000017 	ldw	r16,0(sp)
   156a8:	dec00204 	addi	sp,sp,8
   156ac:	f800283a 	ret
   156b0:	80c0030b 	ldhu	r3,12(r16)
   156b4:	18fbffcc 	andi	r3,r3,61439
   156b8:	80c0030d 	sth	r3,12(r16)
   156bc:	dfc00117 	ldw	ra,4(sp)
   156c0:	dc000017 	ldw	r16,0(sp)
   156c4:	dec00204 	addi	sp,sp,8
   156c8:	f800283a 	ret

000156cc <__seofread>:
   156cc:	0005883a 	mov	r2,zero
   156d0:	f800283a 	ret

000156d4 <__swrite>:
   156d4:	2880030b 	ldhu	r2,12(r5)
   156d8:	defffb04 	addi	sp,sp,-20
   156dc:	dcc00315 	stw	r19,12(sp)
   156e0:	dc800215 	stw	r18,8(sp)
   156e4:	dc400115 	stw	r17,4(sp)
   156e8:	dc000015 	stw	r16,0(sp)
   156ec:	dfc00415 	stw	ra,16(sp)
   156f0:	10c0400c 	andi	r3,r2,256
   156f4:	2821883a 	mov	r16,r5
   156f8:	2023883a 	mov	r17,r4
   156fc:	3025883a 	mov	r18,r6
   15700:	3827883a 	mov	r19,r7
   15704:	18000526 	beq	r3,zero,1571c <__swrite+0x48>
   15708:	2940038f 	ldh	r5,14(r5)
   1570c:	01c00084 	movi	r7,2
   15710:	000d883a 	mov	r6,zero
   15714:	0015a1c0 	call	15a1c <_lseek_r>
   15718:	8080030b 	ldhu	r2,12(r16)
   1571c:	8140038f 	ldh	r5,14(r16)
   15720:	10bbffcc 	andi	r2,r2,61439
   15724:	980f883a 	mov	r7,r19
   15728:	900d883a 	mov	r6,r18
   1572c:	8809883a 	mov	r4,r17
   15730:	8080030d 	sth	r2,12(r16)
   15734:	dfc00417 	ldw	ra,16(sp)
   15738:	dcc00317 	ldw	r19,12(sp)
   1573c:	dc800217 	ldw	r18,8(sp)
   15740:	dc400117 	ldw	r17,4(sp)
   15744:	dc000017 	ldw	r16,0(sp)
   15748:	dec00504 	addi	sp,sp,20
   1574c:	00157b41 	jmpi	157b4 <_write_r>

00015750 <__sseek>:
   15750:	defffe04 	addi	sp,sp,-8
   15754:	dc000015 	stw	r16,0(sp)
   15758:	2821883a 	mov	r16,r5
   1575c:	2940038f 	ldh	r5,14(r5)
   15760:	dfc00115 	stw	ra,4(sp)
   15764:	0015a1c0 	call	15a1c <_lseek_r>
   15768:	00ffffc4 	movi	r3,-1
   1576c:	10c00826 	beq	r2,r3,15790 <__sseek+0x40>
   15770:	80c0030b 	ldhu	r3,12(r16)
   15774:	80801415 	stw	r2,80(r16)
   15778:	18c40014 	ori	r3,r3,4096
   1577c:	80c0030d 	sth	r3,12(r16)
   15780:	dfc00117 	ldw	ra,4(sp)
   15784:	dc000017 	ldw	r16,0(sp)
   15788:	dec00204 	addi	sp,sp,8
   1578c:	f800283a 	ret
   15790:	80c0030b 	ldhu	r3,12(r16)
   15794:	18fbffcc 	andi	r3,r3,61439
   15798:	80c0030d 	sth	r3,12(r16)
   1579c:	dfc00117 	ldw	ra,4(sp)
   157a0:	dc000017 	ldw	r16,0(sp)
   157a4:	dec00204 	addi	sp,sp,8
   157a8:	f800283a 	ret

000157ac <__sclose>:
   157ac:	2940038f 	ldh	r5,14(r5)
   157b0:	00158141 	jmpi	15814 <_close_r>

000157b4 <_write_r>:
   157b4:	defffd04 	addi	sp,sp,-12
   157b8:	2805883a 	mov	r2,r5
   157bc:	dc000015 	stw	r16,0(sp)
   157c0:	040000b4 	movhi	r16,2
   157c4:	dc400115 	stw	r17,4(sp)
   157c8:	300b883a 	mov	r5,r6
   157cc:	84264104 	addi	r16,r16,-26364
   157d0:	2023883a 	mov	r17,r4
   157d4:	380d883a 	mov	r6,r7
   157d8:	1009883a 	mov	r4,r2
   157dc:	dfc00215 	stw	ra,8(sp)
   157e0:	80000015 	stw	zero,0(r16)
   157e4:	00160780 	call	16078 <write>
   157e8:	00ffffc4 	movi	r3,-1
   157ec:	10c00526 	beq	r2,r3,15804 <_write_r+0x50>
   157f0:	dfc00217 	ldw	ra,8(sp)
   157f4:	dc400117 	ldw	r17,4(sp)
   157f8:	dc000017 	ldw	r16,0(sp)
   157fc:	dec00304 	addi	sp,sp,12
   15800:	f800283a 	ret
   15804:	80c00017 	ldw	r3,0(r16)
   15808:	183ff926 	beq	r3,zero,157f0 <__alt_data_end+0xffff57f0>
   1580c:	88c00015 	stw	r3,0(r17)
   15810:	003ff706 	br	157f0 <__alt_data_end+0xffff57f0>

00015814 <_close_r>:
   15814:	defffd04 	addi	sp,sp,-12
   15818:	dc000015 	stw	r16,0(sp)
   1581c:	040000b4 	movhi	r16,2
   15820:	dc400115 	stw	r17,4(sp)
   15824:	84264104 	addi	r16,r16,-26364
   15828:	2023883a 	mov	r17,r4
   1582c:	2809883a 	mov	r4,r5
   15830:	dfc00215 	stw	ra,8(sp)
   15834:	80000015 	stw	zero,0(r16)
   15838:	0012b080 	call	12b08 <close>
   1583c:	00ffffc4 	movi	r3,-1
   15840:	10c00526 	beq	r2,r3,15858 <_close_r+0x44>
   15844:	dfc00217 	ldw	ra,8(sp)
   15848:	dc400117 	ldw	r17,4(sp)
   1584c:	dc000017 	ldw	r16,0(sp)
   15850:	dec00304 	addi	sp,sp,12
   15854:	f800283a 	ret
   15858:	80c00017 	ldw	r3,0(r16)
   1585c:	183ff926 	beq	r3,zero,15844 <__alt_data_end+0xffff5844>
   15860:	88c00015 	stw	r3,0(r17)
   15864:	003ff706 	br	15844 <__alt_data_end+0xffff5844>

00015868 <_fclose_r>:
   15868:	28003926 	beq	r5,zero,15950 <_fclose_r+0xe8>
   1586c:	defffc04 	addi	sp,sp,-16
   15870:	dc400115 	stw	r17,4(sp)
   15874:	dc000015 	stw	r16,0(sp)
   15878:	dfc00315 	stw	ra,12(sp)
   1587c:	dc800215 	stw	r18,8(sp)
   15880:	2023883a 	mov	r17,r4
   15884:	2821883a 	mov	r16,r5
   15888:	20000226 	beq	r4,zero,15894 <_fclose_r+0x2c>
   1588c:	20800e17 	ldw	r2,56(r4)
   15890:	10002726 	beq	r2,zero,15930 <_fclose_r+0xc8>
   15894:	8080030f 	ldh	r2,12(r16)
   15898:	1000071e 	bne	r2,zero,158b8 <_fclose_r+0x50>
   1589c:	0005883a 	mov	r2,zero
   158a0:	dfc00317 	ldw	ra,12(sp)
   158a4:	dc800217 	ldw	r18,8(sp)
   158a8:	dc400117 	ldw	r17,4(sp)
   158ac:	dc000017 	ldw	r16,0(sp)
   158b0:	dec00404 	addi	sp,sp,16
   158b4:	f800283a 	ret
   158b8:	800b883a 	mov	r5,r16
   158bc:	8809883a 	mov	r4,r17
   158c0:	0013f200 	call	13f20 <__sflush_r>
   158c4:	1025883a 	mov	r18,r2
   158c8:	80800b17 	ldw	r2,44(r16)
   158cc:	10000426 	beq	r2,zero,158e0 <_fclose_r+0x78>
   158d0:	81400717 	ldw	r5,28(r16)
   158d4:	8809883a 	mov	r4,r17
   158d8:	103ee83a 	callr	r2
   158dc:	10001616 	blt	r2,zero,15938 <_fclose_r+0xd0>
   158e0:	8080030b 	ldhu	r2,12(r16)
   158e4:	1080200c 	andi	r2,r2,128
   158e8:	1000151e 	bne	r2,zero,15940 <_fclose_r+0xd8>
   158ec:	81400c17 	ldw	r5,48(r16)
   158f0:	28000526 	beq	r5,zero,15908 <_fclose_r+0xa0>
   158f4:	80801004 	addi	r2,r16,64
   158f8:	28800226 	beq	r5,r2,15904 <_fclose_r+0x9c>
   158fc:	8809883a 	mov	r4,r17
   15900:	001469c0 	call	1469c <_free_r>
   15904:	80000c15 	stw	zero,48(r16)
   15908:	81401117 	ldw	r5,68(r16)
   1590c:	28000326 	beq	r5,zero,1591c <_fclose_r+0xb4>
   15910:	8809883a 	mov	r4,r17
   15914:	001469c0 	call	1469c <_free_r>
   15918:	80001115 	stw	zero,68(r16)
   1591c:	00145380 	call	14538 <__sfp_lock_acquire>
   15920:	8000030d 	sth	zero,12(r16)
   15924:	001453c0 	call	1453c <__sfp_lock_release>
   15928:	9005883a 	mov	r2,r18
   1592c:	003fdc06 	br	158a0 <__alt_data_end+0xffff58a0>
   15930:	00145280 	call	14528 <__sinit>
   15934:	003fd706 	br	15894 <__alt_data_end+0xffff5894>
   15938:	04bfffc4 	movi	r18,-1
   1593c:	003fe806 	br	158e0 <__alt_data_end+0xffff58e0>
   15940:	81400417 	ldw	r5,16(r16)
   15944:	8809883a 	mov	r4,r17
   15948:	001469c0 	call	1469c <_free_r>
   1594c:	003fe706 	br	158ec <__alt_data_end+0xffff58ec>
   15950:	0005883a 	mov	r2,zero
   15954:	f800283a 	ret

00015958 <fclose>:
   15958:	00800074 	movhi	r2,1
   1595c:	109f8d04 	addi	r2,r2,32308
   15960:	200b883a 	mov	r5,r4
   15964:	11000017 	ldw	r4,0(r2)
   15968:	00158681 	jmpi	15868 <_fclose_r>

0001596c <_fstat_r>:
   1596c:	defffd04 	addi	sp,sp,-12
   15970:	2805883a 	mov	r2,r5
   15974:	dc000015 	stw	r16,0(sp)
   15978:	040000b4 	movhi	r16,2
   1597c:	dc400115 	stw	r17,4(sp)
   15980:	84264104 	addi	r16,r16,-26364
   15984:	2023883a 	mov	r17,r4
   15988:	300b883a 	mov	r5,r6
   1598c:	1009883a 	mov	r4,r2
   15990:	dfc00215 	stw	ra,8(sp)
   15994:	80000015 	stw	zero,0(r16)
   15998:	0015b4c0 	call	15b4c <fstat>
   1599c:	00ffffc4 	movi	r3,-1
   159a0:	10c00526 	beq	r2,r3,159b8 <_fstat_r+0x4c>
   159a4:	dfc00217 	ldw	ra,8(sp)
   159a8:	dc400117 	ldw	r17,4(sp)
   159ac:	dc000017 	ldw	r16,0(sp)
   159b0:	dec00304 	addi	sp,sp,12
   159b4:	f800283a 	ret
   159b8:	80c00017 	ldw	r3,0(r16)
   159bc:	183ff926 	beq	r3,zero,159a4 <__alt_data_end+0xffff59a4>
   159c0:	88c00015 	stw	r3,0(r17)
   159c4:	003ff706 	br	159a4 <__alt_data_end+0xffff59a4>

000159c8 <_isatty_r>:
   159c8:	defffd04 	addi	sp,sp,-12
   159cc:	dc000015 	stw	r16,0(sp)
   159d0:	040000b4 	movhi	r16,2
   159d4:	dc400115 	stw	r17,4(sp)
   159d8:	84264104 	addi	r16,r16,-26364
   159dc:	2023883a 	mov	r17,r4
   159e0:	2809883a 	mov	r4,r5
   159e4:	dfc00215 	stw	ra,8(sp)
   159e8:	80000015 	stw	zero,0(r16)
   159ec:	0015c400 	call	15c40 <isatty>
   159f0:	00ffffc4 	movi	r3,-1
   159f4:	10c00526 	beq	r2,r3,15a0c <_isatty_r+0x44>
   159f8:	dfc00217 	ldw	ra,8(sp)
   159fc:	dc400117 	ldw	r17,4(sp)
   15a00:	dc000017 	ldw	r16,0(sp)
   15a04:	dec00304 	addi	sp,sp,12
   15a08:	f800283a 	ret
   15a0c:	80c00017 	ldw	r3,0(r16)
   15a10:	183ff926 	beq	r3,zero,159f8 <__alt_data_end+0xffff59f8>
   15a14:	88c00015 	stw	r3,0(r17)
   15a18:	003ff706 	br	159f8 <__alt_data_end+0xffff59f8>

00015a1c <_lseek_r>:
   15a1c:	defffd04 	addi	sp,sp,-12
   15a20:	2805883a 	mov	r2,r5
   15a24:	dc000015 	stw	r16,0(sp)
   15a28:	040000b4 	movhi	r16,2
   15a2c:	dc400115 	stw	r17,4(sp)
   15a30:	300b883a 	mov	r5,r6
   15a34:	84264104 	addi	r16,r16,-26364
   15a38:	2023883a 	mov	r17,r4
   15a3c:	380d883a 	mov	r6,r7
   15a40:	1009883a 	mov	r4,r2
   15a44:	dfc00215 	stw	ra,8(sp)
   15a48:	80000015 	stw	zero,0(r16)
   15a4c:	0015d280 	call	15d28 <lseek>
   15a50:	00ffffc4 	movi	r3,-1
   15a54:	10c00526 	beq	r2,r3,15a6c <_lseek_r+0x50>
   15a58:	dfc00217 	ldw	ra,8(sp)
   15a5c:	dc400117 	ldw	r17,4(sp)
   15a60:	dc000017 	ldw	r16,0(sp)
   15a64:	dec00304 	addi	sp,sp,12
   15a68:	f800283a 	ret
   15a6c:	80c00017 	ldw	r3,0(r16)
   15a70:	183ff926 	beq	r3,zero,15a58 <__alt_data_end+0xffff5a58>
   15a74:	88c00015 	stw	r3,0(r17)
   15a78:	003ff706 	br	15a58 <__alt_data_end+0xffff5a58>

00015a7c <_read_r>:
   15a7c:	defffd04 	addi	sp,sp,-12
   15a80:	2805883a 	mov	r2,r5
   15a84:	dc000015 	stw	r16,0(sp)
   15a88:	040000b4 	movhi	r16,2
   15a8c:	dc400115 	stw	r17,4(sp)
   15a90:	300b883a 	mov	r5,r6
   15a94:	84264104 	addi	r16,r16,-26364
   15a98:	2023883a 	mov	r17,r4
   15a9c:	380d883a 	mov	r6,r7
   15aa0:	1009883a 	mov	r4,r2
   15aa4:	dfc00215 	stw	ra,8(sp)
   15aa8:	80000015 	stw	zero,0(r16)
   15aac:	0015e880 	call	15e88 <read>
   15ab0:	00ffffc4 	movi	r3,-1
   15ab4:	10c00526 	beq	r2,r3,15acc <_read_r+0x50>
   15ab8:	dfc00217 	ldw	ra,8(sp)
   15abc:	dc400117 	ldw	r17,4(sp)
   15ac0:	dc000017 	ldw	r16,0(sp)
   15ac4:	dec00304 	addi	sp,sp,12
   15ac8:	f800283a 	ret
   15acc:	80c00017 	ldw	r3,0(r16)
   15ad0:	183ff926 	beq	r3,zero,15ab8 <__alt_data_end+0xffff5ab8>
   15ad4:	88c00015 	stw	r3,0(r17)
   15ad8:	003ff706 	br	15ab8 <__alt_data_end+0xffff5ab8>

00015adc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15adc:	defffd04 	addi	sp,sp,-12
   15ae0:	df000215 	stw	fp,8(sp)
   15ae4:	df000204 	addi	fp,sp,8
   15ae8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15aec:	0001883a 	nop
   15af0:	e0bfff17 	ldw	r2,-4(fp)
   15af4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15af8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15afc:	10000226 	beq	r2,zero,15b08 <_exit+0x2c>
    ALT_SIM_FAIL();
   15b00:	002af070 	cmpltui	zero,zero,43969
   15b04:	00000106 	br	15b0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15b08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15b0c:	003fff06 	br	15b0c <__alt_data_end+0xffff5b0c>

00015b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15b10:	defffe04 	addi	sp,sp,-8
   15b14:	dfc00115 	stw	ra,4(sp)
   15b18:	df000015 	stw	fp,0(sp)
   15b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15b20:	d0a00617 	ldw	r2,-32744(gp)
   15b24:	10000326 	beq	r2,zero,15b34 <alt_get_errno+0x24>
   15b28:	d0a00617 	ldw	r2,-32744(gp)
   15b2c:	103ee83a 	callr	r2
   15b30:	00000106 	br	15b38 <alt_get_errno+0x28>
   15b34:	d0a6be04 	addi	r2,gp,-25864
}
   15b38:	e037883a 	mov	sp,fp
   15b3c:	dfc00117 	ldw	ra,4(sp)
   15b40:	df000017 	ldw	fp,0(sp)
   15b44:	dec00204 	addi	sp,sp,8
   15b48:	f800283a 	ret

00015b4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   15b4c:	defffb04 	addi	sp,sp,-20
   15b50:	dfc00415 	stw	ra,16(sp)
   15b54:	df000315 	stw	fp,12(sp)
   15b58:	df000304 	addi	fp,sp,12
   15b5c:	e13ffe15 	stw	r4,-8(fp)
   15b60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15b64:	e0bffe17 	ldw	r2,-8(fp)
   15b68:	10000816 	blt	r2,zero,15b8c <fstat+0x40>
   15b6c:	01400304 	movi	r5,12
   15b70:	e13ffe17 	ldw	r4,-8(fp)
   15b74:	00113040 	call	11304 <__mulsi3>
   15b78:	1007883a 	mov	r3,r2
   15b7c:	00800074 	movhi	r2,1
   15b80:	109d1804 	addi	r2,r2,29792
   15b84:	1885883a 	add	r2,r3,r2
   15b88:	00000106 	br	15b90 <fstat+0x44>
   15b8c:	0005883a 	mov	r2,zero
   15b90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   15b94:	e0bffd17 	ldw	r2,-12(fp)
   15b98:	10001026 	beq	r2,zero,15bdc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15b9c:	e0bffd17 	ldw	r2,-12(fp)
   15ba0:	10800017 	ldw	r2,0(r2)
   15ba4:	10800817 	ldw	r2,32(r2)
   15ba8:	10000726 	beq	r2,zero,15bc8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   15bac:	e0bffd17 	ldw	r2,-12(fp)
   15bb0:	10800017 	ldw	r2,0(r2)
   15bb4:	10800817 	ldw	r2,32(r2)
   15bb8:	e17fff17 	ldw	r5,-4(fp)
   15bbc:	e13ffd17 	ldw	r4,-12(fp)
   15bc0:	103ee83a 	callr	r2
   15bc4:	00000a06 	br	15bf0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15bc8:	e0bfff17 	ldw	r2,-4(fp)
   15bcc:	00c80004 	movi	r3,8192
   15bd0:	10c00115 	stw	r3,4(r2)
      return 0;
   15bd4:	0005883a 	mov	r2,zero
   15bd8:	00000506 	br	15bf0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15bdc:	0015b100 	call	15b10 <alt_get_errno>
   15be0:	1007883a 	mov	r3,r2
   15be4:	00801444 	movi	r2,81
   15be8:	18800015 	stw	r2,0(r3)
    return -1;
   15bec:	00bfffc4 	movi	r2,-1
  }
}
   15bf0:	e037883a 	mov	sp,fp
   15bf4:	dfc00117 	ldw	ra,4(sp)
   15bf8:	df000017 	ldw	fp,0(sp)
   15bfc:	dec00204 	addi	sp,sp,8
   15c00:	f800283a 	ret

00015c04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15c04:	defffe04 	addi	sp,sp,-8
   15c08:	dfc00115 	stw	ra,4(sp)
   15c0c:	df000015 	stw	fp,0(sp)
   15c10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15c14:	d0a00617 	ldw	r2,-32744(gp)
   15c18:	10000326 	beq	r2,zero,15c28 <alt_get_errno+0x24>
   15c1c:	d0a00617 	ldw	r2,-32744(gp)
   15c20:	103ee83a 	callr	r2
   15c24:	00000106 	br	15c2c <alt_get_errno+0x28>
   15c28:	d0a6be04 	addi	r2,gp,-25864
}
   15c2c:	e037883a 	mov	sp,fp
   15c30:	dfc00117 	ldw	ra,4(sp)
   15c34:	df000017 	ldw	fp,0(sp)
   15c38:	dec00204 	addi	sp,sp,8
   15c3c:	f800283a 	ret

00015c40 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   15c40:	deffed04 	addi	sp,sp,-76
   15c44:	dfc01215 	stw	ra,72(sp)
   15c48:	df001115 	stw	fp,68(sp)
   15c4c:	df001104 	addi	fp,sp,68
   15c50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15c54:	e0bfff17 	ldw	r2,-4(fp)
   15c58:	10000816 	blt	r2,zero,15c7c <isatty+0x3c>
   15c5c:	01400304 	movi	r5,12
   15c60:	e13fff17 	ldw	r4,-4(fp)
   15c64:	00113040 	call	11304 <__mulsi3>
   15c68:	1007883a 	mov	r3,r2
   15c6c:	00800074 	movhi	r2,1
   15c70:	109d1804 	addi	r2,r2,29792
   15c74:	1885883a 	add	r2,r3,r2
   15c78:	00000106 	br	15c80 <isatty+0x40>
   15c7c:	0005883a 	mov	r2,zero
   15c80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   15c84:	e0bfef17 	ldw	r2,-68(fp)
   15c88:	10000e26 	beq	r2,zero,15cc4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   15c8c:	e0bfef17 	ldw	r2,-68(fp)
   15c90:	10800017 	ldw	r2,0(r2)
   15c94:	10800817 	ldw	r2,32(r2)
   15c98:	1000021e 	bne	r2,zero,15ca4 <isatty+0x64>
    {
      return 1;
   15c9c:	00800044 	movi	r2,1
   15ca0:	00000d06 	br	15cd8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15ca4:	e0bff004 	addi	r2,fp,-64
   15ca8:	100b883a 	mov	r5,r2
   15cac:	e13fff17 	ldw	r4,-4(fp)
   15cb0:	0015b4c0 	call	15b4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15cb4:	e0bff117 	ldw	r2,-60(fp)
   15cb8:	10880020 	cmpeqi	r2,r2,8192
   15cbc:	10803fcc 	andi	r2,r2,255
   15cc0:	00000506 	br	15cd8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15cc4:	0015c040 	call	15c04 <alt_get_errno>
   15cc8:	1007883a 	mov	r3,r2
   15ccc:	00801444 	movi	r2,81
   15cd0:	18800015 	stw	r2,0(r3)
    return 0;
   15cd4:	0005883a 	mov	r2,zero
  }
}
   15cd8:	e037883a 	mov	sp,fp
   15cdc:	dfc00117 	ldw	ra,4(sp)
   15ce0:	df000017 	ldw	fp,0(sp)
   15ce4:	dec00204 	addi	sp,sp,8
   15ce8:	f800283a 	ret

00015cec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15cec:	defffe04 	addi	sp,sp,-8
   15cf0:	dfc00115 	stw	ra,4(sp)
   15cf4:	df000015 	stw	fp,0(sp)
   15cf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15cfc:	d0a00617 	ldw	r2,-32744(gp)
   15d00:	10000326 	beq	r2,zero,15d10 <alt_get_errno+0x24>
   15d04:	d0a00617 	ldw	r2,-32744(gp)
   15d08:	103ee83a 	callr	r2
   15d0c:	00000106 	br	15d14 <alt_get_errno+0x28>
   15d10:	d0a6be04 	addi	r2,gp,-25864
}
   15d14:	e037883a 	mov	sp,fp
   15d18:	dfc00117 	ldw	ra,4(sp)
   15d1c:	df000017 	ldw	fp,0(sp)
   15d20:	dec00204 	addi	sp,sp,8
   15d24:	f800283a 	ret

00015d28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   15d28:	defff904 	addi	sp,sp,-28
   15d2c:	dfc00615 	stw	ra,24(sp)
   15d30:	df000515 	stw	fp,20(sp)
   15d34:	df000504 	addi	fp,sp,20
   15d38:	e13ffd15 	stw	r4,-12(fp)
   15d3c:	e17ffe15 	stw	r5,-8(fp)
   15d40:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   15d44:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10000816 	blt	r2,zero,15d70 <lseek+0x48>
   15d50:	01400304 	movi	r5,12
   15d54:	e13ffd17 	ldw	r4,-12(fp)
   15d58:	00113040 	call	11304 <__mulsi3>
   15d5c:	1007883a 	mov	r3,r2
   15d60:	00800074 	movhi	r2,1
   15d64:	109d1804 	addi	r2,r2,29792
   15d68:	1885883a 	add	r2,r3,r2
   15d6c:	00000106 	br	15d74 <lseek+0x4c>
   15d70:	0005883a 	mov	r2,zero
   15d74:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   15d78:	e0bffc17 	ldw	r2,-16(fp)
   15d7c:	10001026 	beq	r2,zero,15dc0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15d80:	e0bffc17 	ldw	r2,-16(fp)
   15d84:	10800017 	ldw	r2,0(r2)
   15d88:	10800717 	ldw	r2,28(r2)
   15d8c:	10000926 	beq	r2,zero,15db4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15d90:	e0bffc17 	ldw	r2,-16(fp)
   15d94:	10800017 	ldw	r2,0(r2)
   15d98:	10800717 	ldw	r2,28(r2)
   15d9c:	e1bfff17 	ldw	r6,-4(fp)
   15da0:	e17ffe17 	ldw	r5,-8(fp)
   15da4:	e13ffc17 	ldw	r4,-16(fp)
   15da8:	103ee83a 	callr	r2
   15dac:	e0bffb15 	stw	r2,-20(fp)
   15db0:	00000506 	br	15dc8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15db4:	00bfde84 	movi	r2,-134
   15db8:	e0bffb15 	stw	r2,-20(fp)
   15dbc:	00000206 	br	15dc8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   15dc0:	00bfebc4 	movi	r2,-81
   15dc4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   15dc8:	e0bffb17 	ldw	r2,-20(fp)
   15dcc:	1000070e 	bge	r2,zero,15dec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   15dd0:	0015cec0 	call	15cec <alt_get_errno>
   15dd4:	1007883a 	mov	r3,r2
   15dd8:	e0bffb17 	ldw	r2,-20(fp)
   15ddc:	0085c83a 	sub	r2,zero,r2
   15de0:	18800015 	stw	r2,0(r3)
    rc = -1;
   15de4:	00bfffc4 	movi	r2,-1
   15de8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   15dec:	e0bffb17 	ldw	r2,-20(fp)
}
   15df0:	e037883a 	mov	sp,fp
   15df4:	dfc00117 	ldw	ra,4(sp)
   15df8:	df000017 	ldw	fp,0(sp)
   15dfc:	dec00204 	addi	sp,sp,8
   15e00:	f800283a 	ret

00015e04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15e04:	defffe04 	addi	sp,sp,-8
   15e08:	df000115 	stw	fp,4(sp)
   15e0c:	df000104 	addi	fp,sp,4
   15e10:	e13fff15 	stw	r4,-4(fp)
}
   15e14:	0001883a 	nop
   15e18:	e037883a 	mov	sp,fp
   15e1c:	df000017 	ldw	fp,0(sp)
   15e20:	dec00104 	addi	sp,sp,4
   15e24:	f800283a 	ret

00015e28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   15e28:	defffe04 	addi	sp,sp,-8
   15e2c:	df000115 	stw	fp,4(sp)
   15e30:	df000104 	addi	fp,sp,4
   15e34:	e13fff15 	stw	r4,-4(fp)
}
   15e38:	0001883a 	nop
   15e3c:	e037883a 	mov	sp,fp
   15e40:	df000017 	ldw	fp,0(sp)
   15e44:	dec00104 	addi	sp,sp,4
   15e48:	f800283a 	ret

00015e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15e4c:	defffe04 	addi	sp,sp,-8
   15e50:	dfc00115 	stw	ra,4(sp)
   15e54:	df000015 	stw	fp,0(sp)
   15e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15e5c:	d0a00617 	ldw	r2,-32744(gp)
   15e60:	10000326 	beq	r2,zero,15e70 <alt_get_errno+0x24>
   15e64:	d0a00617 	ldw	r2,-32744(gp)
   15e68:	103ee83a 	callr	r2
   15e6c:	00000106 	br	15e74 <alt_get_errno+0x28>
   15e70:	d0a6be04 	addi	r2,gp,-25864
}
   15e74:	e037883a 	mov	sp,fp
   15e78:	dfc00117 	ldw	ra,4(sp)
   15e7c:	df000017 	ldw	fp,0(sp)
   15e80:	dec00204 	addi	sp,sp,8
   15e84:	f800283a 	ret

00015e88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   15e88:	defff904 	addi	sp,sp,-28
   15e8c:	dfc00615 	stw	ra,24(sp)
   15e90:	df000515 	stw	fp,20(sp)
   15e94:	df000504 	addi	fp,sp,20
   15e98:	e13ffd15 	stw	r4,-12(fp)
   15e9c:	e17ffe15 	stw	r5,-8(fp)
   15ea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15ea4:	e0bffd17 	ldw	r2,-12(fp)
   15ea8:	10000816 	blt	r2,zero,15ecc <read+0x44>
   15eac:	01400304 	movi	r5,12
   15eb0:	e13ffd17 	ldw	r4,-12(fp)
   15eb4:	00113040 	call	11304 <__mulsi3>
   15eb8:	1007883a 	mov	r3,r2
   15ebc:	00800074 	movhi	r2,1
   15ec0:	109d1804 	addi	r2,r2,29792
   15ec4:	1885883a 	add	r2,r3,r2
   15ec8:	00000106 	br	15ed0 <read+0x48>
   15ecc:	0005883a 	mov	r2,zero
   15ed0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   15ed4:	e0bffb17 	ldw	r2,-20(fp)
   15ed8:	10002226 	beq	r2,zero,15f64 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15edc:	e0bffb17 	ldw	r2,-20(fp)
   15ee0:	10800217 	ldw	r2,8(r2)
   15ee4:	108000cc 	andi	r2,r2,3
   15ee8:	10800060 	cmpeqi	r2,r2,1
   15eec:	1000181e 	bne	r2,zero,15f50 <read+0xc8>
        (fd->dev->read))
   15ef0:	e0bffb17 	ldw	r2,-20(fp)
   15ef4:	10800017 	ldw	r2,0(r2)
   15ef8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15efc:	10001426 	beq	r2,zero,15f50 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15f00:	e0bffb17 	ldw	r2,-20(fp)
   15f04:	10800017 	ldw	r2,0(r2)
   15f08:	10800517 	ldw	r2,20(r2)
   15f0c:	e0ffff17 	ldw	r3,-4(fp)
   15f10:	180d883a 	mov	r6,r3
   15f14:	e17ffe17 	ldw	r5,-8(fp)
   15f18:	e13ffb17 	ldw	r4,-20(fp)
   15f1c:	103ee83a 	callr	r2
   15f20:	e0bffc15 	stw	r2,-16(fp)
   15f24:	e0bffc17 	ldw	r2,-16(fp)
   15f28:	1000070e 	bge	r2,zero,15f48 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   15f2c:	0015e4c0 	call	15e4c <alt_get_errno>
   15f30:	1007883a 	mov	r3,r2
   15f34:	e0bffc17 	ldw	r2,-16(fp)
   15f38:	0085c83a 	sub	r2,zero,r2
   15f3c:	18800015 	stw	r2,0(r3)
          return -1;
   15f40:	00bfffc4 	movi	r2,-1
   15f44:	00000c06 	br	15f78 <read+0xf0>
        }
        return rval;
   15f48:	e0bffc17 	ldw	r2,-16(fp)
   15f4c:	00000a06 	br	15f78 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   15f50:	0015e4c0 	call	15e4c <alt_get_errno>
   15f54:	1007883a 	mov	r3,r2
   15f58:	00800344 	movi	r2,13
   15f5c:	18800015 	stw	r2,0(r3)
   15f60:	00000406 	br	15f74 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   15f64:	0015e4c0 	call	15e4c <alt_get_errno>
   15f68:	1007883a 	mov	r3,r2
   15f6c:	00801444 	movi	r2,81
   15f70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15f74:	00bfffc4 	movi	r2,-1
}
   15f78:	e037883a 	mov	sp,fp
   15f7c:	dfc00117 	ldw	ra,4(sp)
   15f80:	df000017 	ldw	fp,0(sp)
   15f84:	dec00204 	addi	sp,sp,8
   15f88:	f800283a 	ret

00015f8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15f8c:	defff904 	addi	sp,sp,-28
   15f90:	df000615 	stw	fp,24(sp)
   15f94:	df000604 	addi	fp,sp,24
   15f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f9c:	0005303a 	rdctl	r2,status
   15fa0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fa4:	e0fffe17 	ldw	r3,-8(fp)
   15fa8:	00bfff84 	movi	r2,-2
   15fac:	1884703a 	and	r2,r3,r2
   15fb0:	1001703a 	wrctl	status,r2
  
  return context;
   15fb4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15fb8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15fbc:	d0a00d17 	ldw	r2,-32716(gp)
   15fc0:	10c000c4 	addi	r3,r2,3
   15fc4:	00bfff04 	movi	r2,-4
   15fc8:	1884703a 	and	r2,r3,r2
   15fcc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15fd0:	d0e00d17 	ldw	r3,-32716(gp)
   15fd4:	e0bfff17 	ldw	r2,-4(fp)
   15fd8:	1887883a 	add	r3,r3,r2
   15fdc:	008000b4 	movhi	r2,2
   15fe0:	10800004 	addi	r2,r2,0
   15fe4:	10c0062e 	bgeu	r2,r3,16000 <sbrk+0x74>
   15fe8:	e0bffb17 	ldw	r2,-20(fp)
   15fec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ff0:	e0bffa17 	ldw	r2,-24(fp)
   15ff4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15ff8:	00bfffc4 	movi	r2,-1
   15ffc:	00000b06 	br	1602c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   16000:	d0a00d17 	ldw	r2,-32716(gp)
   16004:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   16008:	d0e00d17 	ldw	r3,-32716(gp)
   1600c:	e0bfff17 	ldw	r2,-4(fp)
   16010:	1885883a 	add	r2,r3,r2
   16014:	d0a00d15 	stw	r2,-32716(gp)
   16018:	e0bffb17 	ldw	r2,-20(fp)
   1601c:	e0bffc15 	stw	r2,-16(fp)
   16020:	e0bffc17 	ldw	r2,-16(fp)
   16024:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   16028:	e0bffd17 	ldw	r2,-12(fp)
} 
   1602c:	e037883a 	mov	sp,fp
   16030:	df000017 	ldw	fp,0(sp)
   16034:	dec00104 	addi	sp,sp,4
   16038:	f800283a 	ret

0001603c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1603c:	defffe04 	addi	sp,sp,-8
   16040:	dfc00115 	stw	ra,4(sp)
   16044:	df000015 	stw	fp,0(sp)
   16048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1604c:	d0a00617 	ldw	r2,-32744(gp)
   16050:	10000326 	beq	r2,zero,16060 <alt_get_errno+0x24>
   16054:	d0a00617 	ldw	r2,-32744(gp)
   16058:	103ee83a 	callr	r2
   1605c:	00000106 	br	16064 <alt_get_errno+0x28>
   16060:	d0a6be04 	addi	r2,gp,-25864
}
   16064:	e037883a 	mov	sp,fp
   16068:	dfc00117 	ldw	ra,4(sp)
   1606c:	df000017 	ldw	fp,0(sp)
   16070:	dec00204 	addi	sp,sp,8
   16074:	f800283a 	ret

00016078 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   16078:	defff904 	addi	sp,sp,-28
   1607c:	dfc00615 	stw	ra,24(sp)
   16080:	df000515 	stw	fp,20(sp)
   16084:	df000504 	addi	fp,sp,20
   16088:	e13ffd15 	stw	r4,-12(fp)
   1608c:	e17ffe15 	stw	r5,-8(fp)
   16090:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   16094:	e0bffd17 	ldw	r2,-12(fp)
   16098:	10000816 	blt	r2,zero,160bc <write+0x44>
   1609c:	01400304 	movi	r5,12
   160a0:	e13ffd17 	ldw	r4,-12(fp)
   160a4:	00113040 	call	11304 <__mulsi3>
   160a8:	1007883a 	mov	r3,r2
   160ac:	00800074 	movhi	r2,1
   160b0:	109d1804 	addi	r2,r2,29792
   160b4:	1885883a 	add	r2,r3,r2
   160b8:	00000106 	br	160c0 <write+0x48>
   160bc:	0005883a 	mov	r2,zero
   160c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   160c4:	e0bffb17 	ldw	r2,-20(fp)
   160c8:	10002126 	beq	r2,zero,16150 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   160cc:	e0bffb17 	ldw	r2,-20(fp)
   160d0:	10800217 	ldw	r2,8(r2)
   160d4:	108000cc 	andi	r2,r2,3
   160d8:	10001826 	beq	r2,zero,1613c <write+0xc4>
   160dc:	e0bffb17 	ldw	r2,-20(fp)
   160e0:	10800017 	ldw	r2,0(r2)
   160e4:	10800617 	ldw	r2,24(r2)
   160e8:	10001426 	beq	r2,zero,1613c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   160ec:	e0bffb17 	ldw	r2,-20(fp)
   160f0:	10800017 	ldw	r2,0(r2)
   160f4:	10800617 	ldw	r2,24(r2)
   160f8:	e0ffff17 	ldw	r3,-4(fp)
   160fc:	180d883a 	mov	r6,r3
   16100:	e17ffe17 	ldw	r5,-8(fp)
   16104:	e13ffb17 	ldw	r4,-20(fp)
   16108:	103ee83a 	callr	r2
   1610c:	e0bffc15 	stw	r2,-16(fp)
   16110:	e0bffc17 	ldw	r2,-16(fp)
   16114:	1000070e 	bge	r2,zero,16134 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   16118:	001603c0 	call	1603c <alt_get_errno>
   1611c:	1007883a 	mov	r3,r2
   16120:	e0bffc17 	ldw	r2,-16(fp)
   16124:	0085c83a 	sub	r2,zero,r2
   16128:	18800015 	stw	r2,0(r3)
        return -1;
   1612c:	00bfffc4 	movi	r2,-1
   16130:	00000c06 	br	16164 <write+0xec>
      }
      return rval;
   16134:	e0bffc17 	ldw	r2,-16(fp)
   16138:	00000a06 	br	16164 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1613c:	001603c0 	call	1603c <alt_get_errno>
   16140:	1007883a 	mov	r3,r2
   16144:	00800344 	movi	r2,13
   16148:	18800015 	stw	r2,0(r3)
   1614c:	00000406 	br	16160 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   16150:	001603c0 	call	1603c <alt_get_errno>
   16154:	1007883a 	mov	r3,r2
   16158:	00801444 	movi	r2,81
   1615c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   16160:	00bfffc4 	movi	r2,-1
}
   16164:	e037883a 	mov	sp,fp
   16168:	dfc00117 	ldw	ra,4(sp)
   1616c:	df000017 	ldw	fp,0(sp)
   16170:	dec00204 	addi	sp,sp,8
   16174:	f800283a 	ret
