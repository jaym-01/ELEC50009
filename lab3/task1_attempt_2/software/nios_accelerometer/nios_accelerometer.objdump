
nios_accelerometer.elf:     file format elf32-littlenios2
nios_accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010234

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00008428 memsz 0x00008428 flags r-x
    LOAD off    0x00009448 vaddr 0x00018448 paddr 0x00019ad4 align 2**12
         filesz 0x0000168c memsz 0x0000168c flags rw-
    LOAD off    0x0000b160 vaddr 0x0001b160 paddr 0x0001b160 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007fd8  00010234  00010234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000023c  0001820c  0001820c  0000920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000168c  00018448  00019ad4  00009448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0001b160  0001b160  0000b160  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001b28c  0001b28c  0000aad4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000aad4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000988  00000000  00000000  0000aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000cd8f  00000000  00000000  0000b480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004a21  00000000  00000000  0001820f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005aa1  00000000  00000000  0001cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012c8  00000000  00000000  000226d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c50  00000000  00000000  0002399c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a30c  00000000  00000000  000265ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000308f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ff0  00000000  00000000  00030908  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00033cc2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00033cc5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00033cc8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00033cc9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00033cca  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00033cce  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00033cd2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00033cd6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00033cdf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00033ce8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00033cf1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  00033d03  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  00033d37  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004264c  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010234 l    d  .text	00000000 .text
0001820c l    d  .rodata	00000000 .rodata
00018448 l    d  .rwdata	00000000 .rwdata
0001b160 l    d  .bss	00000000 .bss
0001b28c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_accelerometer_bsp//obj/HAL/src/crt0.o
0001026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000182f0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00018448 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00015f28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016090 l     F .text	00000034 alt_dev_reg
0001886c l     O .rwdata	00001060 jtag_uart
000198cc l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00016384 l     F .text	00000210 altera_avalon_jtag_uart_irq
00016594 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016bcc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00017198 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000172cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000172f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00017548 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000176a8 l     F .text	0000003c alt_get_errno
000176e4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001b184 g     O .bss	00000004 alt_instruction_exception_handler
00016014 g     F .text	0000007c alt_main
00010270 g     F .text	00000038 led_write
0001b18c g     O .bss	00000100 alt_irq
00012280 g     F .text	00000014 fabs
00019ad4 g       *ABS*	00000000 __flash_rwdata_start
0001440c g     F .text	00000088 .hidden __eqdf2
000106b4 g     F .text	000000a0 shift
00012ffc g     F .text	00000070 .hidden __fixsfsi
00010338 g     F .text	000000d0 sys_timer_isr
00014494 g     F .text	000000dc .hidden __gtdf2
00017b54 g     F .text	00000024 altera_nios2_gen2_irq_init
00015c50 g     F .text	00000010 __errno
00010000 g     F .entry	0000000c __reset
00016e08 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001b188 g     O .bss	00000004 errno
0001b174 g     O .bss	00000004 alt_argv
00021aa0 g       *ABS*	00000000 _gp
00019920 g     O .rwdata	00000180 alt_fd_list
00017498 g     F .text	00000090 alt_find_dev
00015c60 g     F .text	00000148 memcpy
0001584c g     F .text	000000dc .hidden __floatsidf
0001762c g     F .text	0000007c alt_io_redirect
00014570 g     F .text	000000f4 .hidden __ltdf2
0001820c g       *ABS*	00000000 __DTOR_END__
00017d44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000122b0 g     F .text	00000074 __fpclassifyd
0001678c g     F .text	0000021c altera_avalon_jtag_uart_read
00015b94 g     F .text	00000064 .hidden __udivsi3
00019ac4 g     O .rwdata	00000004 alt_max_fd
00015da8 g     F .text	00000180 alt_irq_register
00015928 g     F .text	00000110 .hidden __extendsfdf2
00013190 g     F .text	000008ac .hidden __adddf3
00019aa4 g     O .rwdata	00000004 __fdlib_version
00019aa8 g     O .rwdata	00000004 _global_impure_ptr
0001b28c g       *ABS*	00000000 __bss_end
00017a4c g     F .text	00000108 alt_tick
00019aa0 g     O .rwdata	00000004 precision
000179b0 g     F .text	0000009c alt_alarm_stop
0001b16c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d8 alt_irq_handler
000198f8 g     O .rwdata	00000028 alt_dev_null
00012338 g     F .text	000001ec rint
000172ac g     F .text	00000020 alt_dcache_flush_all
000157cc g     F .text	00000080 .hidden __fixdfsi
00019ad4 g       *ABS*	00000000 __ram_rwdata_end
00010408 g     F .text	00000090 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00019abc g     O .rwdata	00000008 alt_dev_list
00018448 g       *ABS*	00000000 __ram_rodata_end
00014570 g     F .text	000000f4 .hidden __ledf2
0001b164 g     O .bss	00000001 led
00015bf8 g     F .text	00000058 .hidden __umodsi3
0001b28c g       *ABS*	00000000 end
000162d0 g     F .text	000000b4 altera_avalon_jtag_uart_init
000101d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001820c g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00016c48 g     F .text	00000074 alt_avalon_timer_sc_init
00015a38 g     F .text	00000064 .hidden __clzsi2
000169a8 g     F .text	00000224 altera_avalon_jtag_uart_write
00018058 g     F .text	00000180 __call_exitprocs
00010234 g     F .text	0000003c _start
0001b168 g     O .bss	00000004 level
0001b17c g     O .bss	00000004 _alt_tick_rate
0001b180 g     O .bss	00000004 _alt_nticks
000160fc g     F .text	00000070 alt_sys_init
00016cf8 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
0001306c g     F .text	00000124 .hidden __floatsisf
00017f40 g     F .text	00000118 __register_exitproc
00010498 g     F .text	000000ec filter
00010f54 g     F .text	000010a4 __ieee754_pow
00016634 g     F .text	00000068 altera_avalon_jtag_uart_close
00010a90 g     F .text	000004c4 pow
000126dc g     F .text	00000028 .hidden __mulsi3
00018448 g       *ABS*	00000000 __ram_rwdata_start
0001820c g       *ABS*	00000000 __ram_rodata_start
0001616c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00017c80 g     F .text	000000c4 alt_get_fd
00016ed4 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
00017e2c g     F .text	0000007c memcmp
0001622c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001b28c g       *ABS*	00000000 __alt_stack_base
0001627c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00013a3c g     F .text	000009d0 .hidden __divdf3
00014664 g     F .text	0000086c .hidden __muldf3
00017b78 g     F .text	00000108 alt_find_file
00017334 g     F .text	000000a4 alt_dev_llist_insert
0001b160 g       *ABS*	00000000 __bss_start
00010754 g     F .text	0000033c main
0001b178 g     O .bss	00000004 alt_envp
000161cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012324 g     F .text	00000008 matherr
00019ac8 g     O .rwdata	00000004 alt_errno
00015a9c g     F .text	00000084 .hidden __divsi3
0001820c g       *ABS*	00000000 __CTOR_END__
00012bcc g     F .text	00000430 .hidden __mulsf3
00012294 g     F .text	0000001c finite
0001820c g       *ABS*	00000000 __flash_rodata_start
0001820c g       *ABS*	00000000 __DTOR_LIST__
000126c0 g     F .text	0000001c copysign
0001440c g     F .text	00000088 .hidden __nedf2
000160c4 g     F .text	00000038 alt_irq_init
0001792c g     F .text	00000084 alt_release_fd
00018300 g     O .rodata	00000100 .hidden __clz_tab
00017de0 g     F .text	00000014 atexit
00019aac g     O .rwdata	00000004 _impure_ptr
0001b170 g     O .bss	00000004 alt_argc
00012524 g     F .text	0000019c scalbn
00017438 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010584 g     F .text	00000130 filter_fixed
0001b160 g     O .bss	00000001 pwm
00019ab4 g     O .rwdata	00000008 alt_fs_list
0001232c g     F .text	0000000c nan
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016cbc g     F .text	0000003c alt_up_accelerometer_spi_open_dev
00011ff8 g     F .text	00000288 __ieee754_sqrt
00019ad4 g       *ABS*	00000000 _edata
0001b28c g       *ABS*	00000000 _end
00010234 g       *ABS*	00000000 __ram_exceptions_end
0001669c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00017df4 g     F .text	00000038 exit
00015b20 g     F .text	00000074 .hidden __modsi3
00016fa0 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000102a8 g     F .text	00000090 convert_read
000181d8 g     F .text	00000034 _exit
0001706c g     F .text	0000012c alt_alarm_start
00016d3c g     F .text	00000068 alt_up_accelerometer_spi_read
00016da4 g     F .text	00000064 alt_up_accelerometer_spi_write
00017ea8 g     F .text	00000098 strlen
000177d0 g     F .text	0000015c open
00014494 g     F .text	000000dc .hidden __gedf2
00017528 g     F .text	00000020 alt_icache_flush_all
00019ab0 g     O .rwdata	00000004 alt_priority_mask
00014ed0 g     F .text	000008fc .hidden __subdf3
00019acc g     O .rwdata	00000008 alt_alarm_list
000173d8 g     F .text	00000060 _do_ctors
000171d4 g     F .text	000000d8 close
00012704 g     F .text	000004c8 .hidden __addsf3
00015f90 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408d14 	ori	at,at,564
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d40 	call	101d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001526 	beq	r2,zero,10190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10ac6304 	addi	r2,r2,-20084
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10ac6304 	addi	r2,r2,-20084
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	e17ffd17 	ldw	r5,-12(fp)
   10174:	1009883a 	mov	r4,r2
   10178:	183ee83a 	callr	r3
#endif
        break;
   1017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10180:	0005313a 	rdctl	r2,ipending
   10184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fe006 	br	1012c <_gp+0xfffee68c>

    active = alt_irq_pending ();
   101ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	103fda1e 	bne	r2,zero,10120 <_gp+0xfffee680>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b8:	0001883a 	nop
}
   101bc:	0001883a 	nop
   101c0:	e037883a 	mov	sp,fp
   101c4:	dfc00117 	ldw	ra,4(sp)
   101c8:	df000017 	ldw	fp,0(sp)
   101cc:	dec00204 	addi	sp,sp,8
   101d0:	f800283a 	ret

000101d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d4:	defffb04 	addi	sp,sp,-20
   101d8:	dfc00415 	stw	ra,16(sp)
   101dc:	df000315 	stw	fp,12(sp)
   101e0:	df000304 	addi	fp,sp,12
   101e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e8:	00bfffc4 	movi	r2,-1
   101ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f4:	d0a5b917 	ldw	r2,-26908(gp)
   101f8:	10000726 	beq	r2,zero,10218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101fc:	d0a5b917 	ldw	r2,-26908(gp)
   10200:	e0fffd17 	ldw	r3,-12(fp)
   10204:	e1bffe17 	ldw	r6,-8(fp)
   10208:	e17fff17 	ldw	r5,-4(fp)
   1020c:	1809883a 	mov	r4,r3
   10210:	103ee83a 	callr	r2
   10214:	00000206 	br	10220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1021c:	0005883a 	mov	r2,zero
}
   10220:	e037883a 	mov	sp,fp
   10224:	dfc00117 	ldw	ra,4(sp)
   10228:	df000017 	ldw	fp,0(sp)
   1022c:	dec00204 	addi	sp,sp,8
   10230:	f800283a 	ret

Disassembly of section .text:

00010234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10234:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   1023c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   10240:	d686a814 	ori	gp,gp,6816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10248:	10ac5814 	ori	r2,r2,45408

    movhi r3, %hi(__bss_end)
   1024c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10250:	18eca314 	ori	r3,r3,45708

    beq r2, r3, 1f
   10254:	10c00326 	beq	r2,r3,10264 <_start+0x30>

0:
    stw zero, (r2)
   10258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10260:	10fffd36 	bltu	r2,r3,10258 <_gp+0xfffee7b8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10264:	0015f900 	call	15f90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10268:	00160140 	call	16014 <alt_main>

0001026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1026c:	003fff06 	br	1026c <_gp+0xfffee7cc>

00010270 <led_write>:
alt_u8 led;
int level;

const int precision = 21;

void led_write(alt_u8 led_pattern) {
   10270:	defffe04 	addi	sp,sp,-8
   10274:	df000115 	stw	fp,4(sp)
   10278:	df000104 	addi	fp,sp,4
   1027c:	2005883a 	mov	r2,r4
   10280:	e0bfff05 	stb	r2,-4(fp)
    IOWR(LED_BASE, 0, led_pattern);
   10284:	e0ffff03 	ldbu	r3,-4(fp)
   10288:	008000b4 	movhi	r2,2
   1028c:	10840804 	addi	r2,r2,4128
   10290:	10c00035 	stwio	r3,0(r2)
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
   102a4:	f800283a 	ret

000102a8 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
   102a8:	defffb04 	addi	sp,sp,-20
   102ac:	df000415 	stw	fp,16(sp)
   102b0:	df000404 	addi	fp,sp,16
   102b4:	e13ffd15 	stw	r4,-12(fp)
   102b8:	e17ffe15 	stw	r5,-8(fp)
   102bc:	e1bfff15 	stw	r6,-4(fp)
//    alt_printf("raw data: %x\n", acc_read);
    acc_read += OFFSET;
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	10bff804 	addi	r2,r2,-32
   102c8:	e0bffd15 	stw	r2,-12(fp)
    // alt_printf("offset data: %x\n", acc_read);
    // shifts it to the right by 6 bits
    // & with 0b000000111
    // gets the MS 3 bits of the offset value
    alt_u8 val = (acc_read >> 6) & 0x07;
   102cc:	e0bffd17 	ldw	r2,-12(fp)
   102d0:	1005d1ba 	srai	r2,r2,6
   102d4:	108001cc 	andi	r2,r2,7
   102d8:	e0bffc05 	stb	r2,-16(fp)

    // shifts 0b1000 right by either 0-7 places
    // shifts 0b1000 to the right 1-8 places 
    // find the union of the 2 values
    * led = (8 >> val) | (8 << (8 - val));
   102dc:	e0bffc03 	ldbu	r2,-16(fp)
   102e0:	00c00204 	movi	r3,8
   102e4:	1885d83a 	sra	r2,r3,r2
   102e8:	1009883a 	mov	r4,r2
   102ec:	e0bffc03 	ldbu	r2,-16(fp)
   102f0:	00c00204 	movi	r3,8
   102f4:	1885c83a 	sub	r2,r3,r2
   102f8:	00c00204 	movi	r3,8
   102fc:	1884983a 	sll	r2,r3,r2
   10300:	2084b03a 	or	r2,r4,r2
   10304:	1007883a 	mov	r3,r2
   10308:	e0bfff17 	ldw	r2,-4(fp)
   1030c:	10c00005 	stb	r3,0(r2)

    // 0x1f = 0b00011111
    // extracts between bit 2 and bit 6 from the offset output of the accelerometer
    // equivilent to &ing with:
    // 0b000111110
    * level = (acc_read >> 1) & 0x1f;
   10310:	e0bffd17 	ldw	r2,-12(fp)
   10314:	1005d07a 	srai	r2,r2,1
   10318:	10c007cc 	andi	r3,r2,31
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	10c00015 	stw	r3,0(r2)
}
   10324:	0001883a 	nop
   10328:	e037883a 	mov	sp,fp
   1032c:	df000017 	ldw	fp,0(sp)
   10330:	dec00104 	addi	sp,sp,4
   10334:	f800283a 	ret

00010338 <sys_timer_isr>:

void sys_timer_isr() {
   10338:	defffe04 	addi	sp,sp,-8
   1033c:	dfc00115 	stw	ra,4(sp)
   10340:	df000015 	stw	fp,0(sp)
   10344:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10348:	0007883a 	mov	r3,zero
   1034c:	008000b4 	movhi	r2,2
   10350:	10840004 	addi	r2,r2,4096
   10354:	10c00035 	stwio	r3,0(r2)

    if (pwm < abs(level)) {
   10358:	d0a5b003 	ldbu	r2,-26944(gp)
   1035c:	10c03fcc 	andi	r3,r2,255
   10360:	18c0201c 	xori	r3,r3,128
   10364:	18ffe004 	addi	r3,r3,-128
   10368:	d0a5b217 	ldw	r2,-26936(gp)
   1036c:	1000010e 	bge	r2,zero,10374 <sys_timer_isr+0x3c>
   10370:	0085c83a 	sub	r2,zero,r2
   10374:	18800f0e 	bge	r3,r2,103b4 <sys_timer_isr+0x7c>

        if (level < 0) {
   10378:	d0a5b217 	ldw	r2,-26936(gp)
   1037c:	1000060e 	bge	r2,zero,10398 <sys_timer_isr+0x60>
            led_write(led << 1);
   10380:	d0a5b103 	ldbu	r2,-26940(gp)
   10384:	1085883a 	add	r2,r2,r2
   10388:	10803fcc 	andi	r2,r2,255
   1038c:	1009883a 	mov	r4,r2
   10390:	00102700 	call	10270 <led_write>
   10394:	00000b06 	br	103c4 <sys_timer_isr+0x8c>
        } else {
            led_write(led >> 1);
   10398:	d0a5b103 	ldbu	r2,-26940(gp)
   1039c:	10803fcc 	andi	r2,r2,255
   103a0:	1004d07a 	srli	r2,r2,1
   103a4:	10803fcc 	andi	r2,r2,255
   103a8:	1009883a 	mov	r4,r2
   103ac:	00102700 	call	10270 <led_write>
   103b0:	00000406 	br	103c4 <sys_timer_isr+0x8c>
        }

    } else {
        led_write(led);
   103b4:	d0a5b103 	ldbu	r2,-26940(gp)
   103b8:	10803fcc 	andi	r2,r2,255
   103bc:	1009883a 	mov	r4,r2
   103c0:	00102700 	call	10270 <led_write>
    }

    if (pwm > PWM_PERIOD) {
   103c4:	d0a5b003 	ldbu	r2,-26944(gp)
   103c8:	10803fcc 	andi	r2,r2,255
   103cc:	1080201c 	xori	r2,r2,128
   103d0:	10bfe004 	addi	r2,r2,-128
   103d4:	10800450 	cmplti	r2,r2,17
   103d8:	1000021e 	bne	r2,zero,103e4 <sys_timer_isr+0xac>
        pwm = 0;
   103dc:	d025b005 	stb	zero,-26944(gp)
    } else {
        pwm++;
    }

}
   103e0:	00000306 	br	103f0 <sys_timer_isr+0xb8>
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
   103e4:	d0a5b003 	ldbu	r2,-26944(gp)
   103e8:	10800044 	addi	r2,r2,1
   103ec:	d0a5b005 	stb	r2,-26944(gp)
    }

}
   103f0:	0001883a 	nop
   103f4:	e037883a 	mov	sp,fp
   103f8:	dfc00117 	ldw	ra,4(sp)
   103fc:	df000017 	ldw	fp,0(sp)
   10400:	dec00204 	addi	sp,sp,8
   10404:	f800283a 	ret

00010408 <timer_init>:

void timer_init(void * isr) {
   10408:	defffd04 	addi	sp,sp,-12
   1040c:	dfc00215 	stw	ra,8(sp)
   10410:	df000115 	stw	fp,4(sp)
   10414:	df000104 	addi	fp,sp,4
   10418:	e13fff15 	stw	r4,-4(fp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1041c:	00c000c4 	movi	r3,3
   10420:	008000b4 	movhi	r2,2
   10424:	10840104 	addi	r2,r2,4100
   10428:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1042c:	0007883a 	mov	r3,zero
   10430:	008000b4 	movhi	r2,2
   10434:	10840004 	addi	r2,r2,4096
   10438:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   1043c:	00c24004 	movi	r3,2304
   10440:	008000b4 	movhi	r2,2
   10444:	10840204 	addi	r2,r2,4104
   10448:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   1044c:	0007883a 	mov	r3,zero
   10450:	008000b4 	movhi	r2,2
   10454:	10840304 	addi	r2,r2,4108
   10458:	10c00035 	stwio	r3,0(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   1045c:	e0bfff17 	ldw	r2,-4(fp)
   10460:	100d883a 	mov	r6,r2
   10464:	000b883a 	mov	r5,zero
   10468:	01000044 	movi	r4,1
   1046c:	0015da80 	call	15da8 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10470:	00c001c4 	movi	r3,7
   10474:	008000b4 	movhi	r2,2
   10478:	10840104 	addi	r2,r2,4100
   1047c:	10c00035 	stwio	r3,0(r2)

}
   10480:	0001883a 	nop
   10484:	e037883a 	mov	sp,fp
   10488:	dfc00117 	ldw	ra,4(sp)
   1048c:	df000017 	ldw	fp,0(sp)
   10490:	dec00204 	addi	sp,sp,8
   10494:	f800283a 	ret

00010498 <filter>:

alt_32 filter(float* taps, alt_32* prev_vals, int n){
   10498:	defff704 	addi	sp,sp,-36
   1049c:	dfc00815 	stw	ra,32(sp)
   104a0:	df000715 	stw	fp,28(sp)
   104a4:	dc400615 	stw	r17,24(sp)
   104a8:	dc000515 	stw	r16,20(sp)
   104ac:	df000704 	addi	fp,sp,28
   104b0:	e13ffb15 	stw	r4,-20(fp)
   104b4:	e17ffc15 	stw	r5,-16(fp)
   104b8:	e1bffd15 	stw	r6,-12(fp)
    alt_32 sum = 0;
   104bc:	e03ff915 	stw	zero,-28(fp)


    for(int i = 0; i < n; i++){
   104c0:	e03ffa15 	stw	zero,-24(fp)
   104c4:	00002406 	br	10558 <filter+0xc0>
        sum += taps[i] * prev_vals[i];
   104c8:	e13ff917 	ldw	r4,-28(fp)
   104cc:	001306c0 	call	1306c <__floatsisf>
   104d0:	1023883a 	mov	r17,r2
   104d4:	e0bffa17 	ldw	r2,-24(fp)
   104d8:	1085883a 	add	r2,r2,r2
   104dc:	1085883a 	add	r2,r2,r2
   104e0:	1007883a 	mov	r3,r2
   104e4:	e0bffb17 	ldw	r2,-20(fp)
   104e8:	10c5883a 	add	r2,r2,r3
   104ec:	14000017 	ldw	r16,0(r2)
   104f0:	e0bffa17 	ldw	r2,-24(fp)
   104f4:	1085883a 	add	r2,r2,r2
   104f8:	1085883a 	add	r2,r2,r2
   104fc:	1007883a 	mov	r3,r2
   10500:	e0bffc17 	ldw	r2,-16(fp)
   10504:	10c5883a 	add	r2,r2,r3
   10508:	10800017 	ldw	r2,0(r2)
   1050c:	1009883a 	mov	r4,r2
   10510:	001306c0 	call	1306c <__floatsisf>
   10514:	1007883a 	mov	r3,r2
   10518:	180b883a 	mov	r5,r3
   1051c:	8009883a 	mov	r4,r16
   10520:	0012bcc0 	call	12bcc <__mulsf3>
   10524:	1007883a 	mov	r3,r2
   10528:	1805883a 	mov	r2,r3
   1052c:	100b883a 	mov	r5,r2
   10530:	8809883a 	mov	r4,r17
   10534:	00127040 	call	12704 <__addsf3>
   10538:	1007883a 	mov	r3,r2
   1053c:	1805883a 	mov	r2,r3
   10540:	1009883a 	mov	r4,r2
   10544:	0012ffc0 	call	12ffc <__fixsfsi>
   10548:	e0bff915 	stw	r2,-28(fp)

alt_32 filter(float* taps, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   1054c:	e0bffa17 	ldw	r2,-24(fp)
   10550:	10800044 	addi	r2,r2,1
   10554:	e0bffa15 	stw	r2,-24(fp)
   10558:	e0fffa17 	ldw	r3,-24(fp)
   1055c:	e0bffd17 	ldw	r2,-12(fp)
   10560:	18bfd916 	blt	r3,r2,104c8 <_gp+0xfffeea28>
        sum += taps[i] * prev_vals[i];
    }

    return sum;
   10564:	e0bff917 	ldw	r2,-28(fp)
}
   10568:	e6fffe04 	addi	sp,fp,-8
   1056c:	dfc00317 	ldw	ra,12(sp)
   10570:	df000217 	ldw	fp,8(sp)
   10574:	dc400117 	ldw	r17,4(sp)
   10578:	dc000017 	ldw	r16,0(sp)
   1057c:	dec00404 	addi	sp,sp,16
   10580:	f800283a 	ret

00010584 <filter_fixed>:

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
   10584:	defff704 	addi	sp,sp,-36
   10588:	dfc00815 	stw	ra,32(sp)
   1058c:	df000715 	stw	fp,28(sp)
   10590:	dc400615 	stw	r17,24(sp)
   10594:	dc000515 	stw	r16,20(sp)
   10598:	df000704 	addi	fp,sp,28
   1059c:	e13ffb15 	stw	r4,-20(fp)
   105a0:	e17ffc15 	stw	r5,-16(fp)
   105a4:	e1bffd15 	stw	r6,-12(fp)
    alt_32 sum = 0;
   105a8:	e03ff915 	stw	zero,-28(fp)


    for(int i = 0; i < n; i++){
   105ac:	e03ffa15 	stw	zero,-24(fp)
   105b0:	00001806 	br	10614 <filter_fixed+0x90>
        sum += taps_fixed[i] * prev_vals[i];
   105b4:	e0bffa17 	ldw	r2,-24(fp)
   105b8:	1085883a 	add	r2,r2,r2
   105bc:	1085883a 	add	r2,r2,r2
   105c0:	1007883a 	mov	r3,r2
   105c4:	e0bffb17 	ldw	r2,-20(fp)
   105c8:	10c5883a 	add	r2,r2,r3
   105cc:	10c00017 	ldw	r3,0(r2)
   105d0:	e0bffa17 	ldw	r2,-24(fp)
   105d4:	1085883a 	add	r2,r2,r2
   105d8:	1085883a 	add	r2,r2,r2
   105dc:	1009883a 	mov	r4,r2
   105e0:	e0bffc17 	ldw	r2,-16(fp)
   105e4:	1105883a 	add	r2,r2,r4
   105e8:	10800017 	ldw	r2,0(r2)
   105ec:	100b883a 	mov	r5,r2
   105f0:	1809883a 	mov	r4,r3
   105f4:	00126dc0 	call	126dc <__mulsi3>
   105f8:	1007883a 	mov	r3,r2
   105fc:	e0bff917 	ldw	r2,-28(fp)
   10600:	10c5883a 	add	r2,r2,r3
   10604:	e0bff915 	stw	r2,-28(fp)

alt_32 filter_fixed(int* taps_fixed, alt_32* prev_vals, int n){
    alt_32 sum = 0;


    for(int i = 0; i < n; i++){
   10608:	e0bffa17 	ldw	r2,-24(fp)
   1060c:	10800044 	addi	r2,r2,1
   10610:	e0bffa15 	stw	r2,-24(fp)
   10614:	e0fffa17 	ldw	r3,-24(fp)
   10618:	e0bffd17 	ldw	r2,-12(fp)
   1061c:	18bfe516 	blt	r3,r2,105b4 <_gp+0xfffeeb14>
        sum += taps_fixed[i] * prev_vals[i];
    }

    sum /= pow(2, precision);
   10620:	00800544 	movi	r2,21
   10624:	1009883a 	mov	r4,r2
   10628:	001584c0 	call	1584c <__floatsidf>
   1062c:	1009883a 	mov	r4,r2
   10630:	180b883a 	mov	r5,r3
   10634:	200d883a 	mov	r6,r4
   10638:	280f883a 	mov	r7,r5
   1063c:	0009883a 	mov	r4,zero
   10640:	01500034 	movhi	r5,16384
   10644:	0010a900 	call	10a90 <pow>
   10648:	1021883a 	mov	r16,r2
   1064c:	1823883a 	mov	r17,r3
   10650:	e13ff917 	ldw	r4,-28(fp)
   10654:	001584c0 	call	1584c <__floatsidf>
   10658:	1011883a 	mov	r8,r2
   1065c:	1813883a 	mov	r9,r3
   10660:	800d883a 	mov	r6,r16
   10664:	880f883a 	mov	r7,r17
   10668:	4009883a 	mov	r4,r8
   1066c:	480b883a 	mov	r5,r9
   10670:	0013a3c0 	call	13a3c <__divdf3>
   10674:	1009883a 	mov	r4,r2
   10678:	180b883a 	mov	r5,r3
   1067c:	2005883a 	mov	r2,r4
   10680:	2807883a 	mov	r3,r5
   10684:	1009883a 	mov	r4,r2
   10688:	180b883a 	mov	r5,r3
   1068c:	00157cc0 	call	157cc <__fixdfsi>
   10690:	e0bff915 	stw	r2,-28(fp)

    return sum;
   10694:	e0bff917 	ldw	r2,-28(fp)
}
   10698:	e6fffe04 	addi	sp,fp,-8
   1069c:	dfc00317 	ldw	ra,12(sp)
   106a0:	df000217 	ldw	fp,8(sp)
   106a4:	dc400117 	ldw	r17,4(sp)
   106a8:	dc000017 	ldw	r16,0(sp)
   106ac:	dec00404 	addi	sp,sp,16
   106b0:	f800283a 	ret

000106b4 <shift>:

void shift(alt_32* prev_vals, alt_32 x_read, int n){
   106b4:	defffb04 	addi	sp,sp,-20
   106b8:	df000415 	stw	fp,16(sp)
   106bc:	df000404 	addi	fp,sp,16
   106c0:	e13ffd15 	stw	r4,-12(fp)
   106c4:	e17ffe15 	stw	r5,-8(fp)
   106c8:	e1bfff15 	stw	r6,-4(fp)
    for(int i = n - 1; i > 0; --i){
   106cc:	e0bfff17 	ldw	r2,-4(fp)
   106d0:	10bfffc4 	addi	r2,r2,-1
   106d4:	e0bffc15 	stw	r2,-16(fp)
   106d8:	00001406 	br	1072c <shift+0x78>
        prev_vals[i] = prev_vals[i - 1];
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	1085883a 	add	r2,r2,r2
   106e4:	1085883a 	add	r2,r2,r2
   106e8:	1007883a 	mov	r3,r2
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	10c7883a 	add	r3,r2,r3
   106f4:	e13ffc17 	ldw	r4,-16(fp)
   106f8:	00900034 	movhi	r2,16384
   106fc:	10bfffc4 	addi	r2,r2,-1
   10700:	2085883a 	add	r2,r4,r2
   10704:	1085883a 	add	r2,r2,r2
   10708:	1085883a 	add	r2,r2,r2
   1070c:	1009883a 	mov	r4,r2
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	1105883a 	add	r2,r2,r4
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	18800015 	stw	r2,0(r3)

    return sum;
}

void shift(alt_32* prev_vals, alt_32 x_read, int n){
    for(int i = n - 1; i > 0; --i){
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	10bfffc4 	addi	r2,r2,-1
   10728:	e0bffc15 	stw	r2,-16(fp)
   1072c:	e0bffc17 	ldw	r2,-16(fp)
   10730:	00bfea16 	blt	zero,r2,106dc <_gp+0xfffeec3c>
        prev_vals[i] = prev_vals[i - 1];
    }

    prev_vals[0] = x_read;
   10734:	e0bffd17 	ldw	r2,-12(fp)
   10738:	e0fffe17 	ldw	r3,-8(fp)
   1073c:	10c00015 	stw	r3,0(r2)

    return;
   10740:	0001883a 	nop
}
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <main>:

int main() {
   10754:	deffb104 	addi	sp,sp,-316
   10758:	dfc04e15 	stw	ra,312(sp)
   1075c:	df004d15 	stw	fp,308(sp)
   10760:	ddc04c15 	stw	r23,304(sp)
   10764:	dd804b15 	stw	r22,300(sp)
   10768:	dd404a15 	stw	r21,296(sp)
   1076c:	dd004915 	stw	r20,292(sp)
   10770:	dcc04815 	stw	r19,288(sp)
   10774:	dc804715 	stw	r18,284(sp)
   10778:	dc404615 	stw	r17,280(sp)
   1077c:	dc004515 	stw	r16,276(sp)
   10780:	df004d04 	addi	fp,sp,308
   10784:	d805883a 	mov	r2,sp
   10788:	e0bfef15 	stw	r2,-68(fp)

//	clock_t start, end;
	int n = 1, sum = 0;
   1078c:	00800044 	movi	r2,1
   10790:	e0bfb415 	stw	r2,-304(fp)
   10794:	e03fb515 	stw	zero,-300(fp)

//	struct tms test1, test2;

    alt_32 x_read, filtered_x;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10798:	010000b4 	movhi	r4,2
   1079c:	21208304 	addi	r4,r4,-32244
   107a0:	0016cbc0 	call	16cbc <alt_up_accelerometer_spi_open_dev>
   107a4:	e0bfb615 	stw	r2,-296(fp)
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   107a8:	e0bfb617 	ldw	r2,-296(fp)
   107ac:	1000031e 	bne	r2,zero,107bc <main+0x68>
        return 1;
   107b0:	00800044 	movi	r2,1
   107b4:	e6ffef17 	ldw	sp,-68(fp)
   107b8:	0000a806 	br	10a5c <main+0x308>
    }

    const int array_size = 49;
   107bc:	00800c44 	movi	r2,49
   107c0:	e0bfb715 	stw	r2,-292(fp)

    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
   107c4:	008000b4 	movhi	r2,2
   107c8:	10a08904 	addi	r2,r2,-32220
   107cc:	e0ffbe04 	addi	r3,fp,-264
   107d0:	1009883a 	mov	r4,r2
   107d4:	00803104 	movi	r2,196
   107d8:	100d883a 	mov	r6,r2
   107dc:	200b883a 	mov	r5,r4
   107e0:	1809883a 	mov	r4,r3
   107e4:	0015c600 	call	15c60 <memcpy>
    alt_32 prev_vals[array_size];
   107e8:	e0bfb717 	ldw	r2,-292(fp)
   107ec:	10bfffc4 	addi	r2,r2,-1
   107f0:	e0bfb815 	stw	r2,-288(fp)
   107f4:	e0bfb717 	ldw	r2,-292(fp)
   107f8:	e0bff015 	stw	r2,-64(fp)
   107fc:	e03ff115 	stw	zero,-60(fp)
   10800:	e0fff017 	ldw	r3,-64(fp)
   10804:	1804d6fa 	srli	r2,r3,27
   10808:	e0fff117 	ldw	r3,-60(fp)
   1080c:	182e917a 	slli	r23,r3,5
   10810:	15eeb03a 	or	r23,r2,r23
   10814:	e0bff017 	ldw	r2,-64(fp)
   10818:	102c917a 	slli	r22,r2,5
   1081c:	e0bfb717 	ldw	r2,-292(fp)
   10820:	e0bff215 	stw	r2,-56(fp)
   10824:	e03ff315 	stw	zero,-52(fp)
   10828:	e0fff217 	ldw	r3,-56(fp)
   1082c:	1804d6fa 	srli	r2,r3,27
   10830:	e0fff317 	ldw	r3,-52(fp)
   10834:	182a917a 	slli	r21,r3,5
   10838:	156ab03a 	or	r21,r2,r21
   1083c:	e0bff217 	ldw	r2,-56(fp)
   10840:	1028917a 	slli	r20,r2,5
   10844:	e0bfb717 	ldw	r2,-292(fp)
   10848:	1085883a 	add	r2,r2,r2
   1084c:	1085883a 	add	r2,r2,r2
   10850:	108000c4 	addi	r2,r2,3
   10854:	108000c4 	addi	r2,r2,3
   10858:	1004d0ba 	srli	r2,r2,2
   1085c:	1085883a 	add	r2,r2,r2
   10860:	1085883a 	add	r2,r2,r2
   10864:	d8b7c83a 	sub	sp,sp,r2
   10868:	d805883a 	mov	r2,sp
   1086c:	108000c4 	addi	r2,r2,3
   10870:	1004d0ba 	srli	r2,r2,2
   10874:	1085883a 	add	r2,r2,r2
   10878:	1085883a 	add	r2,r2,r2
   1087c:	e0bfb915 	stw	r2,-284(fp)

    int fixed_taps[array_size];
   10880:	e0bfb717 	ldw	r2,-292(fp)
   10884:	10bfffc4 	addi	r2,r2,-1
   10888:	e0bfba15 	stw	r2,-280(fp)
   1088c:	e0bfb717 	ldw	r2,-292(fp)
   10890:	e0bff415 	stw	r2,-48(fp)
   10894:	e03ff515 	stw	zero,-44(fp)
   10898:	e0fff417 	ldw	r3,-48(fp)
   1089c:	1804d6fa 	srli	r2,r3,27
   108a0:	e0fff517 	ldw	r3,-44(fp)
   108a4:	1826917a 	slli	r19,r3,5
   108a8:	14e6b03a 	or	r19,r2,r19
   108ac:	e0bff417 	ldw	r2,-48(fp)
   108b0:	1024917a 	slli	r18,r2,5
   108b4:	e0bfb717 	ldw	r2,-292(fp)
   108b8:	e0bff615 	stw	r2,-40(fp)
   108bc:	e03ff715 	stw	zero,-36(fp)
   108c0:	e0fff617 	ldw	r3,-40(fp)
   108c4:	1804d6fa 	srli	r2,r3,27
   108c8:	e0fff717 	ldw	r3,-36(fp)
   108cc:	1822917a 	slli	r17,r3,5
   108d0:	1462b03a 	or	r17,r2,r17
   108d4:	e0bff617 	ldw	r2,-40(fp)
   108d8:	1020917a 	slli	r16,r2,5
   108dc:	e0bfb717 	ldw	r2,-292(fp)
   108e0:	1085883a 	add	r2,r2,r2
   108e4:	1085883a 	add	r2,r2,r2
   108e8:	108000c4 	addi	r2,r2,3
   108ec:	108000c4 	addi	r2,r2,3
   108f0:	1004d0ba 	srli	r2,r2,2
   108f4:	1085883a 	add	r2,r2,r2
   108f8:	1085883a 	add	r2,r2,r2
   108fc:	d8b7c83a 	sub	sp,sp,r2
   10900:	d805883a 	mov	r2,sp
   10904:	108000c4 	addi	r2,r2,3
   10908:	1004d0ba 	srli	r2,r2,2
   1090c:	1085883a 	add	r2,r2,r2
   10910:	1085883a 	add	r2,r2,r2
   10914:	e0bfbb15 	stw	r2,-276(fp)

    for(int i = 0; i < array_size; i++) {
   10918:	e03fb315 	stw	zero,-308(fp)
   1091c:	00003306 	br	109ec <main+0x298>
        prev_vals[i] = 0;
   10920:	e0ffb917 	ldw	r3,-284(fp)
   10924:	e0bfb317 	ldw	r2,-308(fp)
   10928:	1085883a 	add	r2,r2,r2
   1092c:	1085883a 	add	r2,r2,r2
   10930:	1885883a 	add	r2,r3,r2
   10934:	10000015 	stw	zero,0(r2)

        fixed_taps[i] = taps[i] * pow(2, precision);
   10938:	e0bfb317 	ldw	r2,-308(fp)
   1093c:	1085883a 	add	r2,r2,r2
   10940:	1085883a 	add	r2,r2,r2
   10944:	e0ffb304 	addi	r3,fp,-308
   10948:	1885883a 	add	r2,r3,r2
   1094c:	10800b04 	addi	r2,r2,44
   10950:	10c00017 	ldw	r3,0(r2)
   10954:	1809883a 	mov	r4,r3
   10958:	00159280 	call	15928 <__extendsfdf2>
   1095c:	1021883a 	mov	r16,r2
   10960:	1823883a 	mov	r17,r3
   10964:	00800544 	movi	r2,21
   10968:	1009883a 	mov	r4,r2
   1096c:	001584c0 	call	1584c <__floatsidf>
   10970:	1009883a 	mov	r4,r2
   10974:	180b883a 	mov	r5,r3
   10978:	200d883a 	mov	r6,r4
   1097c:	280f883a 	mov	r7,r5
   10980:	0009883a 	mov	r4,zero
   10984:	01500034 	movhi	r5,16384
   10988:	0010a900 	call	10a90 <pow>
   1098c:	1009883a 	mov	r4,r2
   10990:	180b883a 	mov	r5,r3
   10994:	200d883a 	mov	r6,r4
   10998:	280f883a 	mov	r7,r5
   1099c:	8009883a 	mov	r4,r16
   109a0:	880b883a 	mov	r5,r17
   109a4:	00146640 	call	14664 <__muldf3>
   109a8:	1009883a 	mov	r4,r2
   109ac:	180b883a 	mov	r5,r3
   109b0:	2005883a 	mov	r2,r4
   109b4:	2807883a 	mov	r3,r5
   109b8:	1009883a 	mov	r4,r2
   109bc:	180b883a 	mov	r5,r3
   109c0:	00157cc0 	call	157cc <__fixdfsi>
   109c4:	1009883a 	mov	r4,r2
   109c8:	e0ffbb17 	ldw	r3,-276(fp)
   109cc:	e0bfb317 	ldw	r2,-308(fp)
   109d0:	1085883a 	add	r2,r2,r2
   109d4:	1085883a 	add	r2,r2,r2
   109d8:	1885883a 	add	r2,r3,r2
   109dc:	11000015 	stw	r4,0(r2)
    float taps[] = {0.00464135470656760, 0.00737747226463043, -0.00240768675012549, -0.00711018685736960, 0.00326564674118811, 0.0000611463173516297, -0.00935761974859676, 0.00397493281996669, 0.00437887161977042, -0.0133160721439149, 0.00304771783859210, 0.0114361953193935, -0.0179286984033957, -0.00107408161324030, 0.0222597890359562, -0.0224772654507762, -0.0108744542661829, 0.0395972756447093, -0.0263221720611839, -0.0337570326573828, 0.0751987217099385, -0.0288978194901786, -0.120354853218164, 0.287921968939103, 0.636863388360281, 0.287921968939103, -0.120354853218164, -0.0288978194901786, 0.0751987217099385, -0.0337570326573828, -0.0263221720611839, 0.0395972756447093, -0.0108744542661829, -0.0224772654507762, 0.0222597890359562, -0.00107408161324030, -0.0179286984033957, 0.0114361953193935, 0.00304771783859210, -0.0133160721439149, 0.00437887161977042, 0.00397493281996669, -0.00935761974859676, 0.0000611463173516297, 0.00326564674118811, -0.00711018685736960, -0.00240768675012549, 0.00737747226463043, 0.00464135470656760};
    alt_32 prev_vals[array_size];

    int fixed_taps[array_size];

    for(int i = 0; i < array_size; i++) {
   109e0:	e0bfb317 	ldw	r2,-308(fp)
   109e4:	10800044 	addi	r2,r2,1
   109e8:	e0bfb315 	stw	r2,-308(fp)
   109ec:	e0ffb317 	ldw	r3,-308(fp)
   109f0:	e0bfb717 	ldw	r2,-292(fp)
   109f4:	18bfca16 	blt	r3,r2,10920 <_gp+0xfffeee80>
        prev_vals[i] = 0;

        fixed_taps[i] = taps[i] * pow(2, precision);
    }

    timer_init(sys_timer_isr);
   109f8:	01000074 	movhi	r4,1
   109fc:	2100ce04 	addi	r4,r4,824
   10a00:	00104080 	call	10408 <timer_init>

    while (1) {
//    	start = times(& test1);
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10a04:	e0bfbd04 	addi	r2,fp,-268
   10a08:	100b883a 	mov	r5,r2
   10a0c:	e13fb617 	ldw	r4,-296(fp)
   10a10:	0016e080 	call	16e08 <alt_up_accelerometer_spi_read_x_axis>
        // alt_printf("raw data: %x\n", x_read);
        shift(& prev_vals, x_read, array_size);
   10a14:	e0bfb917 	ldw	r2,-284(fp)
   10a18:	e0ffbd17 	ldw	r3,-268(fp)
   10a1c:	e1bfb717 	ldw	r6,-292(fp)
   10a20:	180b883a 	mov	r5,r3
   10a24:	1009883a 	mov	r4,r2
   10a28:	00106b40 	call	106b4 <shift>
        // using floating point arithmetic
        // filtered_x = filter(& taps, & prev_vals, array_size);
        // using fixed point arithmetic
        filtered_x = filter_fixed(& fixed_taps, & prev_vals, array_size);
   10a2c:	e0bfbb17 	ldw	r2,-276(fp)
   10a30:	e0ffb917 	ldw	r3,-284(fp)
   10a34:	e1bfb717 	ldw	r6,-292(fp)
   10a38:	180b883a 	mov	r5,r3
   10a3c:	1009883a 	mov	r4,r2
   10a40:	00105840 	call	10584 <filter_fixed>
   10a44:	e0bfbc15 	stw	r2,-272(fp)

        // filtering
        convert_read(filtered_x, & level, & led);
   10a48:	d1a5b104 	addi	r6,gp,-26940
   10a4c:	d165b204 	addi	r5,gp,-26936
   10a50:	e13fbc17 	ldw	r4,-272(fp)
   10a54:	00102a80 	call	102a8 <convert_read>
//        end = clock(& test2);
//        alt_printf("new avg T: %x, %x\n", (alt_32)(test1.tms_utime), (alt_32)(test2.tms_utime));
//        sum += (int) end  - start;

//        n++;
    }
   10a58:	003fea06 	br	10a04 <_gp+0xfffeef64>

    return 0;

}
   10a5c:	e6fff804 	addi	sp,fp,-32
   10a60:	dfc00917 	ldw	ra,36(sp)
   10a64:	df000817 	ldw	fp,32(sp)
   10a68:	ddc00717 	ldw	r23,28(sp)
   10a6c:	dd800617 	ldw	r22,24(sp)
   10a70:	dd400517 	ldw	r21,20(sp)
   10a74:	dd000417 	ldw	r20,16(sp)
   10a78:	dcc00317 	ldw	r19,12(sp)
   10a7c:	dc800217 	ldw	r18,8(sp)
   10a80:	dc400117 	ldw	r17,4(sp)
   10a84:	dc000017 	ldw	r16,0(sp)
   10a88:	dec00a04 	addi	sp,sp,40
   10a8c:	f800283a 	ret

00010a90 <pow>:
   10a90:	deffee04 	addi	sp,sp,-72
   10a94:	dc800b15 	stw	r18,44(sp)
   10a98:	048000b4 	movhi	r18,2
   10a9c:	ddc01015 	stw	r23,64(sp)
   10aa0:	dd800f15 	stw	r22,60(sp)
   10aa4:	dd400e15 	stw	r21,56(sp)
   10aa8:	dd000d15 	stw	r20,52(sp)
   10aac:	dcc00c15 	stw	r19,48(sp)
   10ab0:	dc400a15 	stw	r17,40(sp)
   10ab4:	dc000915 	stw	r16,36(sp)
   10ab8:	dfc01115 	stw	ra,68(sp)
   10abc:	94a6a904 	addi	r18,r18,-25948
   10ac0:	202f883a 	mov	r23,r4
   10ac4:	282d883a 	mov	r22,r5
   10ac8:	302b883a 	mov	r21,r6
   10acc:	3829883a 	mov	r20,r7
   10ad0:	0010f540 	call	10f54 <__ieee754_pow>
   10ad4:	1023883a 	mov	r17,r2
   10ad8:	90800017 	ldw	r2,0(r18)
   10adc:	04ffffc4 	movi	r19,-1
   10ae0:	1821883a 	mov	r16,r3
   10ae4:	14c00426 	beq	r2,r19,10af8 <pow+0x68>
   10ae8:	a809883a 	mov	r4,r21
   10aec:	a00b883a 	mov	r5,r20
   10af0:	00122b00 	call	122b0 <__fpclassifyd>
   10af4:	10000d1e 	bne	r2,zero,10b2c <pow+0x9c>
   10af8:	8805883a 	mov	r2,r17
   10afc:	8007883a 	mov	r3,r16
   10b00:	dfc01117 	ldw	ra,68(sp)
   10b04:	ddc01017 	ldw	r23,64(sp)
   10b08:	dd800f17 	ldw	r22,60(sp)
   10b0c:	dd400e17 	ldw	r21,56(sp)
   10b10:	dd000d17 	ldw	r20,52(sp)
   10b14:	dcc00c17 	ldw	r19,48(sp)
   10b18:	dc800b17 	ldw	r18,44(sp)
   10b1c:	dc400a17 	ldw	r17,40(sp)
   10b20:	dc000917 	ldw	r16,36(sp)
   10b24:	dec01204 	addi	sp,sp,72
   10b28:	f800283a 	ret
   10b2c:	b809883a 	mov	r4,r23
   10b30:	b00b883a 	mov	r5,r22
   10b34:	00122b00 	call	122b0 <__fpclassifyd>
   10b38:	000d883a 	mov	r6,zero
   10b3c:	000f883a 	mov	r7,zero
   10b40:	1000201e 	bne	r2,zero,10bc4 <pow+0x134>
   10b44:	a809883a 	mov	r4,r21
   10b48:	a00b883a 	mov	r5,r20
   10b4c:	001440c0 	call	1440c <__eqdf2>
   10b50:	103fe91e 	bne	r2,zero,10af8 <_gp+0xfffef058>
   10b54:	01000044 	movi	r4,1
   10b58:	d9000015 	stw	r4,0(sp)
   10b5c:	90800017 	ldw	r2,0(r18)
   10b60:	010000b4 	movhi	r4,2
   10b64:	00cffc34 	movhi	r3,16368
   10b68:	2120ba04 	addi	r4,r4,-32024
   10b6c:	d9000115 	stw	r4,4(sp)
   10b70:	d8000815 	stw	zero,32(sp)
   10b74:	ddc00215 	stw	r23,8(sp)
   10b78:	dd800315 	stw	r22,12(sp)
   10b7c:	dd400415 	stw	r21,16(sp)
   10b80:	dd000515 	stw	r20,20(sp)
   10b84:	d8000615 	stw	zero,24(sp)
   10b88:	d8c00715 	stw	r3,28(sp)
   10b8c:	14c02826 	beq	r2,r19,10c30 <pow+0x1a0>
   10b90:	01000084 	movi	r4,2
   10b94:	11002626 	beq	r2,r4,10c30 <pow+0x1a0>
   10b98:	d809883a 	mov	r4,sp
   10b9c:	00123240 	call	12324 <matherr>
   10ba0:	10006b26 	beq	r2,zero,10d50 <pow+0x2c0>
   10ba4:	d8800817 	ldw	r2,32(sp)
   10ba8:	10000326 	beq	r2,zero,10bb8 <pow+0x128>
   10bac:	0015c500 	call	15c50 <__errno>
   10bb0:	d8c00817 	ldw	r3,32(sp)
   10bb4:	10c00015 	stw	r3,0(r2)
   10bb8:	d8800617 	ldw	r2,24(sp)
   10bbc:	d8c00717 	ldw	r3,28(sp)
   10bc0:	003fcf06 	br	10b00 <_gp+0xfffef060>
   10bc4:	b809883a 	mov	r4,r23
   10bc8:	b00b883a 	mov	r5,r22
   10bcc:	001440c0 	call	1440c <__eqdf2>
   10bd0:	1000191e 	bne	r2,zero,10c38 <pow+0x1a8>
   10bd4:	000d883a 	mov	r6,zero
   10bd8:	000f883a 	mov	r7,zero
   10bdc:	a809883a 	mov	r4,r21
   10be0:	a00b883a 	mov	r5,r20
   10be4:	001440c0 	call	1440c <__eqdf2>
   10be8:	10003a1e 	bne	r2,zero,10cd4 <pow+0x244>
   10bec:	00c00044 	movi	r3,1
   10bf0:	d8c00015 	stw	r3,0(sp)
   10bf4:	90800017 	ldw	r2,0(r18)
   10bf8:	00c000b4 	movhi	r3,2
   10bfc:	18e0ba04 	addi	r3,r3,-32024
   10c00:	d8c00115 	stw	r3,4(sp)
   10c04:	d8000815 	stw	zero,32(sp)
   10c08:	ddc00215 	stw	r23,8(sp)
   10c0c:	dd800315 	stw	r22,12(sp)
   10c10:	dd400415 	stw	r21,16(sp)
   10c14:	dd000515 	stw	r20,20(sp)
   10c18:	d8000615 	stw	zero,24(sp)
   10c1c:	d8000715 	stw	zero,28(sp)
   10c20:	103fdd26 	beq	r2,zero,10b98 <_gp+0xfffef0f8>
   10c24:	0005883a 	mov	r2,zero
   10c28:	00cffc34 	movhi	r3,16368
   10c2c:	003fb406 	br	10b00 <_gp+0xfffef060>
   10c30:	0005883a 	mov	r2,zero
   10c34:	003fb206 	br	10b00 <_gp+0xfffef060>
   10c38:	8809883a 	mov	r4,r17
   10c3c:	800b883a 	mov	r5,r16
   10c40:	00122940 	call	12294 <finite>
   10c44:	10004626 	beq	r2,zero,10d60 <pow+0x2d0>
   10c48:	000d883a 	mov	r6,zero
   10c4c:	000f883a 	mov	r7,zero
   10c50:	8809883a 	mov	r4,r17
   10c54:	800b883a 	mov	r5,r16
   10c58:	001440c0 	call	1440c <__eqdf2>
   10c5c:	103fa61e 	bne	r2,zero,10af8 <_gp+0xfffef058>
   10c60:	b809883a 	mov	r4,r23
   10c64:	b00b883a 	mov	r5,r22
   10c68:	00122940 	call	12294 <finite>
   10c6c:	103fa226 	beq	r2,zero,10af8 <_gp+0xfffef058>
   10c70:	a809883a 	mov	r4,r21
   10c74:	a00b883a 	mov	r5,r20
   10c78:	00122940 	call	12294 <finite>
   10c7c:	103f9e26 	beq	r2,zero,10af8 <_gp+0xfffef058>
   10c80:	00800104 	movi	r2,4
   10c84:	d8800015 	stw	r2,0(sp)
   10c88:	90c00017 	ldw	r3,0(r18)
   10c8c:	008000b4 	movhi	r2,2
   10c90:	10a0ba04 	addi	r2,r2,-32024
   10c94:	d8800115 	stw	r2,4(sp)
   10c98:	d8000815 	stw	zero,32(sp)
   10c9c:	ddc00215 	stw	r23,8(sp)
   10ca0:	dd800315 	stw	r22,12(sp)
   10ca4:	dd400415 	stw	r21,16(sp)
   10ca8:	dd000515 	stw	r20,20(sp)
   10cac:	d8000615 	stw	zero,24(sp)
   10cb0:	d8000715 	stw	zero,28(sp)
   10cb4:	00800084 	movi	r2,2
   10cb8:	18804726 	beq	r3,r2,10dd8 <pow+0x348>
   10cbc:	d809883a 	mov	r4,sp
   10cc0:	00123240 	call	12324 <matherr>
   10cc4:	10004426 	beq	r2,zero,10dd8 <pow+0x348>
   10cc8:	d8800817 	ldw	r2,32(sp)
   10ccc:	103fba26 	beq	r2,zero,10bb8 <_gp+0xfffef118>
   10cd0:	003fb606 	br	10bac <_gp+0xfffef10c>
   10cd4:	a809883a 	mov	r4,r21
   10cd8:	a00b883a 	mov	r5,r20
   10cdc:	00122940 	call	12294 <finite>
   10ce0:	103f8526 	beq	r2,zero,10af8 <_gp+0xfffef058>
   10ce4:	000d883a 	mov	r6,zero
   10ce8:	000f883a 	mov	r7,zero
   10cec:	a809883a 	mov	r4,r21
   10cf0:	a00b883a 	mov	r5,r20
   10cf4:	00145700 	call	14570 <__ledf2>
   10cf8:	103f7f0e 	bge	r2,zero,10af8 <_gp+0xfffef058>
   10cfc:	00c00044 	movi	r3,1
   10d00:	d8c00015 	stw	r3,0(sp)
   10d04:	90800017 	ldw	r2,0(r18)
   10d08:	00c000b4 	movhi	r3,2
   10d0c:	18e0ba04 	addi	r3,r3,-32024
   10d10:	d8c00115 	stw	r3,4(sp)
   10d14:	d8000815 	stw	zero,32(sp)
   10d18:	ddc00215 	stw	r23,8(sp)
   10d1c:	dd800315 	stw	r22,12(sp)
   10d20:	dd400415 	stw	r21,16(sp)
   10d24:	dd000515 	stw	r20,20(sp)
   10d28:	d8000615 	stw	zero,24(sp)
   10d2c:	10002526 	beq	r2,zero,10dc4 <pow+0x334>
   10d30:	00fffc34 	movhi	r3,65520
   10d34:	d8c00715 	stw	r3,28(sp)
   10d38:	00c00084 	movi	r3,2
   10d3c:	10c0221e 	bne	r2,r3,10dc8 <pow+0x338>
   10d40:	0015c500 	call	15c50 <__errno>
   10d44:	00c00844 	movi	r3,33
   10d48:	10c00015 	stw	r3,0(r2)
   10d4c:	003fde06 	br	10cc8 <_gp+0xfffef228>
   10d50:	0015c500 	call	15c50 <__errno>
   10d54:	00c00844 	movi	r3,33
   10d58:	10c00015 	stw	r3,0(r2)
   10d5c:	003f9106 	br	10ba4 <_gp+0xfffef104>
   10d60:	b809883a 	mov	r4,r23
   10d64:	b00b883a 	mov	r5,r22
   10d68:	00122940 	call	12294 <finite>
   10d6c:	103fb626 	beq	r2,zero,10c48 <_gp+0xfffef1a8>
   10d70:	a809883a 	mov	r4,r21
   10d74:	a00b883a 	mov	r5,r20
   10d78:	00122940 	call	12294 <finite>
   10d7c:	103fb226 	beq	r2,zero,10c48 <_gp+0xfffef1a8>
   10d80:	8809883a 	mov	r4,r17
   10d84:	800b883a 	mov	r5,r16
   10d88:	00122b00 	call	122b0 <__fpclassifyd>
   10d8c:	1000161e 	bne	r2,zero,10de8 <pow+0x358>
   10d90:	00800044 	movi	r2,1
   10d94:	d8800015 	stw	r2,0(sp)
   10d98:	94000017 	ldw	r16,0(r18)
   10d9c:	008000b4 	movhi	r2,2
   10da0:	10a0ba04 	addi	r2,r2,-32024
   10da4:	d8800115 	stw	r2,4(sp)
   10da8:	d8000815 	stw	zero,32(sp)
   10dac:	ddc00215 	stw	r23,8(sp)
   10db0:	dd800315 	stw	r22,12(sp)
   10db4:	dd400415 	stw	r21,16(sp)
   10db8:	dd000515 	stw	r20,20(sp)
   10dbc:	8000281e 	bne	r16,zero,10e60 <pow+0x3d0>
   10dc0:	d8000615 	stw	zero,24(sp)
   10dc4:	d8000715 	stw	zero,28(sp)
   10dc8:	d809883a 	mov	r4,sp
   10dcc:	00123240 	call	12324 <matherr>
   10dd0:	103fbd1e 	bne	r2,zero,10cc8 <_gp+0xfffef228>
   10dd4:	003fda06 	br	10d40 <_gp+0xfffef2a0>
   10dd8:	0015c500 	call	15c50 <__errno>
   10ddc:	00c00884 	movi	r3,34
   10de0:	10c00015 	stw	r3,0(r2)
   10de4:	003fb806 	br	10cc8 <_gp+0xfffef228>
   10de8:	00c000c4 	movi	r3,3
   10dec:	d8c00015 	stw	r3,0(sp)
   10df0:	90800017 	ldw	r2,0(r18)
   10df4:	00c000b4 	movhi	r3,2
   10df8:	18e0ba04 	addi	r3,r3,-32024
   10dfc:	d8c00115 	stw	r3,4(sp)
   10e00:	d8000815 	stw	zero,32(sp)
   10e04:	ddc00215 	stw	r23,8(sp)
   10e08:	dd800315 	stw	r22,12(sp)
   10e0c:	dd400415 	stw	r21,16(sp)
   10e10:	dd000515 	stw	r20,20(sp)
   10e14:	000d883a 	mov	r6,zero
   10e18:	000f883a 	mov	r7,zero
   10e1c:	b809883a 	mov	r4,r23
   10e20:	b00b883a 	mov	r5,r22
   10e24:	1000181e 	bne	r2,zero,10e88 <pow+0x3f8>
   10e28:	00b80034 	movhi	r2,57344
   10e2c:	d8800615 	stw	r2,24(sp)
   10e30:	0091fc34 	movhi	r2,18416
   10e34:	10bfffc4 	addi	r2,r2,-1
   10e38:	d8800715 	stw	r2,28(sp)
   10e3c:	00145700 	call	14570 <__ledf2>
   10e40:	10001a16 	blt	r2,zero,10eac <pow+0x41c>
   10e44:	d809883a 	mov	r4,sp
   10e48:	00123240 	call	12324 <matherr>
   10e4c:	103f551e 	bne	r2,zero,10ba4 <_gp+0xfffef104>
   10e50:	0015c500 	call	15c50 <__errno>
   10e54:	00c00884 	movi	r3,34
   10e58:	10c00015 	stw	r3,0(r2)
   10e5c:	003f5106 	br	10ba4 <_gp+0xfffef104>
   10e60:	000d883a 	mov	r6,zero
   10e64:	000f883a 	mov	r7,zero
   10e68:	0009883a 	mov	r4,zero
   10e6c:	000b883a 	mov	r5,zero
   10e70:	0013a3c0 	call	13a3c <__divdf3>
   10e74:	d8800615 	stw	r2,24(sp)
   10e78:	d8c00715 	stw	r3,28(sp)
   10e7c:	00800084 	movi	r2,2
   10e80:	80bfaf26 	beq	r16,r2,10d40 <_gp+0xfffef2a0>
   10e84:	003fd006 	br	10dc8 <_gp+0xfffef328>
   10e88:	009ffc34 	movhi	r2,32752
   10e8c:	d8000615 	stw	zero,24(sp)
   10e90:	d8800715 	stw	r2,28(sp)
   10e94:	00145700 	call	14570 <__ledf2>
   10e98:	10001a16 	blt	r2,zero,10f04 <pow+0x474>
   10e9c:	90c00017 	ldw	r3,0(r18)
   10ea0:	00800084 	movi	r2,2
   10ea4:	18bfe71e 	bne	r3,r2,10e44 <_gp+0xfffef3a4>
   10ea8:	003fe906 	br	10e50 <_gp+0xfffef3b0>
   10eac:	000d883a 	mov	r6,zero
   10eb0:	01cff834 	movhi	r7,16352
   10eb4:	a809883a 	mov	r4,r21
   10eb8:	a00b883a 	mov	r5,r20
   10ebc:	00146640 	call	14664 <__muldf3>
   10ec0:	1009883a 	mov	r4,r2
   10ec4:	180b883a 	mov	r5,r3
   10ec8:	1023883a 	mov	r17,r2
   10ecc:	1821883a 	mov	r16,r3
   10ed0:	00123380 	call	12338 <rint>
   10ed4:	100d883a 	mov	r6,r2
   10ed8:	180f883a 	mov	r7,r3
   10edc:	8809883a 	mov	r4,r17
   10ee0:	800b883a 	mov	r5,r16
   10ee4:	001440c0 	call	1440c <__eqdf2>
   10ee8:	103fec26 	beq	r2,zero,10e9c <_gp+0xfffef3fc>
   10eec:	00b80034 	movhi	r2,57344
   10ef0:	d8800615 	stw	r2,24(sp)
   10ef4:	00b1fc34 	movhi	r2,51184
   10ef8:	10bfffc4 	addi	r2,r2,-1
   10efc:	d8800715 	stw	r2,28(sp)
   10f00:	003fe606 	br	10e9c <_gp+0xfffef3fc>
   10f04:	000d883a 	mov	r6,zero
   10f08:	01cff834 	movhi	r7,16352
   10f0c:	a809883a 	mov	r4,r21
   10f10:	a00b883a 	mov	r5,r20
   10f14:	00146640 	call	14664 <__muldf3>
   10f18:	1009883a 	mov	r4,r2
   10f1c:	180b883a 	mov	r5,r3
   10f20:	1023883a 	mov	r17,r2
   10f24:	1821883a 	mov	r16,r3
   10f28:	00123380 	call	12338 <rint>
   10f2c:	100d883a 	mov	r6,r2
   10f30:	180f883a 	mov	r7,r3
   10f34:	8809883a 	mov	r4,r17
   10f38:	800b883a 	mov	r5,r16
   10f3c:	001440c0 	call	1440c <__eqdf2>
   10f40:	103fd626 	beq	r2,zero,10e9c <_gp+0xfffef3fc>
   10f44:	00bffc34 	movhi	r2,65520
   10f48:	d8000615 	stw	zero,24(sp)
   10f4c:	d8800715 	stw	r2,28(sp)
   10f50:	003fd206 	br	10e9c <_gp+0xfffef3fc>

00010f54 <__ieee754_pow>:
   10f54:	00a00034 	movhi	r2,32768
   10f58:	deffea04 	addi	sp,sp,-88
   10f5c:	10bfffc4 	addi	r2,r2,-1
   10f60:	dc800e15 	stw	r18,56(sp)
   10f64:	38a4703a 	and	r18,r7,r2
   10f68:	dfc01515 	stw	ra,84(sp)
   10f6c:	df001415 	stw	fp,80(sp)
   10f70:	ddc01315 	stw	r23,76(sp)
   10f74:	dd801215 	stw	r22,72(sp)
   10f78:	dd401115 	stw	r21,68(sp)
   10f7c:	dd001015 	stw	r20,64(sp)
   10f80:	dcc00f15 	stw	r19,60(sp)
   10f84:	dc400d15 	stw	r17,52(sp)
   10f88:	dc000c15 	stw	r16,48(sp)
   10f8c:	9186b03a 	or	r3,r18,r6
   10f90:	18002a26 	beq	r3,zero,1103c <__ieee754_pow+0xe8>
   10f94:	28a2703a 	and	r17,r5,r2
   10f98:	009ffc34 	movhi	r2,32752
   10f9c:	14402316 	blt	r2,r17,1102c <__ieee754_pow+0xd8>
   10fa0:	88802126 	beq	r17,r2,11028 <__ieee754_pow+0xd4>
   10fa4:	14802116 	blt	r2,r18,1102c <__ieee754_pow+0xd8>
   10fa8:	009ffc34 	movhi	r2,32752
   10fac:	90807326 	beq	r18,r2,1117c <__ieee754_pow+0x228>
   10fb0:	2827883a 	mov	r19,r5
   10fb4:	2021883a 	mov	r16,r4
   10fb8:	302d883a 	mov	r22,r6
   10fbc:	3839883a 	mov	fp,r7
   10fc0:	28007016 	blt	r5,zero,11184 <__ieee754_pow+0x230>
   10fc4:	002b883a 	mov	r21,zero
   10fc8:	b0003a1e 	bne	r22,zero,110b4 <__ieee754_pow+0x160>
   10fcc:	009ffc34 	movhi	r2,32752
   10fd0:	90807f26 	beq	r18,r2,111d0 <__ieee754_pow+0x27c>
   10fd4:	008ffc34 	movhi	r2,16368
   10fd8:	90805426 	beq	r18,r2,1112c <__ieee754_pow+0x1d8>
   10fdc:	00900034 	movhi	r2,16384
   10fe0:	e0833b26 	beq	fp,r2,11cd0 <__ieee754_pow+0xd7c>
   10fe4:	008ff834 	movhi	r2,16352
   10fe8:	e080321e 	bne	fp,r2,110b4 <__ieee754_pow+0x160>
   10fec:	98003116 	blt	r19,zero,110b4 <__ieee754_pow+0x160>
   10ff0:	8009883a 	mov	r4,r16
   10ff4:	980b883a 	mov	r5,r19
   10ff8:	dfc01517 	ldw	ra,84(sp)
   10ffc:	df001417 	ldw	fp,80(sp)
   11000:	ddc01317 	ldw	r23,76(sp)
   11004:	dd801217 	ldw	r22,72(sp)
   11008:	dd401117 	ldw	r21,68(sp)
   1100c:	dd001017 	ldw	r20,64(sp)
   11010:	dcc00f17 	ldw	r19,60(sp)
   11014:	dc800e17 	ldw	r18,56(sp)
   11018:	dc400d17 	ldw	r17,52(sp)
   1101c:	dc000c17 	ldw	r16,48(sp)
   11020:	dec01604 	addi	sp,sp,88
   11024:	0011ff81 	jmpi	11ff8 <__ieee754_sqrt>
   11028:	20001226 	beq	r4,zero,11074 <__ieee754_pow+0x120>
   1102c:	00b00434 	movhi	r2,49168
   11030:	8885883a 	add	r2,r17,r2
   11034:	1108b03a 	or	r4,r2,r4
   11038:	20000f1e 	bne	r4,zero,11078 <__ieee754_pow+0x124>
   1103c:	0005883a 	mov	r2,zero
   11040:	00cffc34 	movhi	r3,16368
   11044:	dfc01517 	ldw	ra,84(sp)
   11048:	df001417 	ldw	fp,80(sp)
   1104c:	ddc01317 	ldw	r23,76(sp)
   11050:	dd801217 	ldw	r22,72(sp)
   11054:	dd401117 	ldw	r21,68(sp)
   11058:	dd001017 	ldw	r20,64(sp)
   1105c:	dcc00f17 	ldw	r19,60(sp)
   11060:	dc800e17 	ldw	r18,56(sp)
   11064:	dc400d17 	ldw	r17,52(sp)
   11068:	dc000c17 	ldw	r16,48(sp)
   1106c:	dec01604 	addi	sp,sp,88
   11070:	f800283a 	ret
   11074:	8cbfcc0e 	bge	r17,r18,10fa8 <_gp+0xfffef508>
   11078:	010000b4 	movhi	r4,2
   1107c:	2120bb04 	addi	r4,r4,-32020
   11080:	dfc01517 	ldw	ra,84(sp)
   11084:	df001417 	ldw	fp,80(sp)
   11088:	ddc01317 	ldw	r23,76(sp)
   1108c:	dd801217 	ldw	r22,72(sp)
   11090:	dd401117 	ldw	r21,68(sp)
   11094:	dd001017 	ldw	r20,64(sp)
   11098:	dcc00f17 	ldw	r19,60(sp)
   1109c:	dc800e17 	ldw	r18,56(sp)
   110a0:	dc400d17 	ldw	r17,52(sp)
   110a4:	dc000c17 	ldw	r16,48(sp)
   110a8:	dec01604 	addi	sp,sp,88
   110ac:	001232c1 	jmpi	1232c <nan>
   110b0:	002b883a 	mov	r21,zero
   110b4:	8009883a 	mov	r4,r16
   110b8:	980b883a 	mov	r5,r19
   110bc:	00122800 	call	12280 <fabs>
   110c0:	102f883a 	mov	r23,r2
   110c4:	80000f26 	beq	r16,zero,11104 <__ieee754_pow+0x1b0>
   110c8:	9816d7fa 	srli	r11,r19,31
   110cc:	5affffc4 	addi	r11,r11,-1
   110d0:	aac4b03a 	or	r2,r21,r11
   110d4:	10004b26 	beq	r2,zero,11204 <__ieee754_pow+0x2b0>
   110d8:	00907834 	movhi	r2,16864
   110dc:	1480540e 	bge	r2,r18,11230 <__ieee754_pow+0x2dc>
   110e0:	0090fc34 	movhi	r2,17392
   110e4:	14832d0e 	bge	r2,r18,11d9c <__ieee754_pow+0xe48>
   110e8:	008ffc34 	movhi	r2,16368
   110ec:	10bfffc4 	addi	r2,r2,-1
   110f0:	14401916 	blt	r2,r17,11158 <__ieee754_pow+0x204>
   110f4:	e0001916 	blt	fp,zero,1115c <__ieee754_pow+0x208>
   110f8:	0005883a 	mov	r2,zero
   110fc:	0007883a 	mov	r3,zero
   11100:	003fd006 	br	11044 <_gp+0xfffef5a4>
   11104:	88000526 	beq	r17,zero,1111c <__ieee754_pow+0x1c8>
   11108:	00900034 	movhi	r2,16384
   1110c:	10bfffc4 	addi	r2,r2,-1
   11110:	9884703a 	and	r2,r19,r2
   11114:	010ffc34 	movhi	r4,16368
   11118:	113feb1e 	bne	r2,r4,110c8 <_gp+0xfffef628>
   1111c:	e0000716 	blt	fp,zero,1113c <__ieee754_pow+0x1e8>
   11120:	9802e216 	blt	r19,zero,11cac <__ieee754_pow+0xd58>
   11124:	b805883a 	mov	r2,r23
   11128:	003fc606 	br	11044 <_gp+0xfffef5a4>
   1112c:	e0037516 	blt	fp,zero,11f04 <__ieee754_pow+0xfb0>
   11130:	8005883a 	mov	r2,r16
   11134:	9807883a 	mov	r3,r19
   11138:	003fc206 	br	11044 <_gp+0xfffef5a4>
   1113c:	b80d883a 	mov	r6,r23
   11140:	180f883a 	mov	r7,r3
   11144:	0009883a 	mov	r4,zero
   11148:	014ffc34 	movhi	r5,16368
   1114c:	0013a3c0 	call	13a3c <__divdf3>
   11150:	102f883a 	mov	r23,r2
   11154:	003ff206 	br	11120 <_gp+0xfffef680>
   11158:	073fe70e 	bge	zero,fp,110f8 <_gp+0xfffef658>
   1115c:	01a20034 	movhi	r6,34816
   11160:	01df8e34 	movhi	r7,32312
   11164:	319d6704 	addi	r6,r6,30108
   11168:	39f90f04 	addi	r7,r7,-7108
   1116c:	3009883a 	mov	r4,r6
   11170:	380b883a 	mov	r5,r7
   11174:	00146640 	call	14664 <__muldf3>
   11178:	003fb206 	br	11044 <_gp+0xfffef5a4>
   1117c:	303f8c26 	beq	r6,zero,10fb0 <_gp+0xfffef510>
   11180:	003faa06 	br	1102c <_gp+0xfffef58c>
   11184:	0090d034 	movhi	r2,17216
   11188:	10bfffc4 	addi	r2,r2,-1
   1118c:	14801b16 	blt	r2,r18,111fc <__ieee754_pow+0x2a8>
   11190:	008ffc34 	movhi	r2,16368
   11194:	10bfffc4 	addi	r2,r2,-1
   11198:	14bf8a0e 	bge	r2,r18,10fc4 <_gp+0xfffef524>
   1119c:	9005d53a 	srai	r2,r18,20
   111a0:	00c00504 	movi	r3,20
   111a4:	10bf0044 	addi	r2,r2,-1023
   111a8:	18836b0e 	bge	r3,r2,11f58 <__ieee754_pow+0x1004>
   111ac:	00c00d04 	movi	r3,52
   111b0:	1885c83a 	sub	r2,r3,r2
   111b4:	3086d83a 	srl	r3,r6,r2
   111b8:	1884983a 	sll	r2,r3,r2
   111bc:	30bf811e 	bne	r6,r2,10fc4 <_gp+0xfffef524>
   111c0:	18c0004c 	andi	r3,r3,1
   111c4:	02800084 	movi	r10,2
   111c8:	50ebc83a 	sub	r21,r10,r3
   111cc:	003f7e06 	br	10fc8 <_gp+0xfffef528>
   111d0:	01300434 	movhi	r4,49168
   111d4:	8909883a 	add	r4,r17,r4
   111d8:	2408b03a 	or	r4,r4,r16
   111dc:	203f9726 	beq	r4,zero,1103c <_gp+0xfffef59c>
   111e0:	008ffc34 	movhi	r2,16368
   111e4:	10bfffc4 	addi	r2,r2,-1
   111e8:	1442e60e 	bge	r2,r17,11d84 <__ieee754_pow+0xe30>
   111ec:	e03fc216 	blt	fp,zero,110f8 <_gp+0xfffef658>
   111f0:	0005883a 	mov	r2,zero
   111f4:	e007883a 	mov	r3,fp
   111f8:	003f9206 	br	11044 <_gp+0xfffef5a4>
   111fc:	05400084 	movi	r21,2
   11200:	003f7106 	br	10fc8 <_gp+0xfffef528>
   11204:	800d883a 	mov	r6,r16
   11208:	980f883a 	mov	r7,r19
   1120c:	3009883a 	mov	r4,r6
   11210:	380b883a 	mov	r5,r7
   11214:	0014ed00 	call	14ed0 <__subdf3>
   11218:	100d883a 	mov	r6,r2
   1121c:	180f883a 	mov	r7,r3
   11220:	1009883a 	mov	r4,r2
   11224:	180b883a 	mov	r5,r3
   11228:	0013a3c0 	call	13a3c <__divdf3>
   1122c:	003f8506 	br	11044 <_gp+0xfffef5a4>
   11230:	00800434 	movhi	r2,16
   11234:	10bfffc4 	addi	r2,r2,-1
   11238:	1442d616 	blt	r2,r17,11d94 <__ieee754_pow+0xe40>
   1123c:	b809883a 	mov	r4,r23
   11240:	000d883a 	mov	r6,zero
   11244:	01d0d034 	movhi	r7,17216
   11248:	180b883a 	mov	r5,r3
   1124c:	dac00b15 	stw	r11,44(sp)
   11250:	00146640 	call	14664 <__muldf3>
   11254:	dac00b17 	ldw	r11,44(sp)
   11258:	102f883a 	mov	r23,r2
   1125c:	1823883a 	mov	r17,r3
   11260:	033ff2c4 	movi	r12,-53
   11264:	8807d53a 	srai	r3,r17,20
   11268:	00800434 	movhi	r2,16
   1126c:	10bfffc4 	addi	r2,r2,-1
   11270:	18ff0044 	addi	r3,r3,-1023
   11274:	1b19883a 	add	r12,r3,r12
   11278:	00c00134 	movhi	r3,4
   1127c:	8884703a 	and	r2,r17,r2
   11280:	18e62384 	addi	r3,r3,-26482
   11284:	150ffc34 	orhi	r20,r2,16368
   11288:	1880060e 	bge	r3,r2,112a4 <__ieee754_pow+0x350>
   1128c:	00c00334 	movhi	r3,12
   11290:	18ed9e44 	addi	r3,r3,-18823
   11294:	18833f0e 	bge	r3,r2,11f94 <__ieee754_pow+0x1040>
   11298:	00bffc34 	movhi	r2,65520
   1129c:	63000044 	addi	r12,r12,1
   112a0:	a0a9883a 	add	r20,r20,r2
   112a4:	0027883a 	mov	r19,zero
   112a8:	d8000215 	stw	zero,8(sp)
   112ac:	0013883a 	mov	r9,zero
   112b0:	0011883a 	mov	r8,zero
   112b4:	0015883a 	mov	r10,zero
   112b8:	048ffc34 	movhi	r18,16368
   112bc:	900f883a 	mov	r7,r18
   112c0:	b809883a 	mov	r4,r23
   112c4:	a00b883a 	mov	r5,r20
   112c8:	000d883a 	mov	r6,zero
   112cc:	da000a15 	stw	r8,40(sp)
   112d0:	da400815 	stw	r9,32(sp)
   112d4:	dac00b15 	stw	r11,44(sp)
   112d8:	db000915 	stw	r12,36(sp)
   112dc:	da800515 	stw	r10,20(sp)
   112e0:	0014ed00 	call	14ed0 <__subdf3>
   112e4:	b809883a 	mov	r4,r23
   112e8:	a00b883a 	mov	r5,r20
   112ec:	900f883a 	mov	r7,r18
   112f0:	000d883a 	mov	r6,zero
   112f4:	d8800015 	stw	r2,0(sp)
   112f8:	d8c00115 	stw	r3,4(sp)
   112fc:	00131900 	call	13190 <__adddf3>
   11300:	100d883a 	mov	r6,r2
   11304:	180f883a 	mov	r7,r3
   11308:	0009883a 	mov	r4,zero
   1130c:	014ffc34 	movhi	r5,16368
   11310:	0013a3c0 	call	13a3c <__divdf3>
   11314:	d9000017 	ldw	r4,0(sp)
   11318:	d9400117 	ldw	r5,4(sp)
   1131c:	100d883a 	mov	r6,r2
   11320:	180f883a 	mov	r7,r3
   11324:	d8c00715 	stw	r3,28(sp)
   11328:	d8800615 	stw	r2,24(sp)
   1132c:	00146640 	call	14664 <__muldf3>
   11330:	1023883a 	mov	r17,r2
   11334:	a005d07a 	srai	r2,r20,1
   11338:	da800517 	ldw	r10,20(sp)
   1133c:	1821883a 	mov	r16,r3
   11340:	10c80034 	orhi	r3,r2,8192
   11344:	00800234 	movhi	r2,8
   11348:	1885883a 	add	r2,r3,r2
   1134c:	1295883a 	add	r10,r2,r10
   11350:	500f883a 	mov	r7,r10
   11354:	800b883a 	mov	r5,r16
   11358:	000d883a 	mov	r6,zero
   1135c:	0009883a 	mov	r4,zero
   11360:	da800515 	stw	r10,20(sp)
   11364:	00146640 	call	14664 <__muldf3>
   11368:	d9000017 	ldw	r4,0(sp)
   1136c:	d9400117 	ldw	r5,4(sp)
   11370:	100d883a 	mov	r6,r2
   11374:	180f883a 	mov	r7,r3
   11378:	0014ed00 	call	14ed0 <__subdf3>
   1137c:	da800517 	ldw	r10,20(sp)
   11380:	900f883a 	mov	r7,r18
   11384:	000d883a 	mov	r6,zero
   11388:	500b883a 	mov	r5,r10
   1138c:	0009883a 	mov	r4,zero
   11390:	d8800015 	stw	r2,0(sp)
   11394:	d8c00515 	stw	r3,20(sp)
   11398:	0014ed00 	call	14ed0 <__subdf3>
   1139c:	b809883a 	mov	r4,r23
   113a0:	a00b883a 	mov	r5,r20
   113a4:	100d883a 	mov	r6,r2
   113a8:	180f883a 	mov	r7,r3
   113ac:	0014ed00 	call	14ed0 <__subdf3>
   113b0:	800f883a 	mov	r7,r16
   113b4:	000d883a 	mov	r6,zero
   113b8:	1009883a 	mov	r4,r2
   113bc:	180b883a 	mov	r5,r3
   113c0:	00146640 	call	14664 <__muldf3>
   113c4:	db400517 	ldw	r13,20(sp)
   113c8:	d9000017 	ldw	r4,0(sp)
   113cc:	100d883a 	mov	r6,r2
   113d0:	680b883a 	mov	r5,r13
   113d4:	180f883a 	mov	r7,r3
   113d8:	0014ed00 	call	14ed0 <__subdf3>
   113dc:	dbc00617 	ldw	r15,24(sp)
   113e0:	db800717 	ldw	r14,28(sp)
   113e4:	1009883a 	mov	r4,r2
   113e8:	780d883a 	mov	r6,r15
   113ec:	700f883a 	mov	r7,r14
   113f0:	180b883a 	mov	r5,r3
   113f4:	00146640 	call	14664 <__muldf3>
   113f8:	880d883a 	mov	r6,r17
   113fc:	800f883a 	mov	r7,r16
   11400:	8809883a 	mov	r4,r17
   11404:	800b883a 	mov	r5,r16
   11408:	d8800015 	stw	r2,0(sp)
   1140c:	d8c00115 	stw	r3,4(sp)
   11410:	00146640 	call	14664 <__muldf3>
   11414:	01929174 	movhi	r6,19013
   11418:	01cff2b4 	movhi	r7,16330
   1141c:	3193bbc4 	addi	r6,r6,20207
   11420:	39df8a04 	addi	r7,r7,32296
   11424:	1009883a 	mov	r4,r2
   11428:	180b883a 	mov	r5,r3
   1142c:	102f883a 	mov	r23,r2
   11430:	1829883a 	mov	r20,r3
   11434:	00146640 	call	14664 <__muldf3>
   11438:	01a4f2b4 	movhi	r6,37834
   1143c:	01cff3b4 	movhi	r7,16334
   11440:	31b6d944 	addi	r6,r6,-9371
   11444:	39e19284 	addi	r7,r7,-31158
   11448:	1009883a 	mov	r4,r2
   1144c:	180b883a 	mov	r5,r3
   11450:	00131900 	call	13190 <__adddf3>
   11454:	b80d883a 	mov	r6,r23
   11458:	a00f883a 	mov	r7,r20
   1145c:	1009883a 	mov	r4,r2
   11460:	180b883a 	mov	r5,r3
   11464:	00146640 	call	14664 <__muldf3>
   11468:	01aa4774 	movhi	r6,43293
   1146c:	01cff474 	movhi	r7,16337
   11470:	31904044 	addi	r6,r6,16641
   11474:	39dd1804 	addi	r7,r7,29792
   11478:	1009883a 	mov	r4,r2
   1147c:	180b883a 	mov	r5,r3
   11480:	00131900 	call	13190 <__adddf3>
   11484:	b80d883a 	mov	r6,r23
   11488:	a00f883a 	mov	r7,r20
   1148c:	1009883a 	mov	r4,r2
   11490:	180b883a 	mov	r5,r3
   11494:	00146640 	call	14664 <__muldf3>
   11498:	019463f4 	movhi	r6,20879
   1149c:	01cff574 	movhi	r7,16341
   114a0:	31899344 	addi	r6,r6,9805
   114a4:	39d55544 	addi	r7,r7,21845
   114a8:	1009883a 	mov	r4,r2
   114ac:	180b883a 	mov	r5,r3
   114b0:	00131900 	call	13190 <__adddf3>
   114b4:	b80d883a 	mov	r6,r23
   114b8:	a00f883a 	mov	r7,r20
   114bc:	1009883a 	mov	r4,r2
   114c0:	180b883a 	mov	r5,r3
   114c4:	00146640 	call	14664 <__muldf3>
   114c8:	01b6dc34 	movhi	r6,56176
   114cc:	01cff6f4 	movhi	r7,16347
   114d0:	31aaffc4 	addi	r6,r6,-21505
   114d4:	39db6d84 	addi	r7,r7,28086
   114d8:	1009883a 	mov	r4,r2
   114dc:	180b883a 	mov	r5,r3
   114e0:	00131900 	call	13190 <__adddf3>
   114e4:	b80d883a 	mov	r6,r23
   114e8:	a00f883a 	mov	r7,r20
   114ec:	1009883a 	mov	r4,r2
   114f0:	180b883a 	mov	r5,r3
   114f4:	00146640 	call	14664 <__muldf3>
   114f8:	018cccf4 	movhi	r6,13107
   114fc:	01cff8f4 	movhi	r7,16355
   11500:	318cc0c4 	addi	r6,r6,13059
   11504:	39ccccc4 	addi	r7,r7,13107
   11508:	1009883a 	mov	r4,r2
   1150c:	180b883a 	mov	r5,r3
   11510:	00131900 	call	13190 <__adddf3>
   11514:	b80d883a 	mov	r6,r23
   11518:	a00f883a 	mov	r7,r20
   1151c:	b809883a 	mov	r4,r23
   11520:	a00b883a 	mov	r5,r20
   11524:	1825883a 	mov	r18,r3
   11528:	d8800515 	stw	r2,20(sp)
   1152c:	00146640 	call	14664 <__muldf3>
   11530:	db400517 	ldw	r13,20(sp)
   11534:	900b883a 	mov	r5,r18
   11538:	100d883a 	mov	r6,r2
   1153c:	6809883a 	mov	r4,r13
   11540:	180f883a 	mov	r7,r3
   11544:	00146640 	call	14664 <__muldf3>
   11548:	800f883a 	mov	r7,r16
   1154c:	8809883a 	mov	r4,r17
   11550:	800b883a 	mov	r5,r16
   11554:	000d883a 	mov	r6,zero
   11558:	102f883a 	mov	r23,r2
   1155c:	1829883a 	mov	r20,r3
   11560:	00131900 	call	13190 <__adddf3>
   11564:	d9800017 	ldw	r6,0(sp)
   11568:	d9c00117 	ldw	r7,4(sp)
   1156c:	1009883a 	mov	r4,r2
   11570:	180b883a 	mov	r5,r3
   11574:	00146640 	call	14664 <__muldf3>
   11578:	b80d883a 	mov	r6,r23
   1157c:	a00f883a 	mov	r7,r20
   11580:	1009883a 	mov	r4,r2
   11584:	180b883a 	mov	r5,r3
   11588:	00131900 	call	13190 <__adddf3>
   1158c:	800f883a 	mov	r7,r16
   11590:	800b883a 	mov	r5,r16
   11594:	000d883a 	mov	r6,zero
   11598:	0009883a 	mov	r4,zero
   1159c:	1025883a 	mov	r18,r2
   115a0:	182f883a 	mov	r23,r3
   115a4:	00146640 	call	14664 <__muldf3>
   115a8:	000d883a 	mov	r6,zero
   115ac:	01d00234 	movhi	r7,16392
   115b0:	1009883a 	mov	r4,r2
   115b4:	180b883a 	mov	r5,r3
   115b8:	d8c00715 	stw	r3,28(sp)
   115bc:	d8800615 	stw	r2,24(sp)
   115c0:	00131900 	call	13190 <__adddf3>
   115c4:	900d883a 	mov	r6,r18
   115c8:	b80f883a 	mov	r7,r23
   115cc:	1009883a 	mov	r4,r2
   115d0:	180b883a 	mov	r5,r3
   115d4:	00131900 	call	13190 <__adddf3>
   115d8:	800b883a 	mov	r5,r16
   115dc:	000d883a 	mov	r6,zero
   115e0:	180f883a 	mov	r7,r3
   115e4:	0009883a 	mov	r4,zero
   115e8:	1829883a 	mov	r20,r3
   115ec:	00146640 	call	14664 <__muldf3>
   115f0:	a00b883a 	mov	r5,r20
   115f4:	000d883a 	mov	r6,zero
   115f8:	01d00234 	movhi	r7,16392
   115fc:	0009883a 	mov	r4,zero
   11600:	d8800315 	stw	r2,12(sp)
   11604:	d8c00415 	stw	r3,16(sp)
   11608:	0014ed00 	call	14ed0 <__subdf3>
   1160c:	dbc00617 	ldw	r15,24(sp)
   11610:	db800717 	ldw	r14,28(sp)
   11614:	1009883a 	mov	r4,r2
   11618:	780d883a 	mov	r6,r15
   1161c:	700f883a 	mov	r7,r14
   11620:	180b883a 	mov	r5,r3
   11624:	0014ed00 	call	14ed0 <__subdf3>
   11628:	9009883a 	mov	r4,r18
   1162c:	b80b883a 	mov	r5,r23
   11630:	100d883a 	mov	r6,r2
   11634:	180f883a 	mov	r7,r3
   11638:	0014ed00 	call	14ed0 <__subdf3>
   1163c:	880d883a 	mov	r6,r17
   11640:	800f883a 	mov	r7,r16
   11644:	1009883a 	mov	r4,r2
   11648:	180b883a 	mov	r5,r3
   1164c:	00146640 	call	14664 <__muldf3>
   11650:	d9000017 	ldw	r4,0(sp)
   11654:	d9400117 	ldw	r5,4(sp)
   11658:	a00f883a 	mov	r7,r20
   1165c:	000d883a 	mov	r6,zero
   11660:	1023883a 	mov	r17,r2
   11664:	1821883a 	mov	r16,r3
   11668:	00146640 	call	14664 <__muldf3>
   1166c:	8809883a 	mov	r4,r17
   11670:	800b883a 	mov	r5,r16
   11674:	100d883a 	mov	r6,r2
   11678:	180f883a 	mov	r7,r3
   1167c:	00131900 	call	13190 <__adddf3>
   11680:	d9000317 	ldw	r4,12(sp)
   11684:	d9400417 	ldw	r5,16(sp)
   11688:	100d883a 	mov	r6,r2
   1168c:	180f883a 	mov	r7,r3
   11690:	102f883a 	mov	r23,r2
   11694:	1823883a 	mov	r17,r3
   11698:	00131900 	call	13190 <__adddf3>
   1169c:	01cffbf4 	movhi	r7,16367
   116a0:	39f1c244 	addi	r7,r7,-14583
   116a4:	0009883a 	mov	r4,zero
   116a8:	180b883a 	mov	r5,r3
   116ac:	01b80034 	movhi	r6,57344
   116b0:	1821883a 	mov	r16,r3
   116b4:	00146640 	call	14664 <__muldf3>
   116b8:	d9800317 	ldw	r6,12(sp)
   116bc:	d9c00417 	ldw	r7,16(sp)
   116c0:	800b883a 	mov	r5,r16
   116c4:	0009883a 	mov	r4,zero
   116c8:	1825883a 	mov	r18,r3
   116cc:	d8800015 	stw	r2,0(sp)
   116d0:	0014ed00 	call	14ed0 <__subdf3>
   116d4:	b809883a 	mov	r4,r23
   116d8:	880b883a 	mov	r5,r17
   116dc:	100d883a 	mov	r6,r2
   116e0:	180f883a 	mov	r7,r3
   116e4:	0014ed00 	call	14ed0 <__subdf3>
   116e8:	01b70eb4 	movhi	r6,56378
   116ec:	01cffbf4 	movhi	r7,16367
   116f0:	3180ff44 	addi	r6,r6,1021
   116f4:	39f1c244 	addi	r7,r7,-14583
   116f8:	1009883a 	mov	r4,r2
   116fc:	180b883a 	mov	r5,r3
   11700:	00146640 	call	14664 <__muldf3>
   11704:	018516f4 	movhi	r6,5211
   11708:	01ef8fb4 	movhi	r7,48702
   1170c:	800b883a 	mov	r5,r16
   11710:	31807d44 	addi	r6,r6,501
   11714:	39cbf804 	addi	r7,r7,12256
   11718:	0009883a 	mov	r4,zero
   1171c:	1029883a 	mov	r20,r2
   11720:	1823883a 	mov	r17,r3
   11724:	00146640 	call	14664 <__muldf3>
   11728:	a009883a 	mov	r4,r20
   1172c:	880b883a 	mov	r5,r17
   11730:	100d883a 	mov	r6,r2
   11734:	180f883a 	mov	r7,r3
   11738:	00131900 	call	13190 <__adddf3>
   1173c:	da400817 	ldw	r9,32(sp)
   11740:	da000a17 	ldw	r8,40(sp)
   11744:	180b883a 	mov	r5,r3
   11748:	480d883a 	mov	r6,r9
   1174c:	400f883a 	mov	r7,r8
   11750:	1009883a 	mov	r4,r2
   11754:	00131900 	call	13190 <__adddf3>
   11758:	db000917 	ldw	r12,36(sp)
   1175c:	1029883a 	mov	r20,r2
   11760:	1823883a 	mov	r17,r3
   11764:	6009883a 	mov	r4,r12
   11768:	001584c0 	call	1584c <__floatsidf>
   1176c:	d9000017 	ldw	r4,0(sp)
   11770:	a00d883a 	mov	r6,r20
   11774:	880f883a 	mov	r7,r17
   11778:	900b883a 	mov	r5,r18
   1177c:	182f883a 	mov	r23,r3
   11780:	d8800115 	stw	r2,4(sp)
   11784:	00131900 	call	13190 <__adddf3>
   11788:	d9c00217 	ldw	r7,8(sp)
   1178c:	980d883a 	mov	r6,r19
   11790:	1009883a 	mov	r4,r2
   11794:	180b883a 	mov	r5,r3
   11798:	00131900 	call	13190 <__adddf3>
   1179c:	d9800117 	ldw	r6,4(sp)
   117a0:	b80f883a 	mov	r7,r23
   117a4:	1009883a 	mov	r4,r2
   117a8:	180b883a 	mov	r5,r3
   117ac:	00131900 	call	13190 <__adddf3>
   117b0:	d9800117 	ldw	r6,4(sp)
   117b4:	b80f883a 	mov	r7,r23
   117b8:	0009883a 	mov	r4,zero
   117bc:	180b883a 	mov	r5,r3
   117c0:	1821883a 	mov	r16,r3
   117c4:	0014ed00 	call	14ed0 <__subdf3>
   117c8:	d9c00217 	ldw	r7,8(sp)
   117cc:	980d883a 	mov	r6,r19
   117d0:	1009883a 	mov	r4,r2
   117d4:	180b883a 	mov	r5,r3
   117d8:	0014ed00 	call	14ed0 <__subdf3>
   117dc:	d9800017 	ldw	r6,0(sp)
   117e0:	900f883a 	mov	r7,r18
   117e4:	1009883a 	mov	r4,r2
   117e8:	180b883a 	mov	r5,r3
   117ec:	0014ed00 	call	14ed0 <__subdf3>
   117f0:	880b883a 	mov	r5,r17
   117f4:	100d883a 	mov	r6,r2
   117f8:	180f883a 	mov	r7,r3
   117fc:	a009883a 	mov	r4,r20
   11800:	0014ed00 	call	14ed0 <__subdf3>
   11804:	dac00b17 	ldw	r11,44(sp)
   11808:	aabfffc4 	addi	r10,r21,-1
   1180c:	1025883a 	mov	r18,r2
   11810:	52d6b03a 	or	r11,r10,r11
   11814:	1823883a 	mov	r17,r3
   11818:	58015826 	beq	r11,zero,11d7c <__ieee754_pow+0xe28>
   1181c:	04cffc34 	movhi	r19,16368
   11820:	b009883a 	mov	r4,r22
   11824:	000d883a 	mov	r6,zero
   11828:	e00f883a 	mov	r7,fp
   1182c:	e00b883a 	mov	r5,fp
   11830:	0014ed00 	call	14ed0 <__subdf3>
   11834:	800f883a 	mov	r7,r16
   11838:	000d883a 	mov	r6,zero
   1183c:	1009883a 	mov	r4,r2
   11840:	180b883a 	mov	r5,r3
   11844:	00146640 	call	14664 <__muldf3>
   11848:	b00d883a 	mov	r6,r22
   1184c:	9009883a 	mov	r4,r18
   11850:	880b883a 	mov	r5,r17
   11854:	e00f883a 	mov	r7,fp
   11858:	1829883a 	mov	r20,r3
   1185c:	102b883a 	mov	r21,r2
   11860:	00146640 	call	14664 <__muldf3>
   11864:	a00b883a 	mov	r5,r20
   11868:	100d883a 	mov	r6,r2
   1186c:	180f883a 	mov	r7,r3
   11870:	a809883a 	mov	r4,r21
   11874:	00131900 	call	13190 <__adddf3>
   11878:	800b883a 	mov	r5,r16
   1187c:	000d883a 	mov	r6,zero
   11880:	e00f883a 	mov	r7,fp
   11884:	0009883a 	mov	r4,zero
   11888:	102d883a 	mov	r22,r2
   1188c:	1829883a 	mov	r20,r3
   11890:	00146640 	call	14664 <__muldf3>
   11894:	100d883a 	mov	r6,r2
   11898:	180f883a 	mov	r7,r3
   1189c:	b009883a 	mov	r4,r22
   118a0:	a00b883a 	mov	r5,r20
   118a4:	1025883a 	mov	r18,r2
   118a8:	1823883a 	mov	r17,r3
   118ac:	00131900 	call	13190 <__adddf3>
   118b0:	102f883a 	mov	r23,r2
   118b4:	00902434 	movhi	r2,16528
   118b8:	10bfffc4 	addi	r2,r2,-1
   118bc:	1821883a 	mov	r16,r3
   118c0:	9013883a 	mov	r9,r18
   118c4:	8811883a 	mov	r8,r17
   118c8:	10c1070e 	bge	r2,r3,11ce8 <__ieee754_pow+0xd94>
   118cc:	00afdc34 	movhi	r2,49008
   118d0:	1885883a 	add	r2,r3,r2
   118d4:	15c4b03a 	or	r2,r2,r23
   118d8:	1001901e 	bne	r2,zero,11f1c <__ieee754_pow+0xfc8>
   118dc:	01994b34 	movhi	r6,25900
   118e0:	01cf25f4 	movhi	r7,15511
   118e4:	31a0bf84 	addi	r6,r6,-32002
   118e8:	39c551c4 	addi	r7,r7,5447
   118ec:	b009883a 	mov	r4,r22
   118f0:	a00b883a 	mov	r5,r20
   118f4:	00131900 	call	13190 <__adddf3>
   118f8:	900d883a 	mov	r6,r18
   118fc:	880f883a 	mov	r7,r17
   11900:	b809883a 	mov	r4,r23
   11904:	800b883a 	mov	r5,r16
   11908:	1039883a 	mov	fp,r2
   1190c:	182b883a 	mov	r21,r3
   11910:	0014ed00 	call	14ed0 <__subdf3>
   11914:	100d883a 	mov	r6,r2
   11918:	180f883a 	mov	r7,r3
   1191c:	e009883a 	mov	r4,fp
   11920:	a80b883a 	mov	r5,r21
   11924:	00144940 	call	14494 <__gedf2>
   11928:	00817c16 	blt	zero,r2,11f1c <__ieee754_pow+0xfc8>
   1192c:	802b883a 	mov	r21,r16
   11930:	a805d53a 	srai	r2,r21,20
   11934:	00c00434 	movhi	r3,16
   11938:	01000434 	movhi	r4,16
   1193c:	10bf0084 	addi	r2,r2,-1022
   11940:	1885d83a 	sra	r2,r3,r2
   11944:	213fffc4 	addi	r4,r4,-1
   11948:	1405883a 	add	r2,r2,r16
   1194c:	1006907a 	slli	r3,r2,1
   11950:	112a703a 	and	r21,r2,r4
   11954:	ad400434 	orhi	r21,r21,16
   11958:	1806d57a 	srli	r3,r3,21
   1195c:	18ff0044 	addi	r3,r3,-1023
   11960:	20cfd83a 	sra	r7,r4,r3
   11964:	01000504 	movi	r4,20
   11968:	20c7c83a 	sub	r3,r4,r3
   1196c:	a8c7d83a 	sra	r3,r21,r3
   11970:	01ce303a 	nor	r7,zero,r7
   11974:	388e703a 	and	r7,r7,r2
   11978:	d8c00015 	stw	r3,0(sp)
   1197c:	80019016 	blt	r16,zero,11fc0 <__ieee754_pow+0x106c>
   11980:	000d883a 	mov	r6,zero
   11984:	9009883a 	mov	r4,r18
   11988:	880b883a 	mov	r5,r17
   1198c:	0014ed00 	call	14ed0 <__subdf3>
   11990:	100d883a 	mov	r6,r2
   11994:	180f883a 	mov	r7,r3
   11998:	b009883a 	mov	r4,r22
   1199c:	a00b883a 	mov	r5,r20
   119a0:	d8c00a15 	stw	r3,40(sp)
   119a4:	d8800815 	stw	r2,32(sp)
   119a8:	00131900 	call	13190 <__adddf3>
   119ac:	d8800017 	ldw	r2,0(sp)
   119b0:	da000a17 	ldw	r8,40(sp)
   119b4:	da400817 	ldw	r9,32(sp)
   119b8:	1004953a 	slli	r2,r2,20
   119bc:	1821883a 	mov	r16,r3
   119c0:	d8800215 	stw	r2,8(sp)
   119c4:	01cff9b4 	movhi	r7,16358
   119c8:	800b883a 	mov	r5,r16
   119cc:	39cb90c4 	addi	r7,r7,11843
   119d0:	0009883a 	mov	r4,zero
   119d4:	000d883a 	mov	r6,zero
   119d8:	da000a15 	stw	r8,40(sp)
   119dc:	da400815 	stw	r9,32(sp)
   119e0:	00146640 	call	14664 <__muldf3>
   119e4:	da400817 	ldw	r9,32(sp)
   119e8:	da000a17 	ldw	r8,40(sp)
   119ec:	800b883a 	mov	r5,r16
   119f0:	480d883a 	mov	r6,r9
   119f4:	400f883a 	mov	r7,r8
   119f8:	0009883a 	mov	r4,zero
   119fc:	1039883a 	mov	fp,r2
   11a00:	182f883a 	mov	r23,r3
   11a04:	0014ed00 	call	14ed0 <__subdf3>
   11a08:	b009883a 	mov	r4,r22
   11a0c:	a00b883a 	mov	r5,r20
   11a10:	100d883a 	mov	r6,r2
   11a14:	180f883a 	mov	r7,r3
   11a18:	0014ed00 	call	14ed0 <__subdf3>
   11a1c:	01bfbeb4 	movhi	r6,65274
   11a20:	01cff9b4 	movhi	r7,16358
   11a24:	318e7bc4 	addi	r6,r6,14831
   11a28:	39cb9084 	addi	r7,r7,11842
   11a2c:	1009883a 	mov	r4,r2
   11a30:	180b883a 	mov	r5,r3
   11a34:	00146640 	call	14664 <__muldf3>
   11a38:	01832a34 	movhi	r6,3240
   11a3c:	01ef8834 	movhi	r7,48672
   11a40:	800b883a 	mov	r5,r16
   11a44:	319b0e44 	addi	r6,r6,27705
   11a48:	39d71844 	addi	r7,r7,23649
   11a4c:	0009883a 	mov	r4,zero
   11a50:	1029883a 	mov	r20,r2
   11a54:	1823883a 	mov	r17,r3
   11a58:	00146640 	call	14664 <__muldf3>
   11a5c:	a009883a 	mov	r4,r20
   11a60:	880b883a 	mov	r5,r17
   11a64:	100d883a 	mov	r6,r2
   11a68:	180f883a 	mov	r7,r3
   11a6c:	00131900 	call	13190 <__adddf3>
   11a70:	e009883a 	mov	r4,fp
   11a74:	b80b883a 	mov	r5,r23
   11a78:	100d883a 	mov	r6,r2
   11a7c:	180f883a 	mov	r7,r3
   11a80:	102d883a 	mov	r22,r2
   11a84:	1829883a 	mov	r20,r3
   11a88:	00131900 	call	13190 <__adddf3>
   11a8c:	e00d883a 	mov	r6,fp
   11a90:	b80f883a 	mov	r7,r23
   11a94:	1009883a 	mov	r4,r2
   11a98:	180b883a 	mov	r5,r3
   11a9c:	1023883a 	mov	r17,r2
   11aa0:	1821883a 	mov	r16,r3
   11aa4:	0014ed00 	call	14ed0 <__subdf3>
   11aa8:	b009883a 	mov	r4,r22
   11aac:	a00b883a 	mov	r5,r20
   11ab0:	100d883a 	mov	r6,r2
   11ab4:	180f883a 	mov	r7,r3
   11ab8:	0014ed00 	call	14ed0 <__subdf3>
   11abc:	880d883a 	mov	r6,r17
   11ac0:	800f883a 	mov	r7,r16
   11ac4:	8809883a 	mov	r4,r17
   11ac8:	800b883a 	mov	r5,r16
   11acc:	1039883a 	mov	fp,r2
   11ad0:	182f883a 	mov	r23,r3
   11ad4:	00146640 	call	14664 <__muldf3>
   11ad8:	019caff4 	movhi	r6,29375
   11adc:	01cf99b4 	movhi	r7,15974
   11ae0:	31a93404 	addi	r6,r6,-23344
   11ae4:	39cdda44 	addi	r7,r7,14185
   11ae8:	1009883a 	mov	r4,r2
   11aec:	180b883a 	mov	r5,r3
   11af0:	102d883a 	mov	r22,r2
   11af4:	1829883a 	mov	r20,r3
   11af8:	00146640 	call	14664 <__muldf3>
   11afc:	01b174b4 	movhi	r6,50642
   11b00:	01cfaf34 	movhi	r7,16060
   11b04:	319afc44 	addi	r6,r6,27633
   11b08:	39ef5044 	addi	r7,r7,-17087
   11b0c:	1009883a 	mov	r4,r2
   11b10:	180b883a 	mov	r5,r3
   11b14:	0014ed00 	call	14ed0 <__subdf3>
   11b18:	b00d883a 	mov	r6,r22
   11b1c:	a00f883a 	mov	r7,r20
   11b20:	1009883a 	mov	r4,r2
   11b24:	180b883a 	mov	r5,r3
   11b28:	00146640 	call	14664 <__muldf3>
   11b2c:	01abc9b4 	movhi	r6,44838
   11b30:	01cfc474 	movhi	r7,16145
   11b34:	31b78b04 	addi	r6,r6,-8660
   11b38:	39d59a84 	addi	r7,r7,22122
   11b3c:	1009883a 	mov	r4,r2
   11b40:	180b883a 	mov	r5,r3
   11b44:	00131900 	call	13190 <__adddf3>
   11b48:	b00d883a 	mov	r6,r22
   11b4c:	a00f883a 	mov	r7,r20
   11b50:	1009883a 	mov	r4,r2
   11b54:	180b883a 	mov	r5,r3
   11b58:	00146640 	call	14664 <__muldf3>
   11b5c:	0185aff4 	movhi	r6,5823
   11b60:	01cfd9f4 	movhi	r7,16231
   11b64:	31af64c4 	addi	r6,r6,-17005
   11b68:	39f05b04 	addi	r7,r7,-16020
   11b6c:	1009883a 	mov	r4,r2
   11b70:	180b883a 	mov	r5,r3
   11b74:	0014ed00 	call	14ed0 <__subdf3>
   11b78:	b00d883a 	mov	r6,r22
   11b7c:	a00f883a 	mov	r7,r20
   11b80:	1009883a 	mov	r4,r2
   11b84:	180b883a 	mov	r5,r3
   11b88:	00146640 	call	14664 <__muldf3>
   11b8c:	01955574 	movhi	r6,21845
   11b90:	01cff174 	movhi	r7,16325
   11b94:	31954f84 	addi	r6,r6,21822
   11b98:	39d55544 	addi	r7,r7,21845
   11b9c:	1009883a 	mov	r4,r2
   11ba0:	180b883a 	mov	r5,r3
   11ba4:	00131900 	call	13190 <__adddf3>
   11ba8:	b00d883a 	mov	r6,r22
   11bac:	a00f883a 	mov	r7,r20
   11bb0:	1009883a 	mov	r4,r2
   11bb4:	180b883a 	mov	r5,r3
   11bb8:	00146640 	call	14664 <__muldf3>
   11bbc:	100d883a 	mov	r6,r2
   11bc0:	180f883a 	mov	r7,r3
   11bc4:	8809883a 	mov	r4,r17
   11bc8:	800b883a 	mov	r5,r16
   11bcc:	0014ed00 	call	14ed0 <__subdf3>
   11bd0:	100d883a 	mov	r6,r2
   11bd4:	180f883a 	mov	r7,r3
   11bd8:	8809883a 	mov	r4,r17
   11bdc:	800b883a 	mov	r5,r16
   11be0:	102d883a 	mov	r22,r2
   11be4:	1829883a 	mov	r20,r3
   11be8:	00146640 	call	14664 <__muldf3>
   11bec:	b009883a 	mov	r4,r22
   11bf0:	a00b883a 	mov	r5,r20
   11bf4:	000d883a 	mov	r6,zero
   11bf8:	01d00034 	movhi	r7,16384
   11bfc:	1025883a 	mov	r18,r2
   11c00:	182b883a 	mov	r21,r3
   11c04:	0014ed00 	call	14ed0 <__subdf3>
   11c08:	100d883a 	mov	r6,r2
   11c0c:	180f883a 	mov	r7,r3
   11c10:	9009883a 	mov	r4,r18
   11c14:	a80b883a 	mov	r5,r21
   11c18:	0013a3c0 	call	13a3c <__divdf3>
   11c1c:	e00d883a 	mov	r6,fp
   11c20:	b80f883a 	mov	r7,r23
   11c24:	8809883a 	mov	r4,r17
   11c28:	800b883a 	mov	r5,r16
   11c2c:	102d883a 	mov	r22,r2
   11c30:	1829883a 	mov	r20,r3
   11c34:	00146640 	call	14664 <__muldf3>
   11c38:	e00d883a 	mov	r6,fp
   11c3c:	b80f883a 	mov	r7,r23
   11c40:	1009883a 	mov	r4,r2
   11c44:	180b883a 	mov	r5,r3
   11c48:	00131900 	call	13190 <__adddf3>
   11c4c:	100d883a 	mov	r6,r2
   11c50:	180f883a 	mov	r7,r3
   11c54:	b009883a 	mov	r4,r22
   11c58:	a00b883a 	mov	r5,r20
   11c5c:	0014ed00 	call	14ed0 <__subdf3>
   11c60:	880d883a 	mov	r6,r17
   11c64:	800f883a 	mov	r7,r16
   11c68:	1009883a 	mov	r4,r2
   11c6c:	180b883a 	mov	r5,r3
   11c70:	0014ed00 	call	14ed0 <__subdf3>
   11c74:	0009883a 	mov	r4,zero
   11c78:	014ffc34 	movhi	r5,16368
   11c7c:	100d883a 	mov	r6,r2
   11c80:	180f883a 	mov	r7,r3
   11c84:	0014ed00 	call	14ed0 <__subdf3>
   11c88:	d9000217 	ldw	r4,8(sp)
   11c8c:	190b883a 	add	r5,r3,r4
   11c90:	2809d53a 	srai	r4,r5,20
   11c94:	0100cd0e 	bge	zero,r4,11fcc <__ieee754_pow+0x1078>
   11c98:	1009883a 	mov	r4,r2
   11c9c:	000d883a 	mov	r6,zero
   11ca0:	980f883a 	mov	r7,r19
   11ca4:	00146640 	call	14664 <__muldf3>
   11ca8:	003ce606 	br	11044 <_gp+0xfffef5a4>
   11cac:	00b00434 	movhi	r2,49168
   11cb0:	8885883a 	add	r2,r17,r2
   11cb4:	1544b03a 	or	r2,r2,r21
   11cb8:	1000b326 	beq	r2,zero,11f88 <__ieee754_pow+0x1034>
   11cbc:	00800044 	movi	r2,1
   11cc0:	a8bd181e 	bne	r21,r2,11124 <_gp+0xfffef684>
   11cc4:	18e0003c 	xorhi	r3,r3,32768
   11cc8:	b805883a 	mov	r2,r23
   11ccc:	003cdd06 	br	11044 <_gp+0xfffef5a4>
   11cd0:	800d883a 	mov	r6,r16
   11cd4:	980f883a 	mov	r7,r19
   11cd8:	8009883a 	mov	r4,r16
   11cdc:	980b883a 	mov	r5,r19
   11ce0:	00146640 	call	14664 <__muldf3>
   11ce4:	003cd706 	br	11044 <_gp+0xfffef5a4>
   11ce8:	05600034 	movhi	r21,32768
   11cec:	ad7fffc4 	addi	r21,r21,-1
   11cf0:	00902474 	movhi	r2,16529
   11cf4:	1d6a703a 	and	r21,r3,r21
   11cf8:	10b2ffc4 	addi	r2,r2,-13313
   11cfc:	15409d0e 	bge	r2,r21,11f74 <__ieee754_pow+0x1020>
   11d00:	008fdbf4 	movhi	r2,16239
   11d04:	108d0004 	addi	r2,r2,13312
   11d08:	1885883a 	add	r2,r3,r2
   11d0c:	15c4b03a 	or	r2,r2,r23
   11d10:	10000b1e 	bne	r2,zero,11d40 <__ieee754_pow+0xdec>
   11d14:	900d883a 	mov	r6,r18
   11d18:	880f883a 	mov	r7,r17
   11d1c:	b809883a 	mov	r4,r23
   11d20:	180b883a 	mov	r5,r3
   11d24:	0014ed00 	call	14ed0 <__subdf3>
   11d28:	100d883a 	mov	r6,r2
   11d2c:	180f883a 	mov	r7,r3
   11d30:	b009883a 	mov	r4,r22
   11d34:	a00b883a 	mov	r5,r20
   11d38:	00145700 	call	14570 <__ledf2>
   11d3c:	00befc16 	blt	zero,r2,11930 <_gp+0xfffefe90>
   11d40:	01b0be74 	movhi	r6,49913
   11d44:	01c06974 	movhi	r7,421
   11d48:	980b883a 	mov	r5,r19
   11d4c:	31bcd644 	addi	r6,r6,-3239
   11d50:	39db87c4 	addi	r7,r7,28191
   11d54:	0009883a 	mov	r4,zero
   11d58:	00146640 	call	14664 <__muldf3>
   11d5c:	01b0be74 	movhi	r6,49913
   11d60:	01c06974 	movhi	r7,421
   11d64:	31bcd644 	addi	r6,r6,-3239
   11d68:	39db87c4 	addi	r7,r7,28191
   11d6c:	1009883a 	mov	r4,r2
   11d70:	180b883a 	mov	r5,r3
   11d74:	00146640 	call	14664 <__muldf3>
   11d78:	003cb206 	br	11044 <_gp+0xfffef5a4>
   11d7c:	04effc34 	movhi	r19,49136
   11d80:	003ea706 	br	11820 <_gp+0xfffefd80>
   11d84:	e03cdc0e 	bge	fp,zero,110f8 <_gp+0xfffef658>
   11d88:	0005883a 	mov	r2,zero
   11d8c:	e0e0003c 	xorhi	r3,fp,32768
   11d90:	003cac06 	br	11044 <_gp+0xfffef5a4>
   11d94:	0019883a 	mov	r12,zero
   11d98:	003d3206 	br	11264 <_gp+0xfffef7c4>
   11d9c:	008ffc34 	movhi	r2,16368
   11da0:	10bfff84 	addi	r2,r2,-2
   11da4:	147cd30e 	bge	r2,r17,110f4 <_gp+0xfffef654>
   11da8:	01cffc34 	movhi	r7,16368
   11dac:	3c7cea16 	blt	r7,r17,11158 <_gp+0xfffef6b8>
   11db0:	b809883a 	mov	r4,r23
   11db4:	000d883a 	mov	r6,zero
   11db8:	180b883a 	mov	r5,r3
   11dbc:	dac00b15 	stw	r11,44(sp)
   11dc0:	0014ed00 	call	14ed0 <__subdf3>
   11dc4:	01cffdf4 	movhi	r7,16375
   11dc8:	39c551c4 	addi	r7,r7,5447
   11dcc:	01980034 	movhi	r6,24576
   11dd0:	1009883a 	mov	r4,r2
   11dd4:	180b883a 	mov	r5,r3
   11dd8:	1023883a 	mov	r17,r2
   11ddc:	1821883a 	mov	r16,r3
   11de0:	00146640 	call	14664 <__muldf3>
   11de4:	01be17b4 	movhi	r6,63582
   11de8:	01cf9574 	movhi	r7,15957
   11dec:	8809883a 	mov	r4,r17
   11df0:	800b883a 	mov	r5,r16
   11df4:	31b7d104 	addi	r6,r6,-8380
   11df8:	39eb82c4 	addi	r7,r7,-20981
   11dfc:	1027883a 	mov	r19,r2
   11e00:	1825883a 	mov	r18,r3
   11e04:	00146640 	call	14664 <__muldf3>
   11e08:	8809883a 	mov	r4,r17
   11e0c:	800b883a 	mov	r5,r16
   11e10:	000d883a 	mov	r6,zero
   11e14:	01cff434 	movhi	r7,16336
   11e18:	1829883a 	mov	r20,r3
   11e1c:	d8800a15 	stw	r2,40(sp)
   11e20:	00146640 	call	14664 <__muldf3>
   11e24:	01155574 	movhi	r4,21845
   11e28:	014ff574 	movhi	r5,16341
   11e2c:	100d883a 	mov	r6,r2
   11e30:	180f883a 	mov	r7,r3
   11e34:	21155544 	addi	r4,r4,21845
   11e38:	29555544 	addi	r5,r5,21845
   11e3c:	0014ed00 	call	14ed0 <__subdf3>
   11e40:	880d883a 	mov	r6,r17
   11e44:	800f883a 	mov	r7,r16
   11e48:	1009883a 	mov	r4,r2
   11e4c:	180b883a 	mov	r5,r3
   11e50:	00146640 	call	14664 <__muldf3>
   11e54:	100d883a 	mov	r6,r2
   11e58:	180f883a 	mov	r7,r3
   11e5c:	0009883a 	mov	r4,zero
   11e60:	014ff834 	movhi	r5,16352
   11e64:	0014ed00 	call	14ed0 <__subdf3>
   11e68:	880d883a 	mov	r6,r17
   11e6c:	800f883a 	mov	r7,r16
   11e70:	8809883a 	mov	r4,r17
   11e74:	800b883a 	mov	r5,r16
   11e78:	102f883a 	mov	r23,r2
   11e7c:	d8c00815 	stw	r3,32(sp)
   11e80:	00146640 	call	14664 <__muldf3>
   11e84:	da400817 	ldw	r9,32(sp)
   11e88:	100d883a 	mov	r6,r2
   11e8c:	180f883a 	mov	r7,r3
   11e90:	480b883a 	mov	r5,r9
   11e94:	b809883a 	mov	r4,r23
   11e98:	00146640 	call	14664 <__muldf3>
   11e9c:	01994b34 	movhi	r6,25900
   11ea0:	01cffdf4 	movhi	r7,16375
   11ea4:	31a0bf84 	addi	r6,r6,-32002
   11ea8:	39c551c4 	addi	r7,r7,5447
   11eac:	1009883a 	mov	r4,r2
   11eb0:	180b883a 	mov	r5,r3
   11eb4:	00146640 	call	14664 <__muldf3>
   11eb8:	da000a17 	ldw	r8,40(sp)
   11ebc:	a00b883a 	mov	r5,r20
   11ec0:	100d883a 	mov	r6,r2
   11ec4:	4009883a 	mov	r4,r8
   11ec8:	180f883a 	mov	r7,r3
   11ecc:	0014ed00 	call	14ed0 <__subdf3>
   11ed0:	100d883a 	mov	r6,r2
   11ed4:	180f883a 	mov	r7,r3
   11ed8:	9809883a 	mov	r4,r19
   11edc:	900b883a 	mov	r5,r18
   11ee0:	1029883a 	mov	r20,r2
   11ee4:	1823883a 	mov	r17,r3
   11ee8:	00131900 	call	13190 <__adddf3>
   11eec:	1821883a 	mov	r16,r3
   11ef0:	980d883a 	mov	r6,r19
   11ef4:	900f883a 	mov	r7,r18
   11ef8:	0009883a 	mov	r4,zero
   11efc:	180b883a 	mov	r5,r3
   11f00:	003e3a06 	br	117ec <_gp+0xfffefd4c>
   11f04:	800d883a 	mov	r6,r16
   11f08:	980f883a 	mov	r7,r19
   11f0c:	0009883a 	mov	r4,zero
   11f10:	900b883a 	mov	r5,r18
   11f14:	0013a3c0 	call	13a3c <__divdf3>
   11f18:	003c4a06 	br	11044 <_gp+0xfffef5a4>
   11f1c:	01a20034 	movhi	r6,34816
   11f20:	01df8e34 	movhi	r7,32312
   11f24:	980b883a 	mov	r5,r19
   11f28:	319d6704 	addi	r6,r6,30108
   11f2c:	39f90f04 	addi	r7,r7,-7108
   11f30:	0009883a 	mov	r4,zero
   11f34:	00146640 	call	14664 <__muldf3>
   11f38:	01a20034 	movhi	r6,34816
   11f3c:	01df8e34 	movhi	r7,32312
   11f40:	319d6704 	addi	r6,r6,30108
   11f44:	39f90f04 	addi	r7,r7,-7108
   11f48:	1009883a 	mov	r4,r2
   11f4c:	180b883a 	mov	r5,r3
   11f50:	00146640 	call	14664 <__muldf3>
   11f54:	003c3b06 	br	11044 <_gp+0xfffef5a4>
   11f58:	303c551e 	bne	r6,zero,110b0 <_gp+0xfffef610>
   11f5c:	1885c83a 	sub	r2,r3,r2
   11f60:	9087d83a 	sra	r3,r18,r2
   11f64:	1884983a 	sll	r2,r3,r2
   11f68:	90801f26 	beq	r18,r2,11fe8 <__ieee754_pow+0x1094>
   11f6c:	002b883a 	mov	r21,zero
   11f70:	003c1806 	br	10fd4 <_gp+0xfffef534>
   11f74:	008ff834 	movhi	r2,16352
   11f78:	157e6d16 	blt	r2,r21,11930 <_gp+0xfffefe90>
   11f7c:	d8000215 	stw	zero,8(sp)
   11f80:	d8000015 	stw	zero,0(sp)
   11f84:	003e8f06 	br	119c4 <_gp+0xfffeff24>
   11f88:	b80d883a 	mov	r6,r23
   11f8c:	180f883a 	mov	r7,r3
   11f90:	003c9e06 	br	1120c <_gp+0xfffef76c>
   11f94:	008ff8f4 	movhi	r2,16355
   11f98:	10ae00c4 	addi	r2,r2,-18429
   11f9c:	0250f434 	movhi	r9,17360
   11fa0:	020f9374 	movhi	r8,15949
   11fa4:	d8800215 	stw	r2,8(sp)
   11fa8:	4a740184 	addi	r9,r9,-12282
   11fac:	423f7ac4 	addi	r8,r8,-533
   11fb0:	04d00034 	movhi	r19,16384
   11fb4:	02800134 	movhi	r10,4
   11fb8:	048ffe34 	movhi	r18,16376
   11fbc:	003cbf06 	br	112bc <_gp+0xfffef81c>
   11fc0:	00c9c83a 	sub	r4,zero,r3
   11fc4:	d9000015 	stw	r4,0(sp)
   11fc8:	003e6d06 	br	11980 <_gp+0xfffefee0>
   11fcc:	d9800017 	ldw	r6,0(sp)
   11fd0:	1009883a 	mov	r4,r2
   11fd4:	180b883a 	mov	r5,r3
   11fd8:	00125240 	call	12524 <scalbn>
   11fdc:	1009883a 	mov	r4,r2
   11fe0:	180b883a 	mov	r5,r3
   11fe4:	003f2d06 	br	11c9c <_gp+0xffff01fc>
   11fe8:	18c0004c 	andi	r3,r3,1
   11fec:	02800084 	movi	r10,2
   11ff0:	50ebc83a 	sub	r21,r10,r3
   11ff4:	003bf706 	br	10fd4 <_gp+0xfffef534>

00011ff8 <__ieee754_sqrt>:
   11ff8:	defffd04 	addi	sp,sp,-12
   11ffc:	dc400115 	stw	r17,4(sp)
   12000:	dc000015 	stw	r16,0(sp)
   12004:	dfc00215 	stw	ra,8(sp)
   12008:	28dffc2c 	andhi	r3,r5,32752
   1200c:	009ffc34 	movhi	r2,32752
   12010:	2821883a 	mov	r16,r5
   12014:	2023883a 	mov	r17,r4
   12018:	200d883a 	mov	r6,r4
   1201c:	18807b26 	beq	r3,r2,1220c <__ieee754_sqrt+0x214>
   12020:	01405f0e 	bge	zero,r5,121a0 <__ieee754_sqrt+0x1a8>
   12024:	2815d53a 	srai	r10,r5,20
   12028:	50006a26 	beq	r10,zero,121d4 <__ieee754_sqrt+0x1dc>
   1202c:	00c00434 	movhi	r3,16
   12030:	52bf0044 	addi	r10,r10,-1023
   12034:	18ffffc4 	addi	r3,r3,-1
   12038:	80c6703a 	and	r3,r16,r3
   1203c:	5080004c 	andi	r2,r10,1
   12040:	18c00434 	orhi	r3,r3,16
   12044:	1000511e 	bne	r2,zero,1218c <__ieee754_sqrt+0x194>
   12048:	3004d7fa 	srli	r2,r6,31
   1204c:	5015d07a 	srai	r10,r10,1
   12050:	18c7883a 	add	r3,r3,r3
   12054:	10c5883a 	add	r2,r2,r3
   12058:	01400584 	movi	r5,22
   1205c:	3187883a 	add	r3,r6,r6
   12060:	0013883a 	mov	r9,zero
   12064:	000f883a 	mov	r7,zero
   12068:	01000834 	movhi	r4,32
   1206c:	390d883a 	add	r6,r7,r4
   12070:	1810d7fa 	srli	r8,r3,31
   12074:	297fffc4 	addi	r5,r5,-1
   12078:	11800316 	blt	r2,r6,12088 <__ieee754_sqrt+0x90>
   1207c:	1185c83a 	sub	r2,r2,r6
   12080:	310f883a 	add	r7,r6,r4
   12084:	4913883a 	add	r9,r9,r4
   12088:	1085883a 	add	r2,r2,r2
   1208c:	4085883a 	add	r2,r8,r2
   12090:	18c7883a 	add	r3,r3,r3
   12094:	2008d07a 	srli	r4,r4,1
   12098:	283ff41e 	bne	r5,zero,1206c <_gp+0xffff05cc>
   1209c:	01200034 	movhi	r4,32768
   120a0:	01800804 	movi	r6,32
   120a4:	0011883a 	mov	r8,zero
   120a8:	0019883a 	mov	r12,zero
   120ac:	201b883a 	mov	r13,r4
   120b0:	00000806 	br	120d4 <__ieee754_sqrt+0xdc>
   120b4:	38801726 	beq	r7,r2,12114 <__ieee754_sqrt+0x11c>
   120b8:	180ad7fa 	srli	r5,r3,31
   120bc:	1085883a 	add	r2,r2,r2
   120c0:	31bfffc4 	addi	r6,r6,-1
   120c4:	2885883a 	add	r2,r5,r2
   120c8:	18c7883a 	add	r3,r3,r3
   120cc:	2008d07a 	srli	r4,r4,1
   120d0:	30001726 	beq	r6,zero,12130 <__ieee754_sqrt+0x138>
   120d4:	230b883a 	add	r5,r4,r12
   120d8:	38bff60e 	bge	r7,r2,120b4 <_gp+0xffff0614>
   120dc:	2ae0002c 	andhi	r11,r5,32768
   120e0:	2919883a 	add	r12,r5,r4
   120e4:	5b400826 	beq	r11,r13,12108 <__ieee754_sqrt+0x110>
   120e8:	3817883a 	mov	r11,r7
   120ec:	11c5c83a 	sub	r2,r2,r7
   120f0:	1940012e 	bgeu	r3,r5,120f8 <__ieee754_sqrt+0x100>
   120f4:	10bfffc4 	addi	r2,r2,-1
   120f8:	1947c83a 	sub	r3,r3,r5
   120fc:	4111883a 	add	r8,r8,r4
   12100:	580f883a 	mov	r7,r11
   12104:	003fec06 	br	120b8 <_gp+0xffff0618>
   12108:	603ff716 	blt	r12,zero,120e8 <_gp+0xffff0648>
   1210c:	3ac00044 	addi	r11,r7,1
   12110:	003ff606 	br	120ec <_gp+0xffff064c>
   12114:	19401936 	bltu	r3,r5,1217c <__ieee754_sqrt+0x184>
   12118:	2ae0002c 	andhi	r11,r5,32768
   1211c:	2919883a 	add	r12,r5,r4
   12120:	5b404526 	beq	r11,r13,12238 <__ieee754_sqrt+0x240>
   12124:	1017883a 	mov	r11,r2
   12128:	0005883a 	mov	r2,zero
   1212c:	003ff206 	br	120f8 <_gp+0xffff0658>
   12130:	10c4b03a 	or	r2,r2,r3
   12134:	10000426 	beq	r2,zero,12148 <__ieee754_sqrt+0x150>
   12138:	00bfffc4 	movi	r2,-1
   1213c:	40804026 	beq	r8,r2,12240 <__ieee754_sqrt+0x248>
   12140:	4080004c 	andi	r2,r8,1
   12144:	4091883a 	add	r8,r8,r2
   12148:	4004d07a 	srli	r2,r8,1
   1214c:	4807d07a 	srai	r3,r9,1
   12150:	010ff834 	movhi	r4,16352
   12154:	4a40004c 	andi	r9,r9,1
   12158:	1909883a 	add	r4,r3,r4
   1215c:	4800091e 	bne	r9,zero,12184 <__ieee754_sqrt+0x18c>
   12160:	5006953a 	slli	r3,r10,20
   12164:	1907883a 	add	r3,r3,r4
   12168:	dfc00217 	ldw	ra,8(sp)
   1216c:	dc400117 	ldw	r17,4(sp)
   12170:	dc000017 	ldw	r16,0(sp)
   12174:	dec00304 	addi	sp,sp,12
   12178:	f800283a 	ret
   1217c:	3805883a 	mov	r2,r7
   12180:	003fcd06 	br	120b8 <_gp+0xffff0618>
   12184:	10a00034 	orhi	r2,r2,32768
   12188:	003ff506 	br	12160 <_gp+0xffff06c0>
   1218c:	3004d7fa 	srli	r2,r6,31
   12190:	18c7883a 	add	r3,r3,r3
   12194:	318d883a 	add	r6,r6,r6
   12198:	10c7883a 	add	r3,r2,r3
   1219c:	003faa06 	br	12048 <_gp+0xffff05a8>
   121a0:	00a00034 	movhi	r2,32768
   121a4:	10bfffc4 	addi	r2,r2,-1
   121a8:	2884703a 	and	r2,r5,r2
   121ac:	1104b03a 	or	r2,r2,r4
   121b0:	10001e26 	beq	r2,zero,1222c <__ieee754_sqrt+0x234>
   121b4:	2800291e 	bne	r5,zero,1225c <__ieee754_sqrt+0x264>
   121b8:	0015883a 	mov	r10,zero
   121bc:	3020d2fa 	srli	r16,r6,11
   121c0:	52bffac4 	addi	r10,r10,-21
   121c4:	300c957a 	slli	r6,r6,21
   121c8:	803ffc26 	beq	r16,zero,121bc <_gp+0xffff071c>
   121cc:	8080042c 	andhi	r2,r16,16
   121d0:	10001e1e 	bne	r2,zero,1224c <__ieee754_sqrt+0x254>
   121d4:	0005883a 	mov	r2,zero
   121d8:	00000106 	br	121e0 <__ieee754_sqrt+0x1e8>
   121dc:	1805883a 	mov	r2,r3
   121e0:	8421883a 	add	r16,r16,r16
   121e4:	8100042c 	andhi	r4,r16,16
   121e8:	10c00044 	addi	r3,r2,1
   121ec:	203ffb26 	beq	r4,zero,121dc <_gp+0xffff073c>
   121f0:	01000804 	movi	r4,32
   121f4:	20c9c83a 	sub	r4,r4,r3
   121f8:	3108d83a 	srl	r4,r6,r4
   121fc:	5095c83a 	sub	r10,r10,r2
   12200:	30cc983a 	sll	r6,r6,r3
   12204:	2420b03a 	or	r16,r4,r16
   12208:	003f8806 	br	1202c <_gp+0xffff058c>
   1220c:	280f883a 	mov	r7,r5
   12210:	00146640 	call	14664 <__muldf3>
   12214:	880d883a 	mov	r6,r17
   12218:	800f883a 	mov	r7,r16
   1221c:	1009883a 	mov	r4,r2
   12220:	180b883a 	mov	r5,r3
   12224:	00131900 	call	13190 <__adddf3>
   12228:	003fcf06 	br	12168 <_gp+0xffff06c8>
   1222c:	2005883a 	mov	r2,r4
   12230:	2807883a 	mov	r3,r5
   12234:	003fcc06 	br	12168 <_gp+0xffff06c8>
   12238:	603fba16 	blt	r12,zero,12124 <_gp+0xffff0684>
   1223c:	003fb306 	br	1210c <_gp+0xffff066c>
   12240:	4a400044 	addi	r9,r9,1
   12244:	0005883a 	mov	r2,zero
   12248:	003fc006 	br	1214c <_gp+0xffff06ac>
   1224c:	01000804 	movi	r4,32
   12250:	00bfffc4 	movi	r2,-1
   12254:	0007883a 	mov	r3,zero
   12258:	003fe706 	br	121f8 <_gp+0xffff0758>
   1225c:	200d883a 	mov	r6,r4
   12260:	280f883a 	mov	r7,r5
   12264:	0014ed00 	call	14ed0 <__subdf3>
   12268:	100d883a 	mov	r6,r2
   1226c:	180f883a 	mov	r7,r3
   12270:	1009883a 	mov	r4,r2
   12274:	180b883a 	mov	r5,r3
   12278:	0013a3c0 	call	13a3c <__divdf3>
   1227c:	003fba06 	br	12168 <_gp+0xffff06c8>

00012280 <fabs>:
   12280:	00e00034 	movhi	r3,32768
   12284:	18ffffc4 	addi	r3,r3,-1
   12288:	2005883a 	mov	r2,r4
   1228c:	28c6703a 	and	r3,r5,r3
   12290:	f800283a 	ret

00012294 <finite>:
   12294:	00a00034 	movhi	r2,32768
   12298:	10bfffc4 	addi	r2,r2,-1
   1229c:	288a703a 	and	r5,r5,r2
   122a0:	00e00434 	movhi	r3,32784
   122a4:	28c5883a 	add	r2,r5,r3
   122a8:	1004d7fa 	srli	r2,r2,31
   122ac:	f800283a 	ret

000122b0 <__fpclassifyd>:
   122b0:	00a00034 	movhi	r2,32768
   122b4:	10bfffc4 	addi	r2,r2,-1
   122b8:	2884703a 	and	r2,r5,r2
   122bc:	10000726 	beq	r2,zero,122dc <__fpclassifyd+0x2c>
   122c0:	00fffc34 	movhi	r3,65520
   122c4:	019ff834 	movhi	r6,32736
   122c8:	28c7883a 	add	r3,r5,r3
   122cc:	31bfffc4 	addi	r6,r6,-1
   122d0:	30c00536 	bltu	r6,r3,122e8 <__fpclassifyd+0x38>
   122d4:	00800104 	movi	r2,4
   122d8:	f800283a 	ret
   122dc:	2000021e 	bne	r4,zero,122e8 <__fpclassifyd+0x38>
   122e0:	00800084 	movi	r2,2
   122e4:	f800283a 	ret
   122e8:	00dffc34 	movhi	r3,32752
   122ec:	019ff834 	movhi	r6,32736
   122f0:	28cb883a 	add	r5,r5,r3
   122f4:	31bfffc4 	addi	r6,r6,-1
   122f8:	317ff62e 	bgeu	r6,r5,122d4 <_gp+0xffff0834>
   122fc:	01400434 	movhi	r5,16
   12300:	297fffc4 	addi	r5,r5,-1
   12304:	28800236 	bltu	r5,r2,12310 <__fpclassifyd+0x60>
   12308:	008000c4 	movi	r2,3
   1230c:	f800283a 	ret
   12310:	10c00226 	beq	r2,r3,1231c <__fpclassifyd+0x6c>
   12314:	0005883a 	mov	r2,zero
   12318:	f800283a 	ret
   1231c:	2005003a 	cmpeq	r2,r4,zero
   12320:	f800283a 	ret

00012324 <matherr>:
   12324:	0005883a 	mov	r2,zero
   12328:	f800283a 	ret

0001232c <nan>:
   1232c:	0005883a 	mov	r2,zero
   12330:	00dffe34 	movhi	r3,32760
   12334:	f800283a 	ret

00012338 <rint>:
   12338:	2813d53a 	srai	r9,r5,20
   1233c:	defff904 	addi	sp,sp,-28
   12340:	dc000215 	stw	r16,8(sp)
   12344:	4a41ffcc 	andi	r9,r9,2047
   12348:	dfc00615 	stw	ra,24(sp)
   1234c:	dcc00515 	stw	r19,20(sp)
   12350:	dc800415 	stw	r18,16(sp)
   12354:	dc400315 	stw	r17,12(sp)
   12358:	01c004c4 	movi	r7,19
   1235c:	49bf0044 	addi	r6,r9,-1023
   12360:	2811883a 	mov	r8,r5
   12364:	2005883a 	mov	r2,r4
   12368:	2807883a 	mov	r3,r5
   1236c:	2015883a 	mov	r10,r4
   12370:	2820d7fa 	srli	r16,r5,31
   12374:	39801316 	blt	r7,r6,123c4 <rint+0x8c>
   12378:	30003d16 	blt	r6,zero,12470 <rint+0x138>
   1237c:	01000434 	movhi	r4,16
   12380:	213fffc4 	addi	r4,r4,-1
   12384:	2189d83a 	sra	r4,r4,r6
   12388:	290a703a 	and	r5,r5,r4
   1238c:	288ab03a 	or	r5,r5,r2
   12390:	28001026 	beq	r5,zero,123d4 <rint+0x9c>
   12394:	2008d07a 	srli	r4,r4,1
   12398:	4104703a 	and	r2,r8,r4
   1239c:	1294b03a 	or	r10,r2,r10
   123a0:	50005626 	beq	r10,zero,124fc <rint+0x1c4>
   123a4:	31c05d26 	beq	r6,r7,1251c <rint+0x1e4>
   123a8:	0015883a 	mov	r10,zero
   123ac:	00c00134 	movhi	r3,4
   123b0:	1987d83a 	sra	r3,r3,r6
   123b4:	0108303a 	nor	r4,zero,r4
   123b8:	2210703a 	and	r8,r4,r8
   123bc:	40c6b03a 	or	r3,r8,r3
   123c0:	00001806 	br	12424 <rint+0xec>
   123c4:	01c00cc4 	movi	r7,51
   123c8:	3980090e 	bge	r7,r6,123f0 <rint+0xb8>
   123cc:	01c10004 	movi	r7,1024
   123d0:	31c04e26 	beq	r6,r7,1250c <rint+0x1d4>
   123d4:	dfc00617 	ldw	ra,24(sp)
   123d8:	dcc00517 	ldw	r19,20(sp)
   123dc:	dc800417 	ldw	r18,16(sp)
   123e0:	dc400317 	ldw	r17,12(sp)
   123e4:	dc000217 	ldw	r16,8(sp)
   123e8:	dec00704 	addi	sp,sp,28
   123ec:	f800283a 	ret
   123f0:	4a7efb44 	addi	r9,r9,-1043
   123f4:	013fffc4 	movi	r4,-1
   123f8:	2248d83a 	srl	r4,r4,r9
   123fc:	110a703a 	and	r5,r2,r4
   12400:	28004026 	beq	r5,zero,12504 <rint+0x1cc>
   12404:	2008d07a 	srli	r4,r4,1
   12408:	1104703a 	and	r2,r2,r4
   1240c:	10000526 	beq	r2,zero,12424 <rint+0xec>
   12410:	00900034 	movhi	r2,16384
   12414:	1253d83a 	sra	r9,r2,r9
   12418:	0108303a 	nor	r4,zero,r4
   1241c:	2294703a 	and	r10,r4,r10
   12420:	4a94b03a 	or	r10,r9,r10
   12424:	802090fa 	slli	r16,r16,3
   12428:	180b883a 	mov	r5,r3
   1242c:	00c000b4 	movhi	r3,2
   12430:	18e0bc04 	addi	r3,r3,-32016
   12434:	1c21883a 	add	r16,r3,r16
   12438:	84400017 	ldw	r17,0(r16)
   1243c:	84000117 	ldw	r16,4(r16)
   12440:	5009883a 	mov	r4,r10
   12444:	880d883a 	mov	r6,r17
   12448:	800f883a 	mov	r7,r16
   1244c:	00131900 	call	13190 <__adddf3>
   12450:	d8800015 	stw	r2,0(sp)
   12454:	d8c00115 	stw	r3,4(sp)
   12458:	d9000017 	ldw	r4,0(sp)
   1245c:	d9400117 	ldw	r5,4(sp)
   12460:	880d883a 	mov	r6,r17
   12464:	800f883a 	mov	r7,r16
   12468:	0014ed00 	call	14ed0 <__subdf3>
   1246c:	003fd906 	br	123d4 <_gp+0xffff0934>
   12470:	04600034 	movhi	r17,32768
   12474:	8c7fffc4 	addi	r17,r17,-1
   12478:	2c46703a 	and	r3,r5,r17
   1247c:	1906b03a 	or	r3,r3,r4
   12480:	18002026 	beq	r3,zero,12504 <rint+0x1cc>
   12484:	01800434 	movhi	r6,16
   12488:	31bfffc4 	addi	r6,r6,-1
   1248c:	298c703a 	and	r6,r5,r6
   12490:	3104b03a 	or	r2,r6,r4
   12494:	008bc83a 	sub	r5,zero,r2
   12498:	800690fa 	slli	r3,r16,3
   1249c:	2884b03a 	or	r2,r5,r2
   124a0:	014000b4 	movhi	r5,2
   124a4:	2960bc04 	addi	r5,r5,-32016
   124a8:	28c7883a 	add	r3,r5,r3
   124ac:	1004d33a 	srli	r2,r2,12
   124b0:	1cc00017 	ldw	r19,0(r3)
   124b4:	1c800117 	ldw	r18,4(r3)
   124b8:	417fffac 	andhi	r5,r8,65534
   124bc:	1080022c 	andhi	r2,r2,8
   124c0:	980d883a 	mov	r6,r19
   124c4:	900f883a 	mov	r7,r18
   124c8:	114ab03a 	or	r5,r2,r5
   124cc:	00131900 	call	13190 <__adddf3>
   124d0:	d8800015 	stw	r2,0(sp)
   124d4:	d8c00115 	stw	r3,4(sp)
   124d8:	d9000017 	ldw	r4,0(sp)
   124dc:	d9400117 	ldw	r5,4(sp)
   124e0:	980d883a 	mov	r6,r19
   124e4:	900f883a 	mov	r7,r18
   124e8:	0014ed00 	call	14ed0 <__subdf3>
   124ec:	800897fa 	slli	r4,r16,31
   124f0:	1c46703a 	and	r3,r3,r17
   124f4:	1906b03a 	or	r3,r3,r4
   124f8:	003fb606 	br	123d4 <_gp+0xffff0934>
   124fc:	0015883a 	mov	r10,zero
   12500:	003fc806 	br	12424 <_gp+0xffff0984>
   12504:	4007883a 	mov	r3,r8
   12508:	003fb206 	br	123d4 <_gp+0xffff0934>
   1250c:	200d883a 	mov	r6,r4
   12510:	280f883a 	mov	r7,r5
   12514:	00131900 	call	13190 <__adddf3>
   12518:	003fae06 	br	123d4 <_gp+0xffff0934>
   1251c:	02a00034 	movhi	r10,32768
   12520:	003fa206 	br	123ac <_gp+0xffff090c>

00012524 <scalbn>:
   12524:	2a1ffc2c 	andhi	r8,r5,32752
   12528:	4011d53a 	srai	r8,r8,20
   1252c:	defffe04 	addi	sp,sp,-8
   12530:	dc000015 	stw	r16,0(sp)
   12534:	dfc00115 	stw	ra,4(sp)
   12538:	280f883a 	mov	r7,r5
   1253c:	2015883a 	mov	r10,r4
   12540:	3021883a 	mov	r16,r6
   12544:	40001e1e 	bne	r8,zero,125c0 <scalbn+0x9c>
   12548:	00a00034 	movhi	r2,32768
   1254c:	10bfffc4 	addi	r2,r2,-1
   12550:	2884703a 	and	r2,r5,r2
   12554:	1104b03a 	or	r2,r2,r4
   12558:	10002226 	beq	r2,zero,125e4 <scalbn+0xc0>
   1255c:	01d0d434 	movhi	r7,17232
   12560:	000d883a 	mov	r6,zero
   12564:	00146640 	call	14664 <__muldf3>
   12568:	013ffff4 	movhi	r4,65535
   1256c:	210f2c04 	addi	r4,r4,15536
   12570:	1015883a 	mov	r10,r2
   12574:	180f883a 	mov	r7,r3
   12578:	81002a16 	blt	r16,r4,12624 <scalbn+0x100>
   1257c:	191ffc2c 	andhi	r4,r3,32752
   12580:	2009d53a 	srai	r4,r4,20
   12584:	223ff284 	addi	r8,r4,-54
   12588:	8211883a 	add	r8,r16,r8
   1258c:	0081ff84 	movi	r2,2046
   12590:	12002f16 	blt	r2,r8,12650 <scalbn+0x12c>
   12594:	0200190e 	bge	zero,r8,125fc <scalbn+0xd8>
   12598:	4010953a 	slli	r8,r8,20
   1259c:	01600434 	movhi	r5,32784
   125a0:	297fffc4 	addi	r5,r5,-1
   125a4:	194e703a 	and	r7,r3,r5
   125a8:	5005883a 	mov	r2,r10
   125ac:	3a06b03a 	or	r3,r7,r8
   125b0:	dfc00117 	ldw	ra,4(sp)
   125b4:	dc000017 	ldw	r16,0(sp)
   125b8:	dec00204 	addi	sp,sp,8
   125bc:	f800283a 	ret
   125c0:	0081ffc4 	movi	r2,2047
   125c4:	2807883a 	mov	r3,r5
   125c8:	40bfef1e 	bne	r8,r2,12588 <_gp+0xffff0ae8>
   125cc:	200d883a 	mov	r6,r4
   125d0:	00131900 	call	13190 <__adddf3>
   125d4:	dfc00117 	ldw	ra,4(sp)
   125d8:	dc000017 	ldw	r16,0(sp)
   125dc:	dec00204 	addi	sp,sp,8
   125e0:	f800283a 	ret
   125e4:	2005883a 	mov	r2,r4
   125e8:	2807883a 	mov	r3,r5
   125ec:	dfc00117 	ldw	ra,4(sp)
   125f0:	dc000017 	ldw	r16,0(sp)
   125f4:	dec00204 	addi	sp,sp,8
   125f8:	f800283a 	ret
   125fc:	00bff2c4 	movi	r2,-53
   12600:	4080240e 	bge	r8,r2,12694 <scalbn+0x170>
   12604:	00b0d414 	movui	r2,50000
   12608:	14001116 	blt	r2,r16,12650 <scalbn+0x12c>
   1260c:	0130be74 	movhi	r4,49913
   12610:	01406974 	movhi	r5,421
   12614:	213cd644 	addi	r4,r4,-3239
   12618:	295b87c4 	addi	r5,r5,28191
   1261c:	500d883a 	mov	r6,r10
   12620:	00126c00 	call	126c0 <copysign>
   12624:	01b0be74 	movhi	r6,49913
   12628:	01c06974 	movhi	r7,421
   1262c:	31bcd644 	addi	r6,r6,-3239
   12630:	39db87c4 	addi	r7,r7,28191
   12634:	1009883a 	mov	r4,r2
   12638:	180b883a 	mov	r5,r3
   1263c:	00146640 	call	14664 <__muldf3>
   12640:	dfc00117 	ldw	ra,4(sp)
   12644:	dc000017 	ldw	r16,0(sp)
   12648:	dec00204 	addi	sp,sp,8
   1264c:	f800283a 	ret
   12650:	01220034 	movhi	r4,34816
   12654:	015f8e34 	movhi	r5,32312
   12658:	500d883a 	mov	r6,r10
   1265c:	211d6704 	addi	r4,r4,30108
   12660:	29790f04 	addi	r5,r5,-7108
   12664:	00126c00 	call	126c0 <copysign>
   12668:	01a20034 	movhi	r6,34816
   1266c:	01df8e34 	movhi	r7,32312
   12670:	319d6704 	addi	r6,r6,30108
   12674:	39f90f04 	addi	r7,r7,-7108
   12678:	1009883a 	mov	r4,r2
   1267c:	180b883a 	mov	r5,r3
   12680:	00146640 	call	14664 <__muldf3>
   12684:	dfc00117 	ldw	ra,4(sp)
   12688:	dc000017 	ldw	r16,0(sp)
   1268c:	dec00204 	addi	sp,sp,8
   12690:	f800283a 	ret
   12694:	42000d84 	addi	r8,r8,54
   12698:	4012953a 	slli	r9,r8,20
   1269c:	01e00434 	movhi	r7,32784
   126a0:	39ffffc4 	addi	r7,r7,-1
   126a4:	19ca703a 	and	r5,r3,r7
   126a8:	000d883a 	mov	r6,zero
   126ac:	01cf2434 	movhi	r7,15504
   126b0:	5009883a 	mov	r4,r10
   126b4:	494ab03a 	or	r5,r9,r5
   126b8:	00146640 	call	14664 <__muldf3>
   126bc:	003fbc06 	br	125b0 <_gp+0xffff0b10>

000126c0 <copysign>:
   126c0:	2005883a 	mov	r2,r4
   126c4:	01200034 	movhi	r4,32768
   126c8:	213fffc4 	addi	r4,r4,-1
   126cc:	38e0002c 	andhi	r3,r7,32768
   126d0:	290a703a 	and	r5,r5,r4
   126d4:	28c6b03a 	or	r3,r5,r3
   126d8:	f800283a 	ret

000126dc <__mulsi3>:
   126dc:	0005883a 	mov	r2,zero
   126e0:	20000726 	beq	r4,zero,12700 <__mulsi3+0x24>
   126e4:	20c0004c 	andi	r3,r4,1
   126e8:	2008d07a 	srli	r4,r4,1
   126ec:	18000126 	beq	r3,zero,126f4 <__mulsi3+0x18>
   126f0:	1145883a 	add	r2,r2,r5
   126f4:	294b883a 	add	r5,r5,r5
   126f8:	203ffa1e 	bne	r4,zero,126e4 <_gp+0xffff0c44>
   126fc:	f800283a 	ret
   12700:	f800283a 	ret

00012704 <__addsf3>:
   12704:	defffc04 	addi	sp,sp,-16
   12708:	2004d7fa 	srli	r2,r4,31
   1270c:	280cd5fa 	srli	r6,r5,23
   12710:	dc000015 	stw	r16,0(sp)
   12714:	00c02034 	movhi	r3,128
   12718:	2020d5fa 	srli	r16,r4,23
   1271c:	280ed7fa 	srli	r7,r5,31
   12720:	18ffffc4 	addi	r3,r3,-1
   12724:	dc400115 	stw	r17,4(sp)
   12728:	1908703a 	and	r4,r3,r4
   1272c:	194a703a 	and	r5,r3,r5
   12730:	dfc00315 	stw	ra,12(sp)
   12734:	dc800215 	stw	r18,8(sp)
   12738:	14403fcc 	andi	r17,r2,255
   1273c:	84003fcc 	andi	r16,r16,255
   12740:	200890fa 	slli	r4,r4,3
   12744:	31803fcc 	andi	r6,r6,255
   12748:	280a90fa 	slli	r5,r5,3
   1274c:	89c05026 	beq	r17,r7,12890 <__addsf3+0x18c>
   12750:	8185c83a 	sub	r2,r16,r6
   12754:	00807a0e 	bge	zero,r2,12940 <__addsf3+0x23c>
   12758:	30001e1e 	bne	r6,zero,127d4 <__addsf3+0xd0>
   1275c:	28006d1e 	bne	r5,zero,12914 <__addsf3+0x210>
   12760:	208001cc 	andi	r2,r4,7
   12764:	10000426 	beq	r2,zero,12778 <__addsf3+0x74>
   12768:	208003cc 	andi	r2,r4,15
   1276c:	00c00104 	movi	r3,4
   12770:	10c00126 	beq	r2,r3,12778 <__addsf3+0x74>
   12774:	20c9883a 	add	r4,r4,r3
   12778:	2081002c 	andhi	r2,r4,1024
   1277c:	10003926 	beq	r2,zero,12864 <__addsf3+0x160>
   12780:	84000044 	addi	r16,r16,1
   12784:	00803fc4 	movi	r2,255
   12788:	80807826 	beq	r16,r2,1296c <__addsf3+0x268>
   1278c:	200891ba 	slli	r4,r4,6
   12790:	8805883a 	mov	r2,r17
   12794:	2008d27a 	srli	r4,r4,9
   12798:	84003fcc 	andi	r16,r16,255
   1279c:	800695fa 	slli	r3,r16,23
   127a0:	10803fcc 	andi	r2,r2,255
   127a4:	04002034 	movhi	r16,128
   127a8:	843fffc4 	addi	r16,r16,-1
   127ac:	100497fa 	slli	r2,r2,31
   127b0:	2408703a 	and	r4,r4,r16
   127b4:	20e0b03a 	or	r16,r4,r3
   127b8:	8084b03a 	or	r2,r16,r2
   127bc:	dfc00317 	ldw	ra,12(sp)
   127c0:	dc800217 	ldw	r18,8(sp)
   127c4:	dc400117 	ldw	r17,4(sp)
   127c8:	dc000017 	ldw	r16,0(sp)
   127cc:	dec00404 	addi	sp,sp,16
   127d0:	f800283a 	ret
   127d4:	00c03fc4 	movi	r3,255
   127d8:	80ffe126 	beq	r16,r3,12760 <_gp+0xffff0cc0>
   127dc:	29410034 	orhi	r5,r5,1024
   127e0:	00c006c4 	movi	r3,27
   127e4:	18807516 	blt	r3,r2,129bc <__addsf3+0x2b8>
   127e8:	00c00804 	movi	r3,32
   127ec:	1887c83a 	sub	r3,r3,r2
   127f0:	28c6983a 	sll	r3,r5,r3
   127f4:	288ad83a 	srl	r5,r5,r2
   127f8:	1804c03a 	cmpne	r2,r3,zero
   127fc:	288ab03a 	or	r5,r5,r2
   12800:	2149c83a 	sub	r4,r4,r5
   12804:	2081002c 	andhi	r2,r4,1024
   12808:	10001426 	beq	r2,zero,1285c <__addsf3+0x158>
   1280c:	04810034 	movhi	r18,1024
   12810:	94bfffc4 	addi	r18,r18,-1
   12814:	24a4703a 	and	r18,r4,r18
   12818:	9009883a 	mov	r4,r18
   1281c:	0015a380 	call	15a38 <__clzsi2>
   12820:	10bffec4 	addi	r2,r2,-5
   12824:	90a4983a 	sll	r18,r18,r2
   12828:	14005416 	blt	r2,r16,1297c <__addsf3+0x278>
   1282c:	1405c83a 	sub	r2,r2,r16
   12830:	11000044 	addi	r4,r2,1
   12834:	00800804 	movi	r2,32
   12838:	1105c83a 	sub	r2,r2,r4
   1283c:	9084983a 	sll	r2,r18,r2
   12840:	9124d83a 	srl	r18,r18,r4
   12844:	0021883a 	mov	r16,zero
   12848:	1008c03a 	cmpne	r4,r2,zero
   1284c:	9108b03a 	or	r4,r18,r4
   12850:	003fc306 	br	12760 <_gp+0xffff0cc0>
   12854:	1000db26 	beq	r2,zero,12bc4 <__addsf3+0x4c0>
   12858:	1009883a 	mov	r4,r2
   1285c:	208001cc 	andi	r2,r4,7
   12860:	103fc11e 	bne	r2,zero,12768 <_gp+0xffff0cc8>
   12864:	2006d0fa 	srli	r3,r4,3
   12868:	01003fc4 	movi	r4,255
   1286c:	8805883a 	mov	r2,r17
   12870:	8100241e 	bne	r16,r4,12904 <__addsf3+0x200>
   12874:	18006e26 	beq	r3,zero,12a30 <__addsf3+0x32c>
   12878:	19001034 	orhi	r4,r3,64
   1287c:	00c02034 	movhi	r3,128
   12880:	18ffffc4 	addi	r3,r3,-1
   12884:	043fffc4 	movi	r16,-1
   12888:	20c8703a 	and	r4,r4,r3
   1288c:	003fc206 	br	12798 <_gp+0xffff0cf8>
   12890:	8187c83a 	sub	r3,r16,r6
   12894:	00c03e0e 	bge	zero,r3,12990 <__addsf3+0x28c>
   12898:	30002326 	beq	r6,zero,12928 <__addsf3+0x224>
   1289c:	01803fc4 	movi	r6,255
   128a0:	81bfaf26 	beq	r16,r6,12760 <_gp+0xffff0cc0>
   128a4:	29410034 	orhi	r5,r5,1024
   128a8:	018006c4 	movi	r6,27
   128ac:	30c07416 	blt	r6,r3,12a80 <__addsf3+0x37c>
   128b0:	01800804 	movi	r6,32
   128b4:	30cdc83a 	sub	r6,r6,r3
   128b8:	298c983a 	sll	r6,r5,r6
   128bc:	28cad83a 	srl	r5,r5,r3
   128c0:	3006c03a 	cmpne	r3,r6,zero
   128c4:	28cab03a 	or	r5,r5,r3
   128c8:	2149883a 	add	r4,r4,r5
   128cc:	20c1002c 	andhi	r3,r4,1024
   128d0:	183fe226 	beq	r3,zero,1285c <_gp+0xffff0dbc>
   128d4:	84000044 	addi	r16,r16,1
   128d8:	00c03fc4 	movi	r3,255
   128dc:	80c05426 	beq	r16,r3,12a30 <__addsf3+0x32c>
   128e0:	00bf0034 	movhi	r2,64512
   128e4:	10bfffc4 	addi	r2,r2,-1
   128e8:	20c0004c 	andi	r3,r4,1
   128ec:	2088703a 	and	r4,r4,r2
   128f0:	2008d07a 	srli	r4,r4,1
   128f4:	20c8b03a 	or	r4,r4,r3
   128f8:	003f9906 	br	12760 <_gp+0xffff0cc0>
   128fc:	0007883a 	mov	r3,zero
   12900:	0005883a 	mov	r2,zero
   12904:	01002034 	movhi	r4,128
   12908:	213fffc4 	addi	r4,r4,-1
   1290c:	1908703a 	and	r4,r3,r4
   12910:	003fa106 	br	12798 <_gp+0xffff0cf8>
   12914:	10bfffc4 	addi	r2,r2,-1
   12918:	103fb926 	beq	r2,zero,12800 <_gp+0xffff0d60>
   1291c:	00c03fc4 	movi	r3,255
   12920:	80ffaf1e 	bne	r16,r3,127e0 <_gp+0xffff0d40>
   12924:	003f8e06 	br	12760 <_gp+0xffff0cc0>
   12928:	283f8d26 	beq	r5,zero,12760 <_gp+0xffff0cc0>
   1292c:	18ffffc4 	addi	r3,r3,-1
   12930:	183fe526 	beq	r3,zero,128c8 <_gp+0xffff0e28>
   12934:	01803fc4 	movi	r6,255
   12938:	81bfdb1e 	bne	r16,r6,128a8 <_gp+0xffff0e08>
   1293c:	003f8806 	br	12760 <_gp+0xffff0cc0>
   12940:	1000201e 	bne	r2,zero,129c4 <__addsf3+0x2c0>
   12944:	80800044 	addi	r2,r16,1
   12948:	10803fcc 	andi	r2,r2,255
   1294c:	01800044 	movi	r6,1
   12950:	3080450e 	bge	r6,r2,12a68 <__addsf3+0x364>
   12954:	2165c83a 	sub	r18,r4,r5
   12958:	90c1002c 	andhi	r3,r18,1024
   1295c:	18002b26 	beq	r3,zero,12a0c <__addsf3+0x308>
   12960:	2925c83a 	sub	r18,r5,r4
   12964:	3823883a 	mov	r17,r7
   12968:	003fab06 	br	12818 <_gp+0xffff0d78>
   1296c:	8805883a 	mov	r2,r17
   12970:	043fffc4 	movi	r16,-1
   12974:	0009883a 	mov	r4,zero
   12978:	003f8706 	br	12798 <_gp+0xffff0cf8>
   1297c:	013f0034 	movhi	r4,64512
   12980:	213fffc4 	addi	r4,r4,-1
   12984:	80a1c83a 	sub	r16,r16,r2
   12988:	9108703a 	and	r4,r18,r4
   1298c:	003f7406 	br	12760 <_gp+0xffff0cc0>
   12990:	1800411e 	bne	r3,zero,12a98 <__addsf3+0x394>
   12994:	80c00044 	addi	r3,r16,1
   12998:	19c03fcc 	andi	r7,r3,255
   1299c:	01800044 	movi	r6,1
   129a0:	31c0260e 	bge	r6,r7,12a3c <__addsf3+0x338>
   129a4:	01803fc4 	movi	r6,255
   129a8:	19802126 	beq	r3,r6,12a30 <__addsf3+0x32c>
   129ac:	2149883a 	add	r4,r4,r5
   129b0:	2008d07a 	srli	r4,r4,1
   129b4:	1821883a 	mov	r16,r3
   129b8:	003f6906 	br	12760 <_gp+0xffff0cc0>
   129bc:	01400044 	movi	r5,1
   129c0:	003f8f06 	br	12800 <_gp+0xffff0d60>
   129c4:	8000151e 	bne	r16,zero,12a1c <__addsf3+0x318>
   129c8:	20002f26 	beq	r4,zero,12a88 <__addsf3+0x384>
   129cc:	0084303a 	nor	r2,zero,r2
   129d0:	10000a26 	beq	r2,zero,129fc <__addsf3+0x2f8>
   129d4:	00c03fc4 	movi	r3,255
   129d8:	30c02b26 	beq	r6,r3,12a88 <__addsf3+0x384>
   129dc:	00c006c4 	movi	r3,27
   129e0:	18806d16 	blt	r3,r2,12b98 <__addsf3+0x494>
   129e4:	00c00804 	movi	r3,32
   129e8:	1887c83a 	sub	r3,r3,r2
   129ec:	20c6983a 	sll	r3,r4,r3
   129f0:	2084d83a 	srl	r2,r4,r2
   129f4:	1808c03a 	cmpne	r4,r3,zero
   129f8:	1108b03a 	or	r4,r2,r4
   129fc:	2909c83a 	sub	r4,r5,r4
   12a00:	3021883a 	mov	r16,r6
   12a04:	3823883a 	mov	r17,r7
   12a08:	003f7e06 	br	12804 <_gp+0xffff0d64>
   12a0c:	903f821e 	bne	r18,zero,12818 <_gp+0xffff0d78>
   12a10:	0005883a 	mov	r2,zero
   12a14:	0021883a 	mov	r16,zero
   12a18:	003fba06 	br	12904 <_gp+0xffff0e64>
   12a1c:	00c03fc4 	movi	r3,255
   12a20:	30c01926 	beq	r6,r3,12a88 <__addsf3+0x384>
   12a24:	0085c83a 	sub	r2,zero,r2
   12a28:	21010034 	orhi	r4,r4,1024
   12a2c:	003feb06 	br	129dc <_gp+0xffff0f3c>
   12a30:	043fffc4 	movi	r16,-1
   12a34:	0009883a 	mov	r4,zero
   12a38:	003f5706 	br	12798 <_gp+0xffff0cf8>
   12a3c:	80004a1e 	bne	r16,zero,12b68 <__addsf3+0x464>
   12a40:	20005926 	beq	r4,zero,12ba8 <__addsf3+0x4a4>
   12a44:	283f4626 	beq	r5,zero,12760 <_gp+0xffff0cc0>
   12a48:	2149883a 	add	r4,r4,r5
   12a4c:	2081002c 	andhi	r2,r4,1024
   12a50:	103f8226 	beq	r2,zero,1285c <_gp+0xffff0dbc>
   12a54:	00bf0034 	movhi	r2,64512
   12a58:	10bfffc4 	addi	r2,r2,-1
   12a5c:	3021883a 	mov	r16,r6
   12a60:	2088703a 	and	r4,r4,r2
   12a64:	003f3e06 	br	12760 <_gp+0xffff0cc0>
   12a68:	8000121e 	bne	r16,zero,12ab4 <__addsf3+0x3b0>
   12a6c:	2000261e 	bne	r4,zero,12b08 <__addsf3+0x404>
   12a70:	283fa226 	beq	r5,zero,128fc <_gp+0xffff0e5c>
   12a74:	2809883a 	mov	r4,r5
   12a78:	3823883a 	mov	r17,r7
   12a7c:	003f3806 	br	12760 <_gp+0xffff0cc0>
   12a80:	01400044 	movi	r5,1
   12a84:	003f9006 	br	128c8 <_gp+0xffff0e28>
   12a88:	2809883a 	mov	r4,r5
   12a8c:	3021883a 	mov	r16,r6
   12a90:	3823883a 	mov	r17,r7
   12a94:	003f3206 	br	12760 <_gp+0xffff0cc0>
   12a98:	80000c1e 	bne	r16,zero,12acc <__addsf3+0x3c8>
   12a9c:	20002f26 	beq	r4,zero,12b5c <__addsf3+0x458>
   12aa0:	00c6303a 	nor	r3,zero,r3
   12aa4:	18002b1e 	bne	r3,zero,12b54 <__addsf3+0x450>
   12aa8:	2149883a 	add	r4,r4,r5
   12aac:	3021883a 	mov	r16,r6
   12ab0:	003f8606 	br	128cc <_gp+0xffff0e2c>
   12ab4:	20001b1e 	bne	r4,zero,12b24 <__addsf3+0x420>
   12ab8:	28003926 	beq	r5,zero,12ba0 <__addsf3+0x49c>
   12abc:	2809883a 	mov	r4,r5
   12ac0:	3823883a 	mov	r17,r7
   12ac4:	04003fc4 	movi	r16,255
   12ac8:	003f2506 	br	12760 <_gp+0xffff0cc0>
   12acc:	01c03fc4 	movi	r7,255
   12ad0:	31c02226 	beq	r6,r7,12b5c <__addsf3+0x458>
   12ad4:	00c7c83a 	sub	r3,zero,r3
   12ad8:	21010034 	orhi	r4,r4,1024
   12adc:	01c006c4 	movi	r7,27
   12ae0:	38c03616 	blt	r7,r3,12bbc <__addsf3+0x4b8>
   12ae4:	01c00804 	movi	r7,32
   12ae8:	38cfc83a 	sub	r7,r7,r3
   12aec:	21ce983a 	sll	r7,r4,r7
   12af0:	20c6d83a 	srl	r3,r4,r3
   12af4:	3808c03a 	cmpne	r4,r7,zero
   12af8:	1906b03a 	or	r3,r3,r4
   12afc:	1949883a 	add	r4,r3,r5
   12b00:	3021883a 	mov	r16,r6
   12b04:	003f7106 	br	128cc <_gp+0xffff0e2c>
   12b08:	283f1526 	beq	r5,zero,12760 <_gp+0xffff0cc0>
   12b0c:	2145c83a 	sub	r2,r4,r5
   12b10:	10c1002c 	andhi	r3,r2,1024
   12b14:	183f4f26 	beq	r3,zero,12854 <_gp+0xffff0db4>
   12b18:	2909c83a 	sub	r4,r5,r4
   12b1c:	3823883a 	mov	r17,r7
   12b20:	003f0f06 	br	12760 <_gp+0xffff0cc0>
   12b24:	28001a26 	beq	r5,zero,12b90 <__addsf3+0x48c>
   12b28:	2008d0fa 	srli	r4,r4,3
   12b2c:	2080102c 	andhi	r2,r4,64
   12b30:	10000526 	beq	r2,zero,12b48 <__addsf3+0x444>
   12b34:	280ad0fa 	srli	r5,r5,3
   12b38:	2880102c 	andhi	r2,r5,64
   12b3c:	1000021e 	bne	r2,zero,12b48 <__addsf3+0x444>
   12b40:	2809883a 	mov	r4,r5
   12b44:	3823883a 	mov	r17,r7
   12b48:	200890fa 	slli	r4,r4,3
   12b4c:	04003fc4 	movi	r16,255
   12b50:	003f0306 	br	12760 <_gp+0xffff0cc0>
   12b54:	01c03fc4 	movi	r7,255
   12b58:	31ffe01e 	bne	r6,r7,12adc <_gp+0xffff103c>
   12b5c:	2809883a 	mov	r4,r5
   12b60:	3021883a 	mov	r16,r6
   12b64:	003efe06 	br	12760 <_gp+0xffff0cc0>
   12b68:	20001126 	beq	r4,zero,12bb0 <__addsf3+0x4ac>
   12b6c:	28000826 	beq	r5,zero,12b90 <__addsf3+0x48c>
   12b70:	2008d0fa 	srli	r4,r4,3
   12b74:	2080102c 	andhi	r2,r4,64
   12b78:	103ff326 	beq	r2,zero,12b48 <_gp+0xffff10a8>
   12b7c:	280ad0fa 	srli	r5,r5,3
   12b80:	2880102c 	andhi	r2,r5,64
   12b84:	103ff01e 	bne	r2,zero,12b48 <_gp+0xffff10a8>
   12b88:	2809883a 	mov	r4,r5
   12b8c:	003fee06 	br	12b48 <_gp+0xffff10a8>
   12b90:	04003fc4 	movi	r16,255
   12b94:	003ef206 	br	12760 <_gp+0xffff0cc0>
   12b98:	01000044 	movi	r4,1
   12b9c:	003f9706 	br	129fc <_gp+0xffff0f5c>
   12ba0:	0005883a 	mov	r2,zero
   12ba4:	003f3406 	br	12878 <_gp+0xffff0dd8>
   12ba8:	2809883a 	mov	r4,r5
   12bac:	003eec06 	br	12760 <_gp+0xffff0cc0>
   12bb0:	2809883a 	mov	r4,r5
   12bb4:	04003fc4 	movi	r16,255
   12bb8:	003ee906 	br	12760 <_gp+0xffff0cc0>
   12bbc:	00c00044 	movi	r3,1
   12bc0:	003fce06 	br	12afc <_gp+0xffff105c>
   12bc4:	0005883a 	mov	r2,zero
   12bc8:	003f4e06 	br	12904 <_gp+0xffff0e64>

00012bcc <__mulsf3>:
   12bcc:	defff504 	addi	sp,sp,-44
   12bd0:	dc000115 	stw	r16,4(sp)
   12bd4:	2020d5fa 	srli	r16,r4,23
   12bd8:	dd400615 	stw	r21,24(sp)
   12bdc:	202ad7fa 	srli	r21,r4,31
   12be0:	dc800315 	stw	r18,12(sp)
   12be4:	04802034 	movhi	r18,128
   12be8:	df000915 	stw	fp,36(sp)
   12bec:	dd000515 	stw	r20,20(sp)
   12bf0:	94bfffc4 	addi	r18,r18,-1
   12bf4:	dfc00a15 	stw	ra,40(sp)
   12bf8:	ddc00815 	stw	r23,32(sp)
   12bfc:	dd800715 	stw	r22,28(sp)
   12c00:	dcc00415 	stw	r19,16(sp)
   12c04:	dc400215 	stw	r17,8(sp)
   12c08:	84003fcc 	andi	r16,r16,255
   12c0c:	9124703a 	and	r18,r18,r4
   12c10:	a829883a 	mov	r20,r21
   12c14:	af003fcc 	andi	fp,r21,255
   12c18:	80005426 	beq	r16,zero,12d6c <__mulsf3+0x1a0>
   12c1c:	00803fc4 	movi	r2,255
   12c20:	80802f26 	beq	r16,r2,12ce0 <__mulsf3+0x114>
   12c24:	91002034 	orhi	r4,r18,128
   12c28:	202490fa 	slli	r18,r4,3
   12c2c:	843fe044 	addi	r16,r16,-127
   12c30:	0023883a 	mov	r17,zero
   12c34:	002f883a 	mov	r23,zero
   12c38:	2804d5fa 	srli	r2,r5,23
   12c3c:	282cd7fa 	srli	r22,r5,31
   12c40:	01002034 	movhi	r4,128
   12c44:	213fffc4 	addi	r4,r4,-1
   12c48:	10803fcc 	andi	r2,r2,255
   12c4c:	2166703a 	and	r19,r4,r5
   12c50:	b1803fcc 	andi	r6,r22,255
   12c54:	10004c26 	beq	r2,zero,12d88 <__mulsf3+0x1bc>
   12c58:	00c03fc4 	movi	r3,255
   12c5c:	10c04726 	beq	r2,r3,12d7c <__mulsf3+0x1b0>
   12c60:	99002034 	orhi	r4,r19,128
   12c64:	202690fa 	slli	r19,r4,3
   12c68:	10bfe044 	addi	r2,r2,-127
   12c6c:	0007883a 	mov	r3,zero
   12c70:	80a1883a 	add	r16,r16,r2
   12c74:	010003c4 	movi	r4,15
   12c78:	1c44b03a 	or	r2,r3,r17
   12c7c:	b56af03a 	xor	r21,r22,r21
   12c80:	81c00044 	addi	r7,r16,1
   12c84:	20806b36 	bltu	r4,r2,12e34 <__mulsf3+0x268>
   12c88:	100490ba 	slli	r2,r2,2
   12c8c:	01000074 	movhi	r4,1
   12c90:	210b2804 	addi	r4,r4,11424
   12c94:	1105883a 	add	r2,r2,r4
   12c98:	10800017 	ldw	r2,0(r2)
   12c9c:	1000683a 	jmp	r2
   12ca0:	00012e34 	movhi	zero,1208
   12ca4:	00012cf4 	movhi	zero,1203
   12ca8:	00012cf4 	movhi	zero,1203
   12cac:	00012cf0 	cmpltui	zero,zero,1203
   12cb0:	00012e18 	cmpnei	zero,zero,1208
   12cb4:	00012e18 	cmpnei	zero,zero,1208
   12cb8:	00012e04 	movi	zero,1208
   12cbc:	00012cf0 	cmpltui	zero,zero,1203
   12cc0:	00012e18 	cmpnei	zero,zero,1208
   12cc4:	00012e04 	movi	zero,1208
   12cc8:	00012e18 	cmpnei	zero,zero,1208
   12ccc:	00012cf0 	cmpltui	zero,zero,1203
   12cd0:	00012e24 	muli	zero,zero,1208
   12cd4:	00012e24 	muli	zero,zero,1208
   12cd8:	00012e24 	muli	zero,zero,1208
   12cdc:	00012f34 	movhi	zero,1212
   12ce0:	90003b1e 	bne	r18,zero,12dd0 <__mulsf3+0x204>
   12ce4:	04400204 	movi	r17,8
   12ce8:	05c00084 	movi	r23,2
   12cec:	003fd206 	br	12c38 <_gp+0xffff1198>
   12cf0:	302b883a 	mov	r21,r6
   12cf4:	00800084 	movi	r2,2
   12cf8:	18802626 	beq	r3,r2,12d94 <__mulsf3+0x1c8>
   12cfc:	008000c4 	movi	r2,3
   12d00:	1880b826 	beq	r3,r2,12fe4 <__mulsf3+0x418>
   12d04:	00800044 	movi	r2,1
   12d08:	1880af1e 	bne	r3,r2,12fc8 <__mulsf3+0x3fc>
   12d0c:	a829883a 	mov	r20,r21
   12d10:	0007883a 	mov	r3,zero
   12d14:	0009883a 	mov	r4,zero
   12d18:	18803fcc 	andi	r2,r3,255
   12d1c:	100695fa 	slli	r3,r2,23
   12d20:	a0803fcc 	andi	r2,r20,255
   12d24:	100a97fa 	slli	r5,r2,31
   12d28:	00802034 	movhi	r2,128
   12d2c:	10bfffc4 	addi	r2,r2,-1
   12d30:	2084703a 	and	r2,r4,r2
   12d34:	10c4b03a 	or	r2,r2,r3
   12d38:	1144b03a 	or	r2,r2,r5
   12d3c:	dfc00a17 	ldw	ra,40(sp)
   12d40:	df000917 	ldw	fp,36(sp)
   12d44:	ddc00817 	ldw	r23,32(sp)
   12d48:	dd800717 	ldw	r22,28(sp)
   12d4c:	dd400617 	ldw	r21,24(sp)
   12d50:	dd000517 	ldw	r20,20(sp)
   12d54:	dcc00417 	ldw	r19,16(sp)
   12d58:	dc800317 	ldw	r18,12(sp)
   12d5c:	dc400217 	ldw	r17,8(sp)
   12d60:	dc000117 	ldw	r16,4(sp)
   12d64:	dec00b04 	addi	sp,sp,44
   12d68:	f800283a 	ret
   12d6c:	90000d1e 	bne	r18,zero,12da4 <__mulsf3+0x1d8>
   12d70:	04400104 	movi	r17,4
   12d74:	05c00044 	movi	r23,1
   12d78:	003faf06 	br	12c38 <_gp+0xffff1198>
   12d7c:	9806c03a 	cmpne	r3,r19,zero
   12d80:	18c00084 	addi	r3,r3,2
   12d84:	003fba06 	br	12c70 <_gp+0xffff11d0>
   12d88:	9800141e 	bne	r19,zero,12ddc <__mulsf3+0x210>
   12d8c:	00c00044 	movi	r3,1
   12d90:	003fb706 	br	12c70 <_gp+0xffff11d0>
   12d94:	a829883a 	mov	r20,r21
   12d98:	00ffffc4 	movi	r3,-1
   12d9c:	0009883a 	mov	r4,zero
   12da0:	003fdd06 	br	12d18 <_gp+0xffff1278>
   12da4:	9009883a 	mov	r4,r18
   12da8:	d9400015 	stw	r5,0(sp)
   12dac:	0015a380 	call	15a38 <__clzsi2>
   12db0:	10fffec4 	addi	r3,r2,-5
   12db4:	10801d84 	addi	r2,r2,118
   12db8:	90e4983a 	sll	r18,r18,r3
   12dbc:	00a1c83a 	sub	r16,zero,r2
   12dc0:	0023883a 	mov	r17,zero
   12dc4:	002f883a 	mov	r23,zero
   12dc8:	d9400017 	ldw	r5,0(sp)
   12dcc:	003f9a06 	br	12c38 <_gp+0xffff1198>
   12dd0:	04400304 	movi	r17,12
   12dd4:	05c000c4 	movi	r23,3
   12dd8:	003f9706 	br	12c38 <_gp+0xffff1198>
   12ddc:	9809883a 	mov	r4,r19
   12de0:	d9800015 	stw	r6,0(sp)
   12de4:	0015a380 	call	15a38 <__clzsi2>
   12de8:	10fffec4 	addi	r3,r2,-5
   12dec:	10801d84 	addi	r2,r2,118
   12df0:	98e6983a 	sll	r19,r19,r3
   12df4:	0085c83a 	sub	r2,zero,r2
   12df8:	0007883a 	mov	r3,zero
   12dfc:	d9800017 	ldw	r6,0(sp)
   12e00:	003f9b06 	br	12c70 <_gp+0xffff11d0>
   12e04:	01002034 	movhi	r4,128
   12e08:	0029883a 	mov	r20,zero
   12e0c:	213fffc4 	addi	r4,r4,-1
   12e10:	00ffffc4 	movi	r3,-1
   12e14:	003fc006 	br	12d18 <_gp+0xffff1278>
   12e18:	9027883a 	mov	r19,r18
   12e1c:	b807883a 	mov	r3,r23
   12e20:	003fb406 	br	12cf4 <_gp+0xffff1254>
   12e24:	9027883a 	mov	r19,r18
   12e28:	e02b883a 	mov	r21,fp
   12e2c:	b807883a 	mov	r3,r23
   12e30:	003fb006 	br	12cf4 <_gp+0xffff1254>
   12e34:	9028d43a 	srli	r20,r18,16
   12e38:	982cd43a 	srli	r22,r19,16
   12e3c:	94bfffcc 	andi	r18,r18,65535
   12e40:	9cffffcc 	andi	r19,r19,65535
   12e44:	980b883a 	mov	r5,r19
   12e48:	9009883a 	mov	r4,r18
   12e4c:	d9c00015 	stw	r7,0(sp)
   12e50:	00126dc0 	call	126dc <__mulsi3>
   12e54:	a00b883a 	mov	r5,r20
   12e58:	9809883a 	mov	r4,r19
   12e5c:	1023883a 	mov	r17,r2
   12e60:	00126dc0 	call	126dc <__mulsi3>
   12e64:	a009883a 	mov	r4,r20
   12e68:	b00b883a 	mov	r5,r22
   12e6c:	1027883a 	mov	r19,r2
   12e70:	00126dc0 	call	126dc <__mulsi3>
   12e74:	b00b883a 	mov	r5,r22
   12e78:	9009883a 	mov	r4,r18
   12e7c:	1029883a 	mov	r20,r2
   12e80:	00126dc0 	call	126dc <__mulsi3>
   12e84:	8806d43a 	srli	r3,r17,16
   12e88:	14c5883a 	add	r2,r2,r19
   12e8c:	d9c00017 	ldw	r7,0(sp)
   12e90:	1885883a 	add	r2,r3,r2
   12e94:	14c0022e 	bgeu	r2,r19,12ea0 <__mulsf3+0x2d4>
   12e98:	00c00074 	movhi	r3,1
   12e9c:	a0e9883a 	add	r20,r20,r3
   12ea0:	1026943a 	slli	r19,r2,16
   12ea4:	8c7fffcc 	andi	r17,r17,65535
   12ea8:	1004d43a 	srli	r2,r2,16
   12eac:	9c63883a 	add	r17,r19,r17
   12eb0:	882691ba 	slli	r19,r17,6
   12eb4:	1505883a 	add	r2,r2,r20
   12eb8:	8822d6ba 	srli	r17,r17,26
   12ebc:	100891ba 	slli	r4,r2,6
   12ec0:	9826c03a 	cmpne	r19,r19,zero
   12ec4:	9c62b03a 	or	r17,r19,r17
   12ec8:	8926b03a 	or	r19,r17,r4
   12ecc:	9882002c 	andhi	r2,r19,2048
   12ed0:	10000426 	beq	r2,zero,12ee4 <__mulsf3+0x318>
   12ed4:	9804d07a 	srli	r2,r19,1
   12ed8:	9900004c 	andi	r4,r19,1
   12edc:	3821883a 	mov	r16,r7
   12ee0:	1126b03a 	or	r19,r2,r4
   12ee4:	80c01fc4 	addi	r3,r16,127
   12ee8:	00c0210e 	bge	zero,r3,12f70 <__mulsf3+0x3a4>
   12eec:	988001cc 	andi	r2,r19,7
   12ef0:	10000426 	beq	r2,zero,12f04 <__mulsf3+0x338>
   12ef4:	988003cc 	andi	r2,r19,15
   12ef8:	01000104 	movi	r4,4
   12efc:	11000126 	beq	r2,r4,12f04 <__mulsf3+0x338>
   12f00:	9927883a 	add	r19,r19,r4
   12f04:	9882002c 	andhi	r2,r19,2048
   12f08:	10000426 	beq	r2,zero,12f1c <__mulsf3+0x350>
   12f0c:	00be0034 	movhi	r2,63488
   12f10:	10bfffc4 	addi	r2,r2,-1
   12f14:	80c02004 	addi	r3,r16,128
   12f18:	98a6703a 	and	r19,r19,r2
   12f1c:	00803f84 	movi	r2,254
   12f20:	10ff9c16 	blt	r2,r3,12d94 <_gp+0xffff12f4>
   12f24:	980891ba 	slli	r4,r19,6
   12f28:	a829883a 	mov	r20,r21
   12f2c:	2008d27a 	srli	r4,r4,9
   12f30:	003f7906 	br	12d18 <_gp+0xffff1278>
   12f34:	9080102c 	andhi	r2,r18,64
   12f38:	10000826 	beq	r2,zero,12f5c <__mulsf3+0x390>
   12f3c:	9880102c 	andhi	r2,r19,64
   12f40:	1000061e 	bne	r2,zero,12f5c <__mulsf3+0x390>
   12f44:	00802034 	movhi	r2,128
   12f48:	99001034 	orhi	r4,r19,64
   12f4c:	10bfffc4 	addi	r2,r2,-1
   12f50:	b029883a 	mov	r20,r22
   12f54:	2088703a 	and	r4,r4,r2
   12f58:	003fad06 	br	12e10 <_gp+0xffff1370>
   12f5c:	00802034 	movhi	r2,128
   12f60:	91001034 	orhi	r4,r18,64
   12f64:	10bfffc4 	addi	r2,r2,-1
   12f68:	2088703a 	and	r4,r4,r2
   12f6c:	003fa806 	br	12e10 <_gp+0xffff1370>
   12f70:	00800044 	movi	r2,1
   12f74:	10c7c83a 	sub	r3,r2,r3
   12f78:	008006c4 	movi	r2,27
   12f7c:	10ff6316 	blt	r2,r3,12d0c <_gp+0xffff126c>
   12f80:	00800804 	movi	r2,32
   12f84:	10c5c83a 	sub	r2,r2,r3
   12f88:	9884983a 	sll	r2,r19,r2
   12f8c:	98c6d83a 	srl	r3,r19,r3
   12f90:	1004c03a 	cmpne	r2,r2,zero
   12f94:	1884b03a 	or	r2,r3,r2
   12f98:	10c001cc 	andi	r3,r2,7
   12f9c:	18000426 	beq	r3,zero,12fb0 <__mulsf3+0x3e4>
   12fa0:	10c003cc 	andi	r3,r2,15
   12fa4:	01000104 	movi	r4,4
   12fa8:	19000126 	beq	r3,r4,12fb0 <__mulsf3+0x3e4>
   12fac:	1105883a 	add	r2,r2,r4
   12fb0:	10c1002c 	andhi	r3,r2,1024
   12fb4:	18000626 	beq	r3,zero,12fd0 <__mulsf3+0x404>
   12fb8:	a829883a 	mov	r20,r21
   12fbc:	00c00044 	movi	r3,1
   12fc0:	0009883a 	mov	r4,zero
   12fc4:	003f5406 	br	12d18 <_gp+0xffff1278>
   12fc8:	3821883a 	mov	r16,r7
   12fcc:	003fc506 	br	12ee4 <_gp+0xffff1444>
   12fd0:	100491ba 	slli	r2,r2,6
   12fd4:	a829883a 	mov	r20,r21
   12fd8:	0007883a 	mov	r3,zero
   12fdc:	1008d27a 	srli	r4,r2,9
   12fe0:	003f4d06 	br	12d18 <_gp+0xffff1278>
   12fe4:	00802034 	movhi	r2,128
   12fe8:	99001034 	orhi	r4,r19,64
   12fec:	10bfffc4 	addi	r2,r2,-1
   12ff0:	a829883a 	mov	r20,r21
   12ff4:	2088703a 	and	r4,r4,r2
   12ff8:	003f8506 	br	12e10 <_gp+0xffff1370>

00012ffc <__fixsfsi>:
   12ffc:	200ad5fa 	srli	r5,r4,23
   13000:	00c02034 	movhi	r3,128
   13004:	18ffffc4 	addi	r3,r3,-1
   13008:	29403fcc 	andi	r5,r5,255
   1300c:	00801f84 	movi	r2,126
   13010:	1906703a 	and	r3,r3,r4
   13014:	2008d7fa 	srli	r4,r4,31
   13018:	11400e0e 	bge	r2,r5,13054 <__fixsfsi+0x58>
   1301c:	00802744 	movi	r2,157
   13020:	11400816 	blt	r2,r5,13044 <__fixsfsi+0x48>
   13024:	00802544 	movi	r2,149
   13028:	18c02034 	orhi	r3,r3,128
   1302c:	11400b0e 	bge	r2,r5,1305c <__fixsfsi+0x60>
   13030:	28bfda84 	addi	r2,r5,-150
   13034:	1884983a 	sll	r2,r3,r2
   13038:	20000726 	beq	r4,zero,13058 <__fixsfsi+0x5c>
   1303c:	0085c83a 	sub	r2,zero,r2
   13040:	f800283a 	ret
   13044:	00a00034 	movhi	r2,32768
   13048:	10bfffc4 	addi	r2,r2,-1
   1304c:	2085883a 	add	r2,r4,r2
   13050:	f800283a 	ret
   13054:	0005883a 	mov	r2,zero
   13058:	f800283a 	ret
   1305c:	00802584 	movi	r2,150
   13060:	1145c83a 	sub	r2,r2,r5
   13064:	1884d83a 	srl	r2,r3,r2
   13068:	003ff306 	br	13038 <_gp+0xffff1598>

0001306c <__floatsisf>:
   1306c:	defffd04 	addi	sp,sp,-12
   13070:	dfc00215 	stw	ra,8(sp)
   13074:	dc400115 	stw	r17,4(sp)
   13078:	dc000015 	stw	r16,0(sp)
   1307c:	20003526 	beq	r4,zero,13154 <__floatsisf+0xe8>
   13080:	2021883a 	mov	r16,r4
   13084:	2022d7fa 	srli	r17,r4,31
   13088:	20003616 	blt	r4,zero,13164 <__floatsisf+0xf8>
   1308c:	8009883a 	mov	r4,r16
   13090:	0015a380 	call	15a38 <__clzsi2>
   13094:	00c02784 	movi	r3,158
   13098:	1887c83a 	sub	r3,r3,r2
   1309c:	01002584 	movi	r4,150
   130a0:	20c01416 	blt	r4,r3,130f4 <__floatsisf+0x88>
   130a4:	20c9c83a 	sub	r4,r4,r3
   130a8:	8120983a 	sll	r16,r16,r4
   130ac:	00802034 	movhi	r2,128
   130b0:	10bfffc4 	addi	r2,r2,-1
   130b4:	8809883a 	mov	r4,r17
   130b8:	80a0703a 	and	r16,r16,r2
   130bc:	18803fcc 	andi	r2,r3,255
   130c0:	100695fa 	slli	r3,r2,23
   130c4:	20803fcc 	andi	r2,r4,255
   130c8:	100897fa 	slli	r4,r2,31
   130cc:	00802034 	movhi	r2,128
   130d0:	10bfffc4 	addi	r2,r2,-1
   130d4:	8084703a 	and	r2,r16,r2
   130d8:	10c4b03a 	or	r2,r2,r3
   130dc:	1104b03a 	or	r2,r2,r4
   130e0:	dfc00217 	ldw	ra,8(sp)
   130e4:	dc400117 	ldw	r17,4(sp)
   130e8:	dc000017 	ldw	r16,0(sp)
   130ec:	dec00304 	addi	sp,sp,12
   130f0:	f800283a 	ret
   130f4:	01002644 	movi	r4,153
   130f8:	20c01c16 	blt	r4,r3,1316c <__floatsisf+0x100>
   130fc:	20c9c83a 	sub	r4,r4,r3
   13100:	8120983a 	sll	r16,r16,r4
   13104:	013f0034 	movhi	r4,64512
   13108:	213fffc4 	addi	r4,r4,-1
   1310c:	814001cc 	andi	r5,r16,7
   13110:	8108703a 	and	r4,r16,r4
   13114:	28000426 	beq	r5,zero,13128 <__floatsisf+0xbc>
   13118:	840003cc 	andi	r16,r16,15
   1311c:	01400104 	movi	r5,4
   13120:	81400126 	beq	r16,r5,13128 <__floatsisf+0xbc>
   13124:	2149883a 	add	r4,r4,r5
   13128:	2141002c 	andhi	r5,r4,1024
   1312c:	28000526 	beq	r5,zero,13144 <__floatsisf+0xd8>
   13130:	00c027c4 	movi	r3,159
   13134:	1887c83a 	sub	r3,r3,r2
   13138:	00bf0034 	movhi	r2,64512
   1313c:	10bfffc4 	addi	r2,r2,-1
   13140:	2088703a 	and	r4,r4,r2
   13144:	202091ba 	slli	r16,r4,6
   13148:	8809883a 	mov	r4,r17
   1314c:	8020d27a 	srli	r16,r16,9
   13150:	003fda06 	br	130bc <_gp+0xffff161c>
   13154:	0009883a 	mov	r4,zero
   13158:	0007883a 	mov	r3,zero
   1315c:	0021883a 	mov	r16,zero
   13160:	003fd606 	br	130bc <_gp+0xffff161c>
   13164:	0121c83a 	sub	r16,zero,r4
   13168:	003fc806 	br	1308c <_gp+0xffff15ec>
   1316c:	01002e44 	movi	r4,185
   13170:	20c9c83a 	sub	r4,r4,r3
   13174:	01400144 	movi	r5,5
   13178:	8108983a 	sll	r4,r16,r4
   1317c:	288bc83a 	sub	r5,r5,r2
   13180:	8160d83a 	srl	r16,r16,r5
   13184:	2008c03a 	cmpne	r4,r4,zero
   13188:	8120b03a 	or	r16,r16,r4
   1318c:	003fdd06 	br	13104 <_gp+0xffff1664>

00013190 <__adddf3>:
   13190:	02c00434 	movhi	r11,16
   13194:	5affffc4 	addi	r11,r11,-1
   13198:	2806d7fa 	srli	r3,r5,31
   1319c:	2ad4703a 	and	r10,r5,r11
   131a0:	3ad2703a 	and	r9,r7,r11
   131a4:	3804d53a 	srli	r2,r7,20
   131a8:	3018d77a 	srli	r12,r6,29
   131ac:	280ad53a 	srli	r5,r5,20
   131b0:	501490fa 	slli	r10,r10,3
   131b4:	2010d77a 	srli	r8,r4,29
   131b8:	481290fa 	slli	r9,r9,3
   131bc:	380ed7fa 	srli	r7,r7,31
   131c0:	defffb04 	addi	sp,sp,-20
   131c4:	dc800215 	stw	r18,8(sp)
   131c8:	dc400115 	stw	r17,4(sp)
   131cc:	dc000015 	stw	r16,0(sp)
   131d0:	dfc00415 	stw	ra,16(sp)
   131d4:	dcc00315 	stw	r19,12(sp)
   131d8:	1c803fcc 	andi	r18,r3,255
   131dc:	2c01ffcc 	andi	r16,r5,2047
   131e0:	5210b03a 	or	r8,r10,r8
   131e4:	202290fa 	slli	r17,r4,3
   131e8:	1081ffcc 	andi	r2,r2,2047
   131ec:	4b12b03a 	or	r9,r9,r12
   131f0:	300c90fa 	slli	r6,r6,3
   131f4:	91c07526 	beq	r18,r7,133cc <__adddf3+0x23c>
   131f8:	8087c83a 	sub	r3,r16,r2
   131fc:	00c0ab0e 	bge	zero,r3,134ac <__adddf3+0x31c>
   13200:	10002a1e 	bne	r2,zero,132ac <__adddf3+0x11c>
   13204:	4984b03a 	or	r2,r9,r6
   13208:	1000961e 	bne	r2,zero,13464 <__adddf3+0x2d4>
   1320c:	888001cc 	andi	r2,r17,7
   13210:	10000726 	beq	r2,zero,13230 <__adddf3+0xa0>
   13214:	888003cc 	andi	r2,r17,15
   13218:	00c00104 	movi	r3,4
   1321c:	10c00426 	beq	r2,r3,13230 <__adddf3+0xa0>
   13220:	88c7883a 	add	r3,r17,r3
   13224:	1c63803a 	cmpltu	r17,r3,r17
   13228:	4451883a 	add	r8,r8,r17
   1322c:	1823883a 	mov	r17,r3
   13230:	4080202c 	andhi	r2,r8,128
   13234:	10005926 	beq	r2,zero,1339c <__adddf3+0x20c>
   13238:	84000044 	addi	r16,r16,1
   1323c:	0081ffc4 	movi	r2,2047
   13240:	8080ba26 	beq	r16,r2,1352c <__adddf3+0x39c>
   13244:	00bfe034 	movhi	r2,65408
   13248:	10bfffc4 	addi	r2,r2,-1
   1324c:	4090703a 	and	r8,r8,r2
   13250:	4004977a 	slli	r2,r8,29
   13254:	4010927a 	slli	r8,r8,9
   13258:	8822d0fa 	srli	r17,r17,3
   1325c:	8401ffcc 	andi	r16,r16,2047
   13260:	4010d33a 	srli	r8,r8,12
   13264:	9007883a 	mov	r3,r18
   13268:	1444b03a 	or	r2,r2,r17
   1326c:	8401ffcc 	andi	r16,r16,2047
   13270:	8020953a 	slli	r16,r16,20
   13274:	18c03fcc 	andi	r3,r3,255
   13278:	01000434 	movhi	r4,16
   1327c:	213fffc4 	addi	r4,r4,-1
   13280:	180697fa 	slli	r3,r3,31
   13284:	4110703a 	and	r8,r8,r4
   13288:	4410b03a 	or	r8,r8,r16
   1328c:	40c6b03a 	or	r3,r8,r3
   13290:	dfc00417 	ldw	ra,16(sp)
   13294:	dcc00317 	ldw	r19,12(sp)
   13298:	dc800217 	ldw	r18,8(sp)
   1329c:	dc400117 	ldw	r17,4(sp)
   132a0:	dc000017 	ldw	r16,0(sp)
   132a4:	dec00504 	addi	sp,sp,20
   132a8:	f800283a 	ret
   132ac:	0081ffc4 	movi	r2,2047
   132b0:	80bfd626 	beq	r16,r2,1320c <_gp+0xffff176c>
   132b4:	4a402034 	orhi	r9,r9,128
   132b8:	00800e04 	movi	r2,56
   132bc:	10c09f16 	blt	r2,r3,1353c <__adddf3+0x3ac>
   132c0:	008007c4 	movi	r2,31
   132c4:	10c0c216 	blt	r2,r3,135d0 <__adddf3+0x440>
   132c8:	00800804 	movi	r2,32
   132cc:	10c5c83a 	sub	r2,r2,r3
   132d0:	488a983a 	sll	r5,r9,r2
   132d4:	30c8d83a 	srl	r4,r6,r3
   132d8:	3084983a 	sll	r2,r6,r2
   132dc:	48c6d83a 	srl	r3,r9,r3
   132e0:	290cb03a 	or	r6,r5,r4
   132e4:	1004c03a 	cmpne	r2,r2,zero
   132e8:	308cb03a 	or	r6,r6,r2
   132ec:	898dc83a 	sub	r6,r17,r6
   132f0:	89a3803a 	cmpltu	r17,r17,r6
   132f4:	40d1c83a 	sub	r8,r8,r3
   132f8:	4451c83a 	sub	r8,r8,r17
   132fc:	3023883a 	mov	r17,r6
   13300:	4080202c 	andhi	r2,r8,128
   13304:	10002326 	beq	r2,zero,13394 <__adddf3+0x204>
   13308:	04c02034 	movhi	r19,128
   1330c:	9cffffc4 	addi	r19,r19,-1
   13310:	44e6703a 	and	r19,r8,r19
   13314:	98007626 	beq	r19,zero,134f0 <__adddf3+0x360>
   13318:	9809883a 	mov	r4,r19
   1331c:	0015a380 	call	15a38 <__clzsi2>
   13320:	10fffe04 	addi	r3,r2,-8
   13324:	010007c4 	movi	r4,31
   13328:	20c07716 	blt	r4,r3,13508 <__adddf3+0x378>
   1332c:	00800804 	movi	r2,32
   13330:	10c5c83a 	sub	r2,r2,r3
   13334:	8884d83a 	srl	r2,r17,r2
   13338:	98d0983a 	sll	r8,r19,r3
   1333c:	88e2983a 	sll	r17,r17,r3
   13340:	1204b03a 	or	r2,r2,r8
   13344:	1c007416 	blt	r3,r16,13518 <__adddf3+0x388>
   13348:	1c21c83a 	sub	r16,r3,r16
   1334c:	82000044 	addi	r8,r16,1
   13350:	00c007c4 	movi	r3,31
   13354:	1a009116 	blt	r3,r8,1359c <__adddf3+0x40c>
   13358:	00c00804 	movi	r3,32
   1335c:	1a07c83a 	sub	r3,r3,r8
   13360:	8a08d83a 	srl	r4,r17,r8
   13364:	88e2983a 	sll	r17,r17,r3
   13368:	10c6983a 	sll	r3,r2,r3
   1336c:	1210d83a 	srl	r8,r2,r8
   13370:	8804c03a 	cmpne	r2,r17,zero
   13374:	1906b03a 	or	r3,r3,r4
   13378:	18a2b03a 	or	r17,r3,r2
   1337c:	0021883a 	mov	r16,zero
   13380:	003fa206 	br	1320c <_gp+0xffff176c>
   13384:	1890b03a 	or	r8,r3,r2
   13388:	40017d26 	beq	r8,zero,13980 <__adddf3+0x7f0>
   1338c:	1011883a 	mov	r8,r2
   13390:	1823883a 	mov	r17,r3
   13394:	888001cc 	andi	r2,r17,7
   13398:	103f9e1e 	bne	r2,zero,13214 <_gp+0xffff1774>
   1339c:	4004977a 	slli	r2,r8,29
   133a0:	8822d0fa 	srli	r17,r17,3
   133a4:	4010d0fa 	srli	r8,r8,3
   133a8:	9007883a 	mov	r3,r18
   133ac:	1444b03a 	or	r2,r2,r17
   133b0:	0101ffc4 	movi	r4,2047
   133b4:	81002426 	beq	r16,r4,13448 <__adddf3+0x2b8>
   133b8:	8120703a 	and	r16,r16,r4
   133bc:	01000434 	movhi	r4,16
   133c0:	213fffc4 	addi	r4,r4,-1
   133c4:	4110703a 	and	r8,r8,r4
   133c8:	003fa806 	br	1326c <_gp+0xffff17cc>
   133cc:	8089c83a 	sub	r4,r16,r2
   133d0:	01005e0e 	bge	zero,r4,1354c <__adddf3+0x3bc>
   133d4:	10002b26 	beq	r2,zero,13484 <__adddf3+0x2f4>
   133d8:	0081ffc4 	movi	r2,2047
   133dc:	80bf8b26 	beq	r16,r2,1320c <_gp+0xffff176c>
   133e0:	4a402034 	orhi	r9,r9,128
   133e4:	00800e04 	movi	r2,56
   133e8:	1100a40e 	bge	r2,r4,1367c <__adddf3+0x4ec>
   133ec:	498cb03a 	or	r6,r9,r6
   133f0:	300ac03a 	cmpne	r5,r6,zero
   133f4:	0013883a 	mov	r9,zero
   133f8:	2c4b883a 	add	r5,r5,r17
   133fc:	2c63803a 	cmpltu	r17,r5,r17
   13400:	4a11883a 	add	r8,r9,r8
   13404:	8a11883a 	add	r8,r17,r8
   13408:	2823883a 	mov	r17,r5
   1340c:	4080202c 	andhi	r2,r8,128
   13410:	103fe026 	beq	r2,zero,13394 <_gp+0xffff18f4>
   13414:	84000044 	addi	r16,r16,1
   13418:	0081ffc4 	movi	r2,2047
   1341c:	8080d226 	beq	r16,r2,13768 <__adddf3+0x5d8>
   13420:	00bfe034 	movhi	r2,65408
   13424:	10bfffc4 	addi	r2,r2,-1
   13428:	4090703a 	and	r8,r8,r2
   1342c:	880ad07a 	srli	r5,r17,1
   13430:	400897fa 	slli	r4,r8,31
   13434:	88c0004c 	andi	r3,r17,1
   13438:	28e2b03a 	or	r17,r5,r3
   1343c:	4010d07a 	srli	r8,r8,1
   13440:	2462b03a 	or	r17,r4,r17
   13444:	003f7106 	br	1320c <_gp+0xffff176c>
   13448:	4088b03a 	or	r4,r8,r2
   1344c:	20014526 	beq	r4,zero,13964 <__adddf3+0x7d4>
   13450:	01000434 	movhi	r4,16
   13454:	42000234 	orhi	r8,r8,8
   13458:	213fffc4 	addi	r4,r4,-1
   1345c:	4110703a 	and	r8,r8,r4
   13460:	003f8206 	br	1326c <_gp+0xffff17cc>
   13464:	18ffffc4 	addi	r3,r3,-1
   13468:	1800491e 	bne	r3,zero,13590 <__adddf3+0x400>
   1346c:	898bc83a 	sub	r5,r17,r6
   13470:	8963803a 	cmpltu	r17,r17,r5
   13474:	4251c83a 	sub	r8,r8,r9
   13478:	4451c83a 	sub	r8,r8,r17
   1347c:	2823883a 	mov	r17,r5
   13480:	003f9f06 	br	13300 <_gp+0xffff1860>
   13484:	4984b03a 	or	r2,r9,r6
   13488:	103f6026 	beq	r2,zero,1320c <_gp+0xffff176c>
   1348c:	213fffc4 	addi	r4,r4,-1
   13490:	2000931e 	bne	r4,zero,136e0 <__adddf3+0x550>
   13494:	898d883a 	add	r6,r17,r6
   13498:	3463803a 	cmpltu	r17,r6,r17
   1349c:	4251883a 	add	r8,r8,r9
   134a0:	8a11883a 	add	r8,r17,r8
   134a4:	3023883a 	mov	r17,r6
   134a8:	003fd806 	br	1340c <_gp+0xffff196c>
   134ac:	1800541e 	bne	r3,zero,13600 <__adddf3+0x470>
   134b0:	80800044 	addi	r2,r16,1
   134b4:	1081ffcc 	andi	r2,r2,2047
   134b8:	00c00044 	movi	r3,1
   134bc:	1880a00e 	bge	r3,r2,13740 <__adddf3+0x5b0>
   134c0:	8989c83a 	sub	r4,r17,r6
   134c4:	8905803a 	cmpltu	r2,r17,r4
   134c8:	4267c83a 	sub	r19,r8,r9
   134cc:	98a7c83a 	sub	r19,r19,r2
   134d0:	9880202c 	andhi	r2,r19,128
   134d4:	10006326 	beq	r2,zero,13664 <__adddf3+0x4d4>
   134d8:	3463c83a 	sub	r17,r6,r17
   134dc:	4a07c83a 	sub	r3,r9,r8
   134e0:	344d803a 	cmpltu	r6,r6,r17
   134e4:	19a7c83a 	sub	r19,r3,r6
   134e8:	3825883a 	mov	r18,r7
   134ec:	983f8a1e 	bne	r19,zero,13318 <_gp+0xffff1878>
   134f0:	8809883a 	mov	r4,r17
   134f4:	0015a380 	call	15a38 <__clzsi2>
   134f8:	10800804 	addi	r2,r2,32
   134fc:	10fffe04 	addi	r3,r2,-8
   13500:	010007c4 	movi	r4,31
   13504:	20ff890e 	bge	r4,r3,1332c <_gp+0xffff188c>
   13508:	10bff604 	addi	r2,r2,-40
   1350c:	8884983a 	sll	r2,r17,r2
   13510:	0023883a 	mov	r17,zero
   13514:	1c3f8c0e 	bge	r3,r16,13348 <_gp+0xffff18a8>
   13518:	023fe034 	movhi	r8,65408
   1351c:	423fffc4 	addi	r8,r8,-1
   13520:	80e1c83a 	sub	r16,r16,r3
   13524:	1210703a 	and	r8,r2,r8
   13528:	003f3806 	br	1320c <_gp+0xffff176c>
   1352c:	9007883a 	mov	r3,r18
   13530:	0011883a 	mov	r8,zero
   13534:	0005883a 	mov	r2,zero
   13538:	003f4c06 	br	1326c <_gp+0xffff17cc>
   1353c:	498cb03a 	or	r6,r9,r6
   13540:	300cc03a 	cmpne	r6,r6,zero
   13544:	0007883a 	mov	r3,zero
   13548:	003f6806 	br	132ec <_gp+0xffff184c>
   1354c:	20009c1e 	bne	r4,zero,137c0 <__adddf3+0x630>
   13550:	80800044 	addi	r2,r16,1
   13554:	1141ffcc 	andi	r5,r2,2047
   13558:	01000044 	movi	r4,1
   1355c:	2140670e 	bge	r4,r5,136fc <__adddf3+0x56c>
   13560:	0101ffc4 	movi	r4,2047
   13564:	11007f26 	beq	r2,r4,13764 <__adddf3+0x5d4>
   13568:	898d883a 	add	r6,r17,r6
   1356c:	4247883a 	add	r3,r8,r9
   13570:	3451803a 	cmpltu	r8,r6,r17
   13574:	40d1883a 	add	r8,r8,r3
   13578:	402297fa 	slli	r17,r8,31
   1357c:	300cd07a 	srli	r6,r6,1
   13580:	4010d07a 	srli	r8,r8,1
   13584:	1021883a 	mov	r16,r2
   13588:	89a2b03a 	or	r17,r17,r6
   1358c:	003f1f06 	br	1320c <_gp+0xffff176c>
   13590:	0081ffc4 	movi	r2,2047
   13594:	80bf481e 	bne	r16,r2,132b8 <_gp+0xffff1818>
   13598:	003f1c06 	br	1320c <_gp+0xffff176c>
   1359c:	843ff844 	addi	r16,r16,-31
   135a0:	01000804 	movi	r4,32
   135a4:	1406d83a 	srl	r3,r2,r16
   135a8:	41005026 	beq	r8,r4,136ec <__adddf3+0x55c>
   135ac:	01001004 	movi	r4,64
   135b0:	2211c83a 	sub	r8,r4,r8
   135b4:	1204983a 	sll	r2,r2,r8
   135b8:	88a2b03a 	or	r17,r17,r2
   135bc:	8822c03a 	cmpne	r17,r17,zero
   135c0:	1c62b03a 	or	r17,r3,r17
   135c4:	0011883a 	mov	r8,zero
   135c8:	0021883a 	mov	r16,zero
   135cc:	003f7106 	br	13394 <_gp+0xffff18f4>
   135d0:	193ff804 	addi	r4,r3,-32
   135d4:	00800804 	movi	r2,32
   135d8:	4908d83a 	srl	r4,r9,r4
   135dc:	18804526 	beq	r3,r2,136f4 <__adddf3+0x564>
   135e0:	00801004 	movi	r2,64
   135e4:	10c5c83a 	sub	r2,r2,r3
   135e8:	4886983a 	sll	r3,r9,r2
   135ec:	198cb03a 	or	r6,r3,r6
   135f0:	300cc03a 	cmpne	r6,r6,zero
   135f4:	218cb03a 	or	r6,r4,r6
   135f8:	0007883a 	mov	r3,zero
   135fc:	003f3b06 	br	132ec <_gp+0xffff184c>
   13600:	80002a26 	beq	r16,zero,136ac <__adddf3+0x51c>
   13604:	0101ffc4 	movi	r4,2047
   13608:	11006826 	beq	r2,r4,137ac <__adddf3+0x61c>
   1360c:	00c7c83a 	sub	r3,zero,r3
   13610:	42002034 	orhi	r8,r8,128
   13614:	01000e04 	movi	r4,56
   13618:	20c07c16 	blt	r4,r3,1380c <__adddf3+0x67c>
   1361c:	010007c4 	movi	r4,31
   13620:	20c0da16 	blt	r4,r3,1398c <__adddf3+0x7fc>
   13624:	01000804 	movi	r4,32
   13628:	20c9c83a 	sub	r4,r4,r3
   1362c:	4114983a 	sll	r10,r8,r4
   13630:	88cad83a 	srl	r5,r17,r3
   13634:	8908983a 	sll	r4,r17,r4
   13638:	40c6d83a 	srl	r3,r8,r3
   1363c:	5162b03a 	or	r17,r10,r5
   13640:	2008c03a 	cmpne	r4,r4,zero
   13644:	8922b03a 	or	r17,r17,r4
   13648:	3463c83a 	sub	r17,r6,r17
   1364c:	48c7c83a 	sub	r3,r9,r3
   13650:	344d803a 	cmpltu	r6,r6,r17
   13654:	1991c83a 	sub	r8,r3,r6
   13658:	1021883a 	mov	r16,r2
   1365c:	3825883a 	mov	r18,r7
   13660:	003f2706 	br	13300 <_gp+0xffff1860>
   13664:	24d0b03a 	or	r8,r4,r19
   13668:	40001b1e 	bne	r8,zero,136d8 <__adddf3+0x548>
   1366c:	0005883a 	mov	r2,zero
   13670:	0007883a 	mov	r3,zero
   13674:	0021883a 	mov	r16,zero
   13678:	003f4d06 	br	133b0 <_gp+0xffff1910>
   1367c:	008007c4 	movi	r2,31
   13680:	11003c16 	blt	r2,r4,13774 <__adddf3+0x5e4>
   13684:	00800804 	movi	r2,32
   13688:	1105c83a 	sub	r2,r2,r4
   1368c:	488e983a 	sll	r7,r9,r2
   13690:	310ad83a 	srl	r5,r6,r4
   13694:	3084983a 	sll	r2,r6,r2
   13698:	4912d83a 	srl	r9,r9,r4
   1369c:	394ab03a 	or	r5,r7,r5
   136a0:	1004c03a 	cmpne	r2,r2,zero
   136a4:	288ab03a 	or	r5,r5,r2
   136a8:	003f5306 	br	133f8 <_gp+0xffff1958>
   136ac:	4448b03a 	or	r4,r8,r17
   136b0:	20003e26 	beq	r4,zero,137ac <__adddf3+0x61c>
   136b4:	00c6303a 	nor	r3,zero,r3
   136b8:	18003a1e 	bne	r3,zero,137a4 <__adddf3+0x614>
   136bc:	3463c83a 	sub	r17,r6,r17
   136c0:	4a07c83a 	sub	r3,r9,r8
   136c4:	344d803a 	cmpltu	r6,r6,r17
   136c8:	1991c83a 	sub	r8,r3,r6
   136cc:	1021883a 	mov	r16,r2
   136d0:	3825883a 	mov	r18,r7
   136d4:	003f0a06 	br	13300 <_gp+0xffff1860>
   136d8:	2023883a 	mov	r17,r4
   136dc:	003f0d06 	br	13314 <_gp+0xffff1874>
   136e0:	0081ffc4 	movi	r2,2047
   136e4:	80bf3f1e 	bne	r16,r2,133e4 <_gp+0xffff1944>
   136e8:	003ec806 	br	1320c <_gp+0xffff176c>
   136ec:	0005883a 	mov	r2,zero
   136f0:	003fb106 	br	135b8 <_gp+0xffff1b18>
   136f4:	0007883a 	mov	r3,zero
   136f8:	003fbc06 	br	135ec <_gp+0xffff1b4c>
   136fc:	4444b03a 	or	r2,r8,r17
   13700:	8000871e 	bne	r16,zero,13920 <__adddf3+0x790>
   13704:	1000ba26 	beq	r2,zero,139f0 <__adddf3+0x860>
   13708:	4984b03a 	or	r2,r9,r6
   1370c:	103ebf26 	beq	r2,zero,1320c <_gp+0xffff176c>
   13710:	8985883a 	add	r2,r17,r6
   13714:	4247883a 	add	r3,r8,r9
   13718:	1451803a 	cmpltu	r8,r2,r17
   1371c:	40d1883a 	add	r8,r8,r3
   13720:	40c0202c 	andhi	r3,r8,128
   13724:	1023883a 	mov	r17,r2
   13728:	183f1a26 	beq	r3,zero,13394 <_gp+0xffff18f4>
   1372c:	00bfe034 	movhi	r2,65408
   13730:	10bfffc4 	addi	r2,r2,-1
   13734:	2021883a 	mov	r16,r4
   13738:	4090703a 	and	r8,r8,r2
   1373c:	003eb306 	br	1320c <_gp+0xffff176c>
   13740:	4444b03a 	or	r2,r8,r17
   13744:	8000291e 	bne	r16,zero,137ec <__adddf3+0x65c>
   13748:	10004b1e 	bne	r2,zero,13878 <__adddf3+0x6e8>
   1374c:	4990b03a 	or	r8,r9,r6
   13750:	40008b26 	beq	r8,zero,13980 <__adddf3+0x7f0>
   13754:	4811883a 	mov	r8,r9
   13758:	3023883a 	mov	r17,r6
   1375c:	3825883a 	mov	r18,r7
   13760:	003eaa06 	br	1320c <_gp+0xffff176c>
   13764:	1021883a 	mov	r16,r2
   13768:	0011883a 	mov	r8,zero
   1376c:	0005883a 	mov	r2,zero
   13770:	003f0f06 	br	133b0 <_gp+0xffff1910>
   13774:	217ff804 	addi	r5,r4,-32
   13778:	00800804 	movi	r2,32
   1377c:	494ad83a 	srl	r5,r9,r5
   13780:	20807d26 	beq	r4,r2,13978 <__adddf3+0x7e8>
   13784:	00801004 	movi	r2,64
   13788:	1109c83a 	sub	r4,r2,r4
   1378c:	4912983a 	sll	r9,r9,r4
   13790:	498cb03a 	or	r6,r9,r6
   13794:	300cc03a 	cmpne	r6,r6,zero
   13798:	298ab03a 	or	r5,r5,r6
   1379c:	0013883a 	mov	r9,zero
   137a0:	003f1506 	br	133f8 <_gp+0xffff1958>
   137a4:	0101ffc4 	movi	r4,2047
   137a8:	113f9a1e 	bne	r2,r4,13614 <_gp+0xffff1b74>
   137ac:	4811883a 	mov	r8,r9
   137b0:	3023883a 	mov	r17,r6
   137b4:	1021883a 	mov	r16,r2
   137b8:	3825883a 	mov	r18,r7
   137bc:	003e9306 	br	1320c <_gp+0xffff176c>
   137c0:	8000161e 	bne	r16,zero,1381c <__adddf3+0x68c>
   137c4:	444ab03a 	or	r5,r8,r17
   137c8:	28005126 	beq	r5,zero,13910 <__adddf3+0x780>
   137cc:	0108303a 	nor	r4,zero,r4
   137d0:	20004d1e 	bne	r4,zero,13908 <__adddf3+0x778>
   137d4:	89a3883a 	add	r17,r17,r6
   137d8:	4253883a 	add	r9,r8,r9
   137dc:	898d803a 	cmpltu	r6,r17,r6
   137e0:	3251883a 	add	r8,r6,r9
   137e4:	1021883a 	mov	r16,r2
   137e8:	003f0806 	br	1340c <_gp+0xffff196c>
   137ec:	1000301e 	bne	r2,zero,138b0 <__adddf3+0x720>
   137f0:	4984b03a 	or	r2,r9,r6
   137f4:	10007126 	beq	r2,zero,139bc <__adddf3+0x82c>
   137f8:	4811883a 	mov	r8,r9
   137fc:	3023883a 	mov	r17,r6
   13800:	3825883a 	mov	r18,r7
   13804:	0401ffc4 	movi	r16,2047
   13808:	003e8006 	br	1320c <_gp+0xffff176c>
   1380c:	4462b03a 	or	r17,r8,r17
   13810:	8822c03a 	cmpne	r17,r17,zero
   13814:	0007883a 	mov	r3,zero
   13818:	003f8b06 	br	13648 <_gp+0xffff1ba8>
   1381c:	0141ffc4 	movi	r5,2047
   13820:	11403b26 	beq	r2,r5,13910 <__adddf3+0x780>
   13824:	0109c83a 	sub	r4,zero,r4
   13828:	42002034 	orhi	r8,r8,128
   1382c:	01400e04 	movi	r5,56
   13830:	29006716 	blt	r5,r4,139d0 <__adddf3+0x840>
   13834:	014007c4 	movi	r5,31
   13838:	29007016 	blt	r5,r4,139fc <__adddf3+0x86c>
   1383c:	01400804 	movi	r5,32
   13840:	290bc83a 	sub	r5,r5,r4
   13844:	4154983a 	sll	r10,r8,r5
   13848:	890ed83a 	srl	r7,r17,r4
   1384c:	894a983a 	sll	r5,r17,r5
   13850:	4108d83a 	srl	r4,r8,r4
   13854:	51e2b03a 	or	r17,r10,r7
   13858:	280ac03a 	cmpne	r5,r5,zero
   1385c:	8962b03a 	or	r17,r17,r5
   13860:	89a3883a 	add	r17,r17,r6
   13864:	2253883a 	add	r9,r4,r9
   13868:	898d803a 	cmpltu	r6,r17,r6
   1386c:	3251883a 	add	r8,r6,r9
   13870:	1021883a 	mov	r16,r2
   13874:	003ee506 	br	1340c <_gp+0xffff196c>
   13878:	4984b03a 	or	r2,r9,r6
   1387c:	103e6326 	beq	r2,zero,1320c <_gp+0xffff176c>
   13880:	8987c83a 	sub	r3,r17,r6
   13884:	88c9803a 	cmpltu	r4,r17,r3
   13888:	4245c83a 	sub	r2,r8,r9
   1388c:	1105c83a 	sub	r2,r2,r4
   13890:	1100202c 	andhi	r4,r2,128
   13894:	203ebb26 	beq	r4,zero,13384 <_gp+0xffff18e4>
   13898:	3463c83a 	sub	r17,r6,r17
   1389c:	4a07c83a 	sub	r3,r9,r8
   138a0:	344d803a 	cmpltu	r6,r6,r17
   138a4:	1991c83a 	sub	r8,r3,r6
   138a8:	3825883a 	mov	r18,r7
   138ac:	003e5706 	br	1320c <_gp+0xffff176c>
   138b0:	4984b03a 	or	r2,r9,r6
   138b4:	10002e26 	beq	r2,zero,13970 <__adddf3+0x7e0>
   138b8:	4004d0fa 	srli	r2,r8,3
   138bc:	8822d0fa 	srli	r17,r17,3
   138c0:	4010977a 	slli	r8,r8,29
   138c4:	10c0022c 	andhi	r3,r2,8
   138c8:	4462b03a 	or	r17,r8,r17
   138cc:	18000826 	beq	r3,zero,138f0 <__adddf3+0x760>
   138d0:	4808d0fa 	srli	r4,r9,3
   138d4:	20c0022c 	andhi	r3,r4,8
   138d8:	1800051e 	bne	r3,zero,138f0 <__adddf3+0x760>
   138dc:	300cd0fa 	srli	r6,r6,3
   138e0:	4806977a 	slli	r3,r9,29
   138e4:	2005883a 	mov	r2,r4
   138e8:	3825883a 	mov	r18,r7
   138ec:	19a2b03a 	or	r17,r3,r6
   138f0:	8810d77a 	srli	r8,r17,29
   138f4:	100490fa 	slli	r2,r2,3
   138f8:	882290fa 	slli	r17,r17,3
   138fc:	0401ffc4 	movi	r16,2047
   13900:	4090b03a 	or	r8,r8,r2
   13904:	003e4106 	br	1320c <_gp+0xffff176c>
   13908:	0141ffc4 	movi	r5,2047
   1390c:	117fc71e 	bne	r2,r5,1382c <_gp+0xffff1d8c>
   13910:	4811883a 	mov	r8,r9
   13914:	3023883a 	mov	r17,r6
   13918:	1021883a 	mov	r16,r2
   1391c:	003e3b06 	br	1320c <_gp+0xffff176c>
   13920:	10002f26 	beq	r2,zero,139e0 <__adddf3+0x850>
   13924:	4984b03a 	or	r2,r9,r6
   13928:	10001126 	beq	r2,zero,13970 <__adddf3+0x7e0>
   1392c:	4004d0fa 	srli	r2,r8,3
   13930:	8822d0fa 	srli	r17,r17,3
   13934:	4010977a 	slli	r8,r8,29
   13938:	10c0022c 	andhi	r3,r2,8
   1393c:	4462b03a 	or	r17,r8,r17
   13940:	183feb26 	beq	r3,zero,138f0 <_gp+0xffff1e50>
   13944:	4808d0fa 	srli	r4,r9,3
   13948:	20c0022c 	andhi	r3,r4,8
   1394c:	183fe81e 	bne	r3,zero,138f0 <_gp+0xffff1e50>
   13950:	300cd0fa 	srli	r6,r6,3
   13954:	4806977a 	slli	r3,r9,29
   13958:	2005883a 	mov	r2,r4
   1395c:	19a2b03a 	or	r17,r3,r6
   13960:	003fe306 	br	138f0 <_gp+0xffff1e50>
   13964:	0011883a 	mov	r8,zero
   13968:	0005883a 	mov	r2,zero
   1396c:	003e3f06 	br	1326c <_gp+0xffff17cc>
   13970:	0401ffc4 	movi	r16,2047
   13974:	003e2506 	br	1320c <_gp+0xffff176c>
   13978:	0013883a 	mov	r9,zero
   1397c:	003f8406 	br	13790 <_gp+0xffff1cf0>
   13980:	0005883a 	mov	r2,zero
   13984:	0007883a 	mov	r3,zero
   13988:	003e8906 	br	133b0 <_gp+0xffff1910>
   1398c:	197ff804 	addi	r5,r3,-32
   13990:	01000804 	movi	r4,32
   13994:	414ad83a 	srl	r5,r8,r5
   13998:	19002426 	beq	r3,r4,13a2c <__adddf3+0x89c>
   1399c:	01001004 	movi	r4,64
   139a0:	20c7c83a 	sub	r3,r4,r3
   139a4:	40c6983a 	sll	r3,r8,r3
   139a8:	1c46b03a 	or	r3,r3,r17
   139ac:	1806c03a 	cmpne	r3,r3,zero
   139b0:	28e2b03a 	or	r17,r5,r3
   139b4:	0007883a 	mov	r3,zero
   139b8:	003f2306 	br	13648 <_gp+0xffff1ba8>
   139bc:	0007883a 	mov	r3,zero
   139c0:	5811883a 	mov	r8,r11
   139c4:	00bfffc4 	movi	r2,-1
   139c8:	0401ffc4 	movi	r16,2047
   139cc:	003e7806 	br	133b0 <_gp+0xffff1910>
   139d0:	4462b03a 	or	r17,r8,r17
   139d4:	8822c03a 	cmpne	r17,r17,zero
   139d8:	0009883a 	mov	r4,zero
   139dc:	003fa006 	br	13860 <_gp+0xffff1dc0>
   139e0:	4811883a 	mov	r8,r9
   139e4:	3023883a 	mov	r17,r6
   139e8:	0401ffc4 	movi	r16,2047
   139ec:	003e0706 	br	1320c <_gp+0xffff176c>
   139f0:	4811883a 	mov	r8,r9
   139f4:	3023883a 	mov	r17,r6
   139f8:	003e0406 	br	1320c <_gp+0xffff176c>
   139fc:	21fff804 	addi	r7,r4,-32
   13a00:	01400804 	movi	r5,32
   13a04:	41ced83a 	srl	r7,r8,r7
   13a08:	21400a26 	beq	r4,r5,13a34 <__adddf3+0x8a4>
   13a0c:	01401004 	movi	r5,64
   13a10:	2909c83a 	sub	r4,r5,r4
   13a14:	4108983a 	sll	r4,r8,r4
   13a18:	2448b03a 	or	r4,r4,r17
   13a1c:	2008c03a 	cmpne	r4,r4,zero
   13a20:	3922b03a 	or	r17,r7,r4
   13a24:	0009883a 	mov	r4,zero
   13a28:	003f8d06 	br	13860 <_gp+0xffff1dc0>
   13a2c:	0007883a 	mov	r3,zero
   13a30:	003fdd06 	br	139a8 <_gp+0xffff1f08>
   13a34:	0009883a 	mov	r4,zero
   13a38:	003ff706 	br	13a18 <_gp+0xffff1f78>

00013a3c <__divdf3>:
   13a3c:	defff004 	addi	sp,sp,-64
   13a40:	dc800815 	stw	r18,32(sp)
   13a44:	2824d53a 	srli	r18,r5,20
   13a48:	dd800c15 	stw	r22,48(sp)
   13a4c:	282cd7fa 	srli	r22,r5,31
   13a50:	dc000615 	stw	r16,24(sp)
   13a54:	04000434 	movhi	r16,16
   13a58:	843fffc4 	addi	r16,r16,-1
   13a5c:	dfc00f15 	stw	ra,60(sp)
   13a60:	df000e15 	stw	fp,56(sp)
   13a64:	ddc00d15 	stw	r23,52(sp)
   13a68:	dd400b15 	stw	r21,44(sp)
   13a6c:	dd000a15 	stw	r20,40(sp)
   13a70:	dcc00915 	stw	r19,36(sp)
   13a74:	dc400715 	stw	r17,28(sp)
   13a78:	9481ffcc 	andi	r18,r18,2047
   13a7c:	2c20703a 	and	r16,r5,r16
   13a80:	b2003fcc 	andi	r8,r22,255
   13a84:	90006126 	beq	r18,zero,13c0c <__divdf3+0x1d0>
   13a88:	0081ffc4 	movi	r2,2047
   13a8c:	202b883a 	mov	r21,r4
   13a90:	90803726 	beq	r18,r2,13b70 <__divdf3+0x134>
   13a94:	80800434 	orhi	r2,r16,16
   13a98:	100490fa 	slli	r2,r2,3
   13a9c:	2020d77a 	srli	r16,r4,29
   13aa0:	202a90fa 	slli	r21,r4,3
   13aa4:	94bf0044 	addi	r18,r18,-1023
   13aa8:	80a0b03a 	or	r16,r16,r2
   13aac:	0013883a 	mov	r9,zero
   13ab0:	000b883a 	mov	r5,zero
   13ab4:	3806d53a 	srli	r3,r7,20
   13ab8:	382ed7fa 	srli	r23,r7,31
   13abc:	04400434 	movhi	r17,16
   13ac0:	8c7fffc4 	addi	r17,r17,-1
   13ac4:	18c1ffcc 	andi	r3,r3,2047
   13ac8:	3029883a 	mov	r20,r6
   13acc:	3c62703a 	and	r17,r7,r17
   13ad0:	bf003fcc 	andi	fp,r23,255
   13ad4:	18006e26 	beq	r3,zero,13c90 <__divdf3+0x254>
   13ad8:	0081ffc4 	movi	r2,2047
   13adc:	18806626 	beq	r3,r2,13c78 <__divdf3+0x23c>
   13ae0:	88800434 	orhi	r2,r17,16
   13ae4:	100490fa 	slli	r2,r2,3
   13ae8:	3022d77a 	srli	r17,r6,29
   13aec:	302890fa 	slli	r20,r6,3
   13af0:	18ff0044 	addi	r3,r3,-1023
   13af4:	88a2b03a 	or	r17,r17,r2
   13af8:	000f883a 	mov	r7,zero
   13afc:	b5e6f03a 	xor	r19,r22,r23
   13b00:	3a4cb03a 	or	r6,r7,r9
   13b04:	008003c4 	movi	r2,15
   13b08:	9809883a 	mov	r4,r19
   13b0c:	90c7c83a 	sub	r3,r18,r3
   13b10:	9cc03fcc 	andi	r19,r19,255
   13b14:	11809636 	bltu	r2,r6,13d70 <__divdf3+0x334>
   13b18:	300c90ba 	slli	r6,r6,2
   13b1c:	00800074 	movhi	r2,1
   13b20:	108ecc04 	addi	r2,r2,15152
   13b24:	308d883a 	add	r6,r6,r2
   13b28:	30800017 	ldw	r2,0(r6)
   13b2c:	1000683a 	jmp	r2
   13b30:	00013d70 	cmpltui	zero,zero,1269
   13b34:	00013ba8 	cmpgeui	zero,zero,1262
   13b38:	00013d60 	cmpeqi	zero,zero,1269
   13b3c:	00013b9c 	xori	zero,zero,1262
   13b40:	00013d60 	cmpeqi	zero,zero,1269
   13b44:	00013d34 	movhi	zero,1268
   13b48:	00013d60 	cmpeqi	zero,zero,1269
   13b4c:	00013b9c 	xori	zero,zero,1262
   13b50:	00013ba8 	cmpgeui	zero,zero,1262
   13b54:	00013ba8 	cmpgeui	zero,zero,1262
   13b58:	00013d34 	movhi	zero,1268
   13b5c:	00013b9c 	xori	zero,zero,1262
   13b60:	00013b8c 	andi	zero,zero,1262
   13b64:	00013b8c 	andi	zero,zero,1262
   13b68:	00013b8c 	andi	zero,zero,1262
   13b6c:	000140f8 	rdprs	zero,zero,1283
   13b70:	2404b03a 	or	r2,r4,r16
   13b74:	10006c1e 	bne	r2,zero,13d28 <__divdf3+0x2ec>
   13b78:	02400204 	movi	r9,8
   13b7c:	0021883a 	mov	r16,zero
   13b80:	002b883a 	mov	r21,zero
   13b84:	01400084 	movi	r5,2
   13b88:	003fca06 	br	13ab4 <_gp+0xffff2014>
   13b8c:	8023883a 	mov	r17,r16
   13b90:	a829883a 	mov	r20,r21
   13b94:	4039883a 	mov	fp,r8
   13b98:	280f883a 	mov	r7,r5
   13b9c:	00800084 	movi	r2,2
   13ba0:	3881601e 	bne	r7,r2,14124 <__divdf3+0x6e8>
   13ba4:	e027883a 	mov	r19,fp
   13ba8:	9900004c 	andi	r4,r19,1
   13bac:	0081ffc4 	movi	r2,2047
   13bb0:	0021883a 	mov	r16,zero
   13bb4:	002b883a 	mov	r21,zero
   13bb8:	1004953a 	slli	r2,r2,20
   13bbc:	20c03fcc 	andi	r3,r4,255
   13bc0:	01400434 	movhi	r5,16
   13bc4:	297fffc4 	addi	r5,r5,-1
   13bc8:	180697fa 	slli	r3,r3,31
   13bcc:	8160703a 	and	r16,r16,r5
   13bd0:	80a0b03a 	or	r16,r16,r2
   13bd4:	80c6b03a 	or	r3,r16,r3
   13bd8:	a805883a 	mov	r2,r21
   13bdc:	dfc00f17 	ldw	ra,60(sp)
   13be0:	df000e17 	ldw	fp,56(sp)
   13be4:	ddc00d17 	ldw	r23,52(sp)
   13be8:	dd800c17 	ldw	r22,48(sp)
   13bec:	dd400b17 	ldw	r21,44(sp)
   13bf0:	dd000a17 	ldw	r20,40(sp)
   13bf4:	dcc00917 	ldw	r19,36(sp)
   13bf8:	dc800817 	ldw	r18,32(sp)
   13bfc:	dc400717 	ldw	r17,28(sp)
   13c00:	dc000617 	ldw	r16,24(sp)
   13c04:	dec01004 	addi	sp,sp,64
   13c08:	f800283a 	ret
   13c0c:	2404b03a 	or	r2,r4,r16
   13c10:	2023883a 	mov	r17,r4
   13c14:	10003f26 	beq	r2,zero,13d14 <__divdf3+0x2d8>
   13c18:	80015e26 	beq	r16,zero,14194 <__divdf3+0x758>
   13c1c:	8009883a 	mov	r4,r16
   13c20:	d9800215 	stw	r6,8(sp)
   13c24:	d9c00515 	stw	r7,20(sp)
   13c28:	da000415 	stw	r8,16(sp)
   13c2c:	0015a380 	call	15a38 <__clzsi2>
   13c30:	d9800217 	ldw	r6,8(sp)
   13c34:	d9c00517 	ldw	r7,20(sp)
   13c38:	da000417 	ldw	r8,16(sp)
   13c3c:	113ffd44 	addi	r4,r2,-11
   13c40:	00c00704 	movi	r3,28
   13c44:	19014f16 	blt	r3,r4,14184 <__divdf3+0x748>
   13c48:	00c00744 	movi	r3,29
   13c4c:	157ffe04 	addi	r21,r2,-8
   13c50:	1907c83a 	sub	r3,r3,r4
   13c54:	8560983a 	sll	r16,r16,r21
   13c58:	88c6d83a 	srl	r3,r17,r3
   13c5c:	8d6a983a 	sll	r21,r17,r21
   13c60:	1c20b03a 	or	r16,r3,r16
   13c64:	1080fcc4 	addi	r2,r2,1011
   13c68:	00a5c83a 	sub	r18,zero,r2
   13c6c:	0013883a 	mov	r9,zero
   13c70:	000b883a 	mov	r5,zero
   13c74:	003f8f06 	br	13ab4 <_gp+0xffff2014>
   13c78:	3444b03a 	or	r2,r6,r17
   13c7c:	1000231e 	bne	r2,zero,13d0c <__divdf3+0x2d0>
   13c80:	0023883a 	mov	r17,zero
   13c84:	0029883a 	mov	r20,zero
   13c88:	01c00084 	movi	r7,2
   13c8c:	003f9b06 	br	13afc <_gp+0xffff205c>
   13c90:	3444b03a 	or	r2,r6,r17
   13c94:	10001926 	beq	r2,zero,13cfc <__divdf3+0x2c0>
   13c98:	88014b26 	beq	r17,zero,141c8 <__divdf3+0x78c>
   13c9c:	8809883a 	mov	r4,r17
   13ca0:	d9400115 	stw	r5,4(sp)
   13ca4:	d9800215 	stw	r6,8(sp)
   13ca8:	da000415 	stw	r8,16(sp)
   13cac:	da400315 	stw	r9,12(sp)
   13cb0:	0015a380 	call	15a38 <__clzsi2>
   13cb4:	d9400117 	ldw	r5,4(sp)
   13cb8:	d9800217 	ldw	r6,8(sp)
   13cbc:	da000417 	ldw	r8,16(sp)
   13cc0:	da400317 	ldw	r9,12(sp)
   13cc4:	113ffd44 	addi	r4,r2,-11
   13cc8:	00c00704 	movi	r3,28
   13ccc:	19013a16 	blt	r3,r4,141b8 <__divdf3+0x77c>
   13cd0:	00c00744 	movi	r3,29
   13cd4:	153ffe04 	addi	r20,r2,-8
   13cd8:	1907c83a 	sub	r3,r3,r4
   13cdc:	8d22983a 	sll	r17,r17,r20
   13ce0:	30c6d83a 	srl	r3,r6,r3
   13ce4:	3528983a 	sll	r20,r6,r20
   13ce8:	1c62b03a 	or	r17,r3,r17
   13cec:	1080fcc4 	addi	r2,r2,1011
   13cf0:	0087c83a 	sub	r3,zero,r2
   13cf4:	000f883a 	mov	r7,zero
   13cf8:	003f8006 	br	13afc <_gp+0xffff205c>
   13cfc:	0023883a 	mov	r17,zero
   13d00:	0029883a 	mov	r20,zero
   13d04:	01c00044 	movi	r7,1
   13d08:	003f7c06 	br	13afc <_gp+0xffff205c>
   13d0c:	01c000c4 	movi	r7,3
   13d10:	003f7a06 	br	13afc <_gp+0xffff205c>
   13d14:	02400104 	movi	r9,4
   13d18:	0021883a 	mov	r16,zero
   13d1c:	002b883a 	mov	r21,zero
   13d20:	01400044 	movi	r5,1
   13d24:	003f6306 	br	13ab4 <_gp+0xffff2014>
   13d28:	02400304 	movi	r9,12
   13d2c:	014000c4 	movi	r5,3
   13d30:	003f6006 	br	13ab4 <_gp+0xffff2014>
   13d34:	04000434 	movhi	r16,16
   13d38:	0009883a 	mov	r4,zero
   13d3c:	843fffc4 	addi	r16,r16,-1
   13d40:	057fffc4 	movi	r21,-1
   13d44:	0081ffc4 	movi	r2,2047
   13d48:	003f9b06 	br	13bb8 <_gp+0xffff2118>
   13d4c:	00c00044 	movi	r3,1
   13d50:	1887c83a 	sub	r3,r3,r2
   13d54:	01000e04 	movi	r4,56
   13d58:	20c1530e 	bge	r4,r3,142a8 <__divdf3+0x86c>
   13d5c:	9900004c 	andi	r4,r19,1
   13d60:	0005883a 	mov	r2,zero
   13d64:	0021883a 	mov	r16,zero
   13d68:	002b883a 	mov	r21,zero
   13d6c:	003f9206 	br	13bb8 <_gp+0xffff2118>
   13d70:	8c012e36 	bltu	r17,r16,1422c <__divdf3+0x7f0>
   13d74:	84412c26 	beq	r16,r17,14228 <__divdf3+0x7ec>
   13d78:	a82f883a 	mov	r23,r21
   13d7c:	18ffffc4 	addi	r3,r3,-1
   13d80:	002b883a 	mov	r21,zero
   13d84:	a004d63a 	srli	r2,r20,24
   13d88:	8822923a 	slli	r17,r17,8
   13d8c:	a028923a 	slli	r20,r20,8
   13d90:	8009883a 	mov	r4,r16
   13d94:	88acb03a 	or	r22,r17,r2
   13d98:	dd000015 	stw	r20,0(sp)
   13d9c:	b028d43a 	srli	r20,r22,16
   13da0:	d8c00215 	stw	r3,8(sp)
   13da4:	b4bfffcc 	andi	r18,r22,65535
   13da8:	a00b883a 	mov	r5,r20
   13dac:	0015b940 	call	15b94 <__udivsi3>
   13db0:	100b883a 	mov	r5,r2
   13db4:	9009883a 	mov	r4,r18
   13db8:	1023883a 	mov	r17,r2
   13dbc:	00126dc0 	call	126dc <__mulsi3>
   13dc0:	8009883a 	mov	r4,r16
   13dc4:	a00b883a 	mov	r5,r20
   13dc8:	1039883a 	mov	fp,r2
   13dcc:	0015bf80 	call	15bf8 <__umodsi3>
   13dd0:	1004943a 	slli	r2,r2,16
   13dd4:	b808d43a 	srli	r4,r23,16
   13dd8:	d8c00217 	ldw	r3,8(sp)
   13ddc:	2084b03a 	or	r2,r4,r2
   13de0:	1700062e 	bgeu	r2,fp,13dfc <__divdf3+0x3c0>
   13de4:	1585883a 	add	r2,r2,r22
   13de8:	893fffc4 	addi	r4,r17,-1
   13dec:	15811d36 	bltu	r2,r22,14264 <__divdf3+0x828>
   13df0:	17011c2e 	bgeu	r2,fp,14264 <__divdf3+0x828>
   13df4:	8c7fff84 	addi	r17,r17,-2
   13df8:	1585883a 	add	r2,r2,r22
   13dfc:	1739c83a 	sub	fp,r2,fp
   13e00:	a00b883a 	mov	r5,r20
   13e04:	e009883a 	mov	r4,fp
   13e08:	d8c00215 	stw	r3,8(sp)
   13e0c:	0015b940 	call	15b94 <__udivsi3>
   13e10:	100b883a 	mov	r5,r2
   13e14:	9009883a 	mov	r4,r18
   13e18:	1021883a 	mov	r16,r2
   13e1c:	00126dc0 	call	126dc <__mulsi3>
   13e20:	a00b883a 	mov	r5,r20
   13e24:	e009883a 	mov	r4,fp
   13e28:	d8800415 	stw	r2,16(sp)
   13e2c:	0015bf80 	call	15bf8 <__umodsi3>
   13e30:	1004943a 	slli	r2,r2,16
   13e34:	da000417 	ldw	r8,16(sp)
   13e38:	bdffffcc 	andi	r23,r23,65535
   13e3c:	b884b03a 	or	r2,r23,r2
   13e40:	d8c00217 	ldw	r3,8(sp)
   13e44:	1200062e 	bgeu	r2,r8,13e60 <__divdf3+0x424>
   13e48:	1585883a 	add	r2,r2,r22
   13e4c:	813fffc4 	addi	r4,r16,-1
   13e50:	15810236 	bltu	r2,r22,1425c <__divdf3+0x820>
   13e54:	1201012e 	bgeu	r2,r8,1425c <__divdf3+0x820>
   13e58:	843fff84 	addi	r16,r16,-2
   13e5c:	1585883a 	add	r2,r2,r22
   13e60:	8822943a 	slli	r17,r17,16
   13e64:	d9800017 	ldw	r6,0(sp)
   13e68:	1211c83a 	sub	r8,r2,r8
   13e6c:	8c22b03a 	or	r17,r17,r16
   13e70:	373fffcc 	andi	fp,r6,65535
   13e74:	8abfffcc 	andi	r10,r17,65535
   13e78:	8820d43a 	srli	r16,r17,16
   13e7c:	5009883a 	mov	r4,r10
   13e80:	e00b883a 	mov	r5,fp
   13e84:	302ed43a 	srli	r23,r6,16
   13e88:	d8c00215 	stw	r3,8(sp)
   13e8c:	da000415 	stw	r8,16(sp)
   13e90:	da800115 	stw	r10,4(sp)
   13e94:	00126dc0 	call	126dc <__mulsi3>
   13e98:	800b883a 	mov	r5,r16
   13e9c:	e009883a 	mov	r4,fp
   13ea0:	d8800515 	stw	r2,20(sp)
   13ea4:	00126dc0 	call	126dc <__mulsi3>
   13ea8:	8009883a 	mov	r4,r16
   13eac:	b80b883a 	mov	r5,r23
   13eb0:	d8800315 	stw	r2,12(sp)
   13eb4:	00126dc0 	call	126dc <__mulsi3>
   13eb8:	da800117 	ldw	r10,4(sp)
   13ebc:	b80b883a 	mov	r5,r23
   13ec0:	1021883a 	mov	r16,r2
   13ec4:	5009883a 	mov	r4,r10
   13ec8:	00126dc0 	call	126dc <__mulsi3>
   13ecc:	d9c00517 	ldw	r7,20(sp)
   13ed0:	da400317 	ldw	r9,12(sp)
   13ed4:	d8c00217 	ldw	r3,8(sp)
   13ed8:	3808d43a 	srli	r4,r7,16
   13edc:	1245883a 	add	r2,r2,r9
   13ee0:	da000417 	ldw	r8,16(sp)
   13ee4:	2085883a 	add	r2,r4,r2
   13ee8:	1240022e 	bgeu	r2,r9,13ef4 <__divdf3+0x4b8>
   13eec:	01000074 	movhi	r4,1
   13ef0:	8121883a 	add	r16,r16,r4
   13ef4:	1008d43a 	srli	r4,r2,16
   13ef8:	1004943a 	slli	r2,r2,16
   13efc:	39ffffcc 	andi	r7,r7,65535
   13f00:	2409883a 	add	r4,r4,r16
   13f04:	11c5883a 	add	r2,r2,r7
   13f08:	4100bb36 	bltu	r8,r4,141f8 <__divdf3+0x7bc>
   13f0c:	4100d726 	beq	r8,r4,1426c <__divdf3+0x830>
   13f10:	4109c83a 	sub	r4,r8,r4
   13f14:	a8a1c83a 	sub	r16,r21,r2
   13f18:	ac2b803a 	cmpltu	r21,r21,r16
   13f1c:	256bc83a 	sub	r21,r4,r21
   13f20:	b540d926 	beq	r22,r21,14288 <__divdf3+0x84c>
   13f24:	a00b883a 	mov	r5,r20
   13f28:	a809883a 	mov	r4,r21
   13f2c:	d8c00215 	stw	r3,8(sp)
   13f30:	0015b940 	call	15b94 <__udivsi3>
   13f34:	100b883a 	mov	r5,r2
   13f38:	9009883a 	mov	r4,r18
   13f3c:	d8800515 	stw	r2,20(sp)
   13f40:	00126dc0 	call	126dc <__mulsi3>
   13f44:	a809883a 	mov	r4,r21
   13f48:	a00b883a 	mov	r5,r20
   13f4c:	d8800415 	stw	r2,16(sp)
   13f50:	0015bf80 	call	15bf8 <__umodsi3>
   13f54:	1004943a 	slli	r2,r2,16
   13f58:	8008d43a 	srli	r4,r16,16
   13f5c:	da000417 	ldw	r8,16(sp)
   13f60:	d8c00217 	ldw	r3,8(sp)
   13f64:	2084b03a 	or	r2,r4,r2
   13f68:	d9c00517 	ldw	r7,20(sp)
   13f6c:	1200062e 	bgeu	r2,r8,13f88 <__divdf3+0x54c>
   13f70:	1585883a 	add	r2,r2,r22
   13f74:	393fffc4 	addi	r4,r7,-1
   13f78:	1580c536 	bltu	r2,r22,14290 <__divdf3+0x854>
   13f7c:	1200c42e 	bgeu	r2,r8,14290 <__divdf3+0x854>
   13f80:	39ffff84 	addi	r7,r7,-2
   13f84:	1585883a 	add	r2,r2,r22
   13f88:	122bc83a 	sub	r21,r2,r8
   13f8c:	a00b883a 	mov	r5,r20
   13f90:	a809883a 	mov	r4,r21
   13f94:	d8c00215 	stw	r3,8(sp)
   13f98:	d9c00515 	stw	r7,20(sp)
   13f9c:	0015b940 	call	15b94 <__udivsi3>
   13fa0:	9009883a 	mov	r4,r18
   13fa4:	100b883a 	mov	r5,r2
   13fa8:	d8800415 	stw	r2,16(sp)
   13fac:	00126dc0 	call	126dc <__mulsi3>
   13fb0:	a809883a 	mov	r4,r21
   13fb4:	a00b883a 	mov	r5,r20
   13fb8:	1025883a 	mov	r18,r2
   13fbc:	0015bf80 	call	15bf8 <__umodsi3>
   13fc0:	1004943a 	slli	r2,r2,16
   13fc4:	813fffcc 	andi	r4,r16,65535
   13fc8:	d8c00217 	ldw	r3,8(sp)
   13fcc:	20a0b03a 	or	r16,r4,r2
   13fd0:	d9c00517 	ldw	r7,20(sp)
   13fd4:	da000417 	ldw	r8,16(sp)
   13fd8:	8480062e 	bgeu	r16,r18,13ff4 <__divdf3+0x5b8>
   13fdc:	85a1883a 	add	r16,r16,r22
   13fe0:	40bfffc4 	addi	r2,r8,-1
   13fe4:	8580ac36 	bltu	r16,r22,14298 <__divdf3+0x85c>
   13fe8:	8480ab2e 	bgeu	r16,r18,14298 <__divdf3+0x85c>
   13fec:	423fff84 	addi	r8,r8,-2
   13ff0:	85a1883a 	add	r16,r16,r22
   13ff4:	3804943a 	slli	r2,r7,16
   13ff8:	84a1c83a 	sub	r16,r16,r18
   13ffc:	e009883a 	mov	r4,fp
   14000:	1228b03a 	or	r20,r2,r8
   14004:	a1ffffcc 	andi	r7,r20,65535
   14008:	a024d43a 	srli	r18,r20,16
   1400c:	380b883a 	mov	r5,r7
   14010:	d8c00215 	stw	r3,8(sp)
   14014:	d9c00515 	stw	r7,20(sp)
   14018:	00126dc0 	call	126dc <__mulsi3>
   1401c:	900b883a 	mov	r5,r18
   14020:	e009883a 	mov	r4,fp
   14024:	102b883a 	mov	r21,r2
   14028:	00126dc0 	call	126dc <__mulsi3>
   1402c:	900b883a 	mov	r5,r18
   14030:	b809883a 	mov	r4,r23
   14034:	1039883a 	mov	fp,r2
   14038:	00126dc0 	call	126dc <__mulsi3>
   1403c:	d9c00517 	ldw	r7,20(sp)
   14040:	b80b883a 	mov	r5,r23
   14044:	1025883a 	mov	r18,r2
   14048:	3809883a 	mov	r4,r7
   1404c:	00126dc0 	call	126dc <__mulsi3>
   14050:	a808d43a 	srli	r4,r21,16
   14054:	1705883a 	add	r2,r2,fp
   14058:	d8c00217 	ldw	r3,8(sp)
   1405c:	2085883a 	add	r2,r4,r2
   14060:	1700022e 	bgeu	r2,fp,1406c <__divdf3+0x630>
   14064:	01000074 	movhi	r4,1
   14068:	9125883a 	add	r18,r18,r4
   1406c:	1008d43a 	srli	r4,r2,16
   14070:	1004943a 	slli	r2,r2,16
   14074:	ad7fffcc 	andi	r21,r21,65535
   14078:	2489883a 	add	r4,r4,r18
   1407c:	1545883a 	add	r2,r2,r21
   14080:	81003836 	bltu	r16,r4,14164 <__divdf3+0x728>
   14084:	81003626 	beq	r16,r4,14160 <__divdf3+0x724>
   14088:	a5000054 	ori	r20,r20,1
   1408c:	1880ffc4 	addi	r2,r3,1023
   14090:	00bf2e0e 	bge	zero,r2,13d4c <_gp+0xffff22ac>
   14094:	a10001cc 	andi	r4,r20,7
   14098:	20000726 	beq	r4,zero,140b8 <__divdf3+0x67c>
   1409c:	a10003cc 	andi	r4,r20,15
   140a0:	01400104 	movi	r5,4
   140a4:	21400426 	beq	r4,r5,140b8 <__divdf3+0x67c>
   140a8:	a149883a 	add	r4,r20,r5
   140ac:	2529803a 	cmpltu	r20,r4,r20
   140b0:	8d23883a 	add	r17,r17,r20
   140b4:	2029883a 	mov	r20,r4
   140b8:	8900402c 	andhi	r4,r17,256
   140bc:	20000426 	beq	r4,zero,140d0 <__divdf3+0x694>
   140c0:	18810004 	addi	r2,r3,1024
   140c4:	00ffc034 	movhi	r3,65280
   140c8:	18ffffc4 	addi	r3,r3,-1
   140cc:	88e2703a 	and	r17,r17,r3
   140d0:	00c1ff84 	movi	r3,2046
   140d4:	18beb416 	blt	r3,r2,13ba8 <_gp+0xffff2108>
   140d8:	a028d0fa 	srli	r20,r20,3
   140dc:	882a977a 	slli	r21,r17,29
   140e0:	8820927a 	slli	r16,r17,9
   140e4:	1081ffcc 	andi	r2,r2,2047
   140e8:	ad2ab03a 	or	r21,r21,r20
   140ec:	8020d33a 	srli	r16,r16,12
   140f0:	9900004c 	andi	r4,r19,1
   140f4:	003eb006 	br	13bb8 <_gp+0xffff2118>
   140f8:	8080022c 	andhi	r2,r16,8
   140fc:	10001226 	beq	r2,zero,14148 <__divdf3+0x70c>
   14100:	8880022c 	andhi	r2,r17,8
   14104:	1000101e 	bne	r2,zero,14148 <__divdf3+0x70c>
   14108:	00800434 	movhi	r2,16
   1410c:	8c000234 	orhi	r16,r17,8
   14110:	10bfffc4 	addi	r2,r2,-1
   14114:	b809883a 	mov	r4,r23
   14118:	80a0703a 	and	r16,r16,r2
   1411c:	a02b883a 	mov	r21,r20
   14120:	003f0806 	br	13d44 <_gp+0xffff22a4>
   14124:	008000c4 	movi	r2,3
   14128:	3880b126 	beq	r7,r2,143f0 <__divdf3+0x9b4>
   1412c:	00800044 	movi	r2,1
   14130:	38805b1e 	bne	r7,r2,142a0 <__divdf3+0x864>
   14134:	e009883a 	mov	r4,fp
   14138:	0005883a 	mov	r2,zero
   1413c:	0021883a 	mov	r16,zero
   14140:	002b883a 	mov	r21,zero
   14144:	003e9c06 	br	13bb8 <_gp+0xffff2118>
   14148:	00800434 	movhi	r2,16
   1414c:	84000234 	orhi	r16,r16,8
   14150:	10bfffc4 	addi	r2,r2,-1
   14154:	b009883a 	mov	r4,r22
   14158:	80a0703a 	and	r16,r16,r2
   1415c:	003ef906 	br	13d44 <_gp+0xffff22a4>
   14160:	103fca26 	beq	r2,zero,1408c <_gp+0xffff25ec>
   14164:	b421883a 	add	r16,r22,r16
   14168:	a17fffc4 	addi	r5,r20,-1
   1416c:	8580422e 	bgeu	r16,r22,14278 <__divdf3+0x83c>
   14170:	2829883a 	mov	r20,r5
   14174:	813fc41e 	bne	r16,r4,14088 <_gp+0xffff25e8>
   14178:	d9800017 	ldw	r6,0(sp)
   1417c:	30bfc21e 	bne	r6,r2,14088 <_gp+0xffff25e8>
   14180:	003fc206 	br	1408c <_gp+0xffff25ec>
   14184:	143ff604 	addi	r16,r2,-40
   14188:	8c20983a 	sll	r16,r17,r16
   1418c:	002b883a 	mov	r21,zero
   14190:	003eb406 	br	13c64 <_gp+0xffff21c4>
   14194:	d9800215 	stw	r6,8(sp)
   14198:	d9c00515 	stw	r7,20(sp)
   1419c:	da000415 	stw	r8,16(sp)
   141a0:	0015a380 	call	15a38 <__clzsi2>
   141a4:	10800804 	addi	r2,r2,32
   141a8:	da000417 	ldw	r8,16(sp)
   141ac:	d9c00517 	ldw	r7,20(sp)
   141b0:	d9800217 	ldw	r6,8(sp)
   141b4:	003ea106 	br	13c3c <_gp+0xffff219c>
   141b8:	147ff604 	addi	r17,r2,-40
   141bc:	3462983a 	sll	r17,r6,r17
   141c0:	0029883a 	mov	r20,zero
   141c4:	003ec906 	br	13cec <_gp+0xffff224c>
   141c8:	3009883a 	mov	r4,r6
   141cc:	d9400115 	stw	r5,4(sp)
   141d0:	d9800215 	stw	r6,8(sp)
   141d4:	da000415 	stw	r8,16(sp)
   141d8:	da400315 	stw	r9,12(sp)
   141dc:	0015a380 	call	15a38 <__clzsi2>
   141e0:	10800804 	addi	r2,r2,32
   141e4:	da400317 	ldw	r9,12(sp)
   141e8:	da000417 	ldw	r8,16(sp)
   141ec:	d9800217 	ldw	r6,8(sp)
   141f0:	d9400117 	ldw	r5,4(sp)
   141f4:	003eb306 	br	13cc4 <_gp+0xffff2224>
   141f8:	d9800017 	ldw	r6,0(sp)
   141fc:	a9ab883a 	add	r21,r21,r6
   14200:	a98b803a 	cmpltu	r5,r21,r6
   14204:	2d8b883a 	add	r5,r5,r22
   14208:	2a11883a 	add	r8,r5,r8
   1420c:	897fffc4 	addi	r5,r17,-1
   14210:	b2000c2e 	bgeu	r22,r8,14244 <__divdf3+0x808>
   14214:	41003f36 	bltu	r8,r4,14314 <__divdf3+0x8d8>
   14218:	22006c26 	beq	r4,r8,143cc <__divdf3+0x990>
   1421c:	4109c83a 	sub	r4,r8,r4
   14220:	2823883a 	mov	r17,r5
   14224:	003f3b06 	br	13f14 <_gp+0xffff2474>
   14228:	ad3ed336 	bltu	r21,r20,13d78 <_gp+0xffff22d8>
   1422c:	a804d07a 	srli	r2,r21,1
   14230:	802e97fa 	slli	r23,r16,31
   14234:	a82a97fa 	slli	r21,r21,31
   14238:	8020d07a 	srli	r16,r16,1
   1423c:	b8aeb03a 	or	r23,r23,r2
   14240:	003ed006 	br	13d84 <_gp+0xffff22e4>
   14244:	b23ff51e 	bne	r22,r8,1421c <_gp+0xffff277c>
   14248:	d9800017 	ldw	r6,0(sp)
   1424c:	a9bff12e 	bgeu	r21,r6,14214 <_gp+0xffff2774>
   14250:	b109c83a 	sub	r4,r22,r4
   14254:	2823883a 	mov	r17,r5
   14258:	003f2e06 	br	13f14 <_gp+0xffff2474>
   1425c:	2021883a 	mov	r16,r4
   14260:	003eff06 	br	13e60 <_gp+0xffff23c0>
   14264:	2023883a 	mov	r17,r4
   14268:	003ee406 	br	13dfc <_gp+0xffff235c>
   1426c:	a8bfe236 	bltu	r21,r2,141f8 <_gp+0xffff2758>
   14270:	0009883a 	mov	r4,zero
   14274:	003f2706 	br	13f14 <_gp+0xffff2474>
   14278:	81002d36 	bltu	r16,r4,14330 <__divdf3+0x8f4>
   1427c:	24005626 	beq	r4,r16,143d8 <__divdf3+0x99c>
   14280:	2829883a 	mov	r20,r5
   14284:	003f8006 	br	14088 <_gp+0xffff25e8>
   14288:	053fffc4 	movi	r20,-1
   1428c:	003f7f06 	br	1408c <_gp+0xffff25ec>
   14290:	200f883a 	mov	r7,r4
   14294:	003f3c06 	br	13f88 <_gp+0xffff24e8>
   14298:	1011883a 	mov	r8,r2
   1429c:	003f5506 	br	13ff4 <_gp+0xffff2554>
   142a0:	e027883a 	mov	r19,fp
   142a4:	003f7906 	br	1408c <_gp+0xffff25ec>
   142a8:	010007c4 	movi	r4,31
   142ac:	20c02816 	blt	r4,r3,14350 <__divdf3+0x914>
   142b0:	00800804 	movi	r2,32
   142b4:	10c5c83a 	sub	r2,r2,r3
   142b8:	888a983a 	sll	r5,r17,r2
   142bc:	a0c8d83a 	srl	r4,r20,r3
   142c0:	a084983a 	sll	r2,r20,r2
   142c4:	88e2d83a 	srl	r17,r17,r3
   142c8:	2906b03a 	or	r3,r5,r4
   142cc:	1004c03a 	cmpne	r2,r2,zero
   142d0:	1886b03a 	or	r3,r3,r2
   142d4:	188001cc 	andi	r2,r3,7
   142d8:	10000726 	beq	r2,zero,142f8 <__divdf3+0x8bc>
   142dc:	188003cc 	andi	r2,r3,15
   142e0:	01000104 	movi	r4,4
   142e4:	11000426 	beq	r2,r4,142f8 <__divdf3+0x8bc>
   142e8:	1805883a 	mov	r2,r3
   142ec:	10c00104 	addi	r3,r2,4
   142f0:	1885803a 	cmpltu	r2,r3,r2
   142f4:	88a3883a 	add	r17,r17,r2
   142f8:	8880202c 	andhi	r2,r17,128
   142fc:	10002926 	beq	r2,zero,143a4 <__divdf3+0x968>
   14300:	9900004c 	andi	r4,r19,1
   14304:	00800044 	movi	r2,1
   14308:	0021883a 	mov	r16,zero
   1430c:	002b883a 	mov	r21,zero
   14310:	003e2906 	br	13bb8 <_gp+0xffff2118>
   14314:	d9800017 	ldw	r6,0(sp)
   14318:	8c7fff84 	addi	r17,r17,-2
   1431c:	a9ab883a 	add	r21,r21,r6
   14320:	a98b803a 	cmpltu	r5,r21,r6
   14324:	2d8b883a 	add	r5,r5,r22
   14328:	2a11883a 	add	r8,r5,r8
   1432c:	003ef806 	br	13f10 <_gp+0xffff2470>
   14330:	d9800017 	ldw	r6,0(sp)
   14334:	318f883a 	add	r7,r6,r6
   14338:	398b803a 	cmpltu	r5,r7,r6
   1433c:	2d8d883a 	add	r6,r5,r22
   14340:	81a1883a 	add	r16,r16,r6
   14344:	a17fff84 	addi	r5,r20,-2
   14348:	d9c00015 	stw	r7,0(sp)
   1434c:	003f8806 	br	14170 <_gp+0xffff26d0>
   14350:	013ff844 	movi	r4,-31
   14354:	2085c83a 	sub	r2,r4,r2
   14358:	8888d83a 	srl	r4,r17,r2
   1435c:	00800804 	movi	r2,32
   14360:	18802126 	beq	r3,r2,143e8 <__divdf3+0x9ac>
   14364:	04001004 	movi	r16,64
   14368:	80c7c83a 	sub	r3,r16,r3
   1436c:	88e0983a 	sll	r16,r17,r3
   14370:	8504b03a 	or	r2,r16,r20
   14374:	1004c03a 	cmpne	r2,r2,zero
   14378:	2084b03a 	or	r2,r4,r2
   1437c:	144001cc 	andi	r17,r2,7
   14380:	88000d1e 	bne	r17,zero,143b8 <__divdf3+0x97c>
   14384:	0021883a 	mov	r16,zero
   14388:	102ad0fa 	srli	r21,r2,3
   1438c:	9900004c 	andi	r4,r19,1
   14390:	0005883a 	mov	r2,zero
   14394:	ac6ab03a 	or	r21,r21,r17
   14398:	003e0706 	br	13bb8 <_gp+0xffff2118>
   1439c:	1007883a 	mov	r3,r2
   143a0:	0023883a 	mov	r17,zero
   143a4:	8820927a 	slli	r16,r17,9
   143a8:	1805883a 	mov	r2,r3
   143ac:	8822977a 	slli	r17,r17,29
   143b0:	8020d33a 	srli	r16,r16,12
   143b4:	003ff406 	br	14388 <_gp+0xffff28e8>
   143b8:	10c003cc 	andi	r3,r2,15
   143bc:	01000104 	movi	r4,4
   143c0:	193ff626 	beq	r3,r4,1439c <_gp+0xffff28fc>
   143c4:	0023883a 	mov	r17,zero
   143c8:	003fc806 	br	142ec <_gp+0xffff284c>
   143cc:	a8bfd136 	bltu	r21,r2,14314 <_gp+0xffff2874>
   143d0:	2823883a 	mov	r17,r5
   143d4:	003fa606 	br	14270 <_gp+0xffff27d0>
   143d8:	d9800017 	ldw	r6,0(sp)
   143dc:	30bfd436 	bltu	r6,r2,14330 <_gp+0xffff2890>
   143e0:	2829883a 	mov	r20,r5
   143e4:	003f6406 	br	14178 <_gp+0xffff26d8>
   143e8:	0021883a 	mov	r16,zero
   143ec:	003fe006 	br	14370 <_gp+0xffff28d0>
   143f0:	00800434 	movhi	r2,16
   143f4:	8c000234 	orhi	r16,r17,8
   143f8:	10bfffc4 	addi	r2,r2,-1
   143fc:	e009883a 	mov	r4,fp
   14400:	80a0703a 	and	r16,r16,r2
   14404:	a02b883a 	mov	r21,r20
   14408:	003e4e06 	br	13d44 <_gp+0xffff22a4>

0001440c <__eqdf2>:
   1440c:	2804d53a 	srli	r2,r5,20
   14410:	3806d53a 	srli	r3,r7,20
   14414:	02000434 	movhi	r8,16
   14418:	423fffc4 	addi	r8,r8,-1
   1441c:	1081ffcc 	andi	r2,r2,2047
   14420:	0281ffc4 	movi	r10,2047
   14424:	2a12703a 	and	r9,r5,r8
   14428:	18c1ffcc 	andi	r3,r3,2047
   1442c:	3a10703a 	and	r8,r7,r8
   14430:	280ad7fa 	srli	r5,r5,31
   14434:	380ed7fa 	srli	r7,r7,31
   14438:	12801026 	beq	r2,r10,1447c <__eqdf2+0x70>
   1443c:	0281ffc4 	movi	r10,2047
   14440:	1a800a26 	beq	r3,r10,1446c <__eqdf2+0x60>
   14444:	10c00226 	beq	r2,r3,14450 <__eqdf2+0x44>
   14448:	00800044 	movi	r2,1
   1444c:	f800283a 	ret
   14450:	4a3ffd1e 	bne	r9,r8,14448 <_gp+0xffff29a8>
   14454:	21bffc1e 	bne	r4,r6,14448 <_gp+0xffff29a8>
   14458:	29c00c26 	beq	r5,r7,1448c <__eqdf2+0x80>
   1445c:	103ffa1e 	bne	r2,zero,14448 <_gp+0xffff29a8>
   14460:	2244b03a 	or	r2,r4,r9
   14464:	1004c03a 	cmpne	r2,r2,zero
   14468:	f800283a 	ret
   1446c:	3214b03a 	or	r10,r6,r8
   14470:	503ff426 	beq	r10,zero,14444 <_gp+0xffff29a4>
   14474:	00800044 	movi	r2,1
   14478:	f800283a 	ret
   1447c:	2254b03a 	or	r10,r4,r9
   14480:	503fee26 	beq	r10,zero,1443c <_gp+0xffff299c>
   14484:	00800044 	movi	r2,1
   14488:	f800283a 	ret
   1448c:	0005883a 	mov	r2,zero
   14490:	f800283a 	ret

00014494 <__gedf2>:
   14494:	2804d53a 	srli	r2,r5,20
   14498:	3806d53a 	srli	r3,r7,20
   1449c:	02000434 	movhi	r8,16
   144a0:	423fffc4 	addi	r8,r8,-1
   144a4:	1081ffcc 	andi	r2,r2,2047
   144a8:	0241ffc4 	movi	r9,2047
   144ac:	2a14703a 	and	r10,r5,r8
   144b0:	18c1ffcc 	andi	r3,r3,2047
   144b4:	3a10703a 	and	r8,r7,r8
   144b8:	280ad7fa 	srli	r5,r5,31
   144bc:	380ed7fa 	srli	r7,r7,31
   144c0:	12401d26 	beq	r2,r9,14538 <__gedf2+0xa4>
   144c4:	0241ffc4 	movi	r9,2047
   144c8:	1a401226 	beq	r3,r9,14514 <__gedf2+0x80>
   144cc:	1000081e 	bne	r2,zero,144f0 <__gedf2+0x5c>
   144d0:	2296b03a 	or	r11,r4,r10
   144d4:	5813003a 	cmpeq	r9,r11,zero
   144d8:	1800091e 	bne	r3,zero,14500 <__gedf2+0x6c>
   144dc:	3218b03a 	or	r12,r6,r8
   144e0:	6000071e 	bne	r12,zero,14500 <__gedf2+0x6c>
   144e4:	0005883a 	mov	r2,zero
   144e8:	5800101e 	bne	r11,zero,1452c <__gedf2+0x98>
   144ec:	f800283a 	ret
   144f0:	18000c1e 	bne	r3,zero,14524 <__gedf2+0x90>
   144f4:	3212b03a 	or	r9,r6,r8
   144f8:	48000c26 	beq	r9,zero,1452c <__gedf2+0x98>
   144fc:	0013883a 	mov	r9,zero
   14500:	39c03fcc 	andi	r7,r7,255
   14504:	48000826 	beq	r9,zero,14528 <__gedf2+0x94>
   14508:	38000926 	beq	r7,zero,14530 <__gedf2+0x9c>
   1450c:	00800044 	movi	r2,1
   14510:	f800283a 	ret
   14514:	3212b03a 	or	r9,r6,r8
   14518:	483fec26 	beq	r9,zero,144cc <_gp+0xffff2a2c>
   1451c:	00bfff84 	movi	r2,-2
   14520:	f800283a 	ret
   14524:	39c03fcc 	andi	r7,r7,255
   14528:	29c00626 	beq	r5,r7,14544 <__gedf2+0xb0>
   1452c:	283ff726 	beq	r5,zero,1450c <_gp+0xffff2a6c>
   14530:	00bfffc4 	movi	r2,-1
   14534:	f800283a 	ret
   14538:	2292b03a 	or	r9,r4,r10
   1453c:	483fe126 	beq	r9,zero,144c4 <_gp+0xffff2a24>
   14540:	003ff606 	br	1451c <_gp+0xffff2a7c>
   14544:	18bff916 	blt	r3,r2,1452c <_gp+0xffff2a8c>
   14548:	10c00316 	blt	r2,r3,14558 <__gedf2+0xc4>
   1454c:	42bff736 	bltu	r8,r10,1452c <_gp+0xffff2a8c>
   14550:	52000326 	beq	r10,r8,14560 <__gedf2+0xcc>
   14554:	5200042e 	bgeu	r10,r8,14568 <__gedf2+0xd4>
   14558:	283fec1e 	bne	r5,zero,1450c <_gp+0xffff2a6c>
   1455c:	003ff406 	br	14530 <_gp+0xffff2a90>
   14560:	313ff236 	bltu	r6,r4,1452c <_gp+0xffff2a8c>
   14564:	21bffc36 	bltu	r4,r6,14558 <_gp+0xffff2ab8>
   14568:	0005883a 	mov	r2,zero
   1456c:	f800283a 	ret

00014570 <__ledf2>:
   14570:	2804d53a 	srli	r2,r5,20
   14574:	3810d53a 	srli	r8,r7,20
   14578:	00c00434 	movhi	r3,16
   1457c:	18ffffc4 	addi	r3,r3,-1
   14580:	1081ffcc 	andi	r2,r2,2047
   14584:	0241ffc4 	movi	r9,2047
   14588:	28d4703a 	and	r10,r5,r3
   1458c:	4201ffcc 	andi	r8,r8,2047
   14590:	38c6703a 	and	r3,r7,r3
   14594:	280ad7fa 	srli	r5,r5,31
   14598:	380ed7fa 	srli	r7,r7,31
   1459c:	12401f26 	beq	r2,r9,1461c <__ledf2+0xac>
   145a0:	0241ffc4 	movi	r9,2047
   145a4:	42401426 	beq	r8,r9,145f8 <__ledf2+0x88>
   145a8:	1000091e 	bne	r2,zero,145d0 <__ledf2+0x60>
   145ac:	2296b03a 	or	r11,r4,r10
   145b0:	5813003a 	cmpeq	r9,r11,zero
   145b4:	29403fcc 	andi	r5,r5,255
   145b8:	40000a1e 	bne	r8,zero,145e4 <__ledf2+0x74>
   145bc:	30d8b03a 	or	r12,r6,r3
   145c0:	6000081e 	bne	r12,zero,145e4 <__ledf2+0x74>
   145c4:	0005883a 	mov	r2,zero
   145c8:	5800111e 	bne	r11,zero,14610 <__ledf2+0xa0>
   145cc:	f800283a 	ret
   145d0:	29403fcc 	andi	r5,r5,255
   145d4:	40000c1e 	bne	r8,zero,14608 <__ledf2+0x98>
   145d8:	30d2b03a 	or	r9,r6,r3
   145dc:	48000c26 	beq	r9,zero,14610 <__ledf2+0xa0>
   145e0:	0013883a 	mov	r9,zero
   145e4:	39c03fcc 	andi	r7,r7,255
   145e8:	48000826 	beq	r9,zero,1460c <__ledf2+0x9c>
   145ec:	38001126 	beq	r7,zero,14634 <__ledf2+0xc4>
   145f0:	00800044 	movi	r2,1
   145f4:	f800283a 	ret
   145f8:	30d2b03a 	or	r9,r6,r3
   145fc:	483fea26 	beq	r9,zero,145a8 <_gp+0xffff2b08>
   14600:	00800084 	movi	r2,2
   14604:	f800283a 	ret
   14608:	39c03fcc 	andi	r7,r7,255
   1460c:	39400726 	beq	r7,r5,1462c <__ledf2+0xbc>
   14610:	2800081e 	bne	r5,zero,14634 <__ledf2+0xc4>
   14614:	00800044 	movi	r2,1
   14618:	f800283a 	ret
   1461c:	2292b03a 	or	r9,r4,r10
   14620:	483fdf26 	beq	r9,zero,145a0 <_gp+0xffff2b00>
   14624:	00800084 	movi	r2,2
   14628:	f800283a 	ret
   1462c:	4080030e 	bge	r8,r2,1463c <__ledf2+0xcc>
   14630:	383fef26 	beq	r7,zero,145f0 <_gp+0xffff2b50>
   14634:	00bfffc4 	movi	r2,-1
   14638:	f800283a 	ret
   1463c:	123feb16 	blt	r2,r8,145ec <_gp+0xffff2b4c>
   14640:	1abff336 	bltu	r3,r10,14610 <_gp+0xffff2b70>
   14644:	50c00326 	beq	r10,r3,14654 <__ledf2+0xe4>
   14648:	50c0042e 	bgeu	r10,r3,1465c <__ledf2+0xec>
   1464c:	283fe81e 	bne	r5,zero,145f0 <_gp+0xffff2b50>
   14650:	003ff806 	br	14634 <_gp+0xffff2b94>
   14654:	313fee36 	bltu	r6,r4,14610 <_gp+0xffff2b70>
   14658:	21bffc36 	bltu	r4,r6,1464c <_gp+0xffff2bac>
   1465c:	0005883a 	mov	r2,zero
   14660:	f800283a 	ret

00014664 <__muldf3>:
   14664:	deffee04 	addi	sp,sp,-72
   14668:	dd000c15 	stw	r20,48(sp)
   1466c:	2828d53a 	srli	r20,r5,20
   14670:	ddc00f15 	stw	r23,60(sp)
   14674:	282ed7fa 	srli	r23,r5,31
   14678:	dc000815 	stw	r16,32(sp)
   1467c:	04000434 	movhi	r16,16
   14680:	dcc00b15 	stw	r19,44(sp)
   14684:	843fffc4 	addi	r16,r16,-1
   14688:	dfc01115 	stw	ra,68(sp)
   1468c:	df001015 	stw	fp,64(sp)
   14690:	dd800e15 	stw	r22,56(sp)
   14694:	dd400d15 	stw	r21,52(sp)
   14698:	dc800a15 	stw	r18,40(sp)
   1469c:	dc400915 	stw	r17,36(sp)
   146a0:	a501ffcc 	andi	r20,r20,2047
   146a4:	2c20703a 	and	r16,r5,r16
   146a8:	b827883a 	mov	r19,r23
   146ac:	ba403fcc 	andi	r9,r23,255
   146b0:	a0006026 	beq	r20,zero,14834 <__muldf3+0x1d0>
   146b4:	0081ffc4 	movi	r2,2047
   146b8:	202d883a 	mov	r22,r4
   146bc:	a0803626 	beq	r20,r2,14798 <__muldf3+0x134>
   146c0:	84000434 	orhi	r16,r16,16
   146c4:	200ad77a 	srli	r5,r4,29
   146c8:	800490fa 	slli	r2,r16,3
   146cc:	202c90fa 	slli	r22,r4,3
   146d0:	a53f0044 	addi	r20,r20,-1023
   146d4:	28a0b03a 	or	r16,r5,r2
   146d8:	002b883a 	mov	r21,zero
   146dc:	000b883a 	mov	r5,zero
   146e0:	3804d53a 	srli	r2,r7,20
   146e4:	3838d7fa 	srli	fp,r7,31
   146e8:	04400434 	movhi	r17,16
   146ec:	8c7fffc4 	addi	r17,r17,-1
   146f0:	1081ffcc 	andi	r2,r2,2047
   146f4:	3025883a 	mov	r18,r6
   146f8:	3c62703a 	and	r17,r7,r17
   146fc:	e2803fcc 	andi	r10,fp,255
   14700:	10006d26 	beq	r2,zero,148b8 <__muldf3+0x254>
   14704:	00c1ffc4 	movi	r3,2047
   14708:	10c06526 	beq	r2,r3,148a0 <__muldf3+0x23c>
   1470c:	8c400434 	orhi	r17,r17,16
   14710:	300ed77a 	srli	r7,r6,29
   14714:	880690fa 	slli	r3,r17,3
   14718:	302490fa 	slli	r18,r6,3
   1471c:	10bf0044 	addi	r2,r2,-1023
   14720:	38e2b03a 	or	r17,r7,r3
   14724:	000f883a 	mov	r7,zero
   14728:	a087883a 	add	r3,r20,r2
   1472c:	010003c4 	movi	r4,15
   14730:	3d44b03a 	or	r2,r7,r21
   14734:	e5ccf03a 	xor	r6,fp,r23
   14738:	1a000044 	addi	r8,r3,1
   1473c:	20809b36 	bltu	r4,r2,149ac <__muldf3+0x348>
   14740:	100490ba 	slli	r2,r2,2
   14744:	01000074 	movhi	r4,1
   14748:	2111d604 	addi	r4,r4,18264
   1474c:	1105883a 	add	r2,r2,r4
   14750:	10800017 	ldw	r2,0(r2)
   14754:	1000683a 	jmp	r2
   14758:	000149ac 	andhi	zero,zero,1318
   1475c:	000147b8 	rdprs	zero,zero,1310
   14760:	000147b8 	rdprs	zero,zero,1310
   14764:	000147b4 	movhi	zero,1310
   14768:	00014988 	cmpgei	zero,zero,1318
   1476c:	00014988 	cmpgei	zero,zero,1318
   14770:	00014970 	cmpltui	zero,zero,1317
   14774:	000147b4 	movhi	zero,1310
   14778:	00014988 	cmpgei	zero,zero,1318
   1477c:	00014970 	cmpltui	zero,zero,1317
   14780:	00014988 	cmpgei	zero,zero,1318
   14784:	000147b4 	movhi	zero,1310
   14788:	00014998 	cmpnei	zero,zero,1318
   1478c:	00014998 	cmpnei	zero,zero,1318
   14790:	00014998 	cmpnei	zero,zero,1318
   14794:	00014cf8 	rdprs	zero,zero,1331
   14798:	2404b03a 	or	r2,r4,r16
   1479c:	1000711e 	bne	r2,zero,14964 <__muldf3+0x300>
   147a0:	05400204 	movi	r21,8
   147a4:	0021883a 	mov	r16,zero
   147a8:	002d883a 	mov	r22,zero
   147ac:	01400084 	movi	r5,2
   147b0:	003fcb06 	br	146e0 <_gp+0xffff2c40>
   147b4:	500d883a 	mov	r6,r10
   147b8:	00800084 	movi	r2,2
   147bc:	38805926 	beq	r7,r2,14924 <__muldf3+0x2c0>
   147c0:	008000c4 	movi	r2,3
   147c4:	3881bb26 	beq	r7,r2,14eb4 <__muldf3+0x850>
   147c8:	00800044 	movi	r2,1
   147cc:	3881961e 	bne	r7,r2,14e28 <__muldf3+0x7c4>
   147d0:	3027883a 	mov	r19,r6
   147d4:	0005883a 	mov	r2,zero
   147d8:	0021883a 	mov	r16,zero
   147dc:	002d883a 	mov	r22,zero
   147e0:	1004953a 	slli	r2,r2,20
   147e4:	98c03fcc 	andi	r3,r19,255
   147e8:	04400434 	movhi	r17,16
   147ec:	8c7fffc4 	addi	r17,r17,-1
   147f0:	180697fa 	slli	r3,r3,31
   147f4:	8460703a 	and	r16,r16,r17
   147f8:	80a0b03a 	or	r16,r16,r2
   147fc:	80c6b03a 	or	r3,r16,r3
   14800:	b005883a 	mov	r2,r22
   14804:	dfc01117 	ldw	ra,68(sp)
   14808:	df001017 	ldw	fp,64(sp)
   1480c:	ddc00f17 	ldw	r23,60(sp)
   14810:	dd800e17 	ldw	r22,56(sp)
   14814:	dd400d17 	ldw	r21,52(sp)
   14818:	dd000c17 	ldw	r20,48(sp)
   1481c:	dcc00b17 	ldw	r19,44(sp)
   14820:	dc800a17 	ldw	r18,40(sp)
   14824:	dc400917 	ldw	r17,36(sp)
   14828:	dc000817 	ldw	r16,32(sp)
   1482c:	dec01204 	addi	sp,sp,72
   14830:	f800283a 	ret
   14834:	2404b03a 	or	r2,r4,r16
   14838:	202b883a 	mov	r21,r4
   1483c:	10004426 	beq	r2,zero,14950 <__muldf3+0x2ec>
   14840:	80015126 	beq	r16,zero,14d88 <__muldf3+0x724>
   14844:	8009883a 	mov	r4,r16
   14848:	d9800715 	stw	r6,28(sp)
   1484c:	d9c00215 	stw	r7,8(sp)
   14850:	da400415 	stw	r9,16(sp)
   14854:	0015a380 	call	15a38 <__clzsi2>
   14858:	d9800717 	ldw	r6,28(sp)
   1485c:	d9c00217 	ldw	r7,8(sp)
   14860:	da400417 	ldw	r9,16(sp)
   14864:	113ffd44 	addi	r4,r2,-11
   14868:	00c00704 	movi	r3,28
   1486c:	19014216 	blt	r3,r4,14d78 <__muldf3+0x714>
   14870:	00c00744 	movi	r3,29
   14874:	15bffe04 	addi	r22,r2,-8
   14878:	1907c83a 	sub	r3,r3,r4
   1487c:	85a0983a 	sll	r16,r16,r22
   14880:	a8c6d83a 	srl	r3,r21,r3
   14884:	adac983a 	sll	r22,r21,r22
   14888:	1c20b03a 	or	r16,r3,r16
   1488c:	1080fcc4 	addi	r2,r2,1011
   14890:	00a9c83a 	sub	r20,zero,r2
   14894:	002b883a 	mov	r21,zero
   14898:	000b883a 	mov	r5,zero
   1489c:	003f9006 	br	146e0 <_gp+0xffff2c40>
   148a0:	3446b03a 	or	r3,r6,r17
   148a4:	1800281e 	bne	r3,zero,14948 <__muldf3+0x2e4>
   148a8:	0023883a 	mov	r17,zero
   148ac:	0025883a 	mov	r18,zero
   148b0:	01c00084 	movi	r7,2
   148b4:	003f9c06 	br	14728 <_gp+0xffff2c88>
   148b8:	3446b03a 	or	r3,r6,r17
   148bc:	18001e26 	beq	r3,zero,14938 <__muldf3+0x2d4>
   148c0:	88012126 	beq	r17,zero,14d48 <__muldf3+0x6e4>
   148c4:	8809883a 	mov	r4,r17
   148c8:	d9400215 	stw	r5,8(sp)
   148cc:	d9800715 	stw	r6,28(sp)
   148d0:	da400415 	stw	r9,16(sp)
   148d4:	da800315 	stw	r10,12(sp)
   148d8:	0015a380 	call	15a38 <__clzsi2>
   148dc:	d9400217 	ldw	r5,8(sp)
   148e0:	d9800717 	ldw	r6,28(sp)
   148e4:	da400417 	ldw	r9,16(sp)
   148e8:	da800317 	ldw	r10,12(sp)
   148ec:	113ffd44 	addi	r4,r2,-11
   148f0:	00c00704 	movi	r3,28
   148f4:	19011016 	blt	r3,r4,14d38 <__muldf3+0x6d4>
   148f8:	00c00744 	movi	r3,29
   148fc:	14bffe04 	addi	r18,r2,-8
   14900:	1907c83a 	sub	r3,r3,r4
   14904:	8ca2983a 	sll	r17,r17,r18
   14908:	30c6d83a 	srl	r3,r6,r3
   1490c:	34a4983a 	sll	r18,r6,r18
   14910:	1c62b03a 	or	r17,r3,r17
   14914:	1080fcc4 	addi	r2,r2,1011
   14918:	0085c83a 	sub	r2,zero,r2
   1491c:	000f883a 	mov	r7,zero
   14920:	003f8106 	br	14728 <_gp+0xffff2c88>
   14924:	3027883a 	mov	r19,r6
   14928:	0081ffc4 	movi	r2,2047
   1492c:	0021883a 	mov	r16,zero
   14930:	002d883a 	mov	r22,zero
   14934:	003faa06 	br	147e0 <_gp+0xffff2d40>
   14938:	0023883a 	mov	r17,zero
   1493c:	0025883a 	mov	r18,zero
   14940:	01c00044 	movi	r7,1
   14944:	003f7806 	br	14728 <_gp+0xffff2c88>
   14948:	01c000c4 	movi	r7,3
   1494c:	003f7606 	br	14728 <_gp+0xffff2c88>
   14950:	05400104 	movi	r21,4
   14954:	0021883a 	mov	r16,zero
   14958:	002d883a 	mov	r22,zero
   1495c:	01400044 	movi	r5,1
   14960:	003f5f06 	br	146e0 <_gp+0xffff2c40>
   14964:	05400304 	movi	r21,12
   14968:	014000c4 	movi	r5,3
   1496c:	003f5c06 	br	146e0 <_gp+0xffff2c40>
   14970:	04000434 	movhi	r16,16
   14974:	0027883a 	mov	r19,zero
   14978:	843fffc4 	addi	r16,r16,-1
   1497c:	05bfffc4 	movi	r22,-1
   14980:	0081ffc4 	movi	r2,2047
   14984:	003f9606 	br	147e0 <_gp+0xffff2d40>
   14988:	8023883a 	mov	r17,r16
   1498c:	b025883a 	mov	r18,r22
   14990:	280f883a 	mov	r7,r5
   14994:	003f8806 	br	147b8 <_gp+0xffff2d18>
   14998:	8023883a 	mov	r17,r16
   1499c:	b025883a 	mov	r18,r22
   149a0:	480d883a 	mov	r6,r9
   149a4:	280f883a 	mov	r7,r5
   149a8:	003f8306 	br	147b8 <_gp+0xffff2d18>
   149ac:	b026d43a 	srli	r19,r22,16
   149b0:	902ed43a 	srli	r23,r18,16
   149b4:	b5bfffcc 	andi	r22,r22,65535
   149b8:	94bfffcc 	andi	r18,r18,65535
   149bc:	b00b883a 	mov	r5,r22
   149c0:	9009883a 	mov	r4,r18
   149c4:	d8c00515 	stw	r3,20(sp)
   149c8:	d9800715 	stw	r6,28(sp)
   149cc:	da000615 	stw	r8,24(sp)
   149d0:	00126dc0 	call	126dc <__mulsi3>
   149d4:	980b883a 	mov	r5,r19
   149d8:	9009883a 	mov	r4,r18
   149dc:	1029883a 	mov	r20,r2
   149e0:	00126dc0 	call	126dc <__mulsi3>
   149e4:	b80b883a 	mov	r5,r23
   149e8:	9809883a 	mov	r4,r19
   149ec:	102b883a 	mov	r21,r2
   149f0:	00126dc0 	call	126dc <__mulsi3>
   149f4:	b809883a 	mov	r4,r23
   149f8:	b00b883a 	mov	r5,r22
   149fc:	1039883a 	mov	fp,r2
   14a00:	00126dc0 	call	126dc <__mulsi3>
   14a04:	a008d43a 	srli	r4,r20,16
   14a08:	1545883a 	add	r2,r2,r21
   14a0c:	d8c00517 	ldw	r3,20(sp)
   14a10:	2085883a 	add	r2,r4,r2
   14a14:	d9800717 	ldw	r6,28(sp)
   14a18:	da000617 	ldw	r8,24(sp)
   14a1c:	1540022e 	bgeu	r2,r21,14a28 <__muldf3+0x3c4>
   14a20:	01000074 	movhi	r4,1
   14a24:	e139883a 	add	fp,fp,r4
   14a28:	100e943a 	slli	r7,r2,16
   14a2c:	1004d43a 	srli	r2,r2,16
   14a30:	882ad43a 	srli	r21,r17,16
   14a34:	a53fffcc 	andi	r20,r20,65535
   14a38:	8c7fffcc 	andi	r17,r17,65535
   14a3c:	3d29883a 	add	r20,r7,r20
   14a40:	b00b883a 	mov	r5,r22
   14a44:	8809883a 	mov	r4,r17
   14a48:	d8c00515 	stw	r3,20(sp)
   14a4c:	d9800715 	stw	r6,28(sp)
   14a50:	da000615 	stw	r8,24(sp)
   14a54:	dd000115 	stw	r20,4(sp)
   14a58:	d8800015 	stw	r2,0(sp)
   14a5c:	00126dc0 	call	126dc <__mulsi3>
   14a60:	980b883a 	mov	r5,r19
   14a64:	8809883a 	mov	r4,r17
   14a68:	d8800215 	stw	r2,8(sp)
   14a6c:	00126dc0 	call	126dc <__mulsi3>
   14a70:	9809883a 	mov	r4,r19
   14a74:	a80b883a 	mov	r5,r21
   14a78:	1029883a 	mov	r20,r2
   14a7c:	00126dc0 	call	126dc <__mulsi3>
   14a80:	b00b883a 	mov	r5,r22
   14a84:	a809883a 	mov	r4,r21
   14a88:	d8800415 	stw	r2,16(sp)
   14a8c:	00126dc0 	call	126dc <__mulsi3>
   14a90:	d9c00217 	ldw	r7,8(sp)
   14a94:	1505883a 	add	r2,r2,r20
   14a98:	d8c00517 	ldw	r3,20(sp)
   14a9c:	3826d43a 	srli	r19,r7,16
   14aa0:	d9800717 	ldw	r6,28(sp)
   14aa4:	da000617 	ldw	r8,24(sp)
   14aa8:	9885883a 	add	r2,r19,r2
   14aac:	da400417 	ldw	r9,16(sp)
   14ab0:	1500022e 	bgeu	r2,r20,14abc <__muldf3+0x458>
   14ab4:	01000074 	movhi	r4,1
   14ab8:	4913883a 	add	r9,r9,r4
   14abc:	1028d43a 	srli	r20,r2,16
   14ac0:	1004943a 	slli	r2,r2,16
   14ac4:	802cd43a 	srli	r22,r16,16
   14ac8:	843fffcc 	andi	r16,r16,65535
   14acc:	3cffffcc 	andi	r19,r7,65535
   14ad0:	9009883a 	mov	r4,r18
   14ad4:	800b883a 	mov	r5,r16
   14ad8:	a269883a 	add	r20,r20,r9
   14adc:	d8c00515 	stw	r3,20(sp)
   14ae0:	d9800715 	stw	r6,28(sp)
   14ae4:	da000615 	stw	r8,24(sp)
   14ae8:	14e7883a 	add	r19,r2,r19
   14aec:	00126dc0 	call	126dc <__mulsi3>
   14af0:	9009883a 	mov	r4,r18
   14af4:	b00b883a 	mov	r5,r22
   14af8:	d8800315 	stw	r2,12(sp)
   14afc:	00126dc0 	call	126dc <__mulsi3>
   14b00:	b809883a 	mov	r4,r23
   14b04:	b00b883a 	mov	r5,r22
   14b08:	d8800215 	stw	r2,8(sp)
   14b0c:	00126dc0 	call	126dc <__mulsi3>
   14b10:	b80b883a 	mov	r5,r23
   14b14:	8009883a 	mov	r4,r16
   14b18:	d8800415 	stw	r2,16(sp)
   14b1c:	00126dc0 	call	126dc <__mulsi3>
   14b20:	da800317 	ldw	r10,12(sp)
   14b24:	d9c00217 	ldw	r7,8(sp)
   14b28:	d9000017 	ldw	r4,0(sp)
   14b2c:	502ed43a 	srli	r23,r10,16
   14b30:	11c5883a 	add	r2,r2,r7
   14b34:	24e5883a 	add	r18,r4,r19
   14b38:	b885883a 	add	r2,r23,r2
   14b3c:	d8c00517 	ldw	r3,20(sp)
   14b40:	d9800717 	ldw	r6,28(sp)
   14b44:	da000617 	ldw	r8,24(sp)
   14b48:	da400417 	ldw	r9,16(sp)
   14b4c:	11c0022e 	bgeu	r2,r7,14b58 <__muldf3+0x4f4>
   14b50:	01000074 	movhi	r4,1
   14b54:	4913883a 	add	r9,r9,r4
   14b58:	100ed43a 	srli	r7,r2,16
   14b5c:	1004943a 	slli	r2,r2,16
   14b60:	55ffffcc 	andi	r23,r10,65535
   14b64:	3a53883a 	add	r9,r7,r9
   14b68:	8809883a 	mov	r4,r17
   14b6c:	800b883a 	mov	r5,r16
   14b70:	d8c00515 	stw	r3,20(sp)
   14b74:	d9800715 	stw	r6,28(sp)
   14b78:	da000615 	stw	r8,24(sp)
   14b7c:	da400415 	stw	r9,16(sp)
   14b80:	15ef883a 	add	r23,r2,r23
   14b84:	00126dc0 	call	126dc <__mulsi3>
   14b88:	8809883a 	mov	r4,r17
   14b8c:	b00b883a 	mov	r5,r22
   14b90:	d8800215 	stw	r2,8(sp)
   14b94:	00126dc0 	call	126dc <__mulsi3>
   14b98:	b00b883a 	mov	r5,r22
   14b9c:	a809883a 	mov	r4,r21
   14ba0:	d8800315 	stw	r2,12(sp)
   14ba4:	00126dc0 	call	126dc <__mulsi3>
   14ba8:	8009883a 	mov	r4,r16
   14bac:	a80b883a 	mov	r5,r21
   14bb0:	1023883a 	mov	r17,r2
   14bb4:	00126dc0 	call	126dc <__mulsi3>
   14bb8:	d9c00217 	ldw	r7,8(sp)
   14bbc:	da800317 	ldw	r10,12(sp)
   14bc0:	d8c00517 	ldw	r3,20(sp)
   14bc4:	3808d43a 	srli	r4,r7,16
   14bc8:	1285883a 	add	r2,r2,r10
   14bcc:	d9800717 	ldw	r6,28(sp)
   14bd0:	2085883a 	add	r2,r4,r2
   14bd4:	da000617 	ldw	r8,24(sp)
   14bd8:	da400417 	ldw	r9,16(sp)
   14bdc:	1280022e 	bgeu	r2,r10,14be8 <__muldf3+0x584>
   14be0:	01000074 	movhi	r4,1
   14be4:	8923883a 	add	r17,r17,r4
   14be8:	1008943a 	slli	r4,r2,16
   14bec:	39ffffcc 	andi	r7,r7,65535
   14bf0:	e4b9883a 	add	fp,fp,r18
   14bf4:	21cf883a 	add	r7,r4,r7
   14bf8:	e4e7803a 	cmpltu	r19,fp,r19
   14bfc:	3d0f883a 	add	r7,r7,r20
   14c00:	bf39883a 	add	fp,r23,fp
   14c04:	99c9883a 	add	r4,r19,r7
   14c08:	e5ef803a 	cmpltu	r23,fp,r23
   14c0c:	490b883a 	add	r5,r9,r4
   14c10:	1004d43a 	srli	r2,r2,16
   14c14:	b965883a 	add	r18,r23,r5
   14c18:	24c9803a 	cmpltu	r4,r4,r19
   14c1c:	3d29803a 	cmpltu	r20,r7,r20
   14c20:	a128b03a 	or	r20,r20,r4
   14c24:	95ef803a 	cmpltu	r23,r18,r23
   14c28:	2a53803a 	cmpltu	r9,r5,r9
   14c2c:	a0a9883a 	add	r20,r20,r2
   14c30:	4deeb03a 	or	r23,r9,r23
   14c34:	a5ef883a 	add	r23,r20,r23
   14c38:	bc63883a 	add	r17,r23,r17
   14c3c:	e004927a 	slli	r2,fp,9
   14c40:	d9000117 	ldw	r4,4(sp)
   14c44:	882e927a 	slli	r23,r17,9
   14c48:	9022d5fa 	srli	r17,r18,23
   14c4c:	e038d5fa 	srli	fp,fp,23
   14c50:	1104b03a 	or	r2,r2,r4
   14c54:	9024927a 	slli	r18,r18,9
   14c58:	1004c03a 	cmpne	r2,r2,zero
   14c5c:	bc62b03a 	or	r17,r23,r17
   14c60:	1738b03a 	or	fp,r2,fp
   14c64:	8880402c 	andhi	r2,r17,256
   14c68:	e4a4b03a 	or	r18,fp,r18
   14c6c:	10000726 	beq	r2,zero,14c8c <__muldf3+0x628>
   14c70:	9006d07a 	srli	r3,r18,1
   14c74:	880497fa 	slli	r2,r17,31
   14c78:	9480004c 	andi	r18,r18,1
   14c7c:	8822d07a 	srli	r17,r17,1
   14c80:	1ca4b03a 	or	r18,r3,r18
   14c84:	14a4b03a 	or	r18,r2,r18
   14c88:	4007883a 	mov	r3,r8
   14c8c:	1880ffc4 	addi	r2,r3,1023
   14c90:	0080460e 	bge	zero,r2,14dac <__muldf3+0x748>
   14c94:	910001cc 	andi	r4,r18,7
   14c98:	20000726 	beq	r4,zero,14cb8 <__muldf3+0x654>
   14c9c:	910003cc 	andi	r4,r18,15
   14ca0:	01400104 	movi	r5,4
   14ca4:	21400426 	beq	r4,r5,14cb8 <__muldf3+0x654>
   14ca8:	9149883a 	add	r4,r18,r5
   14cac:	24a5803a 	cmpltu	r18,r4,r18
   14cb0:	8ca3883a 	add	r17,r17,r18
   14cb4:	2025883a 	mov	r18,r4
   14cb8:	8900402c 	andhi	r4,r17,256
   14cbc:	20000426 	beq	r4,zero,14cd0 <__muldf3+0x66c>
   14cc0:	18810004 	addi	r2,r3,1024
   14cc4:	00ffc034 	movhi	r3,65280
   14cc8:	18ffffc4 	addi	r3,r3,-1
   14ccc:	88e2703a 	and	r17,r17,r3
   14cd0:	00c1ff84 	movi	r3,2046
   14cd4:	18bf1316 	blt	r3,r2,14924 <_gp+0xffff2e84>
   14cd8:	882c977a 	slli	r22,r17,29
   14cdc:	9024d0fa 	srli	r18,r18,3
   14ce0:	8822927a 	slli	r17,r17,9
   14ce4:	1081ffcc 	andi	r2,r2,2047
   14ce8:	b4acb03a 	or	r22,r22,r18
   14cec:	8820d33a 	srli	r16,r17,12
   14cf0:	3027883a 	mov	r19,r6
   14cf4:	003eba06 	br	147e0 <_gp+0xffff2d40>
   14cf8:	8080022c 	andhi	r2,r16,8
   14cfc:	10000926 	beq	r2,zero,14d24 <__muldf3+0x6c0>
   14d00:	8880022c 	andhi	r2,r17,8
   14d04:	1000071e 	bne	r2,zero,14d24 <__muldf3+0x6c0>
   14d08:	00800434 	movhi	r2,16
   14d0c:	8c000234 	orhi	r16,r17,8
   14d10:	10bfffc4 	addi	r2,r2,-1
   14d14:	e027883a 	mov	r19,fp
   14d18:	80a0703a 	and	r16,r16,r2
   14d1c:	902d883a 	mov	r22,r18
   14d20:	003f1706 	br	14980 <_gp+0xffff2ee0>
   14d24:	00800434 	movhi	r2,16
   14d28:	84000234 	orhi	r16,r16,8
   14d2c:	10bfffc4 	addi	r2,r2,-1
   14d30:	80a0703a 	and	r16,r16,r2
   14d34:	003f1206 	br	14980 <_gp+0xffff2ee0>
   14d38:	147ff604 	addi	r17,r2,-40
   14d3c:	3462983a 	sll	r17,r6,r17
   14d40:	0025883a 	mov	r18,zero
   14d44:	003ef306 	br	14914 <_gp+0xffff2e74>
   14d48:	3009883a 	mov	r4,r6
   14d4c:	d9400215 	stw	r5,8(sp)
   14d50:	d9800715 	stw	r6,28(sp)
   14d54:	da400415 	stw	r9,16(sp)
   14d58:	da800315 	stw	r10,12(sp)
   14d5c:	0015a380 	call	15a38 <__clzsi2>
   14d60:	10800804 	addi	r2,r2,32
   14d64:	da800317 	ldw	r10,12(sp)
   14d68:	da400417 	ldw	r9,16(sp)
   14d6c:	d9800717 	ldw	r6,28(sp)
   14d70:	d9400217 	ldw	r5,8(sp)
   14d74:	003edd06 	br	148ec <_gp+0xffff2e4c>
   14d78:	143ff604 	addi	r16,r2,-40
   14d7c:	ac20983a 	sll	r16,r21,r16
   14d80:	002d883a 	mov	r22,zero
   14d84:	003ec106 	br	1488c <_gp+0xffff2dec>
   14d88:	d9800715 	stw	r6,28(sp)
   14d8c:	d9c00215 	stw	r7,8(sp)
   14d90:	da400415 	stw	r9,16(sp)
   14d94:	0015a380 	call	15a38 <__clzsi2>
   14d98:	10800804 	addi	r2,r2,32
   14d9c:	da400417 	ldw	r9,16(sp)
   14da0:	d9c00217 	ldw	r7,8(sp)
   14da4:	d9800717 	ldw	r6,28(sp)
   14da8:	003eae06 	br	14864 <_gp+0xffff2dc4>
   14dac:	00c00044 	movi	r3,1
   14db0:	1887c83a 	sub	r3,r3,r2
   14db4:	01000e04 	movi	r4,56
   14db8:	20fe8516 	blt	r4,r3,147d0 <_gp+0xffff2d30>
   14dbc:	010007c4 	movi	r4,31
   14dc0:	20c01b16 	blt	r4,r3,14e30 <__muldf3+0x7cc>
   14dc4:	00800804 	movi	r2,32
   14dc8:	10c5c83a 	sub	r2,r2,r3
   14dcc:	888a983a 	sll	r5,r17,r2
   14dd0:	90c8d83a 	srl	r4,r18,r3
   14dd4:	9084983a 	sll	r2,r18,r2
   14dd8:	88e2d83a 	srl	r17,r17,r3
   14ddc:	2906b03a 	or	r3,r5,r4
   14de0:	1004c03a 	cmpne	r2,r2,zero
   14de4:	1886b03a 	or	r3,r3,r2
   14de8:	188001cc 	andi	r2,r3,7
   14dec:	10000726 	beq	r2,zero,14e0c <__muldf3+0x7a8>
   14df0:	188003cc 	andi	r2,r3,15
   14df4:	01000104 	movi	r4,4
   14df8:	11000426 	beq	r2,r4,14e0c <__muldf3+0x7a8>
   14dfc:	1805883a 	mov	r2,r3
   14e00:	10c00104 	addi	r3,r2,4
   14e04:	1885803a 	cmpltu	r2,r3,r2
   14e08:	88a3883a 	add	r17,r17,r2
   14e0c:	8880202c 	andhi	r2,r17,128
   14e10:	10001c26 	beq	r2,zero,14e84 <__muldf3+0x820>
   14e14:	3027883a 	mov	r19,r6
   14e18:	00800044 	movi	r2,1
   14e1c:	0021883a 	mov	r16,zero
   14e20:	002d883a 	mov	r22,zero
   14e24:	003e6e06 	br	147e0 <_gp+0xffff2d40>
   14e28:	4007883a 	mov	r3,r8
   14e2c:	003f9706 	br	14c8c <_gp+0xffff31ec>
   14e30:	017ff844 	movi	r5,-31
   14e34:	2885c83a 	sub	r2,r5,r2
   14e38:	888ad83a 	srl	r5,r17,r2
   14e3c:	00800804 	movi	r2,32
   14e40:	18801a26 	beq	r3,r2,14eac <__muldf3+0x848>
   14e44:	01001004 	movi	r4,64
   14e48:	20c7c83a 	sub	r3,r4,r3
   14e4c:	88e2983a 	sll	r17,r17,r3
   14e50:	8ca4b03a 	or	r18,r17,r18
   14e54:	9004c03a 	cmpne	r2,r18,zero
   14e58:	2884b03a 	or	r2,r5,r2
   14e5c:	144001cc 	andi	r17,r2,7
   14e60:	88000d1e 	bne	r17,zero,14e98 <__muldf3+0x834>
   14e64:	0021883a 	mov	r16,zero
   14e68:	102cd0fa 	srli	r22,r2,3
   14e6c:	3027883a 	mov	r19,r6
   14e70:	0005883a 	mov	r2,zero
   14e74:	b46cb03a 	or	r22,r22,r17
   14e78:	003e5906 	br	147e0 <_gp+0xffff2d40>
   14e7c:	1007883a 	mov	r3,r2
   14e80:	0023883a 	mov	r17,zero
   14e84:	8820927a 	slli	r16,r17,9
   14e88:	1805883a 	mov	r2,r3
   14e8c:	8822977a 	slli	r17,r17,29
   14e90:	8020d33a 	srli	r16,r16,12
   14e94:	003ff406 	br	14e68 <_gp+0xffff33c8>
   14e98:	10c003cc 	andi	r3,r2,15
   14e9c:	01000104 	movi	r4,4
   14ea0:	193ff626 	beq	r3,r4,14e7c <_gp+0xffff33dc>
   14ea4:	0023883a 	mov	r17,zero
   14ea8:	003fd506 	br	14e00 <_gp+0xffff3360>
   14eac:	0023883a 	mov	r17,zero
   14eb0:	003fe706 	br	14e50 <_gp+0xffff33b0>
   14eb4:	00800434 	movhi	r2,16
   14eb8:	8c000234 	orhi	r16,r17,8
   14ebc:	10bfffc4 	addi	r2,r2,-1
   14ec0:	3027883a 	mov	r19,r6
   14ec4:	80a0703a 	and	r16,r16,r2
   14ec8:	902d883a 	mov	r22,r18
   14ecc:	003eac06 	br	14980 <_gp+0xffff2ee0>

00014ed0 <__subdf3>:
   14ed0:	02000434 	movhi	r8,16
   14ed4:	423fffc4 	addi	r8,r8,-1
   14ed8:	defffb04 	addi	sp,sp,-20
   14edc:	2a14703a 	and	r10,r5,r8
   14ee0:	3812d53a 	srli	r9,r7,20
   14ee4:	3a10703a 	and	r8,r7,r8
   14ee8:	2006d77a 	srli	r3,r4,29
   14eec:	3004d77a 	srli	r2,r6,29
   14ef0:	dc000015 	stw	r16,0(sp)
   14ef4:	501490fa 	slli	r10,r10,3
   14ef8:	2820d53a 	srli	r16,r5,20
   14efc:	401090fa 	slli	r8,r8,3
   14f00:	dc800215 	stw	r18,8(sp)
   14f04:	dc400115 	stw	r17,4(sp)
   14f08:	dfc00415 	stw	ra,16(sp)
   14f0c:	202290fa 	slli	r17,r4,3
   14f10:	dcc00315 	stw	r19,12(sp)
   14f14:	4a41ffcc 	andi	r9,r9,2047
   14f18:	0101ffc4 	movi	r4,2047
   14f1c:	2824d7fa 	srli	r18,r5,31
   14f20:	8401ffcc 	andi	r16,r16,2047
   14f24:	50c6b03a 	or	r3,r10,r3
   14f28:	380ed7fa 	srli	r7,r7,31
   14f2c:	408ab03a 	or	r5,r8,r2
   14f30:	300c90fa 	slli	r6,r6,3
   14f34:	49009626 	beq	r9,r4,15190 <__subdf3+0x2c0>
   14f38:	39c0005c 	xori	r7,r7,1
   14f3c:	8245c83a 	sub	r2,r16,r9
   14f40:	3c807426 	beq	r7,r18,15114 <__subdf3+0x244>
   14f44:	0080af0e 	bge	zero,r2,15204 <__subdf3+0x334>
   14f48:	48002a1e 	bne	r9,zero,14ff4 <__subdf3+0x124>
   14f4c:	2988b03a 	or	r4,r5,r6
   14f50:	20009a1e 	bne	r4,zero,151bc <__subdf3+0x2ec>
   14f54:	888001cc 	andi	r2,r17,7
   14f58:	10000726 	beq	r2,zero,14f78 <__subdf3+0xa8>
   14f5c:	888003cc 	andi	r2,r17,15
   14f60:	01000104 	movi	r4,4
   14f64:	11000426 	beq	r2,r4,14f78 <__subdf3+0xa8>
   14f68:	890b883a 	add	r5,r17,r4
   14f6c:	2c63803a 	cmpltu	r17,r5,r17
   14f70:	1c47883a 	add	r3,r3,r17
   14f74:	2823883a 	mov	r17,r5
   14f78:	1880202c 	andhi	r2,r3,128
   14f7c:	10005926 	beq	r2,zero,150e4 <__subdf3+0x214>
   14f80:	84000044 	addi	r16,r16,1
   14f84:	0081ffc4 	movi	r2,2047
   14f88:	8080be26 	beq	r16,r2,15284 <__subdf3+0x3b4>
   14f8c:	017fe034 	movhi	r5,65408
   14f90:	297fffc4 	addi	r5,r5,-1
   14f94:	1946703a 	and	r3,r3,r5
   14f98:	1804977a 	slli	r2,r3,29
   14f9c:	1806927a 	slli	r3,r3,9
   14fa0:	8822d0fa 	srli	r17,r17,3
   14fa4:	8401ffcc 	andi	r16,r16,2047
   14fa8:	180ad33a 	srli	r5,r3,12
   14fac:	9100004c 	andi	r4,r18,1
   14fb0:	1444b03a 	or	r2,r2,r17
   14fb4:	80c1ffcc 	andi	r3,r16,2047
   14fb8:	1820953a 	slli	r16,r3,20
   14fbc:	20c03fcc 	andi	r3,r4,255
   14fc0:	180897fa 	slli	r4,r3,31
   14fc4:	00c00434 	movhi	r3,16
   14fc8:	18ffffc4 	addi	r3,r3,-1
   14fcc:	28c6703a 	and	r3,r5,r3
   14fd0:	1c06b03a 	or	r3,r3,r16
   14fd4:	1906b03a 	or	r3,r3,r4
   14fd8:	dfc00417 	ldw	ra,16(sp)
   14fdc:	dcc00317 	ldw	r19,12(sp)
   14fe0:	dc800217 	ldw	r18,8(sp)
   14fe4:	dc400117 	ldw	r17,4(sp)
   14fe8:	dc000017 	ldw	r16,0(sp)
   14fec:	dec00504 	addi	sp,sp,20
   14ff0:	f800283a 	ret
   14ff4:	0101ffc4 	movi	r4,2047
   14ff8:	813fd626 	beq	r16,r4,14f54 <_gp+0xffff34b4>
   14ffc:	29402034 	orhi	r5,r5,128
   15000:	01000e04 	movi	r4,56
   15004:	2080a316 	blt	r4,r2,15294 <__subdf3+0x3c4>
   15008:	010007c4 	movi	r4,31
   1500c:	2080c616 	blt	r4,r2,15328 <__subdf3+0x458>
   15010:	01000804 	movi	r4,32
   15014:	2089c83a 	sub	r4,r4,r2
   15018:	2910983a 	sll	r8,r5,r4
   1501c:	308ed83a 	srl	r7,r6,r2
   15020:	3108983a 	sll	r4,r6,r4
   15024:	2884d83a 	srl	r2,r5,r2
   15028:	41ccb03a 	or	r6,r8,r7
   1502c:	2008c03a 	cmpne	r4,r4,zero
   15030:	310cb03a 	or	r6,r6,r4
   15034:	898dc83a 	sub	r6,r17,r6
   15038:	89a3803a 	cmpltu	r17,r17,r6
   1503c:	1887c83a 	sub	r3,r3,r2
   15040:	1c47c83a 	sub	r3,r3,r17
   15044:	3023883a 	mov	r17,r6
   15048:	1880202c 	andhi	r2,r3,128
   1504c:	10002326 	beq	r2,zero,150dc <__subdf3+0x20c>
   15050:	04c02034 	movhi	r19,128
   15054:	9cffffc4 	addi	r19,r19,-1
   15058:	1ce6703a 	and	r19,r3,r19
   1505c:	98007a26 	beq	r19,zero,15248 <__subdf3+0x378>
   15060:	9809883a 	mov	r4,r19
   15064:	0015a380 	call	15a38 <__clzsi2>
   15068:	113ffe04 	addi	r4,r2,-8
   1506c:	00c007c4 	movi	r3,31
   15070:	19007b16 	blt	r3,r4,15260 <__subdf3+0x390>
   15074:	00800804 	movi	r2,32
   15078:	1105c83a 	sub	r2,r2,r4
   1507c:	8884d83a 	srl	r2,r17,r2
   15080:	9906983a 	sll	r3,r19,r4
   15084:	8922983a 	sll	r17,r17,r4
   15088:	10c4b03a 	or	r2,r2,r3
   1508c:	24007816 	blt	r4,r16,15270 <__subdf3+0x3a0>
   15090:	2421c83a 	sub	r16,r4,r16
   15094:	80c00044 	addi	r3,r16,1
   15098:	010007c4 	movi	r4,31
   1509c:	20c09516 	blt	r4,r3,152f4 <__subdf3+0x424>
   150a0:	01400804 	movi	r5,32
   150a4:	28cbc83a 	sub	r5,r5,r3
   150a8:	88c8d83a 	srl	r4,r17,r3
   150ac:	8962983a 	sll	r17,r17,r5
   150b0:	114a983a 	sll	r5,r2,r5
   150b4:	10c6d83a 	srl	r3,r2,r3
   150b8:	8804c03a 	cmpne	r2,r17,zero
   150bc:	290ab03a 	or	r5,r5,r4
   150c0:	28a2b03a 	or	r17,r5,r2
   150c4:	0021883a 	mov	r16,zero
   150c8:	003fa206 	br	14f54 <_gp+0xffff34b4>
   150cc:	2090b03a 	or	r8,r4,r2
   150d0:	40018e26 	beq	r8,zero,1570c <__subdf3+0x83c>
   150d4:	1007883a 	mov	r3,r2
   150d8:	2023883a 	mov	r17,r4
   150dc:	888001cc 	andi	r2,r17,7
   150e0:	103f9e1e 	bne	r2,zero,14f5c <_gp+0xffff34bc>
   150e4:	1804977a 	slli	r2,r3,29
   150e8:	8822d0fa 	srli	r17,r17,3
   150ec:	1810d0fa 	srli	r8,r3,3
   150f0:	9100004c 	andi	r4,r18,1
   150f4:	1444b03a 	or	r2,r2,r17
   150f8:	00c1ffc4 	movi	r3,2047
   150fc:	80c02826 	beq	r16,r3,151a0 <__subdf3+0x2d0>
   15100:	01400434 	movhi	r5,16
   15104:	297fffc4 	addi	r5,r5,-1
   15108:	80e0703a 	and	r16,r16,r3
   1510c:	414a703a 	and	r5,r8,r5
   15110:	003fa806 	br	14fb4 <_gp+0xffff3514>
   15114:	0080630e 	bge	zero,r2,152a4 <__subdf3+0x3d4>
   15118:	48003026 	beq	r9,zero,151dc <__subdf3+0x30c>
   1511c:	0101ffc4 	movi	r4,2047
   15120:	813f8c26 	beq	r16,r4,14f54 <_gp+0xffff34b4>
   15124:	29402034 	orhi	r5,r5,128
   15128:	01000e04 	movi	r4,56
   1512c:	2080a90e 	bge	r4,r2,153d4 <__subdf3+0x504>
   15130:	298cb03a 	or	r6,r5,r6
   15134:	3012c03a 	cmpne	r9,r6,zero
   15138:	0005883a 	mov	r2,zero
   1513c:	4c53883a 	add	r9,r9,r17
   15140:	4c63803a 	cmpltu	r17,r9,r17
   15144:	10c7883a 	add	r3,r2,r3
   15148:	88c7883a 	add	r3,r17,r3
   1514c:	4823883a 	mov	r17,r9
   15150:	1880202c 	andhi	r2,r3,128
   15154:	1000d026 	beq	r2,zero,15498 <__subdf3+0x5c8>
   15158:	84000044 	addi	r16,r16,1
   1515c:	0081ffc4 	movi	r2,2047
   15160:	8080fe26 	beq	r16,r2,1555c <__subdf3+0x68c>
   15164:	00bfe034 	movhi	r2,65408
   15168:	10bfffc4 	addi	r2,r2,-1
   1516c:	1886703a 	and	r3,r3,r2
   15170:	880ad07a 	srli	r5,r17,1
   15174:	180497fa 	slli	r2,r3,31
   15178:	8900004c 	andi	r4,r17,1
   1517c:	2922b03a 	or	r17,r5,r4
   15180:	1806d07a 	srli	r3,r3,1
   15184:	1462b03a 	or	r17,r2,r17
   15188:	3825883a 	mov	r18,r7
   1518c:	003f7106 	br	14f54 <_gp+0xffff34b4>
   15190:	2984b03a 	or	r2,r5,r6
   15194:	103f6826 	beq	r2,zero,14f38 <_gp+0xffff3498>
   15198:	39c03fcc 	andi	r7,r7,255
   1519c:	003f6706 	br	14f3c <_gp+0xffff349c>
   151a0:	4086b03a 	or	r3,r8,r2
   151a4:	18015226 	beq	r3,zero,156f0 <__subdf3+0x820>
   151a8:	00c00434 	movhi	r3,16
   151ac:	41400234 	orhi	r5,r8,8
   151b0:	18ffffc4 	addi	r3,r3,-1
   151b4:	28ca703a 	and	r5,r5,r3
   151b8:	003f7e06 	br	14fb4 <_gp+0xffff3514>
   151bc:	10bfffc4 	addi	r2,r2,-1
   151c0:	1000491e 	bne	r2,zero,152e8 <__subdf3+0x418>
   151c4:	898fc83a 	sub	r7,r17,r6
   151c8:	89e3803a 	cmpltu	r17,r17,r7
   151cc:	1947c83a 	sub	r3,r3,r5
   151d0:	1c47c83a 	sub	r3,r3,r17
   151d4:	3823883a 	mov	r17,r7
   151d8:	003f9b06 	br	15048 <_gp+0xffff35a8>
   151dc:	2988b03a 	or	r4,r5,r6
   151e0:	203f5c26 	beq	r4,zero,14f54 <_gp+0xffff34b4>
   151e4:	10bfffc4 	addi	r2,r2,-1
   151e8:	1000931e 	bne	r2,zero,15438 <__subdf3+0x568>
   151ec:	898d883a 	add	r6,r17,r6
   151f0:	3463803a 	cmpltu	r17,r6,r17
   151f4:	1947883a 	add	r3,r3,r5
   151f8:	88c7883a 	add	r3,r17,r3
   151fc:	3023883a 	mov	r17,r6
   15200:	003fd306 	br	15150 <_gp+0xffff36b0>
   15204:	1000541e 	bne	r2,zero,15358 <__subdf3+0x488>
   15208:	80800044 	addi	r2,r16,1
   1520c:	1081ffcc 	andi	r2,r2,2047
   15210:	01000044 	movi	r4,1
   15214:	2080a20e 	bge	r4,r2,154a0 <__subdf3+0x5d0>
   15218:	8989c83a 	sub	r4,r17,r6
   1521c:	8905803a 	cmpltu	r2,r17,r4
   15220:	1967c83a 	sub	r19,r3,r5
   15224:	98a7c83a 	sub	r19,r19,r2
   15228:	9880202c 	andhi	r2,r19,128
   1522c:	10006326 	beq	r2,zero,153bc <__subdf3+0x4ec>
   15230:	3463c83a 	sub	r17,r6,r17
   15234:	28c7c83a 	sub	r3,r5,r3
   15238:	344d803a 	cmpltu	r6,r6,r17
   1523c:	19a7c83a 	sub	r19,r3,r6
   15240:	3825883a 	mov	r18,r7
   15244:	983f861e 	bne	r19,zero,15060 <_gp+0xffff35c0>
   15248:	8809883a 	mov	r4,r17
   1524c:	0015a380 	call	15a38 <__clzsi2>
   15250:	10800804 	addi	r2,r2,32
   15254:	113ffe04 	addi	r4,r2,-8
   15258:	00c007c4 	movi	r3,31
   1525c:	193f850e 	bge	r3,r4,15074 <_gp+0xffff35d4>
   15260:	10bff604 	addi	r2,r2,-40
   15264:	8884983a 	sll	r2,r17,r2
   15268:	0023883a 	mov	r17,zero
   1526c:	243f880e 	bge	r4,r16,15090 <_gp+0xffff35f0>
   15270:	00ffe034 	movhi	r3,65408
   15274:	18ffffc4 	addi	r3,r3,-1
   15278:	8121c83a 	sub	r16,r16,r4
   1527c:	10c6703a 	and	r3,r2,r3
   15280:	003f3406 	br	14f54 <_gp+0xffff34b4>
   15284:	9100004c 	andi	r4,r18,1
   15288:	000b883a 	mov	r5,zero
   1528c:	0005883a 	mov	r2,zero
   15290:	003f4806 	br	14fb4 <_gp+0xffff3514>
   15294:	298cb03a 	or	r6,r5,r6
   15298:	300cc03a 	cmpne	r6,r6,zero
   1529c:	0005883a 	mov	r2,zero
   152a0:	003f6406 	br	15034 <_gp+0xffff3594>
   152a4:	10009a1e 	bne	r2,zero,15510 <__subdf3+0x640>
   152a8:	82400044 	addi	r9,r16,1
   152ac:	4881ffcc 	andi	r2,r9,2047
   152b0:	02800044 	movi	r10,1
   152b4:	5080670e 	bge	r10,r2,15454 <__subdf3+0x584>
   152b8:	0081ffc4 	movi	r2,2047
   152bc:	4880af26 	beq	r9,r2,1557c <__subdf3+0x6ac>
   152c0:	898d883a 	add	r6,r17,r6
   152c4:	1945883a 	add	r2,r3,r5
   152c8:	3447803a 	cmpltu	r3,r6,r17
   152cc:	1887883a 	add	r3,r3,r2
   152d0:	182297fa 	slli	r17,r3,31
   152d4:	300cd07a 	srli	r6,r6,1
   152d8:	1806d07a 	srli	r3,r3,1
   152dc:	4821883a 	mov	r16,r9
   152e0:	89a2b03a 	or	r17,r17,r6
   152e4:	003f1b06 	br	14f54 <_gp+0xffff34b4>
   152e8:	0101ffc4 	movi	r4,2047
   152ec:	813f441e 	bne	r16,r4,15000 <_gp+0xffff3560>
   152f0:	003f1806 	br	14f54 <_gp+0xffff34b4>
   152f4:	843ff844 	addi	r16,r16,-31
   152f8:	01400804 	movi	r5,32
   152fc:	1408d83a 	srl	r4,r2,r16
   15300:	19405026 	beq	r3,r5,15444 <__subdf3+0x574>
   15304:	01401004 	movi	r5,64
   15308:	28c7c83a 	sub	r3,r5,r3
   1530c:	10c4983a 	sll	r2,r2,r3
   15310:	88a2b03a 	or	r17,r17,r2
   15314:	8822c03a 	cmpne	r17,r17,zero
   15318:	2462b03a 	or	r17,r4,r17
   1531c:	0007883a 	mov	r3,zero
   15320:	0021883a 	mov	r16,zero
   15324:	003f6d06 	br	150dc <_gp+0xffff363c>
   15328:	11fff804 	addi	r7,r2,-32
   1532c:	01000804 	movi	r4,32
   15330:	29ced83a 	srl	r7,r5,r7
   15334:	11004526 	beq	r2,r4,1544c <__subdf3+0x57c>
   15338:	01001004 	movi	r4,64
   1533c:	2089c83a 	sub	r4,r4,r2
   15340:	2904983a 	sll	r2,r5,r4
   15344:	118cb03a 	or	r6,r2,r6
   15348:	300cc03a 	cmpne	r6,r6,zero
   1534c:	398cb03a 	or	r6,r7,r6
   15350:	0005883a 	mov	r2,zero
   15354:	003f3706 	br	15034 <_gp+0xffff3594>
   15358:	80002a26 	beq	r16,zero,15404 <__subdf3+0x534>
   1535c:	0101ffc4 	movi	r4,2047
   15360:	49006626 	beq	r9,r4,154fc <__subdf3+0x62c>
   15364:	0085c83a 	sub	r2,zero,r2
   15368:	18c02034 	orhi	r3,r3,128
   1536c:	01000e04 	movi	r4,56
   15370:	20807e16 	blt	r4,r2,1556c <__subdf3+0x69c>
   15374:	010007c4 	movi	r4,31
   15378:	2080e716 	blt	r4,r2,15718 <__subdf3+0x848>
   1537c:	01000804 	movi	r4,32
   15380:	2089c83a 	sub	r4,r4,r2
   15384:	1914983a 	sll	r10,r3,r4
   15388:	8890d83a 	srl	r8,r17,r2
   1538c:	8908983a 	sll	r4,r17,r4
   15390:	1884d83a 	srl	r2,r3,r2
   15394:	5222b03a 	or	r17,r10,r8
   15398:	2006c03a 	cmpne	r3,r4,zero
   1539c:	88e2b03a 	or	r17,r17,r3
   153a0:	3463c83a 	sub	r17,r6,r17
   153a4:	2885c83a 	sub	r2,r5,r2
   153a8:	344d803a 	cmpltu	r6,r6,r17
   153ac:	1187c83a 	sub	r3,r2,r6
   153b0:	4821883a 	mov	r16,r9
   153b4:	3825883a 	mov	r18,r7
   153b8:	003f2306 	br	15048 <_gp+0xffff35a8>
   153bc:	24d0b03a 	or	r8,r4,r19
   153c0:	40001b1e 	bne	r8,zero,15430 <__subdf3+0x560>
   153c4:	0005883a 	mov	r2,zero
   153c8:	0009883a 	mov	r4,zero
   153cc:	0021883a 	mov	r16,zero
   153d0:	003f4906 	br	150f8 <_gp+0xffff3658>
   153d4:	010007c4 	movi	r4,31
   153d8:	20803a16 	blt	r4,r2,154c4 <__subdf3+0x5f4>
   153dc:	01000804 	movi	r4,32
   153e0:	2089c83a 	sub	r4,r4,r2
   153e4:	2912983a 	sll	r9,r5,r4
   153e8:	3090d83a 	srl	r8,r6,r2
   153ec:	3108983a 	sll	r4,r6,r4
   153f0:	2884d83a 	srl	r2,r5,r2
   153f4:	4a12b03a 	or	r9,r9,r8
   153f8:	2008c03a 	cmpne	r4,r4,zero
   153fc:	4912b03a 	or	r9,r9,r4
   15400:	003f4e06 	br	1513c <_gp+0xffff369c>
   15404:	1c48b03a 	or	r4,r3,r17
   15408:	20003c26 	beq	r4,zero,154fc <__subdf3+0x62c>
   1540c:	0084303a 	nor	r2,zero,r2
   15410:	1000381e 	bne	r2,zero,154f4 <__subdf3+0x624>
   15414:	3463c83a 	sub	r17,r6,r17
   15418:	28c5c83a 	sub	r2,r5,r3
   1541c:	344d803a 	cmpltu	r6,r6,r17
   15420:	1187c83a 	sub	r3,r2,r6
   15424:	4821883a 	mov	r16,r9
   15428:	3825883a 	mov	r18,r7
   1542c:	003f0606 	br	15048 <_gp+0xffff35a8>
   15430:	2023883a 	mov	r17,r4
   15434:	003f0906 	br	1505c <_gp+0xffff35bc>
   15438:	0101ffc4 	movi	r4,2047
   1543c:	813f3a1e 	bne	r16,r4,15128 <_gp+0xffff3688>
   15440:	003ec406 	br	14f54 <_gp+0xffff34b4>
   15444:	0005883a 	mov	r2,zero
   15448:	003fb106 	br	15310 <_gp+0xffff3870>
   1544c:	0005883a 	mov	r2,zero
   15450:	003fbc06 	br	15344 <_gp+0xffff38a4>
   15454:	1c44b03a 	or	r2,r3,r17
   15458:	80008e1e 	bne	r16,zero,15694 <__subdf3+0x7c4>
   1545c:	1000c826 	beq	r2,zero,15780 <__subdf3+0x8b0>
   15460:	2984b03a 	or	r2,r5,r6
   15464:	103ebb26 	beq	r2,zero,14f54 <_gp+0xffff34b4>
   15468:	8989883a 	add	r4,r17,r6
   1546c:	1945883a 	add	r2,r3,r5
   15470:	2447803a 	cmpltu	r3,r4,r17
   15474:	1887883a 	add	r3,r3,r2
   15478:	1880202c 	andhi	r2,r3,128
   1547c:	2023883a 	mov	r17,r4
   15480:	103f1626 	beq	r2,zero,150dc <_gp+0xffff363c>
   15484:	00bfe034 	movhi	r2,65408
   15488:	10bfffc4 	addi	r2,r2,-1
   1548c:	5021883a 	mov	r16,r10
   15490:	1886703a 	and	r3,r3,r2
   15494:	003eaf06 	br	14f54 <_gp+0xffff34b4>
   15498:	3825883a 	mov	r18,r7
   1549c:	003f0f06 	br	150dc <_gp+0xffff363c>
   154a0:	1c44b03a 	or	r2,r3,r17
   154a4:	8000251e 	bne	r16,zero,1553c <__subdf3+0x66c>
   154a8:	1000661e 	bne	r2,zero,15644 <__subdf3+0x774>
   154ac:	2990b03a 	or	r8,r5,r6
   154b0:	40009626 	beq	r8,zero,1570c <__subdf3+0x83c>
   154b4:	2807883a 	mov	r3,r5
   154b8:	3023883a 	mov	r17,r6
   154bc:	3825883a 	mov	r18,r7
   154c0:	003ea406 	br	14f54 <_gp+0xffff34b4>
   154c4:	127ff804 	addi	r9,r2,-32
   154c8:	01000804 	movi	r4,32
   154cc:	2a52d83a 	srl	r9,r5,r9
   154d0:	11008c26 	beq	r2,r4,15704 <__subdf3+0x834>
   154d4:	01001004 	movi	r4,64
   154d8:	2085c83a 	sub	r2,r4,r2
   154dc:	2884983a 	sll	r2,r5,r2
   154e0:	118cb03a 	or	r6,r2,r6
   154e4:	300cc03a 	cmpne	r6,r6,zero
   154e8:	4992b03a 	or	r9,r9,r6
   154ec:	0005883a 	mov	r2,zero
   154f0:	003f1206 	br	1513c <_gp+0xffff369c>
   154f4:	0101ffc4 	movi	r4,2047
   154f8:	493f9c1e 	bne	r9,r4,1536c <_gp+0xffff38cc>
   154fc:	2807883a 	mov	r3,r5
   15500:	3023883a 	mov	r17,r6
   15504:	4821883a 	mov	r16,r9
   15508:	3825883a 	mov	r18,r7
   1550c:	003e9106 	br	14f54 <_gp+0xffff34b4>
   15510:	80001f1e 	bne	r16,zero,15590 <__subdf3+0x6c0>
   15514:	1c48b03a 	or	r4,r3,r17
   15518:	20005a26 	beq	r4,zero,15684 <__subdf3+0x7b4>
   1551c:	0084303a 	nor	r2,zero,r2
   15520:	1000561e 	bne	r2,zero,1567c <__subdf3+0x7ac>
   15524:	89a3883a 	add	r17,r17,r6
   15528:	1945883a 	add	r2,r3,r5
   1552c:	898d803a 	cmpltu	r6,r17,r6
   15530:	3087883a 	add	r3,r6,r2
   15534:	4821883a 	mov	r16,r9
   15538:	003f0506 	br	15150 <_gp+0xffff36b0>
   1553c:	10002b1e 	bne	r2,zero,155ec <__subdf3+0x71c>
   15540:	2984b03a 	or	r2,r5,r6
   15544:	10008026 	beq	r2,zero,15748 <__subdf3+0x878>
   15548:	2807883a 	mov	r3,r5
   1554c:	3023883a 	mov	r17,r6
   15550:	3825883a 	mov	r18,r7
   15554:	0401ffc4 	movi	r16,2047
   15558:	003e7e06 	br	14f54 <_gp+0xffff34b4>
   1555c:	3809883a 	mov	r4,r7
   15560:	0011883a 	mov	r8,zero
   15564:	0005883a 	mov	r2,zero
   15568:	003ee306 	br	150f8 <_gp+0xffff3658>
   1556c:	1c62b03a 	or	r17,r3,r17
   15570:	8822c03a 	cmpne	r17,r17,zero
   15574:	0005883a 	mov	r2,zero
   15578:	003f8906 	br	153a0 <_gp+0xffff3900>
   1557c:	3809883a 	mov	r4,r7
   15580:	4821883a 	mov	r16,r9
   15584:	0011883a 	mov	r8,zero
   15588:	0005883a 	mov	r2,zero
   1558c:	003eda06 	br	150f8 <_gp+0xffff3658>
   15590:	0101ffc4 	movi	r4,2047
   15594:	49003b26 	beq	r9,r4,15684 <__subdf3+0x7b4>
   15598:	0085c83a 	sub	r2,zero,r2
   1559c:	18c02034 	orhi	r3,r3,128
   155a0:	01000e04 	movi	r4,56
   155a4:	20806e16 	blt	r4,r2,15760 <__subdf3+0x890>
   155a8:	010007c4 	movi	r4,31
   155ac:	20807716 	blt	r4,r2,1578c <__subdf3+0x8bc>
   155b0:	01000804 	movi	r4,32
   155b4:	2089c83a 	sub	r4,r4,r2
   155b8:	1914983a 	sll	r10,r3,r4
   155bc:	8890d83a 	srl	r8,r17,r2
   155c0:	8908983a 	sll	r4,r17,r4
   155c4:	1884d83a 	srl	r2,r3,r2
   155c8:	5222b03a 	or	r17,r10,r8
   155cc:	2006c03a 	cmpne	r3,r4,zero
   155d0:	88e2b03a 	or	r17,r17,r3
   155d4:	89a3883a 	add	r17,r17,r6
   155d8:	1145883a 	add	r2,r2,r5
   155dc:	898d803a 	cmpltu	r6,r17,r6
   155e0:	3087883a 	add	r3,r6,r2
   155e4:	4821883a 	mov	r16,r9
   155e8:	003ed906 	br	15150 <_gp+0xffff36b0>
   155ec:	2984b03a 	or	r2,r5,r6
   155f0:	10004226 	beq	r2,zero,156fc <__subdf3+0x82c>
   155f4:	1808d0fa 	srli	r4,r3,3
   155f8:	8822d0fa 	srli	r17,r17,3
   155fc:	1806977a 	slli	r3,r3,29
   15600:	2080022c 	andhi	r2,r4,8
   15604:	1c62b03a 	or	r17,r3,r17
   15608:	10000826 	beq	r2,zero,1562c <__subdf3+0x75c>
   1560c:	2812d0fa 	srli	r9,r5,3
   15610:	4880022c 	andhi	r2,r9,8
   15614:	1000051e 	bne	r2,zero,1562c <__subdf3+0x75c>
   15618:	300cd0fa 	srli	r6,r6,3
   1561c:	2804977a 	slli	r2,r5,29
   15620:	4809883a 	mov	r4,r9
   15624:	3825883a 	mov	r18,r7
   15628:	11a2b03a 	or	r17,r2,r6
   1562c:	8806d77a 	srli	r3,r17,29
   15630:	200890fa 	slli	r4,r4,3
   15634:	882290fa 	slli	r17,r17,3
   15638:	0401ffc4 	movi	r16,2047
   1563c:	1906b03a 	or	r3,r3,r4
   15640:	003e4406 	br	14f54 <_gp+0xffff34b4>
   15644:	2984b03a 	or	r2,r5,r6
   15648:	103e4226 	beq	r2,zero,14f54 <_gp+0xffff34b4>
   1564c:	8989c83a 	sub	r4,r17,r6
   15650:	8911803a 	cmpltu	r8,r17,r4
   15654:	1945c83a 	sub	r2,r3,r5
   15658:	1205c83a 	sub	r2,r2,r8
   1565c:	1200202c 	andhi	r8,r2,128
   15660:	403e9a26 	beq	r8,zero,150cc <_gp+0xffff362c>
   15664:	3463c83a 	sub	r17,r6,r17
   15668:	28c5c83a 	sub	r2,r5,r3
   1566c:	344d803a 	cmpltu	r6,r6,r17
   15670:	1187c83a 	sub	r3,r2,r6
   15674:	3825883a 	mov	r18,r7
   15678:	003e3606 	br	14f54 <_gp+0xffff34b4>
   1567c:	0101ffc4 	movi	r4,2047
   15680:	493fc71e 	bne	r9,r4,155a0 <_gp+0xffff3b00>
   15684:	2807883a 	mov	r3,r5
   15688:	3023883a 	mov	r17,r6
   1568c:	4821883a 	mov	r16,r9
   15690:	003e3006 	br	14f54 <_gp+0xffff34b4>
   15694:	10003626 	beq	r2,zero,15770 <__subdf3+0x8a0>
   15698:	2984b03a 	or	r2,r5,r6
   1569c:	10001726 	beq	r2,zero,156fc <__subdf3+0x82c>
   156a0:	1808d0fa 	srli	r4,r3,3
   156a4:	8822d0fa 	srli	r17,r17,3
   156a8:	1806977a 	slli	r3,r3,29
   156ac:	2080022c 	andhi	r2,r4,8
   156b0:	1c62b03a 	or	r17,r3,r17
   156b4:	10000726 	beq	r2,zero,156d4 <__subdf3+0x804>
   156b8:	2812d0fa 	srli	r9,r5,3
   156bc:	4880022c 	andhi	r2,r9,8
   156c0:	1000041e 	bne	r2,zero,156d4 <__subdf3+0x804>
   156c4:	300cd0fa 	srli	r6,r6,3
   156c8:	2804977a 	slli	r2,r5,29
   156cc:	4809883a 	mov	r4,r9
   156d0:	11a2b03a 	or	r17,r2,r6
   156d4:	8806d77a 	srli	r3,r17,29
   156d8:	200890fa 	slli	r4,r4,3
   156dc:	882290fa 	slli	r17,r17,3
   156e0:	3825883a 	mov	r18,r7
   156e4:	1906b03a 	or	r3,r3,r4
   156e8:	0401ffc4 	movi	r16,2047
   156ec:	003e1906 	br	14f54 <_gp+0xffff34b4>
   156f0:	000b883a 	mov	r5,zero
   156f4:	0005883a 	mov	r2,zero
   156f8:	003e2e06 	br	14fb4 <_gp+0xffff3514>
   156fc:	0401ffc4 	movi	r16,2047
   15700:	003e1406 	br	14f54 <_gp+0xffff34b4>
   15704:	0005883a 	mov	r2,zero
   15708:	003f7506 	br	154e0 <_gp+0xffff3a40>
   1570c:	0005883a 	mov	r2,zero
   15710:	0009883a 	mov	r4,zero
   15714:	003e7806 	br	150f8 <_gp+0xffff3658>
   15718:	123ff804 	addi	r8,r2,-32
   1571c:	01000804 	movi	r4,32
   15720:	1a10d83a 	srl	r8,r3,r8
   15724:	11002526 	beq	r2,r4,157bc <__subdf3+0x8ec>
   15728:	01001004 	movi	r4,64
   1572c:	2085c83a 	sub	r2,r4,r2
   15730:	1884983a 	sll	r2,r3,r2
   15734:	1444b03a 	or	r2,r2,r17
   15738:	1004c03a 	cmpne	r2,r2,zero
   1573c:	40a2b03a 	or	r17,r8,r2
   15740:	0005883a 	mov	r2,zero
   15744:	003f1606 	br	153a0 <_gp+0xffff3900>
   15748:	02000434 	movhi	r8,16
   1574c:	0009883a 	mov	r4,zero
   15750:	423fffc4 	addi	r8,r8,-1
   15754:	00bfffc4 	movi	r2,-1
   15758:	0401ffc4 	movi	r16,2047
   1575c:	003e6606 	br	150f8 <_gp+0xffff3658>
   15760:	1c62b03a 	or	r17,r3,r17
   15764:	8822c03a 	cmpne	r17,r17,zero
   15768:	0005883a 	mov	r2,zero
   1576c:	003f9906 	br	155d4 <_gp+0xffff3b34>
   15770:	2807883a 	mov	r3,r5
   15774:	3023883a 	mov	r17,r6
   15778:	0401ffc4 	movi	r16,2047
   1577c:	003df506 	br	14f54 <_gp+0xffff34b4>
   15780:	2807883a 	mov	r3,r5
   15784:	3023883a 	mov	r17,r6
   15788:	003df206 	br	14f54 <_gp+0xffff34b4>
   1578c:	123ff804 	addi	r8,r2,-32
   15790:	01000804 	movi	r4,32
   15794:	1a10d83a 	srl	r8,r3,r8
   15798:	11000a26 	beq	r2,r4,157c4 <__subdf3+0x8f4>
   1579c:	01001004 	movi	r4,64
   157a0:	2085c83a 	sub	r2,r4,r2
   157a4:	1884983a 	sll	r2,r3,r2
   157a8:	1444b03a 	or	r2,r2,r17
   157ac:	1004c03a 	cmpne	r2,r2,zero
   157b0:	40a2b03a 	or	r17,r8,r2
   157b4:	0005883a 	mov	r2,zero
   157b8:	003f8606 	br	155d4 <_gp+0xffff3b34>
   157bc:	0005883a 	mov	r2,zero
   157c0:	003fdc06 	br	15734 <_gp+0xffff3c94>
   157c4:	0005883a 	mov	r2,zero
   157c8:	003ff706 	br	157a8 <_gp+0xffff3d08>

000157cc <__fixdfsi>:
   157cc:	280cd53a 	srli	r6,r5,20
   157d0:	00c00434 	movhi	r3,16
   157d4:	18ffffc4 	addi	r3,r3,-1
   157d8:	3181ffcc 	andi	r6,r6,2047
   157dc:	01c0ff84 	movi	r7,1022
   157e0:	28c6703a 	and	r3,r5,r3
   157e4:	280ad7fa 	srli	r5,r5,31
   157e8:	3980120e 	bge	r7,r6,15834 <__fixdfsi+0x68>
   157ec:	00810744 	movi	r2,1053
   157f0:	11800c16 	blt	r2,r6,15824 <__fixdfsi+0x58>
   157f4:	00810cc4 	movi	r2,1075
   157f8:	1185c83a 	sub	r2,r2,r6
   157fc:	01c007c4 	movi	r7,31
   15800:	18c00434 	orhi	r3,r3,16
   15804:	38800d16 	blt	r7,r2,1583c <__fixdfsi+0x70>
   15808:	31befb44 	addi	r6,r6,-1043
   1580c:	2084d83a 	srl	r2,r4,r2
   15810:	1986983a 	sll	r3,r3,r6
   15814:	1884b03a 	or	r2,r3,r2
   15818:	28000726 	beq	r5,zero,15838 <__fixdfsi+0x6c>
   1581c:	0085c83a 	sub	r2,zero,r2
   15820:	f800283a 	ret
   15824:	00a00034 	movhi	r2,32768
   15828:	10bfffc4 	addi	r2,r2,-1
   1582c:	2885883a 	add	r2,r5,r2
   15830:	f800283a 	ret
   15834:	0005883a 	mov	r2,zero
   15838:	f800283a 	ret
   1583c:	008104c4 	movi	r2,1043
   15840:	1185c83a 	sub	r2,r2,r6
   15844:	1884d83a 	srl	r2,r3,r2
   15848:	003ff306 	br	15818 <_gp+0xffff3d78>

0001584c <__floatsidf>:
   1584c:	defffd04 	addi	sp,sp,-12
   15850:	dfc00215 	stw	ra,8(sp)
   15854:	dc400115 	stw	r17,4(sp)
   15858:	dc000015 	stw	r16,0(sp)
   1585c:	20002b26 	beq	r4,zero,1590c <__floatsidf+0xc0>
   15860:	2023883a 	mov	r17,r4
   15864:	2020d7fa 	srli	r16,r4,31
   15868:	20002d16 	blt	r4,zero,15920 <__floatsidf+0xd4>
   1586c:	8809883a 	mov	r4,r17
   15870:	0015a380 	call	15a38 <__clzsi2>
   15874:	01410784 	movi	r5,1054
   15878:	288bc83a 	sub	r5,r5,r2
   1587c:	01010cc4 	movi	r4,1075
   15880:	2149c83a 	sub	r4,r4,r5
   15884:	00c007c4 	movi	r3,31
   15888:	1900160e 	bge	r3,r4,158e4 <__floatsidf+0x98>
   1588c:	00c104c4 	movi	r3,1043
   15890:	1947c83a 	sub	r3,r3,r5
   15894:	88c6983a 	sll	r3,r17,r3
   15898:	00800434 	movhi	r2,16
   1589c:	10bfffc4 	addi	r2,r2,-1
   158a0:	1886703a 	and	r3,r3,r2
   158a4:	2941ffcc 	andi	r5,r5,2047
   158a8:	800d883a 	mov	r6,r16
   158ac:	0005883a 	mov	r2,zero
   158b0:	280a953a 	slli	r5,r5,20
   158b4:	31803fcc 	andi	r6,r6,255
   158b8:	01000434 	movhi	r4,16
   158bc:	300c97fa 	slli	r6,r6,31
   158c0:	213fffc4 	addi	r4,r4,-1
   158c4:	1906703a 	and	r3,r3,r4
   158c8:	1946b03a 	or	r3,r3,r5
   158cc:	1986b03a 	or	r3,r3,r6
   158d0:	dfc00217 	ldw	ra,8(sp)
   158d4:	dc400117 	ldw	r17,4(sp)
   158d8:	dc000017 	ldw	r16,0(sp)
   158dc:	dec00304 	addi	sp,sp,12
   158e0:	f800283a 	ret
   158e4:	00c002c4 	movi	r3,11
   158e8:	1887c83a 	sub	r3,r3,r2
   158ec:	88c6d83a 	srl	r3,r17,r3
   158f0:	8904983a 	sll	r2,r17,r4
   158f4:	01000434 	movhi	r4,16
   158f8:	213fffc4 	addi	r4,r4,-1
   158fc:	2941ffcc 	andi	r5,r5,2047
   15900:	1906703a 	and	r3,r3,r4
   15904:	800d883a 	mov	r6,r16
   15908:	003fe906 	br	158b0 <_gp+0xffff3e10>
   1590c:	000d883a 	mov	r6,zero
   15910:	000b883a 	mov	r5,zero
   15914:	0007883a 	mov	r3,zero
   15918:	0005883a 	mov	r2,zero
   1591c:	003fe406 	br	158b0 <_gp+0xffff3e10>
   15920:	0123c83a 	sub	r17,zero,r4
   15924:	003fd106 	br	1586c <_gp+0xffff3dcc>

00015928 <__extendsfdf2>:
   15928:	200ad5fa 	srli	r5,r4,23
   1592c:	defffd04 	addi	sp,sp,-12
   15930:	dc400115 	stw	r17,4(sp)
   15934:	29403fcc 	andi	r5,r5,255
   15938:	29800044 	addi	r6,r5,1
   1593c:	04402034 	movhi	r17,128
   15940:	dc000015 	stw	r16,0(sp)
   15944:	8c7fffc4 	addi	r17,r17,-1
   15948:	dfc00215 	stw	ra,8(sp)
   1594c:	31803fcc 	andi	r6,r6,255
   15950:	00800044 	movi	r2,1
   15954:	8922703a 	and	r17,r17,r4
   15958:	2020d7fa 	srli	r16,r4,31
   1595c:	1180110e 	bge	r2,r6,159a4 <__extendsfdf2+0x7c>
   15960:	880cd0fa 	srli	r6,r17,3
   15964:	8822977a 	slli	r17,r17,29
   15968:	2940e004 	addi	r5,r5,896
   1596c:	2941ffcc 	andi	r5,r5,2047
   15970:	2804953a 	slli	r2,r5,20
   15974:	01400434 	movhi	r5,16
   15978:	800697fa 	slli	r3,r16,31
   1597c:	297fffc4 	addi	r5,r5,-1
   15980:	314a703a 	and	r5,r6,r5
   15984:	288ab03a 	or	r5,r5,r2
   15988:	28c6b03a 	or	r3,r5,r3
   1598c:	8805883a 	mov	r2,r17
   15990:	dfc00217 	ldw	ra,8(sp)
   15994:	dc400117 	ldw	r17,4(sp)
   15998:	dc000017 	ldw	r16,0(sp)
   1599c:	dec00304 	addi	sp,sp,12
   159a0:	f800283a 	ret
   159a4:	2800111e 	bne	r5,zero,159ec <__extendsfdf2+0xc4>
   159a8:	88001c26 	beq	r17,zero,15a1c <__extendsfdf2+0xf4>
   159ac:	8809883a 	mov	r4,r17
   159b0:	0015a380 	call	15a38 <__clzsi2>
   159b4:	00c00284 	movi	r3,10
   159b8:	18801b16 	blt	r3,r2,15a28 <__extendsfdf2+0x100>
   159bc:	018002c4 	movi	r6,11
   159c0:	308dc83a 	sub	r6,r6,r2
   159c4:	11000544 	addi	r4,r2,21
   159c8:	8986d83a 	srl	r3,r17,r6
   159cc:	8922983a 	sll	r17,r17,r4
   159d0:	0180e244 	movi	r6,905
   159d4:	01400434 	movhi	r5,16
   159d8:	3085c83a 	sub	r2,r6,r2
   159dc:	297fffc4 	addi	r5,r5,-1
   159e0:	194c703a 	and	r6,r3,r5
   159e4:	1141ffcc 	andi	r5,r2,2047
   159e8:	003fe006 	br	1596c <_gp+0xffff3ecc>
   159ec:	88000826 	beq	r17,zero,15a10 <__extendsfdf2+0xe8>
   159f0:	880cd0fa 	srli	r6,r17,3
   159f4:	00800434 	movhi	r2,16
   159f8:	10bfffc4 	addi	r2,r2,-1
   159fc:	31800234 	orhi	r6,r6,8
   15a00:	8822977a 	slli	r17,r17,29
   15a04:	308c703a 	and	r6,r6,r2
   15a08:	0141ffc4 	movi	r5,2047
   15a0c:	003fd706 	br	1596c <_gp+0xffff3ecc>
   15a10:	0141ffc4 	movi	r5,2047
   15a14:	000d883a 	mov	r6,zero
   15a18:	003fd406 	br	1596c <_gp+0xffff3ecc>
   15a1c:	000b883a 	mov	r5,zero
   15a20:	000d883a 	mov	r6,zero
   15a24:	003fd106 	br	1596c <_gp+0xffff3ecc>
   15a28:	11bffd44 	addi	r6,r2,-11
   15a2c:	8986983a 	sll	r3,r17,r6
   15a30:	0023883a 	mov	r17,zero
   15a34:	003fe606 	br	159d0 <_gp+0xffff3f30>

00015a38 <__clzsi2>:
   15a38:	00bfffd4 	movui	r2,65535
   15a3c:	11000536 	bltu	r2,r4,15a54 <__clzsi2+0x1c>
   15a40:	00803fc4 	movi	r2,255
   15a44:	11000f36 	bltu	r2,r4,15a84 <__clzsi2+0x4c>
   15a48:	00800804 	movi	r2,32
   15a4c:	0007883a 	mov	r3,zero
   15a50:	00000506 	br	15a68 <__clzsi2+0x30>
   15a54:	00804034 	movhi	r2,256
   15a58:	10bfffc4 	addi	r2,r2,-1
   15a5c:	11000c2e 	bgeu	r2,r4,15a90 <__clzsi2+0x58>
   15a60:	00800204 	movi	r2,8
   15a64:	00c00604 	movi	r3,24
   15a68:	20c8d83a 	srl	r4,r4,r3
   15a6c:	00c000b4 	movhi	r3,2
   15a70:	18e0c004 	addi	r3,r3,-32000
   15a74:	1909883a 	add	r4,r3,r4
   15a78:	20c00003 	ldbu	r3,0(r4)
   15a7c:	10c5c83a 	sub	r2,r2,r3
   15a80:	f800283a 	ret
   15a84:	00800604 	movi	r2,24
   15a88:	00c00204 	movi	r3,8
   15a8c:	003ff606 	br	15a68 <_gp+0xffff3fc8>
   15a90:	00800404 	movi	r2,16
   15a94:	1007883a 	mov	r3,r2
   15a98:	003ff306 	br	15a68 <_gp+0xffff3fc8>

00015a9c <__divsi3>:
   15a9c:	20001b16 	blt	r4,zero,15b0c <__divsi3+0x70>
   15aa0:	000f883a 	mov	r7,zero
   15aa4:	28001616 	blt	r5,zero,15b00 <__divsi3+0x64>
   15aa8:	200d883a 	mov	r6,r4
   15aac:	29001a2e 	bgeu	r5,r4,15b18 <__divsi3+0x7c>
   15ab0:	00800804 	movi	r2,32
   15ab4:	00c00044 	movi	r3,1
   15ab8:	00000106 	br	15ac0 <__divsi3+0x24>
   15abc:	10000d26 	beq	r2,zero,15af4 <__divsi3+0x58>
   15ac0:	294b883a 	add	r5,r5,r5
   15ac4:	10bfffc4 	addi	r2,r2,-1
   15ac8:	18c7883a 	add	r3,r3,r3
   15acc:	293ffb36 	bltu	r5,r4,15abc <_gp+0xffff401c>
   15ad0:	0005883a 	mov	r2,zero
   15ad4:	18000726 	beq	r3,zero,15af4 <__divsi3+0x58>
   15ad8:	0005883a 	mov	r2,zero
   15adc:	31400236 	bltu	r6,r5,15ae8 <__divsi3+0x4c>
   15ae0:	314dc83a 	sub	r6,r6,r5
   15ae4:	10c4b03a 	or	r2,r2,r3
   15ae8:	1806d07a 	srli	r3,r3,1
   15aec:	280ad07a 	srli	r5,r5,1
   15af0:	183ffa1e 	bne	r3,zero,15adc <_gp+0xffff403c>
   15af4:	38000126 	beq	r7,zero,15afc <__divsi3+0x60>
   15af8:	0085c83a 	sub	r2,zero,r2
   15afc:	f800283a 	ret
   15b00:	014bc83a 	sub	r5,zero,r5
   15b04:	39c0005c 	xori	r7,r7,1
   15b08:	003fe706 	br	15aa8 <_gp+0xffff4008>
   15b0c:	0109c83a 	sub	r4,zero,r4
   15b10:	01c00044 	movi	r7,1
   15b14:	003fe306 	br	15aa4 <_gp+0xffff4004>
   15b18:	00c00044 	movi	r3,1
   15b1c:	003fee06 	br	15ad8 <_gp+0xffff4038>

00015b20 <__modsi3>:
   15b20:	20001716 	blt	r4,zero,15b80 <__modsi3+0x60>
   15b24:	000f883a 	mov	r7,zero
   15b28:	2005883a 	mov	r2,r4
   15b2c:	28001216 	blt	r5,zero,15b78 <__modsi3+0x58>
   15b30:	2900162e 	bgeu	r5,r4,15b8c <__modsi3+0x6c>
   15b34:	01800804 	movi	r6,32
   15b38:	00c00044 	movi	r3,1
   15b3c:	00000106 	br	15b44 <__modsi3+0x24>
   15b40:	30000a26 	beq	r6,zero,15b6c <__modsi3+0x4c>
   15b44:	294b883a 	add	r5,r5,r5
   15b48:	31bfffc4 	addi	r6,r6,-1
   15b4c:	18c7883a 	add	r3,r3,r3
   15b50:	293ffb36 	bltu	r5,r4,15b40 <_gp+0xffff40a0>
   15b54:	18000526 	beq	r3,zero,15b6c <__modsi3+0x4c>
   15b58:	1806d07a 	srli	r3,r3,1
   15b5c:	11400136 	bltu	r2,r5,15b64 <__modsi3+0x44>
   15b60:	1145c83a 	sub	r2,r2,r5
   15b64:	280ad07a 	srli	r5,r5,1
   15b68:	183ffb1e 	bne	r3,zero,15b58 <_gp+0xffff40b8>
   15b6c:	38000126 	beq	r7,zero,15b74 <__modsi3+0x54>
   15b70:	0085c83a 	sub	r2,zero,r2
   15b74:	f800283a 	ret
   15b78:	014bc83a 	sub	r5,zero,r5
   15b7c:	003fec06 	br	15b30 <_gp+0xffff4090>
   15b80:	0109c83a 	sub	r4,zero,r4
   15b84:	01c00044 	movi	r7,1
   15b88:	003fe706 	br	15b28 <_gp+0xffff4088>
   15b8c:	00c00044 	movi	r3,1
   15b90:	003ff106 	br	15b58 <_gp+0xffff40b8>

00015b94 <__udivsi3>:
   15b94:	200d883a 	mov	r6,r4
   15b98:	2900152e 	bgeu	r5,r4,15bf0 <__udivsi3+0x5c>
   15b9c:	28001416 	blt	r5,zero,15bf0 <__udivsi3+0x5c>
   15ba0:	00800804 	movi	r2,32
   15ba4:	00c00044 	movi	r3,1
   15ba8:	00000206 	br	15bb4 <__udivsi3+0x20>
   15bac:	10000e26 	beq	r2,zero,15be8 <__udivsi3+0x54>
   15bb0:	28000516 	blt	r5,zero,15bc8 <__udivsi3+0x34>
   15bb4:	294b883a 	add	r5,r5,r5
   15bb8:	10bfffc4 	addi	r2,r2,-1
   15bbc:	18c7883a 	add	r3,r3,r3
   15bc0:	293ffa36 	bltu	r5,r4,15bac <_gp+0xffff410c>
   15bc4:	18000826 	beq	r3,zero,15be8 <__udivsi3+0x54>
   15bc8:	0005883a 	mov	r2,zero
   15bcc:	31400236 	bltu	r6,r5,15bd8 <__udivsi3+0x44>
   15bd0:	314dc83a 	sub	r6,r6,r5
   15bd4:	10c4b03a 	or	r2,r2,r3
   15bd8:	1806d07a 	srli	r3,r3,1
   15bdc:	280ad07a 	srli	r5,r5,1
   15be0:	183ffa1e 	bne	r3,zero,15bcc <_gp+0xffff412c>
   15be4:	f800283a 	ret
   15be8:	0005883a 	mov	r2,zero
   15bec:	f800283a 	ret
   15bf0:	00c00044 	movi	r3,1
   15bf4:	003ff406 	br	15bc8 <_gp+0xffff4128>

00015bf8 <__umodsi3>:
   15bf8:	2005883a 	mov	r2,r4
   15bfc:	2900122e 	bgeu	r5,r4,15c48 <__umodsi3+0x50>
   15c00:	28001116 	blt	r5,zero,15c48 <__umodsi3+0x50>
   15c04:	01800804 	movi	r6,32
   15c08:	00c00044 	movi	r3,1
   15c0c:	00000206 	br	15c18 <__umodsi3+0x20>
   15c10:	30000c26 	beq	r6,zero,15c44 <__umodsi3+0x4c>
   15c14:	28000516 	blt	r5,zero,15c2c <__umodsi3+0x34>
   15c18:	294b883a 	add	r5,r5,r5
   15c1c:	31bfffc4 	addi	r6,r6,-1
   15c20:	18c7883a 	add	r3,r3,r3
   15c24:	293ffa36 	bltu	r5,r4,15c10 <_gp+0xffff4170>
   15c28:	18000626 	beq	r3,zero,15c44 <__umodsi3+0x4c>
   15c2c:	1806d07a 	srli	r3,r3,1
   15c30:	11400136 	bltu	r2,r5,15c38 <__umodsi3+0x40>
   15c34:	1145c83a 	sub	r2,r2,r5
   15c38:	280ad07a 	srli	r5,r5,1
   15c3c:	183ffb1e 	bne	r3,zero,15c2c <_gp+0xffff418c>
   15c40:	f800283a 	ret
   15c44:	f800283a 	ret
   15c48:	00c00044 	movi	r3,1
   15c4c:	003ff706 	br	15c2c <_gp+0xffff418c>

00015c50 <__errno>:
   15c50:	008000b4 	movhi	r2,2
   15c54:	10a6ab04 	addi	r2,r2,-25940
   15c58:	10800017 	ldw	r2,0(r2)
   15c5c:	f800283a 	ret

00015c60 <memcpy>:
   15c60:	defffd04 	addi	sp,sp,-12
   15c64:	dfc00215 	stw	ra,8(sp)
   15c68:	dc400115 	stw	r17,4(sp)
   15c6c:	dc000015 	stw	r16,0(sp)
   15c70:	00c003c4 	movi	r3,15
   15c74:	2005883a 	mov	r2,r4
   15c78:	1980452e 	bgeu	r3,r6,15d90 <memcpy+0x130>
   15c7c:	2906b03a 	or	r3,r5,r4
   15c80:	18c000cc 	andi	r3,r3,3
   15c84:	1800441e 	bne	r3,zero,15d98 <memcpy+0x138>
   15c88:	347ffc04 	addi	r17,r6,-16
   15c8c:	8822d13a 	srli	r17,r17,4
   15c90:	28c00104 	addi	r3,r5,4
   15c94:	23400104 	addi	r13,r4,4
   15c98:	8820913a 	slli	r16,r17,4
   15c9c:	2b000204 	addi	r12,r5,8
   15ca0:	22c00204 	addi	r11,r4,8
   15ca4:	84000504 	addi	r16,r16,20
   15ca8:	2a800304 	addi	r10,r5,12
   15cac:	22400304 	addi	r9,r4,12
   15cb0:	2c21883a 	add	r16,r5,r16
   15cb4:	2811883a 	mov	r8,r5
   15cb8:	200f883a 	mov	r7,r4
   15cbc:	41000017 	ldw	r4,0(r8)
   15cc0:	1fc00017 	ldw	ra,0(r3)
   15cc4:	63c00017 	ldw	r15,0(r12)
   15cc8:	39000015 	stw	r4,0(r7)
   15ccc:	53800017 	ldw	r14,0(r10)
   15cd0:	6fc00015 	stw	ra,0(r13)
   15cd4:	5bc00015 	stw	r15,0(r11)
   15cd8:	4b800015 	stw	r14,0(r9)
   15cdc:	18c00404 	addi	r3,r3,16
   15ce0:	39c00404 	addi	r7,r7,16
   15ce4:	42000404 	addi	r8,r8,16
   15ce8:	6b400404 	addi	r13,r13,16
   15cec:	63000404 	addi	r12,r12,16
   15cf0:	5ac00404 	addi	r11,r11,16
   15cf4:	52800404 	addi	r10,r10,16
   15cf8:	4a400404 	addi	r9,r9,16
   15cfc:	1c3fef1e 	bne	r3,r16,15cbc <_gp+0xffff421c>
   15d00:	89c00044 	addi	r7,r17,1
   15d04:	380e913a 	slli	r7,r7,4
   15d08:	310003cc 	andi	r4,r6,15
   15d0c:	02c000c4 	movi	r11,3
   15d10:	11c7883a 	add	r3,r2,r7
   15d14:	29cb883a 	add	r5,r5,r7
   15d18:	5900212e 	bgeu	r11,r4,15da0 <memcpy+0x140>
   15d1c:	1813883a 	mov	r9,r3
   15d20:	2811883a 	mov	r8,r5
   15d24:	200f883a 	mov	r7,r4
   15d28:	42800017 	ldw	r10,0(r8)
   15d2c:	4a400104 	addi	r9,r9,4
   15d30:	39ffff04 	addi	r7,r7,-4
   15d34:	4abfff15 	stw	r10,-4(r9)
   15d38:	42000104 	addi	r8,r8,4
   15d3c:	59fffa36 	bltu	r11,r7,15d28 <_gp+0xffff4288>
   15d40:	213fff04 	addi	r4,r4,-4
   15d44:	2008d0ba 	srli	r4,r4,2
   15d48:	318000cc 	andi	r6,r6,3
   15d4c:	21000044 	addi	r4,r4,1
   15d50:	2109883a 	add	r4,r4,r4
   15d54:	2109883a 	add	r4,r4,r4
   15d58:	1907883a 	add	r3,r3,r4
   15d5c:	290b883a 	add	r5,r5,r4
   15d60:	30000626 	beq	r6,zero,15d7c <memcpy+0x11c>
   15d64:	198d883a 	add	r6,r3,r6
   15d68:	29c00003 	ldbu	r7,0(r5)
   15d6c:	18c00044 	addi	r3,r3,1
   15d70:	29400044 	addi	r5,r5,1
   15d74:	19ffffc5 	stb	r7,-1(r3)
   15d78:	19bffb1e 	bne	r3,r6,15d68 <_gp+0xffff42c8>
   15d7c:	dfc00217 	ldw	ra,8(sp)
   15d80:	dc400117 	ldw	r17,4(sp)
   15d84:	dc000017 	ldw	r16,0(sp)
   15d88:	dec00304 	addi	sp,sp,12
   15d8c:	f800283a 	ret
   15d90:	2007883a 	mov	r3,r4
   15d94:	003ff206 	br	15d60 <_gp+0xffff42c0>
   15d98:	2007883a 	mov	r3,r4
   15d9c:	003ff106 	br	15d64 <_gp+0xffff42c4>
   15da0:	200d883a 	mov	r6,r4
   15da4:	003fee06 	br	15d60 <_gp+0xffff42c0>

00015da8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   15da8:	defff004 	addi	sp,sp,-64
   15dac:	df000f15 	stw	fp,60(sp)
   15db0:	df000f04 	addi	fp,sp,60
   15db4:	e13ffd15 	stw	r4,-12(fp)
   15db8:	e17ffe15 	stw	r5,-8(fp)
   15dbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   15dc0:	00bffa84 	movi	r2,-22
   15dc4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15dc8:	e0bffd17 	ldw	r2,-12(fp)
   15dcc:	10800828 	cmpgeui	r2,r2,32
   15dd0:	1000501e 	bne	r2,zero,15f14 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dd4:	0005303a 	rdctl	r2,status
   15dd8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ddc:	e0fff617 	ldw	r3,-40(fp)
   15de0:	00bfff84 	movi	r2,-2
   15de4:	1884703a 	and	r2,r3,r2
   15de8:	1001703a 	wrctl	status,r2
  
  return context;
   15dec:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   15df0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   15df4:	008000b4 	movhi	r2,2
   15df8:	10ac6304 	addi	r2,r2,-20084
   15dfc:	e0fffd17 	ldw	r3,-12(fp)
   15e00:	180690fa 	slli	r3,r3,3
   15e04:	10c5883a 	add	r2,r2,r3
   15e08:	e0ffff17 	ldw	r3,-4(fp)
   15e0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   15e10:	008000b4 	movhi	r2,2
   15e14:	10ac6304 	addi	r2,r2,-20084
   15e18:	e0fffd17 	ldw	r3,-12(fp)
   15e1c:	180690fa 	slli	r3,r3,3
   15e20:	10c5883a 	add	r2,r2,r3
   15e24:	10800104 	addi	r2,r2,4
   15e28:	e0fffe17 	ldw	r3,-8(fp)
   15e2c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   15e30:	e0bfff17 	ldw	r2,-4(fp)
   15e34:	10001926 	beq	r2,zero,15e9c <alt_irq_register+0xf4>
   15e38:	e0bffd17 	ldw	r2,-12(fp)
   15e3c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e40:	0005303a 	rdctl	r2,status
   15e44:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e48:	e0fff717 	ldw	r3,-36(fp)
   15e4c:	00bfff84 	movi	r2,-2
   15e50:	1884703a 	and	r2,r3,r2
   15e54:	1001703a 	wrctl	status,r2
  
  return context;
   15e58:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15e5c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   15e60:	00c00044 	movi	r3,1
   15e64:	e0bff217 	ldw	r2,-56(fp)
   15e68:	1884983a 	sll	r2,r3,r2
   15e6c:	1007883a 	mov	r3,r2
   15e70:	d0a5b317 	ldw	r2,-26932(gp)
   15e74:	1884b03a 	or	r2,r3,r2
   15e78:	d0a5b315 	stw	r2,-26932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15e7c:	d0a5b317 	ldw	r2,-26932(gp)
   15e80:	100170fa 	wrctl	ienable,r2
   15e84:	e0bff817 	ldw	r2,-32(fp)
   15e88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e8c:	e0bff917 	ldw	r2,-28(fp)
   15e90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15e94:	0005883a 	mov	r2,zero
   15e98:	00001906 	br	15f00 <alt_irq_register+0x158>
   15e9c:	e0bffd17 	ldw	r2,-12(fp)
   15ea0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ea4:	0005303a 	rdctl	r2,status
   15ea8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15eac:	e0fffa17 	ldw	r3,-24(fp)
   15eb0:	00bfff84 	movi	r2,-2
   15eb4:	1884703a 	and	r2,r3,r2
   15eb8:	1001703a 	wrctl	status,r2
  
  return context;
   15ebc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15ec0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   15ec4:	00c00044 	movi	r3,1
   15ec8:	e0bff417 	ldw	r2,-48(fp)
   15ecc:	1884983a 	sll	r2,r3,r2
   15ed0:	0084303a 	nor	r2,zero,r2
   15ed4:	1007883a 	mov	r3,r2
   15ed8:	d0a5b317 	ldw	r2,-26932(gp)
   15edc:	1884703a 	and	r2,r3,r2
   15ee0:	d0a5b315 	stw	r2,-26932(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15ee4:	d0a5b317 	ldw	r2,-26932(gp)
   15ee8:	100170fa 	wrctl	ienable,r2
   15eec:	e0bffb17 	ldw	r2,-20(fp)
   15ef0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15ef4:	e0bffc17 	ldw	r2,-16(fp)
   15ef8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15efc:	0005883a 	mov	r2,zero
   15f00:	e0bff115 	stw	r2,-60(fp)
   15f04:	e0bff317 	ldw	r2,-52(fp)
   15f08:	e0bff515 	stw	r2,-44(fp)
   15f0c:	e0bff517 	ldw	r2,-44(fp)
   15f10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   15f14:	e0bff117 	ldw	r2,-60(fp)
}
   15f18:	e037883a 	mov	sp,fp
   15f1c:	df000017 	ldw	fp,0(sp)
   15f20:	dec00104 	addi	sp,sp,4
   15f24:	f800283a 	ret

00015f28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   15f28:	defffc04 	addi	sp,sp,-16
   15f2c:	df000315 	stw	fp,12(sp)
   15f30:	df000304 	addi	fp,sp,12
   15f34:	e13ffd15 	stw	r4,-12(fp)
   15f38:	e17ffe15 	stw	r5,-8(fp)
   15f3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   15f40:	e0fffe17 	ldw	r3,-8(fp)
   15f44:	e0bffd17 	ldw	r2,-12(fp)
   15f48:	18800c26 	beq	r3,r2,15f7c <alt_load_section+0x54>
  {
    while( to != end )
   15f4c:	00000806 	br	15f70 <alt_load_section+0x48>
    {
      *to++ = *from++;
   15f50:	e0bffe17 	ldw	r2,-8(fp)
   15f54:	10c00104 	addi	r3,r2,4
   15f58:	e0fffe15 	stw	r3,-8(fp)
   15f5c:	e0fffd17 	ldw	r3,-12(fp)
   15f60:	19000104 	addi	r4,r3,4
   15f64:	e13ffd15 	stw	r4,-12(fp)
   15f68:	18c00017 	ldw	r3,0(r3)
   15f6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   15f70:	e0fffe17 	ldw	r3,-8(fp)
   15f74:	e0bfff17 	ldw	r2,-4(fp)
   15f78:	18bff51e 	bne	r3,r2,15f50 <_gp+0xffff44b0>
    {
      *to++ = *from++;
    }
  }
}
   15f7c:	0001883a 	nop
   15f80:	e037883a 	mov	sp,fp
   15f84:	df000017 	ldw	fp,0(sp)
   15f88:	dec00104 	addi	sp,sp,4
   15f8c:	f800283a 	ret

00015f90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   15f90:	defffe04 	addi	sp,sp,-8
   15f94:	dfc00115 	stw	ra,4(sp)
   15f98:	df000015 	stw	fp,0(sp)
   15f9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   15fa0:	018000b4 	movhi	r6,2
   15fa4:	31a6b504 	addi	r6,r6,-25900
   15fa8:	014000b4 	movhi	r5,2
   15fac:	29611204 	addi	r5,r5,-31672
   15fb0:	010000b4 	movhi	r4,2
   15fb4:	2126b504 	addi	r4,r4,-25900
   15fb8:	0015f280 	call	15f28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   15fbc:	01800074 	movhi	r6,1
   15fc0:	31808d04 	addi	r6,r6,564
   15fc4:	01400074 	movhi	r5,1
   15fc8:	29400804 	addi	r5,r5,32
   15fcc:	01000074 	movhi	r4,1
   15fd0:	21000804 	addi	r4,r4,32
   15fd4:	0015f280 	call	15f28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   15fd8:	018000b4 	movhi	r6,2
   15fdc:	31a11204 	addi	r6,r6,-31672
   15fe0:	014000b4 	movhi	r5,2
   15fe4:	29608304 	addi	r5,r5,-32244
   15fe8:	010000b4 	movhi	r4,2
   15fec:	21208304 	addi	r4,r4,-32244
   15ff0:	0015f280 	call	15f28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   15ff4:	00172ac0 	call	172ac <alt_dcache_flush_all>
  alt_icache_flush_all();
   15ff8:	00175280 	call	17528 <alt_icache_flush_all>
}
   15ffc:	0001883a 	nop
   16000:	e037883a 	mov	sp,fp
   16004:	dfc00117 	ldw	ra,4(sp)
   16008:	df000017 	ldw	fp,0(sp)
   1600c:	dec00204 	addi	sp,sp,8
   16010:	f800283a 	ret

00016014 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   16014:	defffd04 	addi	sp,sp,-12
   16018:	dfc00215 	stw	ra,8(sp)
   1601c:	df000115 	stw	fp,4(sp)
   16020:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   16024:	0009883a 	mov	r4,zero
   16028:	00160c40 	call	160c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1602c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   16030:	00160fc0 	call	160fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   16034:	018000b4 	movhi	r6,2
   16038:	31a10104 	addi	r6,r6,-31740
   1603c:	014000b4 	movhi	r5,2
   16040:	29610104 	addi	r5,r5,-31740
   16044:	010000b4 	movhi	r4,2
   16048:	21210104 	addi	r4,r4,-31740
   1604c:	001762c0 	call	1762c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   16050:	00173d80 	call	173d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   16054:	01000074 	movhi	r4,1
   16058:	211d0e04 	addi	r4,r4,29752
   1605c:	0017de00 	call	17de0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   16060:	d0a5b417 	ldw	r2,-26928(gp)
   16064:	d0e5b517 	ldw	r3,-26924(gp)
   16068:	d125b617 	ldw	r4,-26920(gp)
   1606c:	200d883a 	mov	r6,r4
   16070:	180b883a 	mov	r5,r3
   16074:	1009883a 	mov	r4,r2
   16078:	00107540 	call	10754 <main>
   1607c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   16080:	01000044 	movi	r4,1
   16084:	00171d40 	call	171d4 <close>
  exit (result);
   16088:	e13fff17 	ldw	r4,-4(fp)
   1608c:	0017df40 	call	17df4 <exit>

00016090 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   16090:	defffd04 	addi	sp,sp,-12
   16094:	dfc00215 	stw	ra,8(sp)
   16098:	df000115 	stw	fp,4(sp)
   1609c:	df000104 	addi	fp,sp,4
   160a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   160a4:	d1600704 	addi	r5,gp,-32740
   160a8:	e13fff17 	ldw	r4,-4(fp)
   160ac:	00173340 	call	17334 <alt_dev_llist_insert>
}
   160b0:	e037883a 	mov	sp,fp
   160b4:	dfc00117 	ldw	ra,4(sp)
   160b8:	df000017 	ldw	fp,0(sp)
   160bc:	dec00204 	addi	sp,sp,8
   160c0:	f800283a 	ret

000160c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   160c4:	defffd04 	addi	sp,sp,-12
   160c8:	dfc00215 	stw	ra,8(sp)
   160cc:	df000115 	stw	fp,4(sp)
   160d0:	df000104 	addi	fp,sp,4
   160d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   160d8:	0017b540 	call	17b54 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   160dc:	00800044 	movi	r2,1
   160e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   160e4:	0001883a 	nop
   160e8:	e037883a 	mov	sp,fp
   160ec:	dfc00117 	ldw	ra,4(sp)
   160f0:	df000017 	ldw	fp,0(sp)
   160f4:	dec00204 	addi	sp,sp,8
   160f8:	f800283a 	ret

000160fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   160fc:	defffe04 	addi	sp,sp,-8
   16100:	dfc00115 	stw	ra,4(sp)
   16104:	df000015 	stw	fp,0(sp)
   16108:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1610c:	01c0fa04 	movi	r7,1000
   16110:	01800044 	movi	r6,1
   16114:	000b883a 	mov	r5,zero
   16118:	010000b4 	movhi	r4,2
   1611c:	21040004 	addi	r4,r4,4096
   16120:	0016c480 	call	16c48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   16124:	000d883a 	mov	r6,zero
   16128:	000b883a 	mov	r5,zero
   1612c:	010000b4 	movhi	r4,2
   16130:	21222504 	addi	r4,r4,-30572
   16134:	00162d00 	call	162d0 <altera_avalon_jtag_uart_init>
   16138:	010000b4 	movhi	r4,2
   1613c:	21221b04 	addi	r4,r4,-30612
   16140:	00160900 	call	16090 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   16144:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   16148:	010000b4 	movhi	r4,2
   1614c:	21263304 	addi	r4,r4,-26420
   16150:	00160900 	call	16090 <alt_dev_reg>
}
   16154:	0001883a 	nop
   16158:	e037883a 	mov	sp,fp
   1615c:	dfc00117 	ldw	ra,4(sp)
   16160:	df000017 	ldw	fp,0(sp)
   16164:	dec00204 	addi	sp,sp,8
   16168:	f800283a 	ret

0001616c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1616c:	defffa04 	addi	sp,sp,-24
   16170:	dfc00515 	stw	ra,20(sp)
   16174:	df000415 	stw	fp,16(sp)
   16178:	df000404 	addi	fp,sp,16
   1617c:	e13ffd15 	stw	r4,-12(fp)
   16180:	e17ffe15 	stw	r5,-8(fp)
   16184:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16188:	e0bffd17 	ldw	r2,-12(fp)
   1618c:	10800017 	ldw	r2,0(r2)
   16190:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   16194:	e0bffc17 	ldw	r2,-16(fp)
   16198:	10c00a04 	addi	r3,r2,40
   1619c:	e0bffd17 	ldw	r2,-12(fp)
   161a0:	10800217 	ldw	r2,8(r2)
   161a4:	100f883a 	mov	r7,r2
   161a8:	e1bfff17 	ldw	r6,-4(fp)
   161ac:	e17ffe17 	ldw	r5,-8(fp)
   161b0:	1809883a 	mov	r4,r3
   161b4:	001678c0 	call	1678c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   161b8:	e037883a 	mov	sp,fp
   161bc:	dfc00117 	ldw	ra,4(sp)
   161c0:	df000017 	ldw	fp,0(sp)
   161c4:	dec00204 	addi	sp,sp,8
   161c8:	f800283a 	ret

000161cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   161cc:	defffa04 	addi	sp,sp,-24
   161d0:	dfc00515 	stw	ra,20(sp)
   161d4:	df000415 	stw	fp,16(sp)
   161d8:	df000404 	addi	fp,sp,16
   161dc:	e13ffd15 	stw	r4,-12(fp)
   161e0:	e17ffe15 	stw	r5,-8(fp)
   161e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   161e8:	e0bffd17 	ldw	r2,-12(fp)
   161ec:	10800017 	ldw	r2,0(r2)
   161f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   161f4:	e0bffc17 	ldw	r2,-16(fp)
   161f8:	10c00a04 	addi	r3,r2,40
   161fc:	e0bffd17 	ldw	r2,-12(fp)
   16200:	10800217 	ldw	r2,8(r2)
   16204:	100f883a 	mov	r7,r2
   16208:	e1bfff17 	ldw	r6,-4(fp)
   1620c:	e17ffe17 	ldw	r5,-8(fp)
   16210:	1809883a 	mov	r4,r3
   16214:	00169a80 	call	169a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   16218:	e037883a 	mov	sp,fp
   1621c:	dfc00117 	ldw	ra,4(sp)
   16220:	df000017 	ldw	fp,0(sp)
   16224:	dec00204 	addi	sp,sp,8
   16228:	f800283a 	ret

0001622c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1622c:	defffc04 	addi	sp,sp,-16
   16230:	dfc00315 	stw	ra,12(sp)
   16234:	df000215 	stw	fp,8(sp)
   16238:	df000204 	addi	fp,sp,8
   1623c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16240:	e0bfff17 	ldw	r2,-4(fp)
   16244:	10800017 	ldw	r2,0(r2)
   16248:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1624c:	e0bffe17 	ldw	r2,-8(fp)
   16250:	10c00a04 	addi	r3,r2,40
   16254:	e0bfff17 	ldw	r2,-4(fp)
   16258:	10800217 	ldw	r2,8(r2)
   1625c:	100b883a 	mov	r5,r2
   16260:	1809883a 	mov	r4,r3
   16264:	00166340 	call	16634 <altera_avalon_jtag_uart_close>
}
   16268:	e037883a 	mov	sp,fp
   1626c:	dfc00117 	ldw	ra,4(sp)
   16270:	df000017 	ldw	fp,0(sp)
   16274:	dec00204 	addi	sp,sp,8
   16278:	f800283a 	ret

0001627c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1627c:	defffa04 	addi	sp,sp,-24
   16280:	dfc00515 	stw	ra,20(sp)
   16284:	df000415 	stw	fp,16(sp)
   16288:	df000404 	addi	fp,sp,16
   1628c:	e13ffd15 	stw	r4,-12(fp)
   16290:	e17ffe15 	stw	r5,-8(fp)
   16294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   16298:	e0bffd17 	ldw	r2,-12(fp)
   1629c:	10800017 	ldw	r2,0(r2)
   162a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   162a4:	e0bffc17 	ldw	r2,-16(fp)
   162a8:	10800a04 	addi	r2,r2,40
   162ac:	e1bfff17 	ldw	r6,-4(fp)
   162b0:	e17ffe17 	ldw	r5,-8(fp)
   162b4:	1009883a 	mov	r4,r2
   162b8:	001669c0 	call	1669c <altera_avalon_jtag_uart_ioctl>
}
   162bc:	e037883a 	mov	sp,fp
   162c0:	dfc00117 	ldw	ra,4(sp)
   162c4:	df000017 	ldw	fp,0(sp)
   162c8:	dec00204 	addi	sp,sp,8
   162cc:	f800283a 	ret

000162d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   162d0:	defffb04 	addi	sp,sp,-20
   162d4:	dfc00415 	stw	ra,16(sp)
   162d8:	df000315 	stw	fp,12(sp)
   162dc:	df000304 	addi	fp,sp,12
   162e0:	e13ffd15 	stw	r4,-12(fp)
   162e4:	e17ffe15 	stw	r5,-8(fp)
   162e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   162ec:	e0bffd17 	ldw	r2,-12(fp)
   162f0:	00c00044 	movi	r3,1
   162f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   162f8:	e0bffd17 	ldw	r2,-12(fp)
   162fc:	10800017 	ldw	r2,0(r2)
   16300:	10800104 	addi	r2,r2,4
   16304:	1007883a 	mov	r3,r2
   16308:	e0bffd17 	ldw	r2,-12(fp)
   1630c:	10800817 	ldw	r2,32(r2)
   16310:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	01800074 	movhi	r6,1
   1631c:	3198e104 	addi	r6,r6,25476
   16320:	e17ffd17 	ldw	r5,-12(fp)
   16324:	1009883a 	mov	r4,r2
   16328:	0015da80 	call	15da8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1632c:	e0bffd17 	ldw	r2,-12(fp)
   16330:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   16334:	e0bffd17 	ldw	r2,-12(fp)
   16338:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1633c:	d0e5b717 	ldw	r3,-26916(gp)
   16340:	e1fffd17 	ldw	r7,-12(fp)
   16344:	01800074 	movhi	r6,1
   16348:	31996504 	addi	r6,r6,26004
   1634c:	180b883a 	mov	r5,r3
   16350:	1009883a 	mov	r4,r2
   16354:	001706c0 	call	1706c <alt_alarm_start>
   16358:	1000040e 	bge	r2,zero,1636c <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1635c:	e0fffd17 	ldw	r3,-12(fp)
   16360:	00a00034 	movhi	r2,32768
   16364:	10bfffc4 	addi	r2,r2,-1
   16368:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1636c:	0001883a 	nop
   16370:	e037883a 	mov	sp,fp
   16374:	dfc00117 	ldw	ra,4(sp)
   16378:	df000017 	ldw	fp,0(sp)
   1637c:	dec00204 	addi	sp,sp,8
   16380:	f800283a 	ret

00016384 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   16384:	defff704 	addi	sp,sp,-36
   16388:	df000815 	stw	fp,32(sp)
   1638c:	df000804 	addi	fp,sp,32
   16390:	e13ffe15 	stw	r4,-8(fp)
   16394:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16398:	e0bffe17 	ldw	r2,-8(fp)
   1639c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   163a0:	e0bffa17 	ldw	r2,-24(fp)
   163a4:	10800017 	ldw	r2,0(r2)
   163a8:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   163ac:	e0bffb17 	ldw	r2,-20(fp)
   163b0:	10800104 	addi	r2,r2,4
   163b4:	10800037 	ldwio	r2,0(r2)
   163b8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   163bc:	e0bffc17 	ldw	r2,-16(fp)
   163c0:	1080c00c 	andi	r2,r2,768
   163c4:	10006d26 	beq	r2,zero,1657c <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   163c8:	e0bffc17 	ldw	r2,-16(fp)
   163cc:	1080400c 	andi	r2,r2,256
   163d0:	10003526 	beq	r2,zero,164a8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   163d4:	00800074 	movhi	r2,1
   163d8:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   163dc:	e0bffa17 	ldw	r2,-24(fp)
   163e0:	10800a17 	ldw	r2,40(r2)
   163e4:	10800044 	addi	r2,r2,1
   163e8:	1081ffcc 	andi	r2,r2,2047
   163ec:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   163f0:	e0bffa17 	ldw	r2,-24(fp)
   163f4:	10c00b17 	ldw	r3,44(r2)
   163f8:	e0bffd17 	ldw	r2,-12(fp)
   163fc:	18801526 	beq	r3,r2,16454 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   16400:	e0bffb17 	ldw	r2,-20(fp)
   16404:	10800037 	ldwio	r2,0(r2)
   16408:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1640c:	e0bff817 	ldw	r2,-32(fp)
   16410:	10a0000c 	andi	r2,r2,32768
   16414:	10001126 	beq	r2,zero,1645c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16418:	e0bffa17 	ldw	r2,-24(fp)
   1641c:	10800a17 	ldw	r2,40(r2)
   16420:	e0fff817 	ldw	r3,-32(fp)
   16424:	1809883a 	mov	r4,r3
   16428:	e0fffa17 	ldw	r3,-24(fp)
   1642c:	1885883a 	add	r2,r3,r2
   16430:	10800e04 	addi	r2,r2,56
   16434:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16438:	e0bffa17 	ldw	r2,-24(fp)
   1643c:	10800a17 	ldw	r2,40(r2)
   16440:	10800044 	addi	r2,r2,1
   16444:	10c1ffcc 	andi	r3,r2,2047
   16448:	e0bffa17 	ldw	r2,-24(fp)
   1644c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   16450:	003fe206 	br	163dc <_gp+0xffff493c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16454:	0001883a 	nop
   16458:	00000106 	br	16460 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1645c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   16460:	e0bff817 	ldw	r2,-32(fp)
   16464:	10bfffec 	andhi	r2,r2,65535
   16468:	10000f26 	beq	r2,zero,164a8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1646c:	e0bffa17 	ldw	r2,-24(fp)
   16470:	10c00817 	ldw	r3,32(r2)
   16474:	00bfff84 	movi	r2,-2
   16478:	1886703a 	and	r3,r3,r2
   1647c:	e0bffa17 	ldw	r2,-24(fp)
   16480:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16484:	e0bffb17 	ldw	r2,-20(fp)
   16488:	10800104 	addi	r2,r2,4
   1648c:	1007883a 	mov	r3,r2
   16490:	e0bffa17 	ldw	r2,-24(fp)
   16494:	10800817 	ldw	r2,32(r2)
   16498:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1649c:	e0bffb17 	ldw	r2,-20(fp)
   164a0:	10800104 	addi	r2,r2,4
   164a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   164a8:	e0bffc17 	ldw	r2,-16(fp)
   164ac:	1080800c 	andi	r2,r2,512
   164b0:	103fbe26 	beq	r2,zero,163ac <_gp+0xffff490c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   164b4:	e0bffc17 	ldw	r2,-16(fp)
   164b8:	1004d43a 	srli	r2,r2,16
   164bc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   164c0:	00001406 	br	16514 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   164c4:	e0bffb17 	ldw	r2,-20(fp)
   164c8:	e0fffa17 	ldw	r3,-24(fp)
   164cc:	18c00d17 	ldw	r3,52(r3)
   164d0:	e13ffa17 	ldw	r4,-24(fp)
   164d4:	20c7883a 	add	r3,r4,r3
   164d8:	18c20e04 	addi	r3,r3,2104
   164dc:	18c00003 	ldbu	r3,0(r3)
   164e0:	18c03fcc 	andi	r3,r3,255
   164e4:	18c0201c 	xori	r3,r3,128
   164e8:	18ffe004 	addi	r3,r3,-128
   164ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   164f0:	e0bffa17 	ldw	r2,-24(fp)
   164f4:	10800d17 	ldw	r2,52(r2)
   164f8:	10800044 	addi	r2,r2,1
   164fc:	10c1ffcc 	andi	r3,r2,2047
   16500:	e0bffa17 	ldw	r2,-24(fp)
   16504:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   16508:	e0bff917 	ldw	r2,-28(fp)
   1650c:	10bfffc4 	addi	r2,r2,-1
   16510:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16514:	e0bff917 	ldw	r2,-28(fp)
   16518:	10000526 	beq	r2,zero,16530 <altera_avalon_jtag_uart_irq+0x1ac>
   1651c:	e0bffa17 	ldw	r2,-24(fp)
   16520:	10c00d17 	ldw	r3,52(r2)
   16524:	e0bffa17 	ldw	r2,-24(fp)
   16528:	10800c17 	ldw	r2,48(r2)
   1652c:	18bfe51e 	bne	r3,r2,164c4 <_gp+0xffff4a24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16530:	e0bff917 	ldw	r2,-28(fp)
   16534:	103f9d26 	beq	r2,zero,163ac <_gp+0xffff490c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16538:	e0bffa17 	ldw	r2,-24(fp)
   1653c:	10c00817 	ldw	r3,32(r2)
   16540:	00bfff44 	movi	r2,-3
   16544:	1886703a 	and	r3,r3,r2
   16548:	e0bffa17 	ldw	r2,-24(fp)
   1654c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16550:	e0bffa17 	ldw	r2,-24(fp)
   16554:	10800017 	ldw	r2,0(r2)
   16558:	10800104 	addi	r2,r2,4
   1655c:	1007883a 	mov	r3,r2
   16560:	e0bffa17 	ldw	r2,-24(fp)
   16564:	10800817 	ldw	r2,32(r2)
   16568:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1656c:	e0bffb17 	ldw	r2,-20(fp)
   16570:	10800104 	addi	r2,r2,4
   16574:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16578:	003f8c06 	br	163ac <_gp+0xffff490c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1657c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   16580:	0001883a 	nop
   16584:	e037883a 	mov	sp,fp
   16588:	df000017 	ldw	fp,0(sp)
   1658c:	dec00104 	addi	sp,sp,4
   16590:	f800283a 	ret

00016594 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16594:	defff804 	addi	sp,sp,-32
   16598:	df000715 	stw	fp,28(sp)
   1659c:	df000704 	addi	fp,sp,28
   165a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   165a4:	e0bffb17 	ldw	r2,-20(fp)
   165a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   165ac:	e0bff917 	ldw	r2,-28(fp)
   165b0:	10800017 	ldw	r2,0(r2)
   165b4:	10800104 	addi	r2,r2,4
   165b8:	10800037 	ldwio	r2,0(r2)
   165bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   165c0:	e0bffa17 	ldw	r2,-24(fp)
   165c4:	1081000c 	andi	r2,r2,1024
   165c8:	10000b26 	beq	r2,zero,165f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   165cc:	e0bff917 	ldw	r2,-28(fp)
   165d0:	10800017 	ldw	r2,0(r2)
   165d4:	10800104 	addi	r2,r2,4
   165d8:	1007883a 	mov	r3,r2
   165dc:	e0bff917 	ldw	r2,-28(fp)
   165e0:	10800817 	ldw	r2,32(r2)
   165e4:	10810014 	ori	r2,r2,1024
   165e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   165ec:	e0bff917 	ldw	r2,-28(fp)
   165f0:	10000915 	stw	zero,36(r2)
   165f4:	00000a06 	br	16620 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   165f8:	e0bff917 	ldw	r2,-28(fp)
   165fc:	10c00917 	ldw	r3,36(r2)
   16600:	00a00034 	movhi	r2,32768
   16604:	10bfff04 	addi	r2,r2,-4
   16608:	10c00536 	bltu	r2,r3,16620 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1660c:	e0bff917 	ldw	r2,-28(fp)
   16610:	10800917 	ldw	r2,36(r2)
   16614:	10c00044 	addi	r3,r2,1
   16618:	e0bff917 	ldw	r2,-28(fp)
   1661c:	10c00915 	stw	r3,36(r2)
   16620:	d0a5b717 	ldw	r2,-26916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   16624:	e037883a 	mov	sp,fp
   16628:	df000017 	ldw	fp,0(sp)
   1662c:	dec00104 	addi	sp,sp,4
   16630:	f800283a 	ret

00016634 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16634:	defffd04 	addi	sp,sp,-12
   16638:	df000215 	stw	fp,8(sp)
   1663c:	df000204 	addi	fp,sp,8
   16640:	e13ffe15 	stw	r4,-8(fp)
   16644:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16648:	00000506 	br	16660 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1664c:	e0bfff17 	ldw	r2,-4(fp)
   16650:	1090000c 	andi	r2,r2,16384
   16654:	10000226 	beq	r2,zero,16660 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16658:	00bffd44 	movi	r2,-11
   1665c:	00000b06 	br	1668c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16660:	e0bffe17 	ldw	r2,-8(fp)
   16664:	10c00d17 	ldw	r3,52(r2)
   16668:	e0bffe17 	ldw	r2,-8(fp)
   1666c:	10800c17 	ldw	r2,48(r2)
   16670:	18800526 	beq	r3,r2,16688 <altera_avalon_jtag_uart_close+0x54>
   16674:	e0bffe17 	ldw	r2,-8(fp)
   16678:	10c00917 	ldw	r3,36(r2)
   1667c:	e0bffe17 	ldw	r2,-8(fp)
   16680:	10800117 	ldw	r2,4(r2)
   16684:	18bff136 	bltu	r3,r2,1664c <_gp+0xffff4bac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16688:	0005883a 	mov	r2,zero
}
   1668c:	e037883a 	mov	sp,fp
   16690:	df000017 	ldw	fp,0(sp)
   16694:	dec00104 	addi	sp,sp,4
   16698:	f800283a 	ret

0001669c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1669c:	defffa04 	addi	sp,sp,-24
   166a0:	df000515 	stw	fp,20(sp)
   166a4:	df000504 	addi	fp,sp,20
   166a8:	e13ffd15 	stw	r4,-12(fp)
   166ac:	e17ffe15 	stw	r5,-8(fp)
   166b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   166b4:	00bff9c4 	movi	r2,-25
   166b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   166bc:	e0bffe17 	ldw	r2,-8(fp)
   166c0:	10da8060 	cmpeqi	r3,r2,27137
   166c4:	1800031e 	bne	r3,zero,166d4 <altera_avalon_jtag_uart_ioctl+0x38>
   166c8:	109a80a0 	cmpeqi	r2,r2,27138
   166cc:	1000181e 	bne	r2,zero,16730 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   166d0:	00002906 	br	16778 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   166d4:	e0bffd17 	ldw	r2,-12(fp)
   166d8:	10c00117 	ldw	r3,4(r2)
   166dc:	00a00034 	movhi	r2,32768
   166e0:	10bfffc4 	addi	r2,r2,-1
   166e4:	18802126 	beq	r3,r2,1676c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   166e8:	e0bfff17 	ldw	r2,-4(fp)
   166ec:	10800017 	ldw	r2,0(r2)
   166f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   166f4:	e0bffc17 	ldw	r2,-16(fp)
   166f8:	10800090 	cmplti	r2,r2,2
   166fc:	1000061e 	bne	r2,zero,16718 <altera_avalon_jtag_uart_ioctl+0x7c>
   16700:	e0fffc17 	ldw	r3,-16(fp)
   16704:	00a00034 	movhi	r2,32768
   16708:	10bfffc4 	addi	r2,r2,-1
   1670c:	18800226 	beq	r3,r2,16718 <altera_avalon_jtag_uart_ioctl+0x7c>
   16710:	e0bffc17 	ldw	r2,-16(fp)
   16714:	00000206 	br	16720 <altera_avalon_jtag_uart_ioctl+0x84>
   16718:	00a00034 	movhi	r2,32768
   1671c:	10bfff84 	addi	r2,r2,-2
   16720:	e0fffd17 	ldw	r3,-12(fp)
   16724:	18800115 	stw	r2,4(r3)
      rc = 0;
   16728:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1672c:	00000f06 	br	1676c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16730:	e0bffd17 	ldw	r2,-12(fp)
   16734:	10c00117 	ldw	r3,4(r2)
   16738:	00a00034 	movhi	r2,32768
   1673c:	10bfffc4 	addi	r2,r2,-1
   16740:	18800c26 	beq	r3,r2,16774 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16744:	e0bffd17 	ldw	r2,-12(fp)
   16748:	10c00917 	ldw	r3,36(r2)
   1674c:	e0bffd17 	ldw	r2,-12(fp)
   16750:	10800117 	ldw	r2,4(r2)
   16754:	1885803a 	cmpltu	r2,r3,r2
   16758:	10c03fcc 	andi	r3,r2,255
   1675c:	e0bfff17 	ldw	r2,-4(fp)
   16760:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16764:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16768:	00000206 	br	16774 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1676c:	0001883a 	nop
   16770:	00000106 	br	16778 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16774:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16778:	e0bffb17 	ldw	r2,-20(fp)
}
   1677c:	e037883a 	mov	sp,fp
   16780:	df000017 	ldw	fp,0(sp)
   16784:	dec00104 	addi	sp,sp,4
   16788:	f800283a 	ret

0001678c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1678c:	defff304 	addi	sp,sp,-52
   16790:	dfc00c15 	stw	ra,48(sp)
   16794:	df000b15 	stw	fp,44(sp)
   16798:	df000b04 	addi	fp,sp,44
   1679c:	e13ffc15 	stw	r4,-16(fp)
   167a0:	e17ffd15 	stw	r5,-12(fp)
   167a4:	e1bffe15 	stw	r6,-8(fp)
   167a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   167ac:	e0bffd17 	ldw	r2,-12(fp)
   167b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   167b4:	00004706 	br	168d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   167b8:	e0bffc17 	ldw	r2,-16(fp)
   167bc:	10800a17 	ldw	r2,40(r2)
   167c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   167c4:	e0bffc17 	ldw	r2,-16(fp)
   167c8:	10800b17 	ldw	r2,44(r2)
   167cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   167d0:	e0fff717 	ldw	r3,-36(fp)
   167d4:	e0bff817 	ldw	r2,-32(fp)
   167d8:	18800536 	bltu	r3,r2,167f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   167dc:	e0fff717 	ldw	r3,-36(fp)
   167e0:	e0bff817 	ldw	r2,-32(fp)
   167e4:	1885c83a 	sub	r2,r3,r2
   167e8:	e0bff615 	stw	r2,-40(fp)
   167ec:	00000406 	br	16800 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   167f0:	00c20004 	movi	r3,2048
   167f4:	e0bff817 	ldw	r2,-32(fp)
   167f8:	1885c83a 	sub	r2,r3,r2
   167fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16800:	e0bff617 	ldw	r2,-40(fp)
   16804:	10001e26 	beq	r2,zero,16880 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   16808:	e0fffe17 	ldw	r3,-8(fp)
   1680c:	e0bff617 	ldw	r2,-40(fp)
   16810:	1880022e 	bgeu	r3,r2,1681c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   16814:	e0bffe17 	ldw	r2,-8(fp)
   16818:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1681c:	e0bffc17 	ldw	r2,-16(fp)
   16820:	10c00e04 	addi	r3,r2,56
   16824:	e0bff817 	ldw	r2,-32(fp)
   16828:	1885883a 	add	r2,r3,r2
   1682c:	e1bff617 	ldw	r6,-40(fp)
   16830:	100b883a 	mov	r5,r2
   16834:	e13ff517 	ldw	r4,-44(fp)
   16838:	0015c600 	call	15c60 <memcpy>
      ptr   += n;
   1683c:	e0fff517 	ldw	r3,-44(fp)
   16840:	e0bff617 	ldw	r2,-40(fp)
   16844:	1885883a 	add	r2,r3,r2
   16848:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1684c:	e0fffe17 	ldw	r3,-8(fp)
   16850:	e0bff617 	ldw	r2,-40(fp)
   16854:	1885c83a 	sub	r2,r3,r2
   16858:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1685c:	e0fff817 	ldw	r3,-32(fp)
   16860:	e0bff617 	ldw	r2,-40(fp)
   16864:	1885883a 	add	r2,r3,r2
   16868:	10c1ffcc 	andi	r3,r2,2047
   1686c:	e0bffc17 	ldw	r2,-16(fp)
   16870:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   16874:	e0bffe17 	ldw	r2,-8(fp)
   16878:	00bfcf16 	blt	zero,r2,167b8 <_gp+0xffff4d18>
   1687c:	00000106 	br	16884 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16880:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16884:	e0fff517 	ldw	r3,-44(fp)
   16888:	e0bffd17 	ldw	r2,-12(fp)
   1688c:	1880141e 	bne	r3,r2,168e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16890:	e0bfff17 	ldw	r2,-4(fp)
   16894:	1090000c 	andi	r2,r2,16384
   16898:	1000131e 	bne	r2,zero,168e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1689c:	0001883a 	nop
   168a0:	e0bffc17 	ldw	r2,-16(fp)
   168a4:	10c00a17 	ldw	r3,40(r2)
   168a8:	e0bff717 	ldw	r2,-36(fp)
   168ac:	1880051e 	bne	r3,r2,168c4 <altera_avalon_jtag_uart_read+0x138>
   168b0:	e0bffc17 	ldw	r2,-16(fp)
   168b4:	10c00917 	ldw	r3,36(r2)
   168b8:	e0bffc17 	ldw	r2,-16(fp)
   168bc:	10800117 	ldw	r2,4(r2)
   168c0:	18bff736 	bltu	r3,r2,168a0 <_gp+0xffff4e00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   168c4:	e0bffc17 	ldw	r2,-16(fp)
   168c8:	10c00a17 	ldw	r3,40(r2)
   168cc:	e0bff717 	ldw	r2,-36(fp)
   168d0:	18800726 	beq	r3,r2,168f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   168d4:	e0bffe17 	ldw	r2,-8(fp)
   168d8:	00bfb716 	blt	zero,r2,167b8 <_gp+0xffff4d18>
   168dc:	00000506 	br	168f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   168e0:	0001883a 	nop
   168e4:	00000306 	br	168f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   168e8:	0001883a 	nop
   168ec:	00000106 	br	168f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   168f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   168f4:	e0fff517 	ldw	r3,-44(fp)
   168f8:	e0bffd17 	ldw	r2,-12(fp)
   168fc:	18801826 	beq	r3,r2,16960 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16900:	0005303a 	rdctl	r2,status
   16904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16908:	e0fffb17 	ldw	r3,-20(fp)
   1690c:	00bfff84 	movi	r2,-2
   16910:	1884703a 	and	r2,r3,r2
   16914:	1001703a 	wrctl	status,r2
  
  return context;
   16918:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1691c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16920:	e0bffc17 	ldw	r2,-16(fp)
   16924:	10800817 	ldw	r2,32(r2)
   16928:	10c00054 	ori	r3,r2,1
   1692c:	e0bffc17 	ldw	r2,-16(fp)
   16930:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16934:	e0bffc17 	ldw	r2,-16(fp)
   16938:	10800017 	ldw	r2,0(r2)
   1693c:	10800104 	addi	r2,r2,4
   16940:	1007883a 	mov	r3,r2
   16944:	e0bffc17 	ldw	r2,-16(fp)
   16948:	10800817 	ldw	r2,32(r2)
   1694c:	18800035 	stwio	r2,0(r3)
   16950:	e0bffa17 	ldw	r2,-24(fp)
   16954:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16958:	e0bff917 	ldw	r2,-28(fp)
   1695c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16960:	e0fff517 	ldw	r3,-44(fp)
   16964:	e0bffd17 	ldw	r2,-12(fp)
   16968:	18800426 	beq	r3,r2,1697c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1696c:	e0fff517 	ldw	r3,-44(fp)
   16970:	e0bffd17 	ldw	r2,-12(fp)
   16974:	1885c83a 	sub	r2,r3,r2
   16978:	00000606 	br	16994 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1697c:	e0bfff17 	ldw	r2,-4(fp)
   16980:	1090000c 	andi	r2,r2,16384
   16984:	10000226 	beq	r2,zero,16990 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   16988:	00bffd44 	movi	r2,-11
   1698c:	00000106 	br	16994 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   16990:	00bffec4 	movi	r2,-5
}
   16994:	e037883a 	mov	sp,fp
   16998:	dfc00117 	ldw	ra,4(sp)
   1699c:	df000017 	ldw	fp,0(sp)
   169a0:	dec00204 	addi	sp,sp,8
   169a4:	f800283a 	ret

000169a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   169a8:	defff304 	addi	sp,sp,-52
   169ac:	dfc00c15 	stw	ra,48(sp)
   169b0:	df000b15 	stw	fp,44(sp)
   169b4:	df000b04 	addi	fp,sp,44
   169b8:	e13ffc15 	stw	r4,-16(fp)
   169bc:	e17ffd15 	stw	r5,-12(fp)
   169c0:	e1bffe15 	stw	r6,-8(fp)
   169c4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   169c8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   169cc:	e0bffd17 	ldw	r2,-12(fp)
   169d0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   169d4:	00003706 	br	16ab4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   169d8:	e0bffc17 	ldw	r2,-16(fp)
   169dc:	10800c17 	ldw	r2,48(r2)
   169e0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10800d17 	ldw	r2,52(r2)
   169ec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   169f0:	e0fff917 	ldw	r3,-28(fp)
   169f4:	e0bff517 	ldw	r2,-44(fp)
   169f8:	1880062e 	bgeu	r3,r2,16a14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   169fc:	e0fff517 	ldw	r3,-44(fp)
   16a00:	e0bff917 	ldw	r2,-28(fp)
   16a04:	1885c83a 	sub	r2,r3,r2
   16a08:	10bfffc4 	addi	r2,r2,-1
   16a0c:	e0bff615 	stw	r2,-40(fp)
   16a10:	00000b06 	br	16a40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   16a14:	e0bff517 	ldw	r2,-44(fp)
   16a18:	10000526 	beq	r2,zero,16a30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16a1c:	00c20004 	movi	r3,2048
   16a20:	e0bff917 	ldw	r2,-28(fp)
   16a24:	1885c83a 	sub	r2,r3,r2
   16a28:	e0bff615 	stw	r2,-40(fp)
   16a2c:	00000406 	br	16a40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16a30:	00c1ffc4 	movi	r3,2047
   16a34:	e0bff917 	ldw	r2,-28(fp)
   16a38:	1885c83a 	sub	r2,r3,r2
   16a3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   16a40:	e0bff617 	ldw	r2,-40(fp)
   16a44:	10001e26 	beq	r2,zero,16ac0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   16a48:	e0fffe17 	ldw	r3,-8(fp)
   16a4c:	e0bff617 	ldw	r2,-40(fp)
   16a50:	1880022e 	bgeu	r3,r2,16a5c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   16a54:	e0bffe17 	ldw	r2,-8(fp)
   16a58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16a5c:	e0bffc17 	ldw	r2,-16(fp)
   16a60:	10c20e04 	addi	r3,r2,2104
   16a64:	e0bff917 	ldw	r2,-28(fp)
   16a68:	1885883a 	add	r2,r3,r2
   16a6c:	e1bff617 	ldw	r6,-40(fp)
   16a70:	e17ffd17 	ldw	r5,-12(fp)
   16a74:	1009883a 	mov	r4,r2
   16a78:	0015c600 	call	15c60 <memcpy>
      ptr   += n;
   16a7c:	e0fffd17 	ldw	r3,-12(fp)
   16a80:	e0bff617 	ldw	r2,-40(fp)
   16a84:	1885883a 	add	r2,r3,r2
   16a88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16a8c:	e0fffe17 	ldw	r3,-8(fp)
   16a90:	e0bff617 	ldw	r2,-40(fp)
   16a94:	1885c83a 	sub	r2,r3,r2
   16a98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16a9c:	e0fff917 	ldw	r3,-28(fp)
   16aa0:	e0bff617 	ldw	r2,-40(fp)
   16aa4:	1885883a 	add	r2,r3,r2
   16aa8:	10c1ffcc 	andi	r3,r2,2047
   16aac:	e0bffc17 	ldw	r2,-16(fp)
   16ab0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16ab4:	e0bffe17 	ldw	r2,-8(fp)
   16ab8:	00bfc716 	blt	zero,r2,169d8 <_gp+0xffff4f38>
   16abc:	00000106 	br	16ac4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16ac0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ac4:	0005303a 	rdctl	r2,status
   16ac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16acc:	e0fffb17 	ldw	r3,-20(fp)
   16ad0:	00bfff84 	movi	r2,-2
   16ad4:	1884703a 	and	r2,r3,r2
   16ad8:	1001703a 	wrctl	status,r2
  
  return context;
   16adc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16ae0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16ae4:	e0bffc17 	ldw	r2,-16(fp)
   16ae8:	10800817 	ldw	r2,32(r2)
   16aec:	10c00094 	ori	r3,r2,2
   16af0:	e0bffc17 	ldw	r2,-16(fp)
   16af4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16af8:	e0bffc17 	ldw	r2,-16(fp)
   16afc:	10800017 	ldw	r2,0(r2)
   16b00:	10800104 	addi	r2,r2,4
   16b04:	1007883a 	mov	r3,r2
   16b08:	e0bffc17 	ldw	r2,-16(fp)
   16b0c:	10800817 	ldw	r2,32(r2)
   16b10:	18800035 	stwio	r2,0(r3)
   16b14:	e0bffa17 	ldw	r2,-24(fp)
   16b18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b1c:	e0bff817 	ldw	r2,-32(fp)
   16b20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16b24:	e0bffe17 	ldw	r2,-8(fp)
   16b28:	0080100e 	bge	zero,r2,16b6c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   16b2c:	e0bfff17 	ldw	r2,-4(fp)
   16b30:	1090000c 	andi	r2,r2,16384
   16b34:	1000101e 	bne	r2,zero,16b78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16b38:	0001883a 	nop
   16b3c:	e0bffc17 	ldw	r2,-16(fp)
   16b40:	10c00d17 	ldw	r3,52(r2)
   16b44:	e0bff517 	ldw	r2,-44(fp)
   16b48:	1880051e 	bne	r3,r2,16b60 <altera_avalon_jtag_uart_write+0x1b8>
   16b4c:	e0bffc17 	ldw	r2,-16(fp)
   16b50:	10c00917 	ldw	r3,36(r2)
   16b54:	e0bffc17 	ldw	r2,-16(fp)
   16b58:	10800117 	ldw	r2,4(r2)
   16b5c:	18bff736 	bltu	r3,r2,16b3c <_gp+0xffff509c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16b60:	e0bffc17 	ldw	r2,-16(fp)
   16b64:	10800917 	ldw	r2,36(r2)
   16b68:	1000051e 	bne	r2,zero,16b80 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   16b6c:	e0bffe17 	ldw	r2,-8(fp)
   16b70:	00bfd016 	blt	zero,r2,16ab4 <_gp+0xffff5014>
   16b74:	00000306 	br	16b84 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16b78:	0001883a 	nop
   16b7c:	00000106 	br	16b84 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16b80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   16b84:	e0fffd17 	ldw	r3,-12(fp)
   16b88:	e0bff717 	ldw	r2,-36(fp)
   16b8c:	18800426 	beq	r3,r2,16ba0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   16b90:	e0fffd17 	ldw	r3,-12(fp)
   16b94:	e0bff717 	ldw	r2,-36(fp)
   16b98:	1885c83a 	sub	r2,r3,r2
   16b9c:	00000606 	br	16bb8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   16ba0:	e0bfff17 	ldw	r2,-4(fp)
   16ba4:	1090000c 	andi	r2,r2,16384
   16ba8:	10000226 	beq	r2,zero,16bb4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   16bac:	00bffd44 	movi	r2,-11
   16bb0:	00000106 	br	16bb8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16bb4:	00bffec4 	movi	r2,-5
}
   16bb8:	e037883a 	mov	sp,fp
   16bbc:	dfc00117 	ldw	ra,4(sp)
   16bc0:	df000017 	ldw	fp,0(sp)
   16bc4:	dec00204 	addi	sp,sp,8
   16bc8:	f800283a 	ret

00016bcc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16bcc:	defff904 	addi	sp,sp,-28
   16bd0:	dfc00615 	stw	ra,24(sp)
   16bd4:	df000515 	stw	fp,20(sp)
   16bd8:	df000504 	addi	fp,sp,20
   16bdc:	e13ffe15 	stw	r4,-8(fp)
   16be0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16be4:	0007883a 	mov	r3,zero
   16be8:	e0bffe17 	ldw	r2,-8(fp)
   16bec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16bf0:	e0bffe17 	ldw	r2,-8(fp)
   16bf4:	10800104 	addi	r2,r2,4
   16bf8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16bfc:	0005303a 	rdctl	r2,status
   16c00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c04:	e0fffc17 	ldw	r3,-16(fp)
   16c08:	00bfff84 	movi	r2,-2
   16c0c:	1884703a 	and	r2,r3,r2
   16c10:	1001703a 	wrctl	status,r2
  
  return context;
   16c14:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16c18:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   16c1c:	0017a4c0 	call	17a4c <alt_tick>
   16c20:	e0bffb17 	ldw	r2,-20(fp)
   16c24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c28:	e0bffd17 	ldw	r2,-12(fp)
   16c2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16c30:	0001883a 	nop
   16c34:	e037883a 	mov	sp,fp
   16c38:	dfc00117 	ldw	ra,4(sp)
   16c3c:	df000017 	ldw	fp,0(sp)
   16c40:	dec00204 	addi	sp,sp,8
   16c44:	f800283a 	ret

00016c48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16c48:	defff904 	addi	sp,sp,-28
   16c4c:	dfc00615 	stw	ra,24(sp)
   16c50:	df000515 	stw	fp,20(sp)
   16c54:	df000504 	addi	fp,sp,20
   16c58:	e13ffc15 	stw	r4,-16(fp)
   16c5c:	e17ffd15 	stw	r5,-12(fp)
   16c60:	e1bffe15 	stw	r6,-8(fp)
   16c64:	e1ffff15 	stw	r7,-4(fp)
   16c68:	e0bfff17 	ldw	r2,-4(fp)
   16c6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16c70:	d0a5b717 	ldw	r2,-26916(gp)
   16c74:	1000021e 	bne	r2,zero,16c80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16c78:	e0bffb17 	ldw	r2,-20(fp)
   16c7c:	d0a5b715 	stw	r2,-26916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16c80:	e0bffc17 	ldw	r2,-16(fp)
   16c84:	10800104 	addi	r2,r2,4
   16c88:	00c001c4 	movi	r3,7
   16c8c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   16c90:	01800074 	movhi	r6,1
   16c94:	319af304 	addi	r6,r6,27596
   16c98:	e17ffc17 	ldw	r5,-16(fp)
   16c9c:	e13ffe17 	ldw	r4,-8(fp)
   16ca0:	0015da80 	call	15da8 <alt_irq_register>
#endif  
}
   16ca4:	0001883a 	nop
   16ca8:	e037883a 	mov	sp,fp
   16cac:	dfc00117 	ldw	ra,4(sp)
   16cb0:	df000017 	ldw	fp,0(sp)
   16cb4:	dec00204 	addi	sp,sp,8
   16cb8:	f800283a 	ret

00016cbc <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
   16cbc:	defffc04 	addi	sp,sp,-16
   16cc0:	dfc00315 	stw	ra,12(sp)
   16cc4:	df000215 	stw	fp,8(sp)
   16cc8:	df000204 	addi	fp,sp,8
   16ccc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   16cd0:	d1600704 	addi	r5,gp,-32740
   16cd4:	e13fff17 	ldw	r4,-4(fp)
   16cd8:	00174980 	call	17498 <alt_find_dev>
   16cdc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   16ce0:	e0bffe17 	ldw	r2,-8(fp)
}
   16ce4:	e037883a 	mov	sp,fp
   16ce8:	dfc00117 	ldw	ra,4(sp)
   16cec:	df000017 	ldw	fp,0(sp)
   16cf0:	dec00204 	addi	sp,sp,8
   16cf4:	f800283a 	ret

00016cf8 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
   16cf8:	defffd04 	addi	sp,sp,-12
   16cfc:	df000215 	stw	fp,8(sp)
   16d00:	df000204 	addi	fp,sp,8
   16d04:	e13ffe15 	stw	r4,-8(fp)
   16d08:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   16d0c:	e0bffe17 	ldw	r2,-8(fp)
   16d10:	10800a17 	ldw	r2,40(r2)
   16d14:	10800023 	ldbuio	r2,0(r2)
   16d18:	10803fcc 	andi	r2,r2,255
   16d1c:	1007883a 	mov	r3,r2
   16d20:	e0bfff17 	ldw	r2,-4(fp)
   16d24:	10c00005 	stb	r3,0(r2)

	return 0;
   16d28:	0005883a 	mov	r2,zero
}
   16d2c:	e037883a 	mov	sp,fp
   16d30:	df000017 	ldw	fp,0(sp)
   16d34:	dec00104 	addi	sp,sp,4
   16d38:	f800283a 	ret

00016d3c <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
   16d3c:	defffc04 	addi	sp,sp,-16
   16d40:	df000315 	stw	fp,12(sp)
   16d44:	df000304 	addi	fp,sp,12
   16d48:	e13ffd15 	stw	r4,-12(fp)
   16d4c:	2805883a 	mov	r2,r5
   16d50:	e1bfff15 	stw	r6,-4(fp)
   16d54:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16d58:	e0bffd17 	ldw	r2,-12(fp)
   16d5c:	10800a17 	ldw	r2,40(r2)
   16d60:	1007883a 	mov	r3,r2
   16d64:	e0bffe03 	ldbu	r2,-8(fp)
   16d68:	10800fcc 	andi	r2,r2,63
   16d6c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16d70:	e0bffd17 	ldw	r2,-12(fp)
   16d74:	10800a17 	ldw	r2,40(r2)
   16d78:	10800044 	addi	r2,r2,1
   16d7c:	10800023 	ldbuio	r2,0(r2)
   16d80:	10803fcc 	andi	r2,r2,255
   16d84:	1007883a 	mov	r3,r2
   16d88:	e0bfff17 	ldw	r2,-4(fp)
   16d8c:	10c00005 	stb	r3,0(r2)

	return 0;
   16d90:	0005883a 	mov	r2,zero
}
   16d94:	e037883a 	mov	sp,fp
   16d98:	df000017 	ldw	fp,0(sp)
   16d9c:	dec00104 	addi	sp,sp,4
   16da0:	f800283a 	ret

00016da4 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
   16da4:	defffc04 	addi	sp,sp,-16
   16da8:	df000315 	stw	fp,12(sp)
   16dac:	df000304 	addi	fp,sp,12
   16db0:	e13ffd15 	stw	r4,-12(fp)
   16db4:	2807883a 	mov	r3,r5
   16db8:	3005883a 	mov	r2,r6
   16dbc:	e0fffe05 	stb	r3,-8(fp)
   16dc0:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16dc4:	e0bffd17 	ldw	r2,-12(fp)
   16dc8:	10800a17 	ldw	r2,40(r2)
   16dcc:	1007883a 	mov	r3,r2
   16dd0:	e0bffe03 	ldbu	r2,-8(fp)
   16dd4:	10800fcc 	andi	r2,r2,63
   16dd8:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   16ddc:	e0bffd17 	ldw	r2,-12(fp)
   16de0:	10800a17 	ldw	r2,40(r2)
   16de4:	10800044 	addi	r2,r2,1
   16de8:	1007883a 	mov	r3,r2
   16dec:	e0bfff03 	ldbu	r2,-4(fp)
   16df0:	18800025 	stbio	r2,0(r3)

	return 0;
   16df4:	0005883a 	mov	r2,zero
}
   16df8:	e037883a 	mov	sp,fp
   16dfc:	df000017 	ldw	fp,0(sp)
   16e00:	dec00104 	addi	sp,sp,4
   16e04:	f800283a 	ret

00016e08 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
   16e08:	defffd04 	addi	sp,sp,-12
   16e0c:	df000215 	stw	fp,8(sp)
   16e10:	df000204 	addi	fp,sp,8
   16e14:	e13ffe15 	stw	r4,-8(fp)
   16e18:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e1c:	e0bffe17 	ldw	r2,-8(fp)
   16e20:	10800a17 	ldw	r2,40(r2)
   16e24:	1007883a 	mov	r3,r2
   16e28:	00800c84 	movi	r2,50
   16e2c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16e30:	e0bffe17 	ldw	r2,-8(fp)
   16e34:	10800a17 	ldw	r2,40(r2)
   16e38:	10800044 	addi	r2,r2,1
   16e3c:	10800023 	ldbuio	r2,0(r2)
   16e40:	10803fcc 	andi	r2,r2,255
   16e44:	10ffffcc 	andi	r3,r2,65535
   16e48:	e0bfff17 	ldw	r2,-4(fp)
   16e4c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16e50:	e0bffe17 	ldw	r2,-8(fp)
   16e54:	10800a17 	ldw	r2,40(r2)
   16e58:	1007883a 	mov	r3,r2
   16e5c:	00800cc4 	movi	r2,51
   16e60:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16e64:	e0bffe17 	ldw	r2,-8(fp)
   16e68:	10800a17 	ldw	r2,40(r2)
   16e6c:	10800044 	addi	r2,r2,1
   16e70:	10800023 	ldbuio	r2,0(r2)
   16e74:	10803fcc 	andi	r2,r2,255
   16e78:	10bfffcc 	andi	r2,r2,65535
   16e7c:	1004923a 	slli	r2,r2,8
   16e80:	e0ffff17 	ldw	r3,-4(fp)
   16e84:	18c00017 	ldw	r3,0(r3)
   16e88:	1885883a 	add	r2,r3,r2
   16e8c:	1007883a 	mov	r3,r2
   16e90:	e0bfff17 	ldw	r2,-4(fp)
   16e94:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
   16e98:	e0bfff17 	ldw	r2,-4(fp)
   16e9c:	10800017 	ldw	r2,0(r2)
   16ea0:	10a0000c 	andi	r2,r2,32768
   16ea4:	10000626 	beq	r2,zero,16ec0 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
   16ea8:	e0bfff17 	ldw	r2,-4(fp)
   16eac:	10800017 	ldw	r2,0(r2)
   16eb0:	10bffff4 	orhi	r2,r2,65535
   16eb4:	1007883a 	mov	r3,r2
   16eb8:	e0bfff17 	ldw	r2,-4(fp)
   16ebc:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   16ec0:	0005883a 	mov	r2,zero
}
   16ec4:	e037883a 	mov	sp,fp
   16ec8:	df000017 	ldw	fp,0(sp)
   16ecc:	dec00104 	addi	sp,sp,4
   16ed0:	f800283a 	ret

00016ed4 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
   16ed4:	defffd04 	addi	sp,sp,-12
   16ed8:	df000215 	stw	fp,8(sp)
   16edc:	df000204 	addi	fp,sp,8
   16ee0:	e13ffe15 	stw	r4,-8(fp)
   16ee4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16ee8:	e0bffe17 	ldw	r2,-8(fp)
   16eec:	10800a17 	ldw	r2,40(r2)
   16ef0:	1007883a 	mov	r3,r2
   16ef4:	00800d04 	movi	r2,52
   16ef8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16efc:	e0bffe17 	ldw	r2,-8(fp)
   16f00:	10800a17 	ldw	r2,40(r2)
   16f04:	10800044 	addi	r2,r2,1
   16f08:	10800023 	ldbuio	r2,0(r2)
   16f0c:	10803fcc 	andi	r2,r2,255
   16f10:	10ffffcc 	andi	r3,r2,65535
   16f14:	e0bfff17 	ldw	r2,-4(fp)
   16f18:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16f1c:	e0bffe17 	ldw	r2,-8(fp)
   16f20:	10800a17 	ldw	r2,40(r2)
   16f24:	1007883a 	mov	r3,r2
   16f28:	00800d44 	movi	r2,53
   16f2c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16f30:	e0bffe17 	ldw	r2,-8(fp)
   16f34:	10800a17 	ldw	r2,40(r2)
   16f38:	10800044 	addi	r2,r2,1
   16f3c:	10800023 	ldbuio	r2,0(r2)
   16f40:	10803fcc 	andi	r2,r2,255
   16f44:	10bfffcc 	andi	r2,r2,65535
   16f48:	1004923a 	slli	r2,r2,8
   16f4c:	e0ffff17 	ldw	r3,-4(fp)
   16f50:	18c00017 	ldw	r3,0(r3)
   16f54:	1885883a 	add	r2,r3,r2
   16f58:	1007883a 	mov	r3,r2
   16f5c:	e0bfff17 	ldw	r2,-4(fp)
   16f60:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
   16f64:	e0bfff17 	ldw	r2,-4(fp)
   16f68:	10800017 	ldw	r2,0(r2)
   16f6c:	10a0000c 	andi	r2,r2,32768
   16f70:	10000626 	beq	r2,zero,16f8c <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
   16f74:	e0bfff17 	ldw	r2,-4(fp)
   16f78:	10800017 	ldw	r2,0(r2)
   16f7c:	10bffff4 	orhi	r2,r2,65535
   16f80:	1007883a 	mov	r3,r2
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   16f8c:	0005883a 	mov	r2,zero
}
   16f90:	e037883a 	mov	sp,fp
   16f94:	df000017 	ldw	fp,0(sp)
   16f98:	dec00104 	addi	sp,sp,4
   16f9c:	f800283a 	ret

00016fa0 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
   16fa0:	defffd04 	addi	sp,sp,-12
   16fa4:	df000215 	stw	fp,8(sp)
   16fa8:	df000204 	addi	fp,sp,8
   16fac:	e13ffe15 	stw	r4,-8(fp)
   16fb0:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16fb4:	e0bffe17 	ldw	r2,-8(fp)
   16fb8:	10800a17 	ldw	r2,40(r2)
   16fbc:	1007883a 	mov	r3,r2
   16fc0:	00800d84 	movi	r2,54
   16fc4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   16fc8:	e0bffe17 	ldw	r2,-8(fp)
   16fcc:	10800a17 	ldw	r2,40(r2)
   16fd0:	10800044 	addi	r2,r2,1
   16fd4:	10800023 	ldbuio	r2,0(r2)
   16fd8:	10803fcc 	andi	r2,r2,255
   16fdc:	10ffffcc 	andi	r3,r2,65535
   16fe0:	e0bfff17 	ldw	r2,-4(fp)
   16fe4:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   16fe8:	e0bffe17 	ldw	r2,-8(fp)
   16fec:	10800a17 	ldw	r2,40(r2)
   16ff0:	1007883a 	mov	r3,r2
   16ff4:	00800dc4 	movi	r2,55
   16ff8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   16ffc:	e0bffe17 	ldw	r2,-8(fp)
   17000:	10800a17 	ldw	r2,40(r2)
   17004:	10800044 	addi	r2,r2,1
   17008:	10800023 	ldbuio	r2,0(r2)
   1700c:	10803fcc 	andi	r2,r2,255
   17010:	10bfffcc 	andi	r2,r2,65535
   17014:	1004923a 	slli	r2,r2,8
   17018:	e0ffff17 	ldw	r3,-4(fp)
   1701c:	18c00017 	ldw	r3,0(r3)
   17020:	1885883a 	add	r2,r3,r2
   17024:	1007883a 	mov	r3,r2
   17028:	e0bfff17 	ldw	r2,-4(fp)
   1702c:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
   17030:	e0bfff17 	ldw	r2,-4(fp)
   17034:	10800017 	ldw	r2,0(r2)
   17038:	10a0000c 	andi	r2,r2,32768
   1703c:	10000626 	beq	r2,zero,17058 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
   17040:	e0bfff17 	ldw	r2,-4(fp)
   17044:	10800017 	ldw	r2,0(r2)
   17048:	10bffff4 	orhi	r2,r2,65535
   1704c:	1007883a 	mov	r3,r2
   17050:	e0bfff17 	ldw	r2,-4(fp)
   17054:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   17058:	0005883a 	mov	r2,zero
}
   1705c:	e037883a 	mov	sp,fp
   17060:	df000017 	ldw	fp,0(sp)
   17064:	dec00104 	addi	sp,sp,4
   17068:	f800283a 	ret

0001706c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1706c:	defff504 	addi	sp,sp,-44
   17070:	df000a15 	stw	fp,40(sp)
   17074:	df000a04 	addi	fp,sp,40
   17078:	e13ffc15 	stw	r4,-16(fp)
   1707c:	e17ffd15 	stw	r5,-12(fp)
   17080:	e1bffe15 	stw	r6,-8(fp)
   17084:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   17088:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1708c:	d0a5b717 	ldw	r2,-26916(gp)
  
  if (alt_ticks_per_second ())
   17090:	10003c26 	beq	r2,zero,17184 <alt_alarm_start+0x118>
  {
    if (alarm)
   17094:	e0bffc17 	ldw	r2,-16(fp)
   17098:	10003826 	beq	r2,zero,1717c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1709c:	e0bffc17 	ldw	r2,-16(fp)
   170a0:	e0fffe17 	ldw	r3,-8(fp)
   170a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   170a8:	e0bffc17 	ldw	r2,-16(fp)
   170ac:	e0ffff17 	ldw	r3,-4(fp)
   170b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   170b4:	0005303a 	rdctl	r2,status
   170b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   170bc:	e0fff917 	ldw	r3,-28(fp)
   170c0:	00bfff84 	movi	r2,-2
   170c4:	1884703a 	and	r2,r3,r2
   170c8:	1001703a 	wrctl	status,r2
  
  return context;
   170cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   170d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   170d4:	d0a5b817 	ldw	r2,-26912(gp)
      
      current_nticks = alt_nticks();
   170d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   170dc:	e0fffd17 	ldw	r3,-12(fp)
   170e0:	e0bff617 	ldw	r2,-40(fp)
   170e4:	1885883a 	add	r2,r3,r2
   170e8:	10c00044 	addi	r3,r2,1
   170ec:	e0bffc17 	ldw	r2,-16(fp)
   170f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   170f4:	e0bffc17 	ldw	r2,-16(fp)
   170f8:	10c00217 	ldw	r3,8(r2)
   170fc:	e0bff617 	ldw	r2,-40(fp)
   17100:	1880042e 	bgeu	r3,r2,17114 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   17104:	e0bffc17 	ldw	r2,-16(fp)
   17108:	00c00044 	movi	r3,1
   1710c:	10c00405 	stb	r3,16(r2)
   17110:	00000206 	br	1711c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   17114:	e0bffc17 	ldw	r2,-16(fp)
   17118:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1711c:	e0bffc17 	ldw	r2,-16(fp)
   17120:	d0e00b04 	addi	r3,gp,-32724
   17124:	e0fffa15 	stw	r3,-24(fp)
   17128:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1712c:	e0bffb17 	ldw	r2,-20(fp)
   17130:	e0fffa17 	ldw	r3,-24(fp)
   17134:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   17138:	e0bffa17 	ldw	r2,-24(fp)
   1713c:	10c00017 	ldw	r3,0(r2)
   17140:	e0bffb17 	ldw	r2,-20(fp)
   17144:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   17148:	e0bffa17 	ldw	r2,-24(fp)
   1714c:	10800017 	ldw	r2,0(r2)
   17150:	e0fffb17 	ldw	r3,-20(fp)
   17154:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   17158:	e0bffa17 	ldw	r2,-24(fp)
   1715c:	e0fffb17 	ldw	r3,-20(fp)
   17160:	10c00015 	stw	r3,0(r2)
   17164:	e0bff817 	ldw	r2,-32(fp)
   17168:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1716c:	e0bff717 	ldw	r2,-36(fp)
   17170:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   17174:	0005883a 	mov	r2,zero
   17178:	00000306 	br	17188 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1717c:	00bffa84 	movi	r2,-22
   17180:	00000106 	br	17188 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   17184:	00bfde84 	movi	r2,-134
  }
}
   17188:	e037883a 	mov	sp,fp
   1718c:	df000017 	ldw	fp,0(sp)
   17190:	dec00104 	addi	sp,sp,4
   17194:	f800283a 	ret

00017198 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17198:	defffe04 	addi	sp,sp,-8
   1719c:	dfc00115 	stw	ra,4(sp)
   171a0:	df000015 	stw	fp,0(sp)
   171a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   171a8:	d0a00a17 	ldw	r2,-32728(gp)
   171ac:	10000326 	beq	r2,zero,171bc <alt_get_errno+0x24>
   171b0:	d0a00a17 	ldw	r2,-32728(gp)
   171b4:	103ee83a 	callr	r2
   171b8:	00000106 	br	171c0 <alt_get_errno+0x28>
   171bc:	d0a5ba04 	addi	r2,gp,-26904
}
   171c0:	e037883a 	mov	sp,fp
   171c4:	dfc00117 	ldw	ra,4(sp)
   171c8:	df000017 	ldw	fp,0(sp)
   171cc:	dec00204 	addi	sp,sp,8
   171d0:	f800283a 	ret

000171d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   171d4:	defffb04 	addi	sp,sp,-20
   171d8:	dfc00415 	stw	ra,16(sp)
   171dc:	df000315 	stw	fp,12(sp)
   171e0:	df000304 	addi	fp,sp,12
   171e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   171e8:	e0bfff17 	ldw	r2,-4(fp)
   171ec:	10000816 	blt	r2,zero,17210 <close+0x3c>
   171f0:	01400304 	movi	r5,12
   171f4:	e13fff17 	ldw	r4,-4(fp)
   171f8:	00126dc0 	call	126dc <__mulsi3>
   171fc:	1007883a 	mov	r3,r2
   17200:	008000b4 	movhi	r2,2
   17204:	10a64804 	addi	r2,r2,-26336
   17208:	1885883a 	add	r2,r3,r2
   1720c:	00000106 	br	17214 <close+0x40>
   17210:	0005883a 	mov	r2,zero
   17214:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   17218:	e0bffd17 	ldw	r2,-12(fp)
   1721c:	10001926 	beq	r2,zero,17284 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   17220:	e0bffd17 	ldw	r2,-12(fp)
   17224:	10800017 	ldw	r2,0(r2)
   17228:	10800417 	ldw	r2,16(r2)
   1722c:	10000626 	beq	r2,zero,17248 <close+0x74>
   17230:	e0bffd17 	ldw	r2,-12(fp)
   17234:	10800017 	ldw	r2,0(r2)
   17238:	10800417 	ldw	r2,16(r2)
   1723c:	e13ffd17 	ldw	r4,-12(fp)
   17240:	103ee83a 	callr	r2
   17244:	00000106 	br	1724c <close+0x78>
   17248:	0005883a 	mov	r2,zero
   1724c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   17250:	e13fff17 	ldw	r4,-4(fp)
   17254:	001792c0 	call	1792c <alt_release_fd>
    if (rval < 0)
   17258:	e0bffe17 	ldw	r2,-8(fp)
   1725c:	1000070e 	bge	r2,zero,1727c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   17260:	00171980 	call	17198 <alt_get_errno>
   17264:	1007883a 	mov	r3,r2
   17268:	e0bffe17 	ldw	r2,-8(fp)
   1726c:	0085c83a 	sub	r2,zero,r2
   17270:	18800015 	stw	r2,0(r3)
      return -1;
   17274:	00bfffc4 	movi	r2,-1
   17278:	00000706 	br	17298 <close+0xc4>
    }
    return 0;
   1727c:	0005883a 	mov	r2,zero
   17280:	00000506 	br	17298 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17284:	00171980 	call	17198 <alt_get_errno>
   17288:	1007883a 	mov	r3,r2
   1728c:	00801444 	movi	r2,81
   17290:	18800015 	stw	r2,0(r3)
    return -1;
   17294:	00bfffc4 	movi	r2,-1
  }
}
   17298:	e037883a 	mov	sp,fp
   1729c:	dfc00117 	ldw	ra,4(sp)
   172a0:	df000017 	ldw	fp,0(sp)
   172a4:	dec00204 	addi	sp,sp,8
   172a8:	f800283a 	ret

000172ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   172ac:	deffff04 	addi	sp,sp,-4
   172b0:	df000015 	stw	fp,0(sp)
   172b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   172b8:	0001883a 	nop
   172bc:	e037883a 	mov	sp,fp
   172c0:	df000017 	ldw	fp,0(sp)
   172c4:	dec00104 	addi	sp,sp,4
   172c8:	f800283a 	ret

000172cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   172cc:	defffc04 	addi	sp,sp,-16
   172d0:	df000315 	stw	fp,12(sp)
   172d4:	df000304 	addi	fp,sp,12
   172d8:	e13ffd15 	stw	r4,-12(fp)
   172dc:	e17ffe15 	stw	r5,-8(fp)
   172e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   172e4:	e0bfff17 	ldw	r2,-4(fp)
}
   172e8:	e037883a 	mov	sp,fp
   172ec:	df000017 	ldw	fp,0(sp)
   172f0:	dec00104 	addi	sp,sp,4
   172f4:	f800283a 	ret

000172f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   172f8:	defffe04 	addi	sp,sp,-8
   172fc:	dfc00115 	stw	ra,4(sp)
   17300:	df000015 	stw	fp,0(sp)
   17304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17308:	d0a00a17 	ldw	r2,-32728(gp)
   1730c:	10000326 	beq	r2,zero,1731c <alt_get_errno+0x24>
   17310:	d0a00a17 	ldw	r2,-32728(gp)
   17314:	103ee83a 	callr	r2
   17318:	00000106 	br	17320 <alt_get_errno+0x28>
   1731c:	d0a5ba04 	addi	r2,gp,-26904
}
   17320:	e037883a 	mov	sp,fp
   17324:	dfc00117 	ldw	ra,4(sp)
   17328:	df000017 	ldw	fp,0(sp)
   1732c:	dec00204 	addi	sp,sp,8
   17330:	f800283a 	ret

00017334 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   17334:	defffa04 	addi	sp,sp,-24
   17338:	dfc00515 	stw	ra,20(sp)
   1733c:	df000415 	stw	fp,16(sp)
   17340:	df000404 	addi	fp,sp,16
   17344:	e13ffe15 	stw	r4,-8(fp)
   17348:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1734c:	e0bffe17 	ldw	r2,-8(fp)
   17350:	10000326 	beq	r2,zero,17360 <alt_dev_llist_insert+0x2c>
   17354:	e0bffe17 	ldw	r2,-8(fp)
   17358:	10800217 	ldw	r2,8(r2)
   1735c:	1000061e 	bne	r2,zero,17378 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   17360:	00172f80 	call	172f8 <alt_get_errno>
   17364:	1007883a 	mov	r3,r2
   17368:	00800584 	movi	r2,22
   1736c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   17370:	00bffa84 	movi	r2,-22
   17374:	00001306 	br	173c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   17378:	e0bffe17 	ldw	r2,-8(fp)
   1737c:	e0ffff17 	ldw	r3,-4(fp)
   17380:	e0fffc15 	stw	r3,-16(fp)
   17384:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   17388:	e0bffd17 	ldw	r2,-12(fp)
   1738c:	e0fffc17 	ldw	r3,-16(fp)
   17390:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   17394:	e0bffc17 	ldw	r2,-16(fp)
   17398:	10c00017 	ldw	r3,0(r2)
   1739c:	e0bffd17 	ldw	r2,-12(fp)
   173a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   173a4:	e0bffc17 	ldw	r2,-16(fp)
   173a8:	10800017 	ldw	r2,0(r2)
   173ac:	e0fffd17 	ldw	r3,-12(fp)
   173b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   173b4:	e0bffc17 	ldw	r2,-16(fp)
   173b8:	e0fffd17 	ldw	r3,-12(fp)
   173bc:	10c00015 	stw	r3,0(r2)

  return 0;  
   173c0:	0005883a 	mov	r2,zero
}
   173c4:	e037883a 	mov	sp,fp
   173c8:	dfc00117 	ldw	ra,4(sp)
   173cc:	df000017 	ldw	fp,0(sp)
   173d0:	dec00204 	addi	sp,sp,8
   173d4:	f800283a 	ret

000173d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   173d8:	defffd04 	addi	sp,sp,-12
   173dc:	dfc00215 	stw	ra,8(sp)
   173e0:	df000115 	stw	fp,4(sp)
   173e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   173e8:	008000b4 	movhi	r2,2
   173ec:	10a08204 	addi	r2,r2,-32248
   173f0:	e0bfff15 	stw	r2,-4(fp)
   173f4:	00000606 	br	17410 <_do_ctors+0x38>
        (*ctor) (); 
   173f8:	e0bfff17 	ldw	r2,-4(fp)
   173fc:	10800017 	ldw	r2,0(r2)
   17400:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   17404:	e0bfff17 	ldw	r2,-4(fp)
   17408:	10bfff04 	addi	r2,r2,-4
   1740c:	e0bfff15 	stw	r2,-4(fp)
   17410:	e0ffff17 	ldw	r3,-4(fp)
   17414:	008000b4 	movhi	r2,2
   17418:	10a08304 	addi	r2,r2,-32244
   1741c:	18bff62e 	bgeu	r3,r2,173f8 <_gp+0xffff5958>
        (*ctor) (); 
}
   17420:	0001883a 	nop
   17424:	e037883a 	mov	sp,fp
   17428:	dfc00117 	ldw	ra,4(sp)
   1742c:	df000017 	ldw	fp,0(sp)
   17430:	dec00204 	addi	sp,sp,8
   17434:	f800283a 	ret

00017438 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   17438:	defffd04 	addi	sp,sp,-12
   1743c:	dfc00215 	stw	ra,8(sp)
   17440:	df000115 	stw	fp,4(sp)
   17444:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17448:	008000b4 	movhi	r2,2
   1744c:	10a08204 	addi	r2,r2,-32248
   17450:	e0bfff15 	stw	r2,-4(fp)
   17454:	00000606 	br	17470 <_do_dtors+0x38>
        (*dtor) (); 
   17458:	e0bfff17 	ldw	r2,-4(fp)
   1745c:	10800017 	ldw	r2,0(r2)
   17460:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   17464:	e0bfff17 	ldw	r2,-4(fp)
   17468:	10bfff04 	addi	r2,r2,-4
   1746c:	e0bfff15 	stw	r2,-4(fp)
   17470:	e0ffff17 	ldw	r3,-4(fp)
   17474:	008000b4 	movhi	r2,2
   17478:	10a08304 	addi	r2,r2,-32244
   1747c:	18bff62e 	bgeu	r3,r2,17458 <_gp+0xffff59b8>
        (*dtor) (); 
}
   17480:	0001883a 	nop
   17484:	e037883a 	mov	sp,fp
   17488:	dfc00117 	ldw	ra,4(sp)
   1748c:	df000017 	ldw	fp,0(sp)
   17490:	dec00204 	addi	sp,sp,8
   17494:	f800283a 	ret

00017498 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17498:	defffa04 	addi	sp,sp,-24
   1749c:	dfc00515 	stw	ra,20(sp)
   174a0:	df000415 	stw	fp,16(sp)
   174a4:	df000404 	addi	fp,sp,16
   174a8:	e13ffe15 	stw	r4,-8(fp)
   174ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   174b0:	e0bfff17 	ldw	r2,-4(fp)
   174b4:	10800017 	ldw	r2,0(r2)
   174b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   174bc:	e13ffe17 	ldw	r4,-8(fp)
   174c0:	0017ea80 	call	17ea8 <strlen>
   174c4:	10800044 	addi	r2,r2,1
   174c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   174cc:	00000d06 	br	17504 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   174d0:	e0bffc17 	ldw	r2,-16(fp)
   174d4:	10800217 	ldw	r2,8(r2)
   174d8:	e0fffd17 	ldw	r3,-12(fp)
   174dc:	180d883a 	mov	r6,r3
   174e0:	e17ffe17 	ldw	r5,-8(fp)
   174e4:	1009883a 	mov	r4,r2
   174e8:	0017e2c0 	call	17e2c <memcmp>
   174ec:	1000021e 	bne	r2,zero,174f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   174f0:	e0bffc17 	ldw	r2,-16(fp)
   174f4:	00000706 	br	17514 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   174f8:	e0bffc17 	ldw	r2,-16(fp)
   174fc:	10800017 	ldw	r2,0(r2)
   17500:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17504:	e0fffc17 	ldw	r3,-16(fp)
   17508:	e0bfff17 	ldw	r2,-4(fp)
   1750c:	18bff01e 	bne	r3,r2,174d0 <_gp+0xffff5a30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17510:	0005883a 	mov	r2,zero
}
   17514:	e037883a 	mov	sp,fp
   17518:	dfc00117 	ldw	ra,4(sp)
   1751c:	df000017 	ldw	fp,0(sp)
   17520:	dec00204 	addi	sp,sp,8
   17524:	f800283a 	ret

00017528 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   17528:	deffff04 	addi	sp,sp,-4
   1752c:	df000015 	stw	fp,0(sp)
   17530:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   17534:	0001883a 	nop
   17538:	e037883a 	mov	sp,fp
   1753c:	df000017 	ldw	fp,0(sp)
   17540:	dec00104 	addi	sp,sp,4
   17544:	f800283a 	ret

00017548 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   17548:	defff804 	addi	sp,sp,-32
   1754c:	dfc00715 	stw	ra,28(sp)
   17550:	df000615 	stw	fp,24(sp)
   17554:	dc000515 	stw	r16,20(sp)
   17558:	df000604 	addi	fp,sp,24
   1755c:	e13ffb15 	stw	r4,-20(fp)
   17560:	e17ffc15 	stw	r5,-16(fp)
   17564:	e1bffd15 	stw	r6,-12(fp)
   17568:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1756c:	e1bffe17 	ldw	r6,-8(fp)
   17570:	e17ffd17 	ldw	r5,-12(fp)
   17574:	e13ffc17 	ldw	r4,-16(fp)
   17578:	00177d00 	call	177d0 <open>
   1757c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   17580:	e0bffa17 	ldw	r2,-24(fp)
   17584:	10002216 	blt	r2,zero,17610 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   17588:	040000b4 	movhi	r16,2
   1758c:	84264804 	addi	r16,r16,-26336
   17590:	e0bffa17 	ldw	r2,-24(fp)
   17594:	01400304 	movi	r5,12
   17598:	1009883a 	mov	r4,r2
   1759c:	00126dc0 	call	126dc <__mulsi3>
   175a0:	8085883a 	add	r2,r16,r2
   175a4:	10c00017 	ldw	r3,0(r2)
   175a8:	e0bffb17 	ldw	r2,-20(fp)
   175ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   175b0:	040000b4 	movhi	r16,2
   175b4:	84264804 	addi	r16,r16,-26336
   175b8:	e0bffa17 	ldw	r2,-24(fp)
   175bc:	01400304 	movi	r5,12
   175c0:	1009883a 	mov	r4,r2
   175c4:	00126dc0 	call	126dc <__mulsi3>
   175c8:	8085883a 	add	r2,r16,r2
   175cc:	10800104 	addi	r2,r2,4
   175d0:	10c00017 	ldw	r3,0(r2)
   175d4:	e0bffb17 	ldw	r2,-20(fp)
   175d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   175dc:	040000b4 	movhi	r16,2
   175e0:	84264804 	addi	r16,r16,-26336
   175e4:	e0bffa17 	ldw	r2,-24(fp)
   175e8:	01400304 	movi	r5,12
   175ec:	1009883a 	mov	r4,r2
   175f0:	00126dc0 	call	126dc <__mulsi3>
   175f4:	8085883a 	add	r2,r16,r2
   175f8:	10800204 	addi	r2,r2,8
   175fc:	10c00017 	ldw	r3,0(r2)
   17600:	e0bffb17 	ldw	r2,-20(fp)
   17604:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   17608:	e13ffa17 	ldw	r4,-24(fp)
   1760c:	001792c0 	call	1792c <alt_release_fd>
  }
} 
   17610:	0001883a 	nop
   17614:	e6ffff04 	addi	sp,fp,-4
   17618:	dfc00217 	ldw	ra,8(sp)
   1761c:	df000117 	ldw	fp,4(sp)
   17620:	dc000017 	ldw	r16,0(sp)
   17624:	dec00304 	addi	sp,sp,12
   17628:	f800283a 	ret

0001762c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1762c:	defffb04 	addi	sp,sp,-20
   17630:	dfc00415 	stw	ra,16(sp)
   17634:	df000315 	stw	fp,12(sp)
   17638:	df000304 	addi	fp,sp,12
   1763c:	e13ffd15 	stw	r4,-12(fp)
   17640:	e17ffe15 	stw	r5,-8(fp)
   17644:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   17648:	01c07fc4 	movi	r7,511
   1764c:	01800044 	movi	r6,1
   17650:	e17ffd17 	ldw	r5,-12(fp)
   17654:	010000b4 	movhi	r4,2
   17658:	21264b04 	addi	r4,r4,-26324
   1765c:	00175480 	call	17548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17660:	01c07fc4 	movi	r7,511
   17664:	000d883a 	mov	r6,zero
   17668:	e17ffe17 	ldw	r5,-8(fp)
   1766c:	010000b4 	movhi	r4,2
   17670:	21264804 	addi	r4,r4,-26336
   17674:	00175480 	call	17548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   17678:	01c07fc4 	movi	r7,511
   1767c:	01800044 	movi	r6,1
   17680:	e17fff17 	ldw	r5,-4(fp)
   17684:	010000b4 	movhi	r4,2
   17688:	21264e04 	addi	r4,r4,-26312
   1768c:	00175480 	call	17548 <alt_open_fd>
}  
   17690:	0001883a 	nop
   17694:	e037883a 	mov	sp,fp
   17698:	dfc00117 	ldw	ra,4(sp)
   1769c:	df000017 	ldw	fp,0(sp)
   176a0:	dec00204 	addi	sp,sp,8
   176a4:	f800283a 	ret

000176a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176a8:	defffe04 	addi	sp,sp,-8
   176ac:	dfc00115 	stw	ra,4(sp)
   176b0:	df000015 	stw	fp,0(sp)
   176b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   176b8:	d0a00a17 	ldw	r2,-32728(gp)
   176bc:	10000326 	beq	r2,zero,176cc <alt_get_errno+0x24>
   176c0:	d0a00a17 	ldw	r2,-32728(gp)
   176c4:	103ee83a 	callr	r2
   176c8:	00000106 	br	176d0 <alt_get_errno+0x28>
   176cc:	d0a5ba04 	addi	r2,gp,-26904
}
   176d0:	e037883a 	mov	sp,fp
   176d4:	dfc00117 	ldw	ra,4(sp)
   176d8:	df000017 	ldw	fp,0(sp)
   176dc:	dec00204 	addi	sp,sp,8
   176e0:	f800283a 	ret

000176e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   176e4:	defffb04 	addi	sp,sp,-20
   176e8:	dfc00415 	stw	ra,16(sp)
   176ec:	df000315 	stw	fp,12(sp)
   176f0:	dc000215 	stw	r16,8(sp)
   176f4:	df000304 	addi	fp,sp,12
   176f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   176fc:	e0bffe17 	ldw	r2,-8(fp)
   17700:	10800217 	ldw	r2,8(r2)
   17704:	10d00034 	orhi	r3,r2,16384
   17708:	e0bffe17 	ldw	r2,-8(fp)
   1770c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17710:	e03ffd15 	stw	zero,-12(fp)
   17714:	00002306 	br	177a4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17718:	040000b4 	movhi	r16,2
   1771c:	84264804 	addi	r16,r16,-26336
   17720:	e0bffd17 	ldw	r2,-12(fp)
   17724:	01400304 	movi	r5,12
   17728:	1009883a 	mov	r4,r2
   1772c:	00126dc0 	call	126dc <__mulsi3>
   17730:	8085883a 	add	r2,r16,r2
   17734:	10c00017 	ldw	r3,0(r2)
   17738:	e0bffe17 	ldw	r2,-8(fp)
   1773c:	10800017 	ldw	r2,0(r2)
   17740:	1880151e 	bne	r3,r2,17798 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17744:	040000b4 	movhi	r16,2
   17748:	84264804 	addi	r16,r16,-26336
   1774c:	e0bffd17 	ldw	r2,-12(fp)
   17750:	01400304 	movi	r5,12
   17754:	1009883a 	mov	r4,r2
   17758:	00126dc0 	call	126dc <__mulsi3>
   1775c:	8085883a 	add	r2,r16,r2
   17760:	10800204 	addi	r2,r2,8
   17764:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17768:	10000b0e 	bge	r2,zero,17798 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1776c:	01400304 	movi	r5,12
   17770:	e13ffd17 	ldw	r4,-12(fp)
   17774:	00126dc0 	call	126dc <__mulsi3>
   17778:	1007883a 	mov	r3,r2
   1777c:	008000b4 	movhi	r2,2
   17780:	10a64804 	addi	r2,r2,-26336
   17784:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17788:	e0bffe17 	ldw	r2,-8(fp)
   1778c:	18800226 	beq	r3,r2,17798 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17790:	00bffcc4 	movi	r2,-13
   17794:	00000806 	br	177b8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17798:	e0bffd17 	ldw	r2,-12(fp)
   1779c:	10800044 	addi	r2,r2,1
   177a0:	e0bffd15 	stw	r2,-12(fp)
   177a4:	d0a00917 	ldw	r2,-32732(gp)
   177a8:	1007883a 	mov	r3,r2
   177ac:	e0bffd17 	ldw	r2,-12(fp)
   177b0:	18bfd92e 	bgeu	r3,r2,17718 <_gp+0xffff5c78>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   177b4:	0005883a 	mov	r2,zero
}
   177b8:	e6ffff04 	addi	sp,fp,-4
   177bc:	dfc00217 	ldw	ra,8(sp)
   177c0:	df000117 	ldw	fp,4(sp)
   177c4:	dc000017 	ldw	r16,0(sp)
   177c8:	dec00304 	addi	sp,sp,12
   177cc:	f800283a 	ret

000177d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   177d0:	defff604 	addi	sp,sp,-40
   177d4:	dfc00915 	stw	ra,36(sp)
   177d8:	df000815 	stw	fp,32(sp)
   177dc:	df000804 	addi	fp,sp,32
   177e0:	e13ffd15 	stw	r4,-12(fp)
   177e4:	e17ffe15 	stw	r5,-8(fp)
   177e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   177ec:	00bfffc4 	movi	r2,-1
   177f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   177f4:	00bffb44 	movi	r2,-19
   177f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   177fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17800:	d1600704 	addi	r5,gp,-32740
   17804:	e13ffd17 	ldw	r4,-12(fp)
   17808:	00174980 	call	17498 <alt_find_dev>
   1780c:	e0bff815 	stw	r2,-32(fp)
   17810:	e0bff817 	ldw	r2,-32(fp)
   17814:	1000051e 	bne	r2,zero,1782c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17818:	e13ffd17 	ldw	r4,-12(fp)
   1781c:	0017b780 	call	17b78 <alt_find_file>
   17820:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17824:	00800044 	movi	r2,1
   17828:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1782c:	e0bff817 	ldw	r2,-32(fp)
   17830:	10002b26 	beq	r2,zero,178e0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17834:	e13ff817 	ldw	r4,-32(fp)
   17838:	0017c800 	call	17c80 <alt_get_fd>
   1783c:	e0bff915 	stw	r2,-28(fp)
   17840:	e0bff917 	ldw	r2,-28(fp)
   17844:	1000030e 	bge	r2,zero,17854 <open+0x84>
    {
      status = index;
   17848:	e0bff917 	ldw	r2,-28(fp)
   1784c:	e0bffa15 	stw	r2,-24(fp)
   17850:	00002506 	br	178e8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17854:	01400304 	movi	r5,12
   17858:	e13ff917 	ldw	r4,-28(fp)
   1785c:	00126dc0 	call	126dc <__mulsi3>
   17860:	1007883a 	mov	r3,r2
   17864:	008000b4 	movhi	r2,2
   17868:	10a64804 	addi	r2,r2,-26336
   1786c:	1885883a 	add	r2,r3,r2
   17870:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17874:	e0fffe17 	ldw	r3,-8(fp)
   17878:	00900034 	movhi	r2,16384
   1787c:	10bfffc4 	addi	r2,r2,-1
   17880:	1886703a 	and	r3,r3,r2
   17884:	e0bffc17 	ldw	r2,-16(fp)
   17888:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1788c:	e0bffb17 	ldw	r2,-20(fp)
   17890:	1000051e 	bne	r2,zero,178a8 <open+0xd8>
   17894:	e13ffc17 	ldw	r4,-16(fp)
   17898:	00176e40 	call	176e4 <alt_file_locked>
   1789c:	e0bffa15 	stw	r2,-24(fp)
   178a0:	e0bffa17 	ldw	r2,-24(fp)
   178a4:	10001016 	blt	r2,zero,178e8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   178a8:	e0bff817 	ldw	r2,-32(fp)
   178ac:	10800317 	ldw	r2,12(r2)
   178b0:	10000826 	beq	r2,zero,178d4 <open+0x104>
   178b4:	e0bff817 	ldw	r2,-32(fp)
   178b8:	10800317 	ldw	r2,12(r2)
   178bc:	e1ffff17 	ldw	r7,-4(fp)
   178c0:	e1bffe17 	ldw	r6,-8(fp)
   178c4:	e17ffd17 	ldw	r5,-12(fp)
   178c8:	e13ffc17 	ldw	r4,-16(fp)
   178cc:	103ee83a 	callr	r2
   178d0:	00000106 	br	178d8 <open+0x108>
   178d4:	0005883a 	mov	r2,zero
   178d8:	e0bffa15 	stw	r2,-24(fp)
   178dc:	00000206 	br	178e8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   178e0:	00bffb44 	movi	r2,-19
   178e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   178e8:	e0bffa17 	ldw	r2,-24(fp)
   178ec:	1000090e 	bge	r2,zero,17914 <open+0x144>
  {
    alt_release_fd (index);  
   178f0:	e13ff917 	ldw	r4,-28(fp)
   178f4:	001792c0 	call	1792c <alt_release_fd>
    ALT_ERRNO = -status;
   178f8:	00176a80 	call	176a8 <alt_get_errno>
   178fc:	1007883a 	mov	r3,r2
   17900:	e0bffa17 	ldw	r2,-24(fp)
   17904:	0085c83a 	sub	r2,zero,r2
   17908:	18800015 	stw	r2,0(r3)
    return -1;
   1790c:	00bfffc4 	movi	r2,-1
   17910:	00000106 	br	17918 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   17914:	e0bff917 	ldw	r2,-28(fp)
}
   17918:	e037883a 	mov	sp,fp
   1791c:	dfc00117 	ldw	ra,4(sp)
   17920:	df000017 	ldw	fp,0(sp)
   17924:	dec00204 	addi	sp,sp,8
   17928:	f800283a 	ret

0001792c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1792c:	defffc04 	addi	sp,sp,-16
   17930:	dfc00315 	stw	ra,12(sp)
   17934:	df000215 	stw	fp,8(sp)
   17938:	dc000115 	stw	r16,4(sp)
   1793c:	df000204 	addi	fp,sp,8
   17940:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   17944:	e0bffe17 	ldw	r2,-8(fp)
   17948:	108000d0 	cmplti	r2,r2,3
   1794c:	1000111e 	bne	r2,zero,17994 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   17950:	040000b4 	movhi	r16,2
   17954:	84264804 	addi	r16,r16,-26336
   17958:	e0bffe17 	ldw	r2,-8(fp)
   1795c:	01400304 	movi	r5,12
   17960:	1009883a 	mov	r4,r2
   17964:	00126dc0 	call	126dc <__mulsi3>
   17968:	8085883a 	add	r2,r16,r2
   1796c:	10800204 	addi	r2,r2,8
   17970:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   17974:	040000b4 	movhi	r16,2
   17978:	84264804 	addi	r16,r16,-26336
   1797c:	e0bffe17 	ldw	r2,-8(fp)
   17980:	01400304 	movi	r5,12
   17984:	1009883a 	mov	r4,r2
   17988:	00126dc0 	call	126dc <__mulsi3>
   1798c:	8085883a 	add	r2,r16,r2
   17990:	10000015 	stw	zero,0(r2)
  }
}
   17994:	0001883a 	nop
   17998:	e6ffff04 	addi	sp,fp,-4
   1799c:	dfc00217 	ldw	ra,8(sp)
   179a0:	df000117 	ldw	fp,4(sp)
   179a4:	dc000017 	ldw	r16,0(sp)
   179a8:	dec00304 	addi	sp,sp,12
   179ac:	f800283a 	ret

000179b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   179b0:	defffa04 	addi	sp,sp,-24
   179b4:	df000515 	stw	fp,20(sp)
   179b8:	df000504 	addi	fp,sp,20
   179bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179c0:	0005303a 	rdctl	r2,status
   179c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179c8:	e0fffc17 	ldw	r3,-16(fp)
   179cc:	00bfff84 	movi	r2,-2
   179d0:	1884703a 	and	r2,r3,r2
   179d4:	1001703a 	wrctl	status,r2
  
  return context;
   179d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   179dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   179e0:	e0bfff17 	ldw	r2,-4(fp)
   179e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   179e8:	e0bffd17 	ldw	r2,-12(fp)
   179ec:	10800017 	ldw	r2,0(r2)
   179f0:	e0fffd17 	ldw	r3,-12(fp)
   179f4:	18c00117 	ldw	r3,4(r3)
   179f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   179fc:	e0bffd17 	ldw	r2,-12(fp)
   17a00:	10800117 	ldw	r2,4(r2)
   17a04:	e0fffd17 	ldw	r3,-12(fp)
   17a08:	18c00017 	ldw	r3,0(r3)
   17a0c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17a10:	e0bffd17 	ldw	r2,-12(fp)
   17a14:	e0fffd17 	ldw	r3,-12(fp)
   17a18:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17a1c:	e0bffd17 	ldw	r2,-12(fp)
   17a20:	e0fffd17 	ldw	r3,-12(fp)
   17a24:	10c00015 	stw	r3,0(r2)
   17a28:	e0bffb17 	ldw	r2,-20(fp)
   17a2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a30:	e0bffe17 	ldw	r2,-8(fp)
   17a34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   17a38:	0001883a 	nop
   17a3c:	e037883a 	mov	sp,fp
   17a40:	df000017 	ldw	fp,0(sp)
   17a44:	dec00104 	addi	sp,sp,4
   17a48:	f800283a 	ret

00017a4c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   17a4c:	defffb04 	addi	sp,sp,-20
   17a50:	dfc00415 	stw	ra,16(sp)
   17a54:	df000315 	stw	fp,12(sp)
   17a58:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17a5c:	d0a00b17 	ldw	r2,-32724(gp)
   17a60:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17a64:	d0a5b817 	ldw	r2,-26912(gp)
   17a68:	10800044 	addi	r2,r2,1
   17a6c:	d0a5b815 	stw	r2,-26912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17a70:	00002e06 	br	17b2c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   17a74:	e0bffd17 	ldw	r2,-12(fp)
   17a78:	10800017 	ldw	r2,0(r2)
   17a7c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   17a80:	e0bffd17 	ldw	r2,-12(fp)
   17a84:	10800403 	ldbu	r2,16(r2)
   17a88:	10803fcc 	andi	r2,r2,255
   17a8c:	10000426 	beq	r2,zero,17aa0 <alt_tick+0x54>
   17a90:	d0a5b817 	ldw	r2,-26912(gp)
   17a94:	1000021e 	bne	r2,zero,17aa0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   17a98:	e0bffd17 	ldw	r2,-12(fp)
   17a9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17aa0:	e0bffd17 	ldw	r2,-12(fp)
   17aa4:	10800217 	ldw	r2,8(r2)
   17aa8:	d0e5b817 	ldw	r3,-26912(gp)
   17aac:	18801d36 	bltu	r3,r2,17b24 <alt_tick+0xd8>
   17ab0:	e0bffd17 	ldw	r2,-12(fp)
   17ab4:	10800403 	ldbu	r2,16(r2)
   17ab8:	10803fcc 	andi	r2,r2,255
   17abc:	1000191e 	bne	r2,zero,17b24 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17ac0:	e0bffd17 	ldw	r2,-12(fp)
   17ac4:	10800317 	ldw	r2,12(r2)
   17ac8:	e0fffd17 	ldw	r3,-12(fp)
   17acc:	18c00517 	ldw	r3,20(r3)
   17ad0:	1809883a 	mov	r4,r3
   17ad4:	103ee83a 	callr	r2
   17ad8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17adc:	e0bfff17 	ldw	r2,-4(fp)
   17ae0:	1000031e 	bne	r2,zero,17af0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17ae4:	e13ffd17 	ldw	r4,-12(fp)
   17ae8:	00179b00 	call	179b0 <alt_alarm_stop>
   17aec:	00000d06 	br	17b24 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17af0:	e0bffd17 	ldw	r2,-12(fp)
   17af4:	10c00217 	ldw	r3,8(r2)
   17af8:	e0bfff17 	ldw	r2,-4(fp)
   17afc:	1887883a 	add	r3,r3,r2
   17b00:	e0bffd17 	ldw	r2,-12(fp)
   17b04:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17b08:	e0bffd17 	ldw	r2,-12(fp)
   17b0c:	10c00217 	ldw	r3,8(r2)
   17b10:	d0a5b817 	ldw	r2,-26912(gp)
   17b14:	1880032e 	bgeu	r3,r2,17b24 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   17b18:	e0bffd17 	ldw	r2,-12(fp)
   17b1c:	00c00044 	movi	r3,1
   17b20:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17b24:	e0bffe17 	ldw	r2,-8(fp)
   17b28:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17b2c:	e0fffd17 	ldw	r3,-12(fp)
   17b30:	d0a00b04 	addi	r2,gp,-32724
   17b34:	18bfcf1e 	bne	r3,r2,17a74 <_gp+0xffff5fd4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   17b38:	0001883a 	nop
}
   17b3c:	0001883a 	nop
   17b40:	e037883a 	mov	sp,fp
   17b44:	dfc00117 	ldw	ra,4(sp)
   17b48:	df000017 	ldw	fp,0(sp)
   17b4c:	dec00204 	addi	sp,sp,8
   17b50:	f800283a 	ret

00017b54 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   17b54:	deffff04 	addi	sp,sp,-4
   17b58:	df000015 	stw	fp,0(sp)
   17b5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17b60:	000170fa 	wrctl	ienable,zero
}
   17b64:	0001883a 	nop
   17b68:	e037883a 	mov	sp,fp
   17b6c:	df000017 	ldw	fp,0(sp)
   17b70:	dec00104 	addi	sp,sp,4
   17b74:	f800283a 	ret

00017b78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17b78:	defffb04 	addi	sp,sp,-20
   17b7c:	dfc00415 	stw	ra,16(sp)
   17b80:	df000315 	stw	fp,12(sp)
   17b84:	df000304 	addi	fp,sp,12
   17b88:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17b8c:	d0a00517 	ldw	r2,-32748(gp)
   17b90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17b94:	00003106 	br	17c5c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17b98:	e0bffd17 	ldw	r2,-12(fp)
   17b9c:	10800217 	ldw	r2,8(r2)
   17ba0:	1009883a 	mov	r4,r2
   17ba4:	0017ea80 	call	17ea8 <strlen>
   17ba8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17bac:	e0bffd17 	ldw	r2,-12(fp)
   17bb0:	10c00217 	ldw	r3,8(r2)
   17bb4:	e0bffe17 	ldw	r2,-8(fp)
   17bb8:	10bfffc4 	addi	r2,r2,-1
   17bbc:	1885883a 	add	r2,r3,r2
   17bc0:	10800003 	ldbu	r2,0(r2)
   17bc4:	10803fcc 	andi	r2,r2,255
   17bc8:	1080201c 	xori	r2,r2,128
   17bcc:	10bfe004 	addi	r2,r2,-128
   17bd0:	10800bd8 	cmpnei	r2,r2,47
   17bd4:	1000031e 	bne	r2,zero,17be4 <alt_find_file+0x6c>
    {
      len -= 1;
   17bd8:	e0bffe17 	ldw	r2,-8(fp)
   17bdc:	10bfffc4 	addi	r2,r2,-1
   17be0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17be4:	e0bffe17 	ldw	r2,-8(fp)
   17be8:	e0ffff17 	ldw	r3,-4(fp)
   17bec:	1885883a 	add	r2,r3,r2
   17bf0:	10800003 	ldbu	r2,0(r2)
   17bf4:	10803fcc 	andi	r2,r2,255
   17bf8:	1080201c 	xori	r2,r2,128
   17bfc:	10bfe004 	addi	r2,r2,-128
   17c00:	10800be0 	cmpeqi	r2,r2,47
   17c04:	1000081e 	bne	r2,zero,17c28 <alt_find_file+0xb0>
   17c08:	e0bffe17 	ldw	r2,-8(fp)
   17c0c:	e0ffff17 	ldw	r3,-4(fp)
   17c10:	1885883a 	add	r2,r3,r2
   17c14:	10800003 	ldbu	r2,0(r2)
   17c18:	10803fcc 	andi	r2,r2,255
   17c1c:	1080201c 	xori	r2,r2,128
   17c20:	10bfe004 	addi	r2,r2,-128
   17c24:	10000a1e 	bne	r2,zero,17c50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17c28:	e0bffd17 	ldw	r2,-12(fp)
   17c2c:	10800217 	ldw	r2,8(r2)
   17c30:	e0fffe17 	ldw	r3,-8(fp)
   17c34:	180d883a 	mov	r6,r3
   17c38:	e17fff17 	ldw	r5,-4(fp)
   17c3c:	1009883a 	mov	r4,r2
   17c40:	0017e2c0 	call	17e2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17c44:	1000021e 	bne	r2,zero,17c50 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17c48:	e0bffd17 	ldw	r2,-12(fp)
   17c4c:	00000706 	br	17c6c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17c50:	e0bffd17 	ldw	r2,-12(fp)
   17c54:	10800017 	ldw	r2,0(r2)
   17c58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17c5c:	e0fffd17 	ldw	r3,-12(fp)
   17c60:	d0a00504 	addi	r2,gp,-32748
   17c64:	18bfcc1e 	bne	r3,r2,17b98 <_gp+0xffff60f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17c68:	0005883a 	mov	r2,zero
}
   17c6c:	e037883a 	mov	sp,fp
   17c70:	dfc00117 	ldw	ra,4(sp)
   17c74:	df000017 	ldw	fp,0(sp)
   17c78:	dec00204 	addi	sp,sp,8
   17c7c:	f800283a 	ret

00017c80 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   17c80:	defffa04 	addi	sp,sp,-24
   17c84:	dfc00515 	stw	ra,20(sp)
   17c88:	df000415 	stw	fp,16(sp)
   17c8c:	dc000315 	stw	r16,12(sp)
   17c90:	df000404 	addi	fp,sp,16
   17c94:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17c98:	00bffa04 	movi	r2,-24
   17c9c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17ca0:	e03ffc15 	stw	zero,-16(fp)
   17ca4:	00001d06 	br	17d1c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   17ca8:	040000b4 	movhi	r16,2
   17cac:	84264804 	addi	r16,r16,-26336
   17cb0:	e0bffc17 	ldw	r2,-16(fp)
   17cb4:	01400304 	movi	r5,12
   17cb8:	1009883a 	mov	r4,r2
   17cbc:	00126dc0 	call	126dc <__mulsi3>
   17cc0:	8085883a 	add	r2,r16,r2
   17cc4:	10800017 	ldw	r2,0(r2)
   17cc8:	1000111e 	bne	r2,zero,17d10 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   17ccc:	040000b4 	movhi	r16,2
   17cd0:	84264804 	addi	r16,r16,-26336
   17cd4:	e0bffc17 	ldw	r2,-16(fp)
   17cd8:	01400304 	movi	r5,12
   17cdc:	1009883a 	mov	r4,r2
   17ce0:	00126dc0 	call	126dc <__mulsi3>
   17ce4:	8085883a 	add	r2,r16,r2
   17ce8:	e0fffe17 	ldw	r3,-8(fp)
   17cec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17cf0:	d0e00917 	ldw	r3,-32732(gp)
   17cf4:	e0bffc17 	ldw	r2,-16(fp)
   17cf8:	1880020e 	bge	r3,r2,17d04 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   17cfc:	e0bffc17 	ldw	r2,-16(fp)
   17d00:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   17d04:	e0bffc17 	ldw	r2,-16(fp)
   17d08:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   17d0c:	00000606 	br	17d28 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17d10:	e0bffc17 	ldw	r2,-16(fp)
   17d14:	10800044 	addi	r2,r2,1
   17d18:	e0bffc15 	stw	r2,-16(fp)
   17d1c:	e0bffc17 	ldw	r2,-16(fp)
   17d20:	10800810 	cmplti	r2,r2,32
   17d24:	103fe01e 	bne	r2,zero,17ca8 <_gp+0xffff6208>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   17d28:	e0bffd17 	ldw	r2,-12(fp)
}
   17d2c:	e6ffff04 	addi	sp,fp,-4
   17d30:	dfc00217 	ldw	ra,8(sp)
   17d34:	df000117 	ldw	fp,4(sp)
   17d38:	dc000017 	ldw	r16,0(sp)
   17d3c:	dec00304 	addi	sp,sp,12
   17d40:	f800283a 	ret

00017d44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17d44:	defffe04 	addi	sp,sp,-8
   17d48:	df000115 	stw	fp,4(sp)
   17d4c:	df000104 	addi	fp,sp,4
   17d50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17d54:	e0bfff17 	ldw	r2,-4(fp)
   17d58:	10bffe84 	addi	r2,r2,-6
   17d5c:	10c00428 	cmpgeui	r3,r2,16
   17d60:	18001a1e 	bne	r3,zero,17dcc <alt_exception_cause_generated_bad_addr+0x88>
   17d64:	100690ba 	slli	r3,r2,2
   17d68:	00800074 	movhi	r2,1
   17d6c:	109f5f04 	addi	r2,r2,32124
   17d70:	1885883a 	add	r2,r3,r2
   17d74:	10800017 	ldw	r2,0(r2)
   17d78:	1000683a 	jmp	r2
   17d7c:	00017dbc 	xorhi	zero,zero,1526
   17d80:	00017dbc 	xorhi	zero,zero,1526
   17d84:	00017dcc 	andi	zero,zero,1527
   17d88:	00017dcc 	andi	zero,zero,1527
   17d8c:	00017dcc 	andi	zero,zero,1527
   17d90:	00017dbc 	xorhi	zero,zero,1526
   17d94:	00017dc4 	movi	zero,1527
   17d98:	00017dcc 	andi	zero,zero,1527
   17d9c:	00017dbc 	xorhi	zero,zero,1526
   17da0:	00017dbc 	xorhi	zero,zero,1526
   17da4:	00017dcc 	andi	zero,zero,1527
   17da8:	00017dbc 	xorhi	zero,zero,1526
   17dac:	00017dc4 	movi	zero,1527
   17db0:	00017dcc 	andi	zero,zero,1527
   17db4:	00017dcc 	andi	zero,zero,1527
   17db8:	00017dbc 	xorhi	zero,zero,1526
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   17dbc:	00800044 	movi	r2,1
   17dc0:	00000306 	br	17dd0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   17dc4:	0005883a 	mov	r2,zero
   17dc8:	00000106 	br	17dd0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   17dcc:	0005883a 	mov	r2,zero
  }
}
   17dd0:	e037883a 	mov	sp,fp
   17dd4:	df000017 	ldw	fp,0(sp)
   17dd8:	dec00104 	addi	sp,sp,4
   17ddc:	f800283a 	ret

00017de0 <atexit>:
   17de0:	200b883a 	mov	r5,r4
   17de4:	000f883a 	mov	r7,zero
   17de8:	000d883a 	mov	r6,zero
   17dec:	0009883a 	mov	r4,zero
   17df0:	0017f401 	jmpi	17f40 <__register_exitproc>

00017df4 <exit>:
   17df4:	defffe04 	addi	sp,sp,-8
   17df8:	000b883a 	mov	r5,zero
   17dfc:	dc000015 	stw	r16,0(sp)
   17e00:	dfc00115 	stw	ra,4(sp)
   17e04:	2021883a 	mov	r16,r4
   17e08:	00180580 	call	18058 <__call_exitprocs>
   17e0c:	008000b4 	movhi	r2,2
   17e10:	10a6aa04 	addi	r2,r2,-25944
   17e14:	11000017 	ldw	r4,0(r2)
   17e18:	20800f17 	ldw	r2,60(r4)
   17e1c:	10000126 	beq	r2,zero,17e24 <exit+0x30>
   17e20:	103ee83a 	callr	r2
   17e24:	8009883a 	mov	r4,r16
   17e28:	00181d80 	call	181d8 <_exit>

00017e2c <memcmp>:
   17e2c:	01c000c4 	movi	r7,3
   17e30:	3980192e 	bgeu	r7,r6,17e98 <memcmp+0x6c>
   17e34:	2144b03a 	or	r2,r4,r5
   17e38:	11c4703a 	and	r2,r2,r7
   17e3c:	10000f26 	beq	r2,zero,17e7c <memcmp+0x50>
   17e40:	20800003 	ldbu	r2,0(r4)
   17e44:	28c00003 	ldbu	r3,0(r5)
   17e48:	10c0151e 	bne	r2,r3,17ea0 <memcmp+0x74>
   17e4c:	31bfff84 	addi	r6,r6,-2
   17e50:	01ffffc4 	movi	r7,-1
   17e54:	00000406 	br	17e68 <memcmp+0x3c>
   17e58:	20800003 	ldbu	r2,0(r4)
   17e5c:	28c00003 	ldbu	r3,0(r5)
   17e60:	31bfffc4 	addi	r6,r6,-1
   17e64:	10c00e1e 	bne	r2,r3,17ea0 <memcmp+0x74>
   17e68:	21000044 	addi	r4,r4,1
   17e6c:	29400044 	addi	r5,r5,1
   17e70:	31fff91e 	bne	r6,r7,17e58 <_gp+0xffff63b8>
   17e74:	0005883a 	mov	r2,zero
   17e78:	f800283a 	ret
   17e7c:	20c00017 	ldw	r3,0(r4)
   17e80:	28800017 	ldw	r2,0(r5)
   17e84:	18bfee1e 	bne	r3,r2,17e40 <_gp+0xffff63a0>
   17e88:	31bfff04 	addi	r6,r6,-4
   17e8c:	21000104 	addi	r4,r4,4
   17e90:	29400104 	addi	r5,r5,4
   17e94:	39bff936 	bltu	r7,r6,17e7c <_gp+0xffff63dc>
   17e98:	303fe91e 	bne	r6,zero,17e40 <_gp+0xffff63a0>
   17e9c:	003ff506 	br	17e74 <_gp+0xffff63d4>
   17ea0:	10c5c83a 	sub	r2,r2,r3
   17ea4:	f800283a 	ret

00017ea8 <strlen>:
   17ea8:	208000cc 	andi	r2,r4,3
   17eac:	10002026 	beq	r2,zero,17f30 <strlen+0x88>
   17eb0:	20800007 	ldb	r2,0(r4)
   17eb4:	10002026 	beq	r2,zero,17f38 <strlen+0x90>
   17eb8:	2005883a 	mov	r2,r4
   17ebc:	00000206 	br	17ec8 <strlen+0x20>
   17ec0:	10c00007 	ldb	r3,0(r2)
   17ec4:	18001826 	beq	r3,zero,17f28 <strlen+0x80>
   17ec8:	10800044 	addi	r2,r2,1
   17ecc:	10c000cc 	andi	r3,r2,3
   17ed0:	183ffb1e 	bne	r3,zero,17ec0 <_gp+0xffff6420>
   17ed4:	10c00017 	ldw	r3,0(r2)
   17ed8:	01ffbff4 	movhi	r7,65279
   17edc:	39ffbfc4 	addi	r7,r7,-257
   17ee0:	00ca303a 	nor	r5,zero,r3
   17ee4:	01a02074 	movhi	r6,32897
   17ee8:	19c7883a 	add	r3,r3,r7
   17eec:	31a02004 	addi	r6,r6,-32640
   17ef0:	1946703a 	and	r3,r3,r5
   17ef4:	1986703a 	and	r3,r3,r6
   17ef8:	1800091e 	bne	r3,zero,17f20 <strlen+0x78>
   17efc:	10800104 	addi	r2,r2,4
   17f00:	10c00017 	ldw	r3,0(r2)
   17f04:	19cb883a 	add	r5,r3,r7
   17f08:	00c6303a 	nor	r3,zero,r3
   17f0c:	28c6703a 	and	r3,r5,r3
   17f10:	1986703a 	and	r3,r3,r6
   17f14:	183ff926 	beq	r3,zero,17efc <_gp+0xffff645c>
   17f18:	00000106 	br	17f20 <strlen+0x78>
   17f1c:	10800044 	addi	r2,r2,1
   17f20:	10c00007 	ldb	r3,0(r2)
   17f24:	183ffd1e 	bne	r3,zero,17f1c <_gp+0xffff647c>
   17f28:	1105c83a 	sub	r2,r2,r4
   17f2c:	f800283a 	ret
   17f30:	2005883a 	mov	r2,r4
   17f34:	003fe706 	br	17ed4 <_gp+0xffff6434>
   17f38:	0005883a 	mov	r2,zero
   17f3c:	f800283a 	ret

00017f40 <__register_exitproc>:
   17f40:	defffa04 	addi	sp,sp,-24
   17f44:	dc000315 	stw	r16,12(sp)
   17f48:	040000b4 	movhi	r16,2
   17f4c:	8426aa04 	addi	r16,r16,-25944
   17f50:	80c00017 	ldw	r3,0(r16)
   17f54:	dc400415 	stw	r17,16(sp)
   17f58:	dfc00515 	stw	ra,20(sp)
   17f5c:	18805217 	ldw	r2,328(r3)
   17f60:	2023883a 	mov	r17,r4
   17f64:	10003726 	beq	r2,zero,18044 <__register_exitproc+0x104>
   17f68:	10c00117 	ldw	r3,4(r2)
   17f6c:	010007c4 	movi	r4,31
   17f70:	20c00e16 	blt	r4,r3,17fac <__register_exitproc+0x6c>
   17f74:	1a000044 	addi	r8,r3,1
   17f78:	8800221e 	bne	r17,zero,18004 <__register_exitproc+0xc4>
   17f7c:	18c00084 	addi	r3,r3,2
   17f80:	18c7883a 	add	r3,r3,r3
   17f84:	18c7883a 	add	r3,r3,r3
   17f88:	12000115 	stw	r8,4(r2)
   17f8c:	10c7883a 	add	r3,r2,r3
   17f90:	19400015 	stw	r5,0(r3)
   17f94:	0005883a 	mov	r2,zero
   17f98:	dfc00517 	ldw	ra,20(sp)
   17f9c:	dc400417 	ldw	r17,16(sp)
   17fa0:	dc000317 	ldw	r16,12(sp)
   17fa4:	dec00604 	addi	sp,sp,24
   17fa8:	f800283a 	ret
   17fac:	00800034 	movhi	r2,0
   17fb0:	10800004 	addi	r2,r2,0
   17fb4:	10002626 	beq	r2,zero,18050 <__register_exitproc+0x110>
   17fb8:	01006404 	movi	r4,400
   17fbc:	d9400015 	stw	r5,0(sp)
   17fc0:	d9800115 	stw	r6,4(sp)
   17fc4:	d9c00215 	stw	r7,8(sp)
   17fc8:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   17fcc:	d9400017 	ldw	r5,0(sp)
   17fd0:	d9800117 	ldw	r6,4(sp)
   17fd4:	d9c00217 	ldw	r7,8(sp)
   17fd8:	10001d26 	beq	r2,zero,18050 <__register_exitproc+0x110>
   17fdc:	81000017 	ldw	r4,0(r16)
   17fe0:	10000115 	stw	zero,4(r2)
   17fe4:	02000044 	movi	r8,1
   17fe8:	22405217 	ldw	r9,328(r4)
   17fec:	0007883a 	mov	r3,zero
   17ff0:	12400015 	stw	r9,0(r2)
   17ff4:	20805215 	stw	r2,328(r4)
   17ff8:	10006215 	stw	zero,392(r2)
   17ffc:	10006315 	stw	zero,396(r2)
   18000:	883fde26 	beq	r17,zero,17f7c <_gp+0xffff64dc>
   18004:	18c9883a 	add	r4,r3,r3
   18008:	2109883a 	add	r4,r4,r4
   1800c:	1109883a 	add	r4,r2,r4
   18010:	21802215 	stw	r6,136(r4)
   18014:	01800044 	movi	r6,1
   18018:	12406217 	ldw	r9,392(r2)
   1801c:	30cc983a 	sll	r6,r6,r3
   18020:	4992b03a 	or	r9,r9,r6
   18024:	12406215 	stw	r9,392(r2)
   18028:	21c04215 	stw	r7,264(r4)
   1802c:	01000084 	movi	r4,2
   18030:	893fd21e 	bne	r17,r4,17f7c <_gp+0xffff64dc>
   18034:	11006317 	ldw	r4,396(r2)
   18038:	218cb03a 	or	r6,r4,r6
   1803c:	11806315 	stw	r6,396(r2)
   18040:	003fce06 	br	17f7c <_gp+0xffff64dc>
   18044:	18805304 	addi	r2,r3,332
   18048:	18805215 	stw	r2,328(r3)
   1804c:	003fc606 	br	17f68 <_gp+0xffff64c8>
   18050:	00bfffc4 	movi	r2,-1
   18054:	003fd006 	br	17f98 <_gp+0xffff64f8>

00018058 <__call_exitprocs>:
   18058:	defff504 	addi	sp,sp,-44
   1805c:	df000915 	stw	fp,36(sp)
   18060:	dd400615 	stw	r21,24(sp)
   18064:	dc800315 	stw	r18,12(sp)
   18068:	dfc00a15 	stw	ra,40(sp)
   1806c:	ddc00815 	stw	r23,32(sp)
   18070:	dd800715 	stw	r22,28(sp)
   18074:	dd000515 	stw	r20,20(sp)
   18078:	dcc00415 	stw	r19,16(sp)
   1807c:	dc400215 	stw	r17,8(sp)
   18080:	dc000115 	stw	r16,4(sp)
   18084:	d9000015 	stw	r4,0(sp)
   18088:	2839883a 	mov	fp,r5
   1808c:	04800044 	movi	r18,1
   18090:	057fffc4 	movi	r21,-1
   18094:	008000b4 	movhi	r2,2
   18098:	10a6aa04 	addi	r2,r2,-25944
   1809c:	12000017 	ldw	r8,0(r2)
   180a0:	45005217 	ldw	r20,328(r8)
   180a4:	44c05204 	addi	r19,r8,328
   180a8:	a0001c26 	beq	r20,zero,1811c <__call_exitprocs+0xc4>
   180ac:	a0800117 	ldw	r2,4(r20)
   180b0:	15ffffc4 	addi	r23,r2,-1
   180b4:	b8000d16 	blt	r23,zero,180ec <__call_exitprocs+0x94>
   180b8:	14000044 	addi	r16,r2,1
   180bc:	8421883a 	add	r16,r16,r16
   180c0:	8421883a 	add	r16,r16,r16
   180c4:	84402004 	addi	r17,r16,128
   180c8:	a463883a 	add	r17,r20,r17
   180cc:	a421883a 	add	r16,r20,r16
   180d0:	e0001e26 	beq	fp,zero,1814c <__call_exitprocs+0xf4>
   180d4:	80804017 	ldw	r2,256(r16)
   180d8:	e0801c26 	beq	fp,r2,1814c <__call_exitprocs+0xf4>
   180dc:	bdffffc4 	addi	r23,r23,-1
   180e0:	843fff04 	addi	r16,r16,-4
   180e4:	8c7fff04 	addi	r17,r17,-4
   180e8:	bd7ff91e 	bne	r23,r21,180d0 <_gp+0xffff6630>
   180ec:	00800034 	movhi	r2,0
   180f0:	10800004 	addi	r2,r2,0
   180f4:	10000926 	beq	r2,zero,1811c <__call_exitprocs+0xc4>
   180f8:	a0800117 	ldw	r2,4(r20)
   180fc:	1000301e 	bne	r2,zero,181c0 <__call_exitprocs+0x168>
   18100:	a0800017 	ldw	r2,0(r20)
   18104:	10003226 	beq	r2,zero,181d0 <__call_exitprocs+0x178>
   18108:	a009883a 	mov	r4,r20
   1810c:	98800015 	stw	r2,0(r19)
   18110:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>
   18114:	9d000017 	ldw	r20,0(r19)
   18118:	a03fe41e 	bne	r20,zero,180ac <_gp+0xffff660c>
   1811c:	dfc00a17 	ldw	ra,40(sp)
   18120:	df000917 	ldw	fp,36(sp)
   18124:	ddc00817 	ldw	r23,32(sp)
   18128:	dd800717 	ldw	r22,28(sp)
   1812c:	dd400617 	ldw	r21,24(sp)
   18130:	dd000517 	ldw	r20,20(sp)
   18134:	dcc00417 	ldw	r19,16(sp)
   18138:	dc800317 	ldw	r18,12(sp)
   1813c:	dc400217 	ldw	r17,8(sp)
   18140:	dc000117 	ldw	r16,4(sp)
   18144:	dec00b04 	addi	sp,sp,44
   18148:	f800283a 	ret
   1814c:	a0800117 	ldw	r2,4(r20)
   18150:	80c00017 	ldw	r3,0(r16)
   18154:	10bfffc4 	addi	r2,r2,-1
   18158:	15c01426 	beq	r2,r23,181ac <__call_exitprocs+0x154>
   1815c:	80000015 	stw	zero,0(r16)
   18160:	183fde26 	beq	r3,zero,180dc <_gp+0xffff663c>
   18164:	95c8983a 	sll	r4,r18,r23
   18168:	a0806217 	ldw	r2,392(r20)
   1816c:	a5800117 	ldw	r22,4(r20)
   18170:	2084703a 	and	r2,r4,r2
   18174:	10000b26 	beq	r2,zero,181a4 <__call_exitprocs+0x14c>
   18178:	a0806317 	ldw	r2,396(r20)
   1817c:	2088703a 	and	r4,r4,r2
   18180:	20000c1e 	bne	r4,zero,181b4 <__call_exitprocs+0x15c>
   18184:	89400017 	ldw	r5,0(r17)
   18188:	d9000017 	ldw	r4,0(sp)
   1818c:	183ee83a 	callr	r3
   18190:	a0800117 	ldw	r2,4(r20)
   18194:	15bfbf1e 	bne	r2,r22,18094 <_gp+0xffff65f4>
   18198:	98800017 	ldw	r2,0(r19)
   1819c:	153fcf26 	beq	r2,r20,180dc <_gp+0xffff663c>
   181a0:	003fbc06 	br	18094 <_gp+0xffff65f4>
   181a4:	183ee83a 	callr	r3
   181a8:	003ff906 	br	18190 <_gp+0xffff66f0>
   181ac:	a5c00115 	stw	r23,4(r20)
   181b0:	003feb06 	br	18160 <_gp+0xffff66c0>
   181b4:	89000017 	ldw	r4,0(r17)
   181b8:	183ee83a 	callr	r3
   181bc:	003ff406 	br	18190 <_gp+0xffff66f0>
   181c0:	a0800017 	ldw	r2,0(r20)
   181c4:	a027883a 	mov	r19,r20
   181c8:	1029883a 	mov	r20,r2
   181cc:	003fb606 	br	180a8 <_gp+0xffff6608>
   181d0:	0005883a 	mov	r2,zero
   181d4:	003ffb06 	br	181c4 <_gp+0xffff6724>

000181d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   181d8:	defffd04 	addi	sp,sp,-12
   181dc:	df000215 	stw	fp,8(sp)
   181e0:	df000204 	addi	fp,sp,8
   181e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   181e8:	0001883a 	nop
   181ec:	e0bfff17 	ldw	r2,-4(fp)
   181f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   181f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   181f8:	10000226 	beq	r2,zero,18204 <_exit+0x2c>
    ALT_SIM_FAIL();
   181fc:	002af070 	cmpltui	zero,zero,43969
   18200:	00000106 	br	18208 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   18204:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18208:	003fff06 	br	18208 <_gp+0xffff6768>
